{"version":3,"sources":["../static/js/42.a065bd46.chunk.js","docs/zh-cn/introduction.md"],"names":["webpackJsonp","136","module","exports"],"mappings":"AAAAA,cAAc,KAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,QAAA","file":"static/js/42.a065bd46.chunk.js","sourcesContent":["webpackJsonp([42],{\n\n/***/ 136:\n/***/ (function(module, exports) {\n\nmodule.exports = \"# Omim\\n\\n[Omi](https://github.com/Tencent/omi) 打造的跨框架、跨主题组件库。任意框架使用、主题自由定制。\\n\\n![](https://tencent.github.io/omi/packages/omim/assets/pv4.jpeg?a=1)\\n\\n## 特性\\n\\n* 使用标准 Web Components 的 Custom Elements 渲染 \\n* 任意框架都可以使用这些组件(比如 Omi, React, Vue and Angular)\\n* 同时支持 JSX 和 原生 HTML 标签的使用方式 \\n* 每个组件可以单独使用\\n* 超级容易更换主题颜色、字体和圆角\\n* 扩展了 HTML 能力，你可以通过字符串 `'0'` 或者字符串 `'false'` 传递 false 给元素\\n\\n## 跨框架\\n\\n* [Using Omim in React](https://tencent.github.io/omi/packages/omim/test-react/build/index.html) & [Source Code](https://github.com/Tencent/omi/blob/master/packages/omim/test-react/src/HookTest.js)\\n* [Using Omim in Vue](https://tencent.github.io/omi/packages/omim/test-vue/dist/index.html) & [Source Code](https://github.com/Tencent/omi/blob/master/packages/omim/test-vue/app.vue)\\n\\n## 使用指南\\n\\n### 通过 script\\n\\n```html\\n<script src=\\\"https://unpkg.com/omi\\\"></script>\\n<script src=\\\"https://unpkg.com/omim@latest/button/index.js\\\"></script>\\n\\n<m-button>I am button</m-button>\\n```\\n\\n### 通过 npm\\n\\n``` bash\\nnpm install omim\\n```\\n\\nThen:\\n\\n```js\\nimport 'omim/button'\\n```\\n\\n然后在任意框架中使用，比如 Omi, React, Vue or Angular:\\n\\n``` html\\n<m-button>I am button</m-button>\\n```\\n\\nIt can also be used in pure js:\\n\\n```js\\nvar button = document.createElement('m-button')\\nbutton.innerHTML = 'I am button'\\ndocument.body.append(button)\\nbutton.addEventListener('click', function () {\\n  console.log('Clicked!')\\n})\\n\\n//or\\n//document.body.innerHTML = '<m-button>I am button</m-button>'\\n```\\n\\n## 更改主题\\n\\n```js\\ndocument.body.style.setProperty('--mdc-theme-primary', 'red')\\ndocument.body.style.setProperty('--mdc-theme-secondary', 'blue')\\ndocument.body.style.setProperty('--mdc-theme-error', 'yellow')\\n```\\n\\n所有配置如下:\\n\\n```css\\n--mdc-theme-primary: #0072d9;\\n--mdc-theme-secondary: #2170b8;\\n--mdc-theme-error: #f5222d;\\n--mdc-theme-surface: #ffffff;\\n--mdc-theme-on-primary: #ffffff;\\n--mdc-theme-on-secondary: #ffffff;\\n--mdc-theme-on-error: #ffffff;\\n--mdc-theme-on-surface: #000000;\\n--mdc-theme-background: #ffffff;\\n--mdc-shape-small-component-radius: 4px;\\n--mdc-shape-medium-component-radius: 4px;\\n--mdc-shape-large-component-radius: 0px;\\n--mdc-typography--font-family: Roboto, sans-serif;\\n```\\n\\n## HTML 扩展 \\n\\n当默认值为 true，需要传递 false 给 element 的时候，以前是历史难题，Omi 完美解决了这一点，你可以通过字符串 `'0'` 或者 字符串 `'false'` 来设置。\\n\\n```js\\ndefine('my-element', class extends WeElement {\\n  static defaultProps = {\\n    show: true\\n  }\\n\\n static propTypes = {\\n    show: Boolean\\n  }\\n\\n  render(props) {\\n    ...\\n    ...\\n  }\\n})\\n```\\n\\nUse:\\n\\n```html\\n<my-element show=\\\"false\\\"></my-element>\\n```\\n\\nor\\n\\n```html\\n<my-element show=\\\"0\\\"></my-element>\\n```\\n\\n## React 中使用 omim\\n\\n```jsx\\n/** @jsx nativeEvents */\\nimport nativeEvents from 'jsx-native-events'\\nimport { useState } from 'react'\\nimport 'omim/icon-button'\\n\\nexport default function SomeComponent(props) {\\n    const [result, setSwitch] = useState(false)\\n\\n    return (\\n      <div>\\n        <p>The switch is {result ? 'on' : 'off'}</p>\\n        <m-icon-button color=\\\"red\\\" icons=\\\"['favorite', 'favorite_border']\\\" onEventChange={e => setSwitch(e.detail.isOn)}>\\n        </m-icon-button>\\n      </div>\\n    )\\n}\\n```\\n\\n非常感谢 calebdwilliams 的 [jsx-native-events](https://github.com/calebdwilliams/jsx-native-events#readme)。\\n\\n## Vue 中使用 omim\\n\\n```html\\n<script>\\nimport 'omim/icon-button'\\n\\nexport default {\\n  name: 'HelloWorld',\\n  data: function() {\\n    return {\\n      result: false\\n    }\\n  },\\n  methods: {\\n    myEvent: function(evt) {\\n      this.result = evt.detail.isOn\\n    }\\n  }\\n}\\n</script>\\n\\n<template>\\n  <div class=\\\"component\\\">\\n    <p>The switch is {{result? 'on' : 'off'}}</p>\\n    <m-icon-button color=\\\"red\\\" icons=\\\"['favorite', 'favorite_border']\\\" @change=\\\"myEvent\\\"></m-icon-button>\\n  </div>\\n</template>\\n```\\n\\n> 要在 react 和 vue 中正常显示 icon，需要在 HTML 中引入下面的 CSS:\\n\\n```html\\n<link rel=\\\"stylesheet\\\" href=\\\"https://fonts.googleapis.com/icon?family=Material+Icons\\\">\\n```\\n\\n## 贡献\\n\\n### 一些命令\\n\\nBuild 组件:\\n\\n```bash\\nnpm run build -- component-name\\n```\\n\\nBuild 所有组件:\\n\\n```bash\\nnpm run build-all\\n```\\n\\nBuild 例子:\\n\\n```bash\\nnpm start demo-name\\n```\\n\\n发布:\\n\\n```bash\\nnpm publish --access public\\n```\\n\\n## 相关链接\\n\\n* [material.io docs](https://material.io/develop/web/components/buttons/) \\n* [material.io demo](https://material-components.github.io/material-components-web-catalog/#/) \\n* [material-theme-builder](https://material-theme-builder.glitch.me/)\\n* [material-components-web](https://github.com/material-components/material-components-web)\\n\"\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/42.a065bd46.chunk.js","module.exports = \"# Omim\\n\\n[Omi](https://github.com/Tencent/omi) 打造的跨框架、跨主题组件库。任意框架使用、主题自由定制。\\n\\n![](https://tencent.github.io/omi/packages/omim/assets/pv4.jpeg?a=1)\\n\\n## 特性\\n\\n* 使用标准 Web Components 的 Custom Elements 渲染 \\n* 任意框架都可以使用这些组件(比如 Omi, React, Vue and Angular)\\n* 同时支持 JSX 和 原生 HTML 标签的使用方式 \\n* 每个组件可以单独使用\\n* 超级容易更换主题颜色、字体和圆角\\n* 扩展了 HTML 能力，你可以通过字符串 `'0'` 或者字符串 `'false'` 传递 false 给元素\\n\\n## 跨框架\\n\\n* [Using Omim in React](https://tencent.github.io/omi/packages/omim/test-react/build/index.html) & [Source Code](https://github.com/Tencent/omi/blob/master/packages/omim/test-react/src/HookTest.js)\\n* [Using Omim in Vue](https://tencent.github.io/omi/packages/omim/test-vue/dist/index.html) & [Source Code](https://github.com/Tencent/omi/blob/master/packages/omim/test-vue/app.vue)\\n\\n## 使用指南\\n\\n### 通过 script\\n\\n```html\\n<script src=\\\"https://unpkg.com/omi\\\"></script>\\n<script src=\\\"https://unpkg.com/omim@latest/button/index.js\\\"></script>\\n\\n<m-button>I am button</m-button>\\n```\\n\\n### 通过 npm\\n\\n``` bash\\nnpm install omim\\n```\\n\\nThen:\\n\\n```js\\nimport 'omim/button'\\n```\\n\\n然后在任意框架中使用，比如 Omi, React, Vue or Angular:\\n\\n``` html\\n<m-button>I am button</m-button>\\n```\\n\\nIt can also be used in pure js:\\n\\n```js\\nvar button = document.createElement('m-button')\\nbutton.innerHTML = 'I am button'\\ndocument.body.append(button)\\nbutton.addEventListener('click', function () {\\n  console.log('Clicked!')\\n})\\n\\n//or\\n//document.body.innerHTML = '<m-button>I am button</m-button>'\\n```\\n\\n## 更改主题\\n\\n```js\\ndocument.body.style.setProperty('--mdc-theme-primary', 'red')\\ndocument.body.style.setProperty('--mdc-theme-secondary', 'blue')\\ndocument.body.style.setProperty('--mdc-theme-error', 'yellow')\\n```\\n\\n所有配置如下:\\n\\n```css\\n--mdc-theme-primary: #0072d9;\\n--mdc-theme-secondary: #2170b8;\\n--mdc-theme-error: #f5222d;\\n--mdc-theme-surface: #ffffff;\\n--mdc-theme-on-primary: #ffffff;\\n--mdc-theme-on-secondary: #ffffff;\\n--mdc-theme-on-error: #ffffff;\\n--mdc-theme-on-surface: #000000;\\n--mdc-theme-background: #ffffff;\\n--mdc-shape-small-component-radius: 4px;\\n--mdc-shape-medium-component-radius: 4px;\\n--mdc-shape-large-component-radius: 0px;\\n--mdc-typography--font-family: Roboto, sans-serif;\\n```\\n\\n## HTML 扩展 \\n\\n当默认值为 true，需要传递 false 给 element 的时候，以前是历史难题，Omi 完美解决了这一点，你可以通过字符串 `'0'` 或者 字符串 `'false'` 来设置。\\n\\n```js\\ndefine('my-element', class extends WeElement {\\n  static defaultProps = {\\n    show: true\\n  }\\n\\n static propTypes = {\\n    show: Boolean\\n  }\\n\\n  render(props) {\\n    ...\\n    ...\\n  }\\n})\\n```\\n\\nUse:\\n\\n```html\\n<my-element show=\\\"false\\\"></my-element>\\n```\\n\\nor\\n\\n```html\\n<my-element show=\\\"0\\\"></my-element>\\n```\\n\\n## React 中使用 omim\\n\\n```jsx\\n/** @jsx nativeEvents */\\nimport nativeEvents from 'jsx-native-events'\\nimport { useState } from 'react'\\nimport 'omim/icon-button'\\n\\nexport default function SomeComponent(props) {\\n    const [result, setSwitch] = useState(false)\\n\\n    return (\\n      <div>\\n        <p>The switch is {result ? 'on' : 'off'}</p>\\n        <m-icon-button color=\\\"red\\\" icons=\\\"['favorite', 'favorite_border']\\\" onEventChange={e => setSwitch(e.detail.isOn)}>\\n        </m-icon-button>\\n      </div>\\n    )\\n}\\n```\\n\\n非常感谢 calebdwilliams 的 [jsx-native-events](https://github.com/calebdwilliams/jsx-native-events#readme)。\\n\\n## Vue 中使用 omim\\n\\n```html\\n<script>\\nimport 'omim/icon-button'\\n\\nexport default {\\n  name: 'HelloWorld',\\n  data: function() {\\n    return {\\n      result: false\\n    }\\n  },\\n  methods: {\\n    myEvent: function(evt) {\\n      this.result = evt.detail.isOn\\n    }\\n  }\\n}\\n</script>\\n\\n<template>\\n  <div class=\\\"component\\\">\\n    <p>The switch is {{result? 'on' : 'off'}}</p>\\n    <m-icon-button color=\\\"red\\\" icons=\\\"['favorite', 'favorite_border']\\\" @change=\\\"myEvent\\\"></m-icon-button>\\n  </div>\\n</template>\\n```\\n\\n> 要在 react 和 vue 中正常显示 icon，需要在 HTML 中引入下面的 CSS:\\n\\n```html\\n<link rel=\\\"stylesheet\\\" href=\\\"https://fonts.googleapis.com/icon?family=Material+Icons\\\">\\n```\\n\\n## 贡献\\n\\n### 一些命令\\n\\nBuild 组件:\\n\\n```bash\\nnpm run build -- component-name\\n```\\n\\nBuild 所有组件:\\n\\n```bash\\nnpm run build-all\\n```\\n\\nBuild 例子:\\n\\n```bash\\nnpm start demo-name\\n```\\n\\n发布:\\n\\n```bash\\nnpm publish --access public\\n```\\n\\n## 相关链接\\n\\n* [material.io docs](https://material.io/develop/web/components/buttons/) \\n* [material.io demo](https://material-components.github.io/material-components-web-catalog/#/) \\n* [material-theme-builder](https://material-theme-builder.glitch.me/)\\n* [material-components-web](https://github.com/material-components/material-components-web)\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/docs/zh-cn/introduction.md\n// module id = 136\n// module chunks = 42"],"sourceRoot":""}