(function (console, $hx_exports) {
	"use strict";
	$hx_exports.openfl = $hx_exports.openfl || {};
	$hx_exports.lime = $hx_exports.lime || {};
	var $hxClasses = {}, $estr = function () { return js_Boot.__string_rec(this, ''); };
	function $extend(from, fields) {
		function Inherit() { } Inherit.prototype = from; var proto = new Inherit();
		for (var name in fields) proto[name] = fields[name];
		if (fields.toString !== Object.prototype.toString) proto.toString = fields.toString;
		return proto;
	}
	var ApplicationMain = function () { };
	$hxClasses["ApplicationMain"] = ApplicationMain;
	ApplicationMain.__name__ = ["ApplicationMain"];
	ApplicationMain.config = null;
	ApplicationMain.preloader = null;
	ApplicationMain.create = function () {
		var app = new openfl_display_Application();
		app.create(ApplicationMain.config);
		var display = new NMEPreloader();
		ApplicationMain.preloader = new openfl_display_Preloader(display);
		app.setPreloader(ApplicationMain.preloader);
		ApplicationMain.preloader.onComplete.add(ApplicationMain.init);
		ApplicationMain.preloader.create(ApplicationMain.config);
		var urls = [];
		var types = [];
		urls.push("res/index.html");
		types.push("TEXT");
		urls.push("res/default.html");
		types.push("TEXT");
		urls.push("res/default.css");
		types.push("TEXT");
		urls.push("img/bg.png");
		types.push("IMAGE");
		urls.push("img/cocktail.png");
		types.push("IMAGE");
		urls.push("res/img/bg.png");
		types.push("IMAGE");
		if (ApplicationMain.config.assetsPrefix != null) {
			var _g1 = 0;
			var _g = urls.length;
			while (_g1 < _g) {
				var i = _g1++;
				if (types[i] != "FONT") urls[i] = ApplicationMain.config.assetsPrefix + urls[i];
			}
		}
		ApplicationMain.preloader.load(urls, types);
		var result = app.exec();
	};
	ApplicationMain.init = function () {
		var loaded = 0;
		var total = 0;
		var library_onLoad = function (__) {
			loaded++;
			if (loaded == total) ApplicationMain.start();
		};
		ApplicationMain.preloader = null;
		if (total == 0) ApplicationMain.start();
	};
	ApplicationMain.main = function () {
		ApplicationMain.config = { build: "197", company: "SilexLabs", file: "CocktailDemo", fps: 60, name: "CocktailDemo", orientation: "", packageName: "com.sample.cocktailDemo", version: "1.0.0", windows: [{ antialiasing: 0, background: 16777215, borderless: false, depthBuffer: false, display: 0, fullscreen: false, hardware: true, height: 0, parameters: "{}", resizable: true, stencilBuffer: true, title: "CocktailDemo", vsync: false, width: 0, x: null, y: null }] };
	};
	ApplicationMain.start = function () {
		var hasMain = false;
		var entryPoint = Type.resolveClass("src.CocktailBrowser");
		var _g = 0;
		var _g1 = Type.getClassFields(entryPoint);
		while (_g < _g1.length) {
			var methodName = _g1[_g];
			++_g;
			if (methodName == "main") {
				hasMain = true;
				break;
			}
		}
		lime_Assets.initialize();
		if (hasMain) Reflect.callMethod(entryPoint, Reflect.field(entryPoint, "main"), []); else {
			var instance = Type.createInstance(DocumentClass, []);
		}
		if (openfl_Lib.current.stage.window.__fullscreen) openfl_Lib.current.stage.dispatchEvent(new openfl_events_FullScreenEvent(openfl_events_FullScreenEvent.FULL_SCREEN, false, false, true, true));
		openfl_Lib.current.stage.dispatchEvent(new openfl_events_Event(openfl_events_Event.RESIZE, false, false));
	};
	var src_CocktailBrowser = $hx_exports.cocktailBrowser = function () {
	};
	$hxClasses["src.CocktailBrowser"] = src_CocktailBrowser;
	src_CocktailBrowser.__name__ = ["src", "CocktailBrowser"];
	src_CocktailBrowser.cv = null;
	src_CocktailBrowser.main = function () {
		src_CocktailBrowser.cv = new cocktail_api_CocktailView();
		src_CocktailBrowser.cv.loadHTML("<!doctype html><html><head></head><body></body></html>");
		openfl_Lib.current.addChild(src_CocktailBrowser.cv.root);
		new src_CocktailBrowser();
	};
	src_CocktailBrowser.updateDocument = function (html, css, baseUrl) {
		var currentHTML = src_CocktailBrowser.getContent();
		try {
			src_CocktailBrowser.cv.document.documentElement.set_innerHTML(html);
			var header = src_CocktailBrowser.cv.document.getElementsByTagName("header")[0];
			var base = src_CocktailBrowser.cv.document.createElement("base");
			base.setAttribute("href", baseUrl);
			header.appendChild(base);
			var style = src_CocktailBrowser.cv.document.createElement("style");
			style.appendChild(src_CocktailBrowser.cv.document.createTextNode(css));
			header.appendChild(style);
		} catch (e) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			src_CocktailBrowser.cv.document.documentElement.set_innerHTML(currentHTML);
		}
	};
	src_CocktailBrowser.getContent = function () {
		try {
			return src_CocktailBrowser.cv.document.documentElement.get_innerHTML();
		} catch (e) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			return "";
		}
	};
	src_CocktailBrowser.prototype = {
		__class__: src_CocktailBrowser
	};
	var DocumentClass = function () {
		src_CocktailBrowser.call(this);
	};
	$hxClasses["DocumentClass"] = DocumentClass;
	DocumentClass.__name__ = ["DocumentClass"];
	DocumentClass.__super__ = src_CocktailBrowser;
	DocumentClass.prototype = $extend(src_CocktailBrowser.prototype, {
		__class__: DocumentClass
	});
	var lime_AssetLibrary = function () {
		this.onChange = new lime_app_Event_$Void_$Void();
	};
	$hxClasses["lime.AssetLibrary"] = lime_AssetLibrary;
	lime_AssetLibrary.__name__ = ["lime", "AssetLibrary"];
	lime_AssetLibrary.prototype = {
		exists: function (id, type) {
			return false;
		}
		, getAudioBuffer: function (id) {
			return null;
		}
		, getBytes: function (id) {
			return null;
		}
		, getFont: function (id) {
			return null;
		}
		, getImage: function (id) {
			return null;
		}
		, getPath: function (id) {
			return null;
		}
		, getText: function (id) {
			var bytes = this.getBytes(id);
			if (bytes == null) return null; else return bytes.readUTFBytes(bytes.length);
		}
		, isLocal: function (id, type) {
			return true;
		}
		, list: function (type) {
			return null;
		}
		, load: function () {
			var _g = this;
			return new lime_app_Future(function () {
				return _g;
			});
		}
		, loadAudioBuffer: function (id) {
			var _g = this;
			return new lime_app_Future(function () {
				return _g.getAudioBuffer(id);
			});
		}
		, loadBytes: function (id) {
			var _g = this;
			return new lime_app_Future(function () {
				return _g.getBytes(id);
			});
		}
		, loadFont: function (id) {
			var _g = this;
			return new lime_app_Future(function () {
				return _g.getFont(id);
			});
		}
		, loadImage: function (id) {
			var _g = this;
			return new lime_app_Future(function () {
				return _g.getImage(id);
			});
		}
		, loadText: function (id) {
			return this.loadBytes(id).then(function (bytes) {
				return new lime_app_Future(function () {
					if (bytes == null) return null; else return bytes.readUTFBytes(bytes.length);
				});
			});
		}
		, unload: function () {
		}
		, __class__: lime_AssetLibrary
	};
	var DefaultAssetLibrary = function () {
		this.type = new haxe_ds_StringMap();
		this.path = new haxe_ds_StringMap();
		this.className = new haxe_ds_StringMap();
		lime_AssetLibrary.call(this);
		var id;
		id = "";
		this.path.set(id, "res/index.html");
		this.type.set(id, "TEXT");
		id = "html";
		this.path.set(id, "res/default.html");
		this.type.set(id, "TEXT");
		id = "";
		this.path.set(id, "res/default.css");
		this.type.set(id, "TEXT");
		id = "img/bg.png";
		this.path.set(id, id);
		this.type.set(id, "IMAGE");
		id = "img/cocktail.png";
		this.path.set(id, id);
		this.type.set(id, "IMAGE");
		id = "res/img/bg.png";
		this.path.set(id, id);
		this.type.set(id, "IMAGE");
		var assetsPrefix = null;
		if (ApplicationMain.config != null && Object.prototype.hasOwnProperty.call(ApplicationMain.config, "assetsPrefix")) assetsPrefix = ApplicationMain.config.assetsPrefix;
		if (assetsPrefix != null) {
			var $it0 = this.path.keys();
			while ($it0.hasNext()) {
				var k = $it0.next();
				var value = assetsPrefix + this.path.get(k);
				this.path.set(k, value);
			}
		}
	};
	$hxClasses["DefaultAssetLibrary"] = DefaultAssetLibrary;
	DefaultAssetLibrary.__name__ = ["DefaultAssetLibrary"];
	DefaultAssetLibrary.__super__ = lime_AssetLibrary;
	DefaultAssetLibrary.prototype = $extend(lime_AssetLibrary.prototype, {
		exists: function (id, type) {
			var requestedType;
			if (type != null) requestedType = js_Boot.__cast(type, String); else requestedType = null;
			var assetType = this.type.get(id);
			if (assetType != null) {
				if (assetType == requestedType || (requestedType == "SOUND" || requestedType == "MUSIC") && (assetType == "MUSIC" || assetType == "SOUND")) return true;
				if (requestedType == "BINARY" || requestedType == null || assetType == "BINARY" && requestedType == "TEXT") return true;
			}
			return false;
		}
		, getAudioBuffer: function (id) {
			return null;
		}
		, getBytes: function (id) {
			var bytes = null;
			var loader;
			var key = this.path.get(id);
			loader = lime_app_Preloader.loaders.get(key);
			if (loader == null) return null;
			var data = loader.data;
			if (typeof (data) == "string") {
				bytes = new lime_utils_ByteArray();
				bytes.writeUTFBytes(data);
			} else if (js_Boot.__instanceof(data, lime_utils_ByteArray)) bytes = data; else bytes = null;
			if (bytes != null) {
				bytes.position = 0;
				return bytes;
			} else return null;
		}
		, getFont: function (id) {
			return js_Boot.__cast(Type.createInstance(this.className.get(id), []), lime_text_Font);
		}
		, getImage: function (id) {
			return lime_graphics_Image.fromImageElement((function ($this) {
				var $r;
				var key = $this.path.get(id);
				$r = lime_app_Preloader.images.get(key);
				return $r;
			}(this)));
		}
		, getPath: function (id) {
			return this.path.get(id);
		}
		, getText: function (id) {
			var bytes = null;
			var loader;
			var key = this.path.get(id);
			loader = lime_app_Preloader.loaders.get(key);
			if (loader == null) return null;
			var data = loader.data;
			if (typeof (data) == "string") return data; else if (js_Boot.__instanceof(data, lime_utils_ByteArray)) bytes = data; else bytes = null;
			if (bytes != null) {
				bytes.position = 0;
				return bytes.readUTFBytes(bytes.length);
			} else return null;
		}
		, isLocal: function (id, type) {
			var requestedType;
			if (type != null) requestedType = js_Boot.__cast(type, String); else requestedType = null;
			return true;
		}
		, list: function (type) {
			var requestedType;
			if (type != null) requestedType = js_Boot.__cast(type, String); else requestedType = null;
			var items = [];
			var $it0 = this.type.keys();
			while ($it0.hasNext()) {
				var id = $it0.next();
				if (requestedType == null || this.exists(id, type)) items.push(id);
			}
			return items;
		}
		, loadAudioBuffer: function (id) {
			var _g = this;
			var promise = new lime_app_Promise();
			promise.completeWith(new lime_app_Future(function () {
				return _g.getAudioBuffer(id);
			}));
			return promise.future;
		}
		, loadBytes: function (id) {
			var promise = new lime_app_Promise();
			if (this.path.exists(id)) {
				var loader = new lime_net_URLLoader();
				loader.set_dataFormat(lime_net_URLLoaderDataFormat.BINARY);
				loader.onComplete.add(function (_) {
					promise.complete(loader.data);
				});
				loader.onProgress.add(function (_1, loaded, total) {
					if (total == 0) promise.progress(0); else promise.progress(loaded / total);
				});
				loader.onIOError.add(function (_2, e) {
					promise.error(e);
				});
				loader.load(new lime_net_URLRequest(this.path.get(id)));
			} else promise.complete(this.getBytes(id));
			return promise.future;
		}
		, loadImage: function (id) {
			var promise = new lime_app_Promise();
			if (this.path.exists(id)) {
				var image = new Image();
				image.onload = function (_) {
					promise.complete(lime_graphics_Image.fromImageElement(image));
				};
				image.onerror = $bind(promise, promise.error);
				image.src = this.path.get(id);
			} else promise.complete(this.getImage(id));
			return promise.future;
		}
		, loadText: function (id) {
			var promise = new lime_app_Promise();
			if (this.path.exists(id)) {
				var loader = new lime_net_URLLoader();
				loader.onComplete.add(function (_) {
					promise.complete(loader.data);
				});
				loader.onProgress.add(function (_1, loaded, total) {
					if (total == 0) promise.progress(0); else promise.progress(loaded / total);
				});
				loader.onIOError.add(function (_2, msg) {
					promise.error(msg);
				});
				loader.load(new lime_net_URLRequest(this.path.get(id)));
			} else promise.complete(this.getText(id));
			return promise.future;
		}
		, __class__: DefaultAssetLibrary
	});
	var EReg = function (r, opt) {
		opt = opt.split("u").join("");
		this.r = new RegExp(r, opt);
	};
	$hxClasses["EReg"] = EReg;
	EReg.__name__ = ["EReg"];
	EReg.prototype = {
		match: function (s) {
			if (this.r.global) this.r.lastIndex = 0;
			this.r.m = this.r.exec(s);
			this.r.s = s;
			return this.r.m != null;
		}
		, matched: function (n) {
			if (this.r.m != null && n >= 0 && n < this.r.m.length) return this.r.m[n]; else throw new js__$Boot_HaxeError("EReg::matched");
		}
		, replace: function (s, by) {
			return s.replace(this.r, by);
		}
		, __class__: EReg
	};
	var HxOverrides = function () { };
	$hxClasses["HxOverrides"] = HxOverrides;
	HxOverrides.__name__ = ["HxOverrides"];
	HxOverrides.strDate = function (s) {
		var _g = s.length;
		switch (_g) {
			case 8:
				var k = s.split(":");
				var d = new Date();
				d.setTime(0);
				d.setUTCHours(k[0]);
				d.setUTCMinutes(k[1]);
				d.setUTCSeconds(k[2]);
				return d;
			case 10:
				var k1 = s.split("-");
				return new Date(k1[0], k1[1] - 1, k1[2], 0, 0, 0);
			case 19:
				var k2 = s.split(" ");
				var y = k2[0].split("-");
				var t = k2[1].split(":");
				return new Date(y[0], y[1] - 1, y[2], t[0], t[1], t[2]);
			default:
				throw new js__$Boot_HaxeError("Invalid date format : " + s);
		}
	};
	HxOverrides.cca = function (s, index) {
		var x = s.charCodeAt(index);
		if (x != x) return undefined;
		return x;
	};
	HxOverrides.substr = function (s, pos, len) {
		if (pos != null && pos != 0 && len != null && len < 0) return "";
		if (len == null) len = s.length;
		if (pos < 0) {
			pos = s.length + pos;
			if (pos < 0) pos = 0;
		} else if (len < 0) len = s.length + len - pos;
		return s.substr(pos, len);
	};
	HxOverrides.indexOf = function (a, obj, i) {
		var len = a.length;
		if (i < 0) {
			i += len;
			if (i < 0) i = 0;
		}
		while (i < len) {
			if (a[i] === obj) return i;
			i++;
		}
		return -1;
	};
	HxOverrides.remove = function (a, obj) {
		var i = HxOverrides.indexOf(a, obj, 0);
		if (i == -1) return false;
		a.splice(i, 1);
		return true;
	};
	HxOverrides.iter = function (a) {
		return {
			cur: 0, arr: a, hasNext: function () {
				return this.cur < this.arr.length;
			}, next: function () {
				return this.arr[this.cur++];
			}
		};
	};
	var Lambda = function () { };
	$hxClasses["Lambda"] = Lambda;
	Lambda.__name__ = ["Lambda"];
	Lambda.count = function (it, pred) {
		var n = 0;
		if (pred == null) {
			var $it0 = $iterator(it)();
			while ($it0.hasNext()) {
				var _ = $it0.next();
				n++;
			}
		} else {
			var $it1 = $iterator(it)();
			while ($it1.hasNext()) {
				var x = $it1.next();
				if (pred(x)) n++;
			}
		}
		return n;
	};
	var List = function () {
		this.length = 0;
	};
	$hxClasses["List"] = List;
	List.__name__ = ["List"];
	List.prototype = {
		add: function (item) {
			var x = [item];
			if (this.h == null) this.h = x; else this.q[1] = x;
			this.q = x;
			this.length++;
		}
		, pop: function () {
			if (this.h == null) return null;
			var x = this.h[0];
			this.h = this.h[1];
			if (this.h == null) this.q = null;
			this.length--;
			return x;
		}
		, iterator: function () {
			return new _$List_ListIterator(this.h);
		}
		, __class__: List
	};
	var _$List_ListIterator = function (head) {
		this.head = head;
		this.val = null;
	};
	$hxClasses["_List.ListIterator"] = _$List_ListIterator;
	_$List_ListIterator.__name__ = ["_List", "ListIterator"];
	_$List_ListIterator.prototype = {
		hasNext: function () {
			return this.head != null;
		}
		, next: function () {
			this.val = this.head[0];
			this.head = this.head[1];
			return this.val;
		}
		, __class__: _$List_ListIterator
	};
	Math.__name__ = ["Math"];
	var openfl_events_IEventDispatcher = function () { };
	$hxClasses["openfl.events.IEventDispatcher"] = openfl_events_IEventDispatcher;
	openfl_events_IEventDispatcher.__name__ = ["openfl", "events", "IEventDispatcher"];
	openfl_events_IEventDispatcher.prototype = {
		__class__: openfl_events_IEventDispatcher
	};
	var openfl_events_EventDispatcher = function (target) {
		if (target != null) this.__targetDispatcher = target;
	};
	$hxClasses["openfl.events.EventDispatcher"] = openfl_events_EventDispatcher;
	openfl_events_EventDispatcher.__name__ = ["openfl", "events", "EventDispatcher"];
	openfl_events_EventDispatcher.__interfaces__ = [openfl_events_IEventDispatcher];
	openfl_events_EventDispatcher.__sortByPriority = function (l1, l2) {
		if (l1.priority == l2.priority) return 0; else if (l1.priority > l2.priority) return -1; else return 1;
	};
	openfl_events_EventDispatcher.prototype = {
		addEventListener: function (type, listener, useCapture, priority, useWeakReference) {
			if (useWeakReference == null) useWeakReference = false;
			if (priority == null) priority = 0;
			if (useCapture == null) useCapture = false;
			if (this.__eventMap == null) {
				this.__dispatching = new haxe_ds_StringMap();
				this.__eventMap = new haxe_ds_StringMap();
				this.__newEventMap = new haxe_ds_StringMap();
			}
			if (!this.__eventMap.exists(type)) {
				var list = [];
				list.push(new openfl_events__$EventDispatcher_Listener(listener, useCapture, priority));
				this.__eventMap.set(type, list);
			} else {
				var list1;
				if (this.__dispatching.get(type) == true) {
					if (!this.__newEventMap.exists(type)) {
						var _this = this.__eventMap.get(type);
						list1 = _this.slice();
						this.__newEventMap.set(type, list1);
					} else list1 = this.__newEventMap.get(type);
				} else list1 = this.__eventMap.get(type);
				var _g1 = 0;
				var _g = list1.length;
				while (_g1 < _g) {
					var i = _g1++;
					if (Reflect.compareMethods(list1[i].callback, listener)) return;
				}
				list1.push(new openfl_events__$EventDispatcher_Listener(listener, useCapture, priority));
				list1.sort(openfl_events_EventDispatcher.__sortByPriority);
			}
		}
		, dispatchEvent: function (event) {
			if (this.__targetDispatcher != null) event.target = this.__targetDispatcher; else event.target = this;
			return this.__dispatchEvent(event);
		}
		, hasEventListener: function (type) {
			if (this.__eventMap == null) return false;
			if (this.__dispatching.get(type) == true && this.__newEventMap.exists(type)) return this.__newEventMap.get(type).length > 0; else return this.__eventMap.exists(type);
		}
		, removeEventListener: function (type, listener, capture) {
			if (capture == null) capture = false;
			if (this.__eventMap == null) return;
			var list = this.__eventMap.get(type);
			if (list == null) return;
			var dispatching = this.__dispatching.get(type) == true;
			if (dispatching) {
				if (!this.__newEventMap.exists(type)) {
					var _this = this.__eventMap.get(type);
					list = _this.slice();
					this.__newEventMap.set(type, list);
				} else list = this.__newEventMap.get(type);
			}
			var _g1 = 0;
			var _g = list.length;
			while (_g1 < _g) {
				var i = _g1++;
				if (list[i].match(listener, capture)) {
					list.splice(i, 1);
					break;
				}
			}
			if (!dispatching) {
				if (list.length == 0) this.__eventMap.remove(type);
				if (!this.__eventMap.iterator().hasNext()) {
					this.__eventMap = null;
					this.__newEventMap = null;
				}
			}
		}
		, toString: function () {
			var full = Type.getClassName(js_Boot.getClass(this));
			var $short = full.split(".").pop();
			return "[object " + $short + "]";
		}
		, willTrigger: function (type) {
			return this.hasEventListener(type);
		}
		, __dispatchEvent: function (event) {
			if (this.__eventMap == null || event == null) return false;
			var type = event.type;
			var list;
			if (this.__dispatching.get(type) == true) {
				list = this.__newEventMap.get(type);
				if (list == null) return false;
				list = list.slice();
			} else {
				list = this.__eventMap.get(type);
				if (list == null) return false;
				this.__dispatching.set(type, true);
			}
			if (event.target == null) {
				if (this.__targetDispatcher != null) event.target = this.__targetDispatcher; else event.target = this;
			}
			event.currentTarget = this;
			var capture = event.eventPhase == openfl_events_EventPhase.CAPTURING_PHASE;
			var index = 0;
			var listener;
			while (index < list.length) {
				listener = list[index];
				if (listener.useCapture == capture) {
					listener.callback(event);
					if (event.__isCancelledNow) break;
				}
				if (listener == list[index]) index++;
			}
			if (this.__newEventMap != null && this.__newEventMap.exists(type)) {
				var list1 = this.__newEventMap.get(type);
				if (list1.length > 0) this.__eventMap.set(type, list1); else this.__eventMap.remove(type);
				if (!this.__eventMap.iterator().hasNext()) {
					this.__eventMap = null;
					this.__newEventMap = null;
				} else this.__newEventMap.remove(type);
			}
			this.__dispatching.set(event.type, false);
			return true;
		}
		, __class__: openfl_events_EventDispatcher
	};
	var openfl_display_IBitmapDrawable = function () { };
	$hxClasses["openfl.display.IBitmapDrawable"] = openfl_display_IBitmapDrawable;
	openfl_display_IBitmapDrawable.__name__ = ["openfl", "display", "IBitmapDrawable"];
	openfl_display_IBitmapDrawable.prototype = {
		__class__: openfl_display_IBitmapDrawable
	};
	var openfl_display_DisplayObject = function () {
		this.__cacheAsBitmapSmooth = true;
		this.__cacheAsBitmap = false;
		this.__maskCached = false;
		openfl_events_EventDispatcher.call(this);
		this.__alpha = 1;
		this.__transform = new openfl_geom_Matrix();
		this.__visible = true;
		this.__rotation = 0;
		this.__rotationSine = 0;
		this.__rotationCosine = 1;
		this.__renderTransform = new openfl_geom_Matrix();
		this.__offset = new openfl_geom_Point();
		this.__worldOffset = new openfl_geom_Point();
		this.__worldAlpha = 1;
		this.__worldTransform = new openfl_geom_Matrix();
		this.__worldColorTransform = new openfl_geom_ColorTransform();
		this.set_name("instance" + ++openfl_display_DisplayObject.__instanceCount);
	};
	$hxClasses["openfl.display.DisplayObject"] = openfl_display_DisplayObject;
	openfl_display_DisplayObject.__name__ = ["openfl", "display", "DisplayObject"];
	openfl_display_DisplayObject.__interfaces__ = [openfl_display_IBitmapDrawable];
	openfl_display_DisplayObject.__super__ = openfl_events_EventDispatcher;
	openfl_display_DisplayObject.prototype = $extend(openfl_events_EventDispatcher.prototype, {
		getBounds: function (targetCoordinateSpace) {
			var matrix;
			if (targetCoordinateSpace != null) {
				matrix = this.__getWorldTransform().clone();
				matrix.concat(targetCoordinateSpace.__getWorldTransform().clone().invert());
			} else {
				matrix = openfl_geom_Matrix.__temp;
				matrix.identity();
			}
			var bounds = new openfl_geom_Rectangle();
			this.__getBounds(bounds, matrix);
			return bounds;
		}
		, getRect: function (targetCoordinateSpace) {
			return this.getBounds(targetCoordinateSpace);
		}
		, globalToLocal: function (pos) {
			pos = pos.clone();
			this.__getWorldTransform().__transformInversePoint(pos);
			return pos;
		}
		, hitTestObject: function (obj) {
			if (obj != null && obj.parent != null && this.parent != null) {
				var currentBounds = this.getBounds(this);
				var targetBounds = obj.getBounds(this);
				return currentBounds.intersects(targetBounds);
			}
			return false;
		}
		, hitTestPoint: function (x, y, shapeFlag) {
			if (shapeFlag == null) shapeFlag = false;
			if (this.parent != null) {
				var bounds = new openfl_geom_Rectangle();
				this.__getBounds(bounds, this.__getWorldTransform());
				return bounds.containsPoint(new openfl_geom_Point(x, y));
			}
			return false;
		}
		, localToGlobal: function (point) {
			return this.__getWorldTransform().transformPoint(point);
		}
		, __broadcast: function (event, notifyChilden) {
			if (this.__eventMap != null && this.hasEventListener(event.type)) {
				var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this, event);
				if (event.__isCancelled) return true;
				return result;
			}
			return false;
		}
		, __dispatchEvent: function (event) {
			var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this, event);
			if (event.__isCancelled) return true;
			if (event.bubbles && this.parent != null && this.parent != this) {
				event.eventPhase = openfl_events_EventPhase.BUBBLING_PHASE;
				if (event.target == null) event.target = this;
				this.parent.__dispatchEvent(event);
			}
			return result;
		}
		, __enterFrame: function (deltaTime) {
		}
		, __getBounds: function (rect, matrix) {
			if (this.__graphics != null) this.__graphics.__getBounds(rect, matrix);
		}
		, __getRenderBounds: function (rect, matrix) {
			if (this.__scrollRect == null) this.__getBounds(rect, matrix); else {
				var r = openfl_geom_Rectangle.__temp;
				r.copyFrom(this.__scrollRect);
				r.__transform(r, matrix);
				rect.__expand(matrix.tx, matrix.ty, r.width, r.height);
			}
		}
		, __getCursor: function () {
			return null;
		}
		, __getInteractive: function (stack) {
			return false;
		}
		, __getLocalBounds: function (rect) {
			this.__getBounds(rect, this.__transform);
		}
		, __getWorldTransform: function () {
			if (this.__transformDirty || openfl_display_DisplayObject.__worldTransformDirty > 0) {
				var list = [];
				var current = this;
				var transformDirty = this.__transformDirty;
				if (this.parent == null) {
					if (transformDirty) this.__update(true, false);
				} else while (current.parent != null) {
					list.push(current);
					current = current.parent;
					if (current.__transformDirty) transformDirty = true;
				}
				if (transformDirty) {
					var i = list.length;
					while (--i >= 0) list[i].__update(true, false);
				}
			}
			return this.__worldTransform;
		}
		, __hitTest: function (x, y, shapeFlag, stack, interactiveOnly) {
			if (this.__graphics != null) {
				if (!this.get_visible() || this.__isMask) return false;
				if (this.get_mask() != null && !this.get_mask().__hitTestMask(x, y)) return false;
				if (this.__graphics.__hitTest(x, y, shapeFlag, this.__getWorldTransform())) {
					if (stack != null && !interactiveOnly) stack.push(this);
					return true;
				}
			}
			return false;
		}
		, __hitTestMask: function (x, y) {
			if (this.__graphics != null) {
				if (this.__graphics.__hitTest(x, y, true, this.__getWorldTransform())) return true;
			}
			return false;
		}
		, __renderCairo: function (renderSession) {
			if (this.__graphics != null) openfl__$internal_renderer_cairo_CairoShape.render(this, renderSession);
		}
		, __renderCairoMask: function (renderSession) {
			if (this.__graphics != null) openfl__$internal_renderer_cairo_CairoGraphics.renderMask(this.__graphics, renderSession);
		}
		, __renderCanvas: function (renderSession) {
			if (this.__graphics != null) openfl__$internal_renderer_canvas_CanvasShape.render(this, renderSession);
		}
		, __renderCanvasMask: function (renderSession) {
			if (this.__graphics != null) openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics, renderSession);
		}
		, __renderDOM: function (renderSession) {
			if (this.__graphics != null) openfl__$internal_renderer_dom_DOMShape.render(this, renderSession);
		}
		, __renderGL: function (renderSession) {
			if (!this.__renderable || this.__worldAlpha <= 0) return;
			if (this.__cacheAsBitmap) {
				this.__cacheGL(renderSession);
				return;
			}
			if (this.__scrollRect != null) renderSession.maskManager.pushRect(this.__scrollRect, this.__renderTransform);
			if (this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.pushMask(this);
			if (this.__graphics != null) {
				if (this.__graphics.__hardware) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.render(this, renderSession); else {
					openfl__$internal_renderer_canvas_CanvasGraphics.render(this.__graphics, renderSession);
					openfl__$internal_renderer_opengl_GLRenderer.renderBitmap(this, renderSession);
				}
			}
			if (this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.popMask();
			if (this.__scrollRect != null) renderSession.maskManager.popRect();
		}
		, __drawGraphicsGL: function (renderSession) {
			if (this.__graphics != null) {
				if (this.__graphics.__hardware) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.render(this, renderSession); else {
					openfl__$internal_renderer_canvas_CanvasGraphics.render(this.__graphics, renderSession);
					openfl__$internal_renderer_opengl_GLRenderer.renderBitmap(this, renderSession);
				}
			}
		}
		, __preRenderGL: function (renderSession) {
			if (this.__scrollRect != null) renderSession.maskManager.pushRect(this.__scrollRect, this.__renderTransform);
			if (this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.pushMask(this);
		}
		, __postRenderGL: function (renderSession) {
			if (this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.popMask();
			if (this.__scrollRect != null) renderSession.maskManager.popRect();
		}
		, __cacheGL: function (renderSession) {
			var hasCacheMatrix = this.__cacheAsBitmapMatrix != null;
			var x = this.__cachedBitmapBounds.x;
			var y = this.__cachedBitmapBounds.y;
			var w = this.__cachedBitmapBounds.width;
			var h = this.__cachedBitmapBounds.height;
			if (this.__cacheGLMatrix == null) this.__cacheGLMatrix = new openfl_geom_Matrix();
			if (hasCacheMatrix) {
				var bmpBounds = openfl_geom_Rectangle.__temp;
				this.__cachedBitmapBounds.__transform(bmpBounds, this.__cacheAsBitmapMatrix);
				x = bmpBounds.x;
				y = bmpBounds.y;
				w = bmpBounds.width;
				h = bmpBounds.height;
				this.__cacheGLMatrix = this.__cacheAsBitmapMatrix.clone();
			} else this.__cacheGLMatrix.identity();
			if (w <= 0 && h <= 0) throw new js__$Boot_HaxeError("Error creating a cached bitmap. The texture size is " + w + "x" + h);
			if (this.__updateCachedBitmap || this.__updateFilters) {
				if (this.__cachedFilterBounds != null) {
					w += Math.abs(this.__cachedFilterBounds.x) + Math.abs(this.__cachedFilterBounds.width);
					h += Math.abs(this.__cachedFilterBounds.y) + Math.abs(this.__cachedFilterBounds.height);
				}
				if (this.__cachedBitmap == null) this.__cachedBitmap = openfl_display_BitmapData.__asRenderTexture();
				this.__cachedBitmap.__resize(Math.ceil(w), Math.ceil(h));
				var m = this.__cacheGLMatrix.clone();
				m.translate(-x, -y);
				var shader = this.__shader;
				this.__shader = null;
				this.__cachedBitmap.__drawGL(renderSession, this, m, null, null, null, true, false, true);
				this.__shader = shader;
				this.__updateCachedBitmap = false;
			}
			if (this.__updateFilters) {
				openfl_filters_BitmapFilter.__applyFilters(this.__filters, renderSession, this.__cachedBitmap, this.__cachedBitmap, null, null);
				this.__updateFilters = false;
			}
			this.__cacheGLMatrix.invert();
			this.__cacheGLMatrix.__translateTransformed(x, y);
			this.__cacheGLMatrix.concat(this.__renderTransform);
			this.__cacheGLMatrix.translate(this.__offset.x, this.__offset.y);
			renderSession.spriteBatch.renderBitmapData(this.__cachedBitmap, this.__cacheAsBitmapSmooth, this.__cacheGLMatrix, this.__worldColorTransform, this.__worldAlpha, this.blendMode, this.__shader, openfl_display_PixelSnapping.ALWAYS);
		}
		, __setStageReference: function (stage) {
			if (this.stage != stage) {
				if (this.stage != null) {
					if (this.stage.get_focus() == this) this.stage.set_focus(null);
					this.dispatchEvent(new openfl_events_Event(openfl_events_Event.REMOVED_FROM_STAGE, false, false));
				}
				this.stage = stage;
				if (stage != null) this.dispatchEvent(new openfl_events_Event(openfl_events_Event.ADDED_TO_STAGE, false, false));
			}
		}
		, __setRenderDirty: function () {
			if (!this.__renderDirty) {
				this.__updateCachedBitmap = true;
				this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		, __setTransformDirty: function () {
			if (!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		, __updateTransforms: function (overrideTransfrom) {
			var overrided = overrideTransfrom != null;
			var local;
			if (overrided) local = new openfl_geom_Matrix(overrideTransfrom.a, overrideTransfrom.b, overrideTransfrom.c, overrideTransfrom.d, overrideTransfrom.tx, overrideTransfrom.ty); else local = this.__transform;
			if (this.__worldTransform == null) this.__worldTransform = new openfl_geom_Matrix();
			if (!overrided && this.parent != null) {
				var parentTransform = this.parent.__worldTransform;
				this.__worldTransform.a = local.a * parentTransform.a + local.b * parentTransform.c;
				this.__worldTransform.b = local.a * parentTransform.b + local.b * parentTransform.d;
				this.__worldTransform.c = local.c * parentTransform.a + local.d * parentTransform.c;
				this.__worldTransform.d = local.c * parentTransform.b + local.d * parentTransform.d;
				this.__worldTransform.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
				this.__worldTransform.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
				this.__worldOffset.copyFrom(this.parent.__worldOffset);
			} else {
				this.__worldTransform.copyFrom(local);
				this.__worldOffset.setTo(0, 0);
			}
			if (this.__scrollRect != null) {
				this.__offset = this.__worldTransform.deltaTransformPoint(this.__scrollRect.get_topLeft());
				this.__worldOffset.offset(this.__offset.x, this.__offset.y);
			} else this.__offset.setTo(0, 0);
			this.__renderTransform.copyFrom(this.__worldTransform);
			this.__renderTransform.translate(-this.__worldOffset.x, -this.__worldOffset.y);
		}
		, __update: function (transformOnly, updateChildren, maskGraphics) {
			this.__renderable = this.get_visible() && this.get_scaleX() != 0 && this.get_scaleY() != 0 && !this.__isMask;
			this.__updateTransforms();
			if (this.parent != null && this.__isMask) this.__maskCached = false;
			if (updateChildren && this.__transformDirty) {
				this.__transformDirty = false;
				openfl_display_DisplayObject.__worldTransformDirty--;
			}
			if (!transformOnly && this.__mask != null && !this.__mask.__maskCached) {
				if (this.__maskGraphics == null) this.__maskGraphics = new openfl_display_Graphics();
				this.__maskGraphics.clear();
				this.__mask.__update(true, true, this.__maskGraphics);
				this.__mask.__maskCached = true;
			}
			if (maskGraphics != null) this.__updateMask(maskGraphics);
			if (!transformOnly && this.__cacheAsBitmap) {
				if (this.__updateCachedBitmap || this.__updateFilters) {
					if (this.__cachedBitmapBounds == null) this.__cachedBitmapBounds = new openfl_geom_Rectangle();
					if (this.cacheAsBitmapBounds != null) this.__cachedBitmapBounds.copyFrom(this.cacheAsBitmapBounds); else {
						this.__cachedBitmapBounds.setEmpty();
						this.__getRenderBounds(this.__cachedBitmapBounds, openfl_geom_Matrix.__identity);
					}
					if (this.__filters != null) {
						if (this.__cachedFilterBounds == null) this.__cachedFilterBounds = new openfl_geom_Rectangle();
						this.__cachedFilterBounds.setEmpty();
						openfl_filters_BitmapFilter.__expandBounds(this.__filters, this.__cachedFilterBounds, openfl_geom_Matrix.__identity);
						this.__cachedBitmapBounds.x += this.__cachedFilterBounds.x;
						this.__cachedBitmapBounds.y += this.__cachedFilterBounds.y;
					}
				}
			}
			if (!transformOnly) {
				if (!this.__worldColorTransform.__equals(this.get_transform().get_colorTransform())) this.__worldColorTransform = this.get_transform().get_colorTransform().__clone();
				if (this.parent != null) {
					this.__worldAlpha = this.get_alpha() * this.parent.__worldAlpha;
					this.__worldColorTransform.__combine(this.parent.__worldColorTransform);
					if (this.blendMode == null || this.blendMode == openfl_display_BlendMode.NORMAL) this.__blendMode = this.parent.__blendMode;
					if (this.shader == null) this.__shader = this.parent.__shader;
				} else this.__worldAlpha = this.get_alpha();
				if (updateChildren && this.__renderDirty) this.__renderDirty = false;
			}
		}
		, __updateChildren: function (transformOnly) {
			this.__renderable = this.get_visible() && this.get_scaleX() != 0 && this.get_scaleY() != 0 && !this.__isMask;
			if (!this.__renderable && !this.__isMask) return;
			this.__worldAlpha = this.get_alpha();
			if (this.__transformDirty) {
				this.__transformDirty = false;
				openfl_display_DisplayObject.__worldTransformDirty--;
			}
		}
		, __updateMask: function (maskGraphics) {
			if (this.__graphics != null) {
				maskGraphics.__commands.overrideMatrix(this.__worldTransform);
				maskGraphics.__commands.append(this.__graphics.__commands);
				maskGraphics.set___dirty(true);
				maskGraphics.__visible = true;
				if (maskGraphics.__bounds == null) maskGraphics.__bounds = new openfl_geom_Rectangle();
				this.__graphics.__getBounds(maskGraphics.__bounds, openfl_geom_Matrix.__identity);
			}
		}
		, get_alpha: function () {
			return this.__alpha;
		}
		, set_alpha: function (value) {
			if (value > 1.0) value = 1.0;
			if (value != this.__alpha) {
				if (!this.__renderDirty) {
					this.__updateCachedBitmap = true;
					this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
					this.__renderDirty = true;
					openfl_display_DisplayObject.__worldRenderDirty++;
				}
			}
			return this.__alpha = value;
		}
		, set_blendMode: function (value) {
			this.__blendMode = value;
			return this.blendMode = value;
		}
		, set_shader: function (value) {
			this.__shader = value;
			return this.shader = value;
		}
		, get_cacheAsBitmap: function () {
			return this.__cacheAsBitmap;
		}
		, set_cacheAsBitmap: function (value) {
			if (!this.__renderDirty) {
				this.__updateCachedBitmap = true;
				this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			return this.__forceCacheAsBitmap ? this.__cacheAsBitmap = true : this.__cacheAsBitmap = value;
		}
		, get_cacheAsBitmapMatrix: function () {
			return this.__cacheAsBitmapMatrix;
		}
		, set_cacheAsBitmapMatrix: function (value) {
			if (!this.__renderDirty) {
				this.__updateCachedBitmap = true;
				this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			return this.__cacheAsBitmapMatrix = new openfl_geom_Matrix(value.a, value.b, value.c, value.d, value.tx, value.ty);
		}
		, get_cacheAsBitmapSmooth: function () {
			return this.__cacheAsBitmapSmooth;
		}
		, set_cacheAsBitmapSmooth: function (value) {
			return this.__cacheAsBitmapSmooth = value;
		}
		, get_filters: function () {
			if (this.__filters == null) return []; else return this.__filters.slice();
		}
		, set_filters: function (value) {
			if (value != null && value.length > 0) {
				this.__filters = value;
				this.__forceCacheAsBitmap = true;
				this.__cacheAsBitmap = true;
				this.__updateFilters = true;
			} else {
				this.__filters = null;
				this.__forceCacheAsBitmap = false;
				this.__cacheAsBitmap = false;
				this.__updateFilters = false;
			}
			if (!this.__renderDirty) {
				this.__updateCachedBitmap = true;
				this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			return value;
		}
		, get_height: function () {
			var bounds = new openfl_geom_Rectangle();
			this.__getBounds(bounds, this.__transform);
			return bounds.height;
		}
		, set_height: function (value) {
			var bounds = new openfl_geom_Rectangle();
			var matrix = openfl_geom_Matrix.__temp;
			matrix.identity();
			this.__getBounds(bounds, matrix);
			if (value != bounds.height) this.set_scaleY(value / bounds.height); else this.set_scaleY(1);
			return value;
		}
		, get_mask: function () {
			return this.__mask;
		}
		, set_mask: function (value) {
			if (value != this.__mask) {
				if (!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
				if (!this.__renderDirty) {
					this.__updateCachedBitmap = true;
					this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
					this.__renderDirty = true;
					openfl_display_DisplayObject.__worldRenderDirty++;
				}
			}
			if (this.__mask != null) {
				this.__mask.__isMask = false;
				this.__mask.__maskCached = false;
				this.__mask.__setTransformDirty();
				this.__mask.__setRenderDirty();
				this.__maskGraphics = null;
			}
			if (value != null) value.__isMask = true;
			return this.__mask = value;
		}
		, get_mouseX: function () {
			var mouseX;
			if (this.stage != null) mouseX = this.stage.__mouseX; else mouseX = openfl_Lib.current.stage.__mouseX;
			var mouseY;
			if (this.stage != null) mouseY = this.stage.__mouseY; else mouseY = openfl_Lib.current.stage.__mouseY;
			return this.__getWorldTransform().__transformInverseX(mouseX, mouseY);
		}
		, get_mouseY: function () {
			var mouseX;
			if (this.stage != null) mouseX = this.stage.__mouseX; else mouseX = openfl_Lib.current.stage.__mouseX;
			var mouseY;
			if (this.stage != null) mouseY = this.stage.__mouseY; else mouseY = openfl_Lib.current.stage.__mouseY;
			return this.__getWorldTransform().__transformInverseY(mouseX, mouseY);
		}
		, get_name: function () {
			return this.__name;
		}
		, set_name: function (value) {
			return this.__name = value;
		}
		, get_root: function () {
			if (this.stage != null) return openfl_Lib.current;
			return null;
		}
		, get_rotation: function () {
			return this.__rotation;
		}
		, set_rotation: function (value) {
			if (value != this.__rotation) {
				this.__rotation = value;
				var radians = this.__rotation * (Math.PI / 180);
				this.__rotationSine = Math.sin(radians);
				this.__rotationCosine = Math.cos(radians);
				var __scaleX = this.get_scaleX();
				var __scaleY = this.get_scaleY();
				this.__transform.a = this.__rotationCosine * __scaleX;
				this.__transform.b = this.__rotationSine * __scaleX;
				this.__transform.c = -this.__rotationSine * __scaleY;
				this.__transform.d = this.__rotationCosine * __scaleY;
				if (!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			return value;
		}
		, get_scaleX: function () {
			if (this.__transform.b == 0) return this.__transform.a; else return Math.sqrt(this.__transform.a * this.__transform.a + this.__transform.b * this.__transform.b);
		}
		, set_scaleX: function (value) {
			if (this.__transform.c == 0) {
				if (value != this.__transform.a) {
					if (!this.__transformDirty) {
						this.__transformDirty = true;
						openfl_display_DisplayObject.__worldTransformDirty++;
					}
				}
				this.__transform.a = value;
			} else {
				var a = this.__rotationCosine * value;
				var b = this.__rotationSine * value;
				if (this.__transform.a != a || this.__transform.b != b) {
					if (!this.__transformDirty) {
						this.__transformDirty = true;
						openfl_display_DisplayObject.__worldTransformDirty++;
					}
				}
				this.__transform.a = a;
				this.__transform.b = b;
			}
			return value;
		}
		, get_scaleY: function () {
			if (this.__transform.c == 0) return this.__transform.d; else return Math.sqrt(this.__transform.c * this.__transform.c + this.__transform.d * this.__transform.d);
		}
		, set_scaleY: function (value) {
			if (this.__transform.c == 0) {
				if (value != this.__transform.d) {
					if (!this.__transformDirty) {
						this.__transformDirty = true;
						openfl_display_DisplayObject.__worldTransformDirty++;
					}
				}
				this.__transform.d = value;
			} else {
				var c = -this.__rotationSine * value;
				var d = this.__rotationCosine * value;
				if (this.__transform.d != d || this.__transform.c != c) {
					if (!this.__transformDirty) {
						this.__transformDirty = true;
						openfl_display_DisplayObject.__worldTransformDirty++;
					}
				}
				this.__transform.c = c;
				this.__transform.d = d;
			}
			return value;
		}
		, get_scrollRect: function () {
			if (this.__scrollRect == null) return null;
			return this.__scrollRect.clone();
		}
		, set_scrollRect: function (value) {
			if (value != this.__scrollRect) {
				if (!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			return this.__scrollRect = value;
		}
		, get_transform: function () {
			if (this.__objectTransform == null) this.__objectTransform = new openfl_geom_Transform(this);
			return this.__objectTransform;
		}
		, set_transform: function (value) {
			if (value == null) throw new js__$Boot_HaxeError(new openfl_errors_TypeError("Parameter transform must be non-null."));
			if (this.__objectTransform == null) this.__objectTransform = new openfl_geom_Transform(this);
			if (!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			this.__objectTransform.set_matrix(value.get_matrix());
			this.__objectTransform.set_colorTransform(value.get_colorTransform().__clone());
			return this.__objectTransform;
		}
		, get_visible: function () {
			return this.__visible;
		}
		, set_visible: function (value) {
			if (value != this.__visible) {
				if (!this.__renderDirty) {
					this.__updateCachedBitmap = true;
					this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
					this.__renderDirty = true;
					openfl_display_DisplayObject.__worldRenderDirty++;
				}
			}
			return this.__visible = value;
		}
		, get_width: function () {
			var bounds = new openfl_geom_Rectangle();
			this.__getBounds(bounds, this.__transform);
			return bounds.width;
		}
		, set_width: function (value) {
			var bounds = new openfl_geom_Rectangle();
			var matrix = openfl_geom_Matrix.__temp;
			matrix.identity();
			this.__getBounds(bounds, matrix);
			if (value != bounds.width) this.set_scaleX(value / bounds.width); else this.set_scaleX(1);
			return value;
		}
		, get_x: function () {
			return this.__transform.tx;
		}
		, set_x: function (value) {
			if (value != this.__transform.tx) {
				if (!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			return this.__transform.tx = value;
		}
		, get_y: function () {
			return this.__transform.ty;
		}
		, set_y: function (value) {
			if (value != this.__transform.ty) {
				if (!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			return this.__transform.ty = value;
		}
		, __class__: openfl_display_DisplayObject
		, __properties__: { set_y: "set_y", get_y: "get_y", set_x: "set_x", get_x: "get_x", set_width: "set_width", get_width: "get_width", set_visible: "set_visible", get_visible: "get_visible", set_transform: "set_transform", get_transform: "get_transform", set_shader: "set_shader", set_scrollRect: "set_scrollRect", get_scrollRect: "get_scrollRect", set_scaleY: "set_scaleY", get_scaleY: "get_scaleY", set_scaleX: "set_scaleX", get_scaleX: "get_scaleX", set_rotation: "set_rotation", get_rotation: "get_rotation", get_root: "get_root", set_name: "set_name", get_name: "get_name", get_mouseY: "get_mouseY", get_mouseX: "get_mouseX", set_mask: "set_mask", get_mask: "get_mask", set_height: "set_height", get_height: "get_height", set_filters: "set_filters", get_filters: "get_filters", set_cacheAsBitmapSmooth: "set_cacheAsBitmapSmooth", get_cacheAsBitmapSmooth: "get_cacheAsBitmapSmooth", set_cacheAsBitmapMatrix: "set_cacheAsBitmapMatrix", get_cacheAsBitmapMatrix: "get_cacheAsBitmapMatrix", set_cacheAsBitmap: "set_cacheAsBitmap", get_cacheAsBitmap: "get_cacheAsBitmap", set_blendMode: "set_blendMode", set_alpha: "set_alpha", get_alpha: "get_alpha" }
	});
	var openfl_display_InteractiveObject = function () {
		openfl_display_DisplayObject.call(this);
		this.doubleClickEnabled = false;
		this.mouseEnabled = true;
		this.needsSoftKeyboard = false;
		this.__tabEnabled = false;
		this.tabIndex = -1;
	};
	$hxClasses["openfl.display.InteractiveObject"] = openfl_display_InteractiveObject;
	openfl_display_InteractiveObject.__name__ = ["openfl", "display", "InteractiveObject"];
	openfl_display_InteractiveObject.__super__ = openfl_display_DisplayObject;
	openfl_display_InteractiveObject.prototype = $extend(openfl_display_DisplayObject.prototype, {
		requestSoftKeyboard: function () {
			openfl_Lib.notImplemented("InteractiveObject.requestSoftKeyboard");
			return false;
		}
		, __getInteractive: function (stack) {
			if (stack != null) {
				stack.push(this);
				if (this.parent != null) this.parent.__getInteractive(stack);
			}
			return true;
		}
		, __hitTest: function (x, y, shapeFlag, stack, interactiveOnly) {
			if (!this.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) return false;
			return openfl_display_DisplayObject.prototype.__hitTest.call(this, x, y, shapeFlag, stack, interactiveOnly);
		}
		, get_tabEnabled: function () {
			return this.__tabEnabled;
		}
		, set_tabEnabled: function (value) {
			return this.__tabEnabled = value;
		}
		, __class__: openfl_display_InteractiveObject
		, __properties__: $extend(openfl_display_DisplayObject.prototype.__properties__, { set_tabEnabled: "set_tabEnabled", get_tabEnabled: "get_tabEnabled" })
	});
	var openfl_display_DisplayObjectContainer = function () {
		openfl_display_InteractiveObject.call(this);
		this.mouseChildren = true;
		this.__children = [];
		this.__removedChildren = [];
	};
	$hxClasses["openfl.display.DisplayObjectContainer"] = openfl_display_DisplayObjectContainer;
	openfl_display_DisplayObjectContainer.__name__ = ["openfl", "display", "DisplayObjectContainer"];
	openfl_display_DisplayObjectContainer.__super__ = openfl_display_InteractiveObject;
	openfl_display_DisplayObjectContainer.prototype = $extend(openfl_display_InteractiveObject.prototype, {
		addChild: function (child) {
			if (child != null) {
				if (child.parent != null) child.parent.removeChild(child);
				this.__children.push(child);
				child.parent = this;
				if (this.stage != null) child.__setStageReference(this.stage);
				if (!child.__transformDirty) {
					child.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
				if (!child.__renderDirty) {
					child.__updateCachedBitmap = true;
					child.__updateFilters = child.get_filters() != null && child.get_filters().length > 0;
					child.__renderDirty = true;
					openfl_display_DisplayObject.__worldRenderDirty++;
				}
				if (!this.__renderDirty) {
					this.__updateCachedBitmap = true;
					this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
					this.__renderDirty = true;
					openfl_display_DisplayObject.__worldRenderDirty++;
				}
				var event = new openfl_events_Event(openfl_events_Event.ADDED, true);
				event.target = child;
				child.__dispatchEvent(event);
			}
			return child;
		}
		, addChildAt: function (child, index) {
			if (index > this.__children.length || index < 0) throw new js__$Boot_HaxeError("Invalid index position " + index);
			if (child.parent == this) HxOverrides.remove(this.__children, child); else {
				if (child.parent != null) child.parent.removeChild(child);
				child.parent = this;
				if (this.stage != null) child.__setStageReference(this.stage);
				if (!child.__transformDirty) {
					child.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
				if (!child.__renderDirty) {
					child.__updateCachedBitmap = true;
					child.__updateFilters = child.get_filters() != null && child.get_filters().length > 0;
					child.__renderDirty = true;
					openfl_display_DisplayObject.__worldRenderDirty++;
				}
				if (!this.__renderDirty) {
					this.__updateCachedBitmap = true;
					this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
					this.__renderDirty = true;
					openfl_display_DisplayObject.__worldRenderDirty++;
				}
				var event = new openfl_events_Event(openfl_events_Event.ADDED, true);
				event.target = child;
				child.__dispatchEvent(event);
			}
			this.__children.splice(index, 0, child);
			return child;
		}
		, areInaccessibleObjectsUnderPoint: function (point) {
			return false;
		}
		, contains: function (child) {
			while (child != this && child != null) child = child.parent;
			return child == this;
		}
		, getChildAt: function (index) {
			if (index >= 0 && index < this.__children.length) return this.__children[index];
			return null;
		}
		, getChildByName: function (name) {
			var _g = 0;
			var _g1 = this.__children;
			while (_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				if (child.get_name() == name) return child;
			}
			return null;
		}
		, getChildIndex: function (child) {
			var _g1 = 0;
			var _g = this.__children.length;
			while (_g1 < _g) {
				var i = _g1++;
				if (this.__children[i] == child) return i;
			}
			return -1;
		}
		, getObjectsUnderPoint: function (point) {
			var stack = [];
			this.__hitTest(point.x, point.y, false, stack, false);
			stack.reverse();
			return stack;
		}
		, removeChild: function (child) {
			if (child != null && child.parent == this) {
				child.__dispatchEvent(new openfl_events_Event(openfl_events_Event.REMOVED, true));
				if (this.stage != null) child.__setStageReference(null);
				child.parent = null;
				HxOverrides.remove(this.__children, child);
				this.__removedChildren.push(child);
				if (!child.__transformDirty) {
					child.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
				if (!child.__renderDirty) {
					child.__updateCachedBitmap = true;
					child.__updateFilters = child.get_filters() != null && child.get_filters().length > 0;
					child.__renderDirty = true;
					openfl_display_DisplayObject.__worldRenderDirty++;
				}
				if (!this.__renderDirty) {
					this.__updateCachedBitmap = true;
					this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
					this.__renderDirty = true;
					openfl_display_DisplayObject.__worldRenderDirty++;
				}
			}
			return child;
		}
		, removeChildAt: function (index) {
			if (index >= 0 && index < this.__children.length) return this.removeChild(this.__children[index]);
			return null;
		}
		, removeChildren: function (beginIndex, endIndex) {
			if (endIndex == null) endIndex = 2147483647;
			if (beginIndex == null) beginIndex = 0;
			if (endIndex == 2147483647) {
				endIndex = this.__children.length - 1;
				if (endIndex < 0) return;
			}
			if (beginIndex > this.__children.length - 1) return; else if (endIndex < beginIndex || beginIndex < 0 || endIndex > this.__children.length) throw new js__$Boot_HaxeError(new openfl_errors_RangeError("The supplied index is out of bounds."));
			var numRemovals = endIndex - beginIndex;
			while (numRemovals >= 0) {
				this.removeChildAt(beginIndex);
				numRemovals--;
			}
		}
		, resolve: function (fieldName) {
			if (this.__children == null) return null;
			var _g = 0;
			var _g1 = this.__children;
			while (_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				if (child.get_name() == fieldName) return child;
			}
			return null;
		}
		, setChildIndex: function (child, index) {
			if (index >= 0 && index <= this.__children.length && child.parent == this) {
				HxOverrides.remove(this.__children, child);
				this.__children.splice(index, 0, child);
			}
		}
		, swapChildren: function (child1, child2) {
			if (child1.parent == this && child2.parent == this) {
				var index1 = HxOverrides.indexOf(this.__children, child1, 0);
				var index2 = HxOverrides.indexOf(this.__children, child2, 0);
				this.__children[index1] = child2;
				this.__children[index2] = child1;
			}
		}
		, swapChildrenAt: function (child1, child2) {
			var swap = this.__children[child1];
			this.__children[child1] = this.__children[child2];
			this.__children[child2] = swap;
			swap = null;
		}
		, __broadcast: function (event, notifyChilden) {
			if (event.target == null) event.target = this;
			var result = openfl_display_InteractiveObject.prototype.__broadcast.call(this, event, notifyChilden);
			if (!event.__isCancelled && notifyChilden) {
				var _g = 0;
				var _g1 = this.__children;
				while (_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.__broadcast(event, true);
					if (event.__isCancelled) return true;
				}
			}
			return result;
		}
		, __enterFrame: function (deltaTime) {
			var _g = 0;
			var _g1 = this.__children;
			while (_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__enterFrame(deltaTime);
			}
		}
		, __getBounds: function (rect, matrix) {
			openfl_display_InteractiveObject.prototype.__getBounds.call(this, rect, matrix);
			if (this.__children.length == 0) return;
			if (matrix != null) {
				this.__updateTransforms(matrix);
				this.__updateChildren(true);
			}
			var _g = 0;
			var _g1 = this.__children;
			while (_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				if (child.get_scaleX() == 0 || child.get_scaleY() == 0 || child.__isMask) continue;
				child.__getBounds(rect, child.__worldTransform);
			}
			if (matrix != null) {
				this.__updateTransforms();
				this.__updateChildren(true);
			}
		}
		, __getRenderBounds: function (rect, matrix) {
			if (this.__scrollRect != null) {
				openfl_display_InteractiveObject.prototype.__getRenderBounds.call(this, rect, matrix);
				return;
			} else openfl_display_InteractiveObject.prototype.__getBounds.call(this, rect, matrix);
			if (this.__children.length == 0) return;
			if (matrix != null) {
				this.__updateTransforms(matrix);
				this.__updateChildren(true);
			}
			var _g = 0;
			var _g1 = this.__children;
			while (_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				if (child.get_scaleX() == 0 || child.get_scaleY() == 0 || child.__isMask) continue;
				child.__getRenderBounds(rect, child.__worldTransform);
			}
			if (matrix != null) {
				this.__updateTransforms();
				this.__updateChildren(true);
			}
		}
		, __hitTest: function (x, y, shapeFlag, stack, interactiveOnly) {
			if (!this.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled && !this.mouseChildren) return false;
			if (this.get_mask() != null && !this.get_mask().__hitTestMask(x, y)) return false;
			if (this.get_scrollRect() != null && !this.get_scrollRect().containsPoint(this.globalToLocal(new openfl_geom_Point(x, y)))) return false;
			var i = this.__children.length;
			if (interactiveOnly) {
				if (stack == null || !this.mouseChildren) {
					while (--i >= 0) if (this.__children[i].__hitTest(x, y, shapeFlag, null, true)) {
						if (stack != null) stack.push(this);
						return true;
					}
				} else if (stack != null) {
					var length = stack.length;
					var interactive = false;
					var hitTest = false;
					while (--i >= 0) {
						interactive = this.__children[i].__getInteractive(null);
						if (interactive || this.mouseEnabled && !hitTest) {
							if (this.__children[i].__hitTest(x, y, shapeFlag, stack, true)) {
								hitTest = true;
								if (interactive) break;
							}
						}
					}
					if (hitTest) {
						stack.splice(length, 0, this);
						return true;
					}
				}
			} else while (--i >= 0) this.__children[i].__hitTest(x, y, shapeFlag, stack, false);
			return false;
		}
		, __hitTestMask: function (x, y) {
			var i = this.__children.length;
			while (--i >= 0) if (this.__children[i].__hitTestMask(x, y)) return true;
			return false;
		}
		, __renderCairo: function (renderSession) {
			if (!this.__renderable || this.__worldAlpha <= 0) return;
			openfl_display_InteractiveObject.prototype.__renderCairo.call(this, renderSession);
			if (this.get_scrollRect() != null) renderSession.maskManager.pushRect(this.get_scrollRect(), this.__worldTransform);
			if (this.__mask != null) renderSession.maskManager.pushMask(this.__mask);
			var _g = 0;
			var _g1 = this.__children;
			while (_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__renderCairo(renderSession);
			}
			if (this.__removedChildren.length > 0) this.__removedChildren.splice(0, this.__removedChildren.length);
			if (this.__mask != null) renderSession.maskManager.popMask();
			if (this.get_scrollRect() != null) renderSession.maskManager.popRect();
		}
		, __renderCairoMask: function (renderSession) {
			if (this.__graphics != null) openfl__$internal_renderer_cairo_CairoGraphics.renderMask(this.__graphics, renderSession);
			var _g = 0;
			var _g1 = this.__children;
			while (_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__renderCairoMask(renderSession);
			}
		}
		, __renderCanvas: function (renderSession) {
			if (!this.__renderable || this.__worldAlpha <= 0) return;
			openfl_display_InteractiveObject.prototype.__renderCanvas.call(this, renderSession);
			if (this.get_scrollRect() != null) renderSession.maskManager.pushRect(this.get_scrollRect(), this.__worldTransform);
			if (this.__mask != null) renderSession.maskManager.pushMask(this.__mask);
			var _g = 0;
			var _g1 = this.__children;
			while (_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__renderCanvas(renderSession);
			}
			if (this.__removedChildren.length > 0) this.__removedChildren.splice(0, this.__removedChildren.length);
			if (this.__mask != null) renderSession.maskManager.popMask();
			if (this.get_scrollRect() != null) renderSession.maskManager.popRect();
		}
		, __renderCanvasMask: function (renderSession) {
			if (this.__graphics != null) openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics, renderSession);
			var bounds = new openfl_geom_Rectangle();
			this.__getBounds(bounds, this.__transform);
			renderSession.context.rect(0, 0, bounds.width, bounds.height);
		}
		, __renderDOM: function (renderSession) {
			openfl_display_InteractiveObject.prototype.__renderDOM.call(this, renderSession);
			if (this.__mask != null) renderSession.maskManager.pushMask(this.__mask);
			var _g = 0;
			var _g1 = this.__children;
			while (_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__renderDOM(renderSession);
			}
			var _g2 = 0;
			var _g11 = this.__removedChildren;
			while (_g2 < _g11.length) {
				var orphan = _g11[_g2];
				++_g2;
				if (orphan.stage == null) orphan.__renderDOM(renderSession);
			}
			if (this.__removedChildren.length > 0) this.__removedChildren.splice(0, this.__removedChildren.length);
			if (this.__mask != null) renderSession.maskManager.popMask();
		}
		, __renderGL: function (renderSession) {
			if (!this.__renderable || this.__worldAlpha <= 0) return;
			if (this.__cacheAsBitmap) {
				this.__cacheGL(renderSession);
				return;
			}
			if (this.__scrollRect != null) renderSession.maskManager.pushRect(this.__scrollRect, this.__renderTransform);
			if (this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.pushMask(this);
			if (this.__graphics != null) {
				if (this.__graphics.__hardware) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.render(this, renderSession); else {
					openfl__$internal_renderer_canvas_CanvasGraphics.render(this.__graphics, renderSession);
					openfl__$internal_renderer_opengl_GLRenderer.renderBitmap(this, renderSession);
				}
			}
			var _g = 0;
			var _g1 = this.__children;
			while (_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__renderGL(renderSession);
			}
			if (this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.popMask();
			if (this.__scrollRect != null) renderSession.maskManager.popRect();
			if (this.__removedChildren.length > 0) this.__removedChildren.splice(0, this.__removedChildren.length);
		}
		, __setStageReference: function (stage) {
			if (this.stage != stage) {
				if (this.stage != null) this.__dispatchEvent(new openfl_events_Event(openfl_events_Event.REMOVED_FROM_STAGE, false, false));
				this.stage = stage;
				if (stage != null) this.__dispatchEvent(new openfl_events_Event(openfl_events_Event.ADDED_TO_STAGE, false, false));
				if (this.__children != null) {
					var _g = 0;
					var _g1 = this.__children;
					while (_g < _g1.length) {
						var child = _g1[_g];
						++_g;
						child.__setStageReference(stage);
					}
				}
			}
		}
		, __update: function (transformOnly, updateChildren, maskGraphics) {
			openfl_display_InteractiveObject.prototype.__update.call(this, transformOnly, updateChildren, maskGraphics);
			if (!this.__renderable && !this.__isMask) return;
			if (updateChildren) {
				var _g = 0;
				var _g1 = this.__children;
				while (_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.__update(transformOnly, true, maskGraphics);
				}
			}
		}
		, __updateChildren: function (transformOnly) {
			openfl_display_InteractiveObject.prototype.__updateChildren.call(this, transformOnly);
			var _g = 0;
			var _g1 = this.__children;
			while (_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__update(transformOnly, true);
			}
		}
		, get_numChildren: function () {
			return this.__children.length;
		}
		, __class__: openfl_display_DisplayObjectContainer
		, __properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__, { get_numChildren: "get_numChildren" })
	});
	var openfl_display_Sprite = function () {
		openfl_display_DisplayObjectContainer.call(this);
		this.buttonMode = false;
		this.useHandCursor = true;
		this.loaderInfo = openfl_display_LoaderInfo.create(null);
	};
	$hxClasses["openfl.display.Sprite"] = openfl_display_Sprite;
	openfl_display_Sprite.__name__ = ["openfl", "display", "Sprite"];
	openfl_display_Sprite.__super__ = openfl_display_DisplayObjectContainer;
	openfl_display_Sprite.prototype = $extend(openfl_display_DisplayObjectContainer.prototype, {
		startDrag: function (lockCenter, bounds) {
			if (lockCenter == null) lockCenter = false;
			if (this.stage != null) this.stage.__startDrag(this, lockCenter, bounds);
		}
		, stopDrag: function () {
			if (this.stage != null) this.stage.__stopDrag(this);
		}
		, __getCursor: function () {
			if (this.buttonMode && this.useHandCursor) return lime_ui_MouseCursor.POINTER; else return null;
		}
		, __hitTest: function (x, y, shapeFlag, stack, interactiveOnly) {
			if (!this.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled && !this.mouseChildren) return false;
			if (this.get_mask() != null && !this.get_mask().__hitTestMask(x, y)) return false;
			if (openfl_display_DisplayObjectContainer.prototype.__hitTest.call(this, x, y, shapeFlag, stack, interactiveOnly)) return interactiveOnly; else if ((!interactiveOnly || this.mouseEnabled) && this.__graphics != null && this.__graphics.__hitTest(x, y, shapeFlag, this.__getWorldTransform())) {
				if (stack != null) stack.push(this);
				return true;
			}
			return false;
		}
		, __hitTestMask: function (x, y) {
			if (openfl_display_DisplayObjectContainer.prototype.__hitTestMask.call(this, x, y)) return true; else if (this.__graphics != null && this.__graphics.__hitTest(x, y, true, this.__getWorldTransform())) return true;
			return false;
		}
		, get_graphics: function () {
			if (this.__graphics == null) {
				this.__graphics = new openfl_display_Graphics();
				this.__graphics.__owner = this;
			}
			return this.__graphics;
		}
		, get_tabEnabled: function () {
			return this.__tabEnabled || this.buttonMode;
		}
		, __class__: openfl_display_Sprite
		, __properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__, { get_graphics: "get_graphics" })
	});
	var NMEPreloader = function () {
		openfl_display_Sprite.call(this);
		var backgroundColor = this.getBackgroundColor();
		var r = backgroundColor >> 16 & 255;
		var g = backgroundColor >> 8 & 255;
		var b = backgroundColor & 255;
		var perceivedLuminosity = 0.299 * r + 0.587 * g + 0.114 * b;
		var color = 0;
		if (perceivedLuminosity < 70) color = 16777215;
		var x = 30;
		var height = 7;
		var y = this.getHeight() / 2 - height / 2;
		var width = this.getWidth() - x * 2;
		var padding = 2;
		this.outline = new openfl_display_Sprite();
		this.outline.get_graphics().beginFill(color, 0.07);
		this.outline.get_graphics().drawRect(0, 0, width, height);
		this.outline.set_x(x);
		this.outline.set_y(y);
		this.addChild(this.outline);
		this.progress = new openfl_display_Sprite();
		this.progress.get_graphics().beginFill(color, 0.35);
		this.progress.get_graphics().drawRect(0, 0, width - padding * 2, height - padding * 2);
		this.progress.set_x(x + padding);
		this.progress.set_y(y + padding);
		this.progress.set_scaleX(0);
		this.addChild(this.progress);
	};
	$hxClasses["NMEPreloader"] = NMEPreloader;
	NMEPreloader.__name__ = ["NMEPreloader"];
	NMEPreloader.__super__ = openfl_display_Sprite;
	NMEPreloader.prototype = $extend(openfl_display_Sprite.prototype, {
		getBackgroundColor: function () {
			return 16777215;
		}
		, getHeight: function () {
			var height = 0;
			if (height > 0) return height; else return openfl_Lib.current.stage.stageHeight;
		}
		, getWidth: function () {
			var width = 0;
			if (width > 0) return width; else return openfl_Lib.current.stage.stageWidth;
		}
		, onInit: function () {
		}
		, onLoaded: function () {
			this.dispatchEvent(new openfl_events_Event(openfl_events_Event.COMPLETE));
		}
		, onUpdate: function (bytesLoaded, bytesTotal) {
			var percentLoaded = bytesLoaded / bytesTotal;
			if (percentLoaded > 1) percentLoaded = 1;
			this.progress.set_scaleX(percentLoaded);
		}
		, __class__: NMEPreloader
	});
	var Reflect = function () { };
	$hxClasses["Reflect"] = Reflect;
	Reflect.__name__ = ["Reflect"];
	Reflect.hasField = function (o, field) {
		return Object.prototype.hasOwnProperty.call(o, field);
	};
	Reflect.field = function (o, field) {
		try {
			return o[field];
		} catch (e) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			return null;
		}
	};
	Reflect.setField = function (o, field, value) {
		o[field] = value;
	};
	Reflect.getProperty = function (o, field) {
		var tmp;
		if (o == null) return null; else if (o.__properties__ && (tmp = o.__properties__["get_" + field])) return o[tmp](); else return o[field];
	};
	Reflect.callMethod = function (o, func, args) {
		return func.apply(o, args);
	};
	Reflect.fields = function (o) {
		var a = [];
		if (o != null) {
			var hasOwnProperty = Object.prototype.hasOwnProperty;
			for (var f in o) {
				if (f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o, f)) a.push(f);
			}
		}
		return a;
	};
	Reflect.isFunction = function (f) {
		return typeof (f) == "function" && !(f.__name__ || f.__ename__);
	};
	Reflect.compareMethods = function (f1, f2) {
		if (f1 == f2) return true;
		if (!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) return false;
		return f1.scope == f2.scope && f1.method == f2.method && f1.method != null;
	};
	Reflect.deleteField = function (o, field) {
		if (!Object.prototype.hasOwnProperty.call(o, field)) return false;
		delete (o[field]);
		return true;
	};
	Reflect.makeVarArgs = function (f) {
		return function () {
			var a = Array.prototype.slice.call(arguments);
			return f(a);
		};
	};
	var Std = function () { };
	$hxClasses["Std"] = Std;
	Std.__name__ = ["Std"];
	Std.string = function (s) {
		return js_Boot.__string_rec(s, "");
	};
	Std["int"] = function (x) {
		return x | 0;
	};
	Std.parseInt = function (x) {
		var v = parseInt(x, 10);
		if (v == 0 && (HxOverrides.cca(x, 1) == 120 || HxOverrides.cca(x, 1) == 88)) v = parseInt(x);
		if (isNaN(v)) return null;
		return v;
	};
	Std.parseFloat = function (x) {
		return parseFloat(x);
	};
	var StringBuf = function () {
		this.b = "";
	};
	$hxClasses["StringBuf"] = StringBuf;
	StringBuf.__name__ = ["StringBuf"];
	StringBuf.prototype = {
		add: function (x) {
			this.b += Std.string(x);
		}
		, addSub: function (s, pos, len) {
			if (len == null) this.b += HxOverrides.substr(s, pos, null); else this.b += HxOverrides.substr(s, pos, len);
		}
		, __class__: StringBuf
	};
	var StringTools = function () { };
	$hxClasses["StringTools"] = StringTools;
	StringTools.__name__ = ["StringTools"];
	StringTools.urlEncode = function (s) {
		return encodeURIComponent(s);
	};
	StringTools.urlDecode = function (s) {
		return decodeURIComponent(s.split("+").join(" "));
	};
	StringTools.htmlEscape = function (s, quotes) {
		s = s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
		if (quotes) return s.split("\"").join("&quot;").split("'").join("&#039;"); else return s;
	};
	StringTools.startsWith = function (s, start) {
		return s.length >= start.length && HxOverrides.substr(s, 0, start.length) == start;
	};
	StringTools.isSpace = function (s, pos) {
		var c = HxOverrides.cca(s, pos);
		return c > 8 && c < 14 || c == 32;
	};
	StringTools.ltrim = function (s) {
		var l = s.length;
		var r = 0;
		while (r < l && StringTools.isSpace(s, r)) r++;
		if (r > 0) return HxOverrides.substr(s, r, l - r); else return s;
	};
	StringTools.rtrim = function (s) {
		var l = s.length;
		var r = 0;
		while (r < l && StringTools.isSpace(s, l - r - 1)) r++;
		if (r > 0) return HxOverrides.substr(s, 0, l - r); else return s;
	};
	StringTools.trim = function (s) {
		return StringTools.ltrim(StringTools.rtrim(s));
	};
	StringTools.replace = function (s, sub, by) {
		return s.split(sub).join(by);
	};
	StringTools.hex = function (n, digits) {
		var s = "";
		var hexChars = "0123456789ABCDEF";
		do {
			s = hexChars.charAt(n & 15) + s;
			n >>>= 4;
		} while (n > 0);
		if (digits != null) while (s.length < digits) s = "0" + s;
		return s;
	};
	StringTools.fastCodeAt = function (s, index) {
		return s.charCodeAt(index);
	};
	var ValueType = $hxClasses["ValueType"] = { __ename__: ["ValueType"], __constructs__: ["TNull", "TInt", "TFloat", "TBool", "TObject", "TFunction", "TClass", "TEnum", "TUnknown"] };
	ValueType.TNull = ["TNull", 0];
	ValueType.TNull.toString = $estr;
	ValueType.TNull.__enum__ = ValueType;
	ValueType.TInt = ["TInt", 1];
	ValueType.TInt.toString = $estr;
	ValueType.TInt.__enum__ = ValueType;
	ValueType.TFloat = ["TFloat", 2];
	ValueType.TFloat.toString = $estr;
	ValueType.TFloat.__enum__ = ValueType;
	ValueType.TBool = ["TBool", 3];
	ValueType.TBool.toString = $estr;
	ValueType.TBool.__enum__ = ValueType;
	ValueType.TObject = ["TObject", 4];
	ValueType.TObject.toString = $estr;
	ValueType.TObject.__enum__ = ValueType;
	ValueType.TFunction = ["TFunction", 5];
	ValueType.TFunction.toString = $estr;
	ValueType.TFunction.__enum__ = ValueType;
	ValueType.TClass = function (c) { var $x = ["TClass", 6, c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
	ValueType.TEnum = function (e) { var $x = ["TEnum", 7, e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
	ValueType.TUnknown = ["TUnknown", 8];
	ValueType.TUnknown.toString = $estr;
	ValueType.TUnknown.__enum__ = ValueType;
	var Type = function () { };
	$hxClasses["Type"] = Type;
	Type.__name__ = ["Type"];
	Type.getClassName = function (c) {
		var a = c.__name__;
		if (a == null) return null;
		return a.join(".");
	};
	Type.getEnumName = function (e) {
		var a = e.__ename__;
		return a.join(".");
	};
	Type.resolveClass = function (name) {
		var cl = $hxClasses[name];
		if (cl == null || !cl.__name__) return null;
		return cl;
	};
	Type.resolveEnum = function (name) {
		var e = $hxClasses[name];
		if (e == null || !e.__ename__) return null;
		return e;
	};
	Type.createInstance = function (cl, args) {
		var _g = args.length;
		switch (_g) {
			case 0:
				return new cl();
			case 1:
				return new cl(args[0]);
			case 2:
				return new cl(args[0], args[1]);
			case 3:
				return new cl(args[0], args[1], args[2]);
			case 4:
				return new cl(args[0], args[1], args[2], args[3]);
			case 5:
				return new cl(args[0], args[1], args[2], args[3], args[4]);
			case 6:
				return new cl(args[0], args[1], args[2], args[3], args[4], args[5]);
			case 7:
				return new cl(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
			case 8:
				return new cl(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);
			default:
				throw new js__$Boot_HaxeError("Too many arguments");
		}
		return null;
	};
	Type.createEmptyInstance = function (cl) {
		function empty() { }; empty.prototype = cl.prototype;
		return new empty();
	};
	Type.createEnum = function (e, constr, params) {
		var f = Reflect.field(e, constr);
		if (f == null) throw new js__$Boot_HaxeError("No such constructor " + constr);
		if (Reflect.isFunction(f)) {
			if (params == null) throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
			return Reflect.callMethod(e, f, params);
		}
		if (params != null && params.length != 0) throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
		return f;
	};
	Type.getClassFields = function (c) {
		var a = Reflect.fields(c);
		HxOverrides.remove(a, "__name__");
		HxOverrides.remove(a, "__interfaces__");
		HxOverrides.remove(a, "__properties__");
		HxOverrides.remove(a, "__super__");
		HxOverrides.remove(a, "__meta__");
		HxOverrides.remove(a, "prototype");
		return a;
	};
	Type.getEnumConstructs = function (e) {
		var a = e.__constructs__;
		return a.slice();
	};
	Type["typeof"] = function (v) {
		var _g = typeof (v);
		switch (_g) {
			case "boolean":
				return ValueType.TBool;
			case "string":
				return ValueType.TClass(String);
			case "number":
				if (Math.ceil(v) == v % 2147483648.0) return ValueType.TInt;
				return ValueType.TFloat;
			case "object":
				if (v == null) return ValueType.TNull;
				var e = v.__enum__;
				if (e != null) return ValueType.TEnum(e);
				var c = js_Boot.getClass(v);
				if (c != null) return ValueType.TClass(c);
				return ValueType.TObject;
			case "function":
				if (v.__name__ || v.__ename__) return ValueType.TObject;
				return ValueType.TFunction;
			case "undefined":
				return ValueType.TNull;
			default:
				return ValueType.TUnknown;
		}
	};
	Type.enumEq = function (a, b) {
		if (a == b) return true;
		try {
			if (a[0] != b[0]) return false;
			var _g1 = 2;
			var _g = a.length;
			while (_g1 < _g) {
				var i = _g1++;
				if (!Type.enumEq(a[i], b[i])) return false;
			}
			var e = a.__enum__;
			if (e != b.__enum__ || e == null) return false;
		} catch (e1) {
			haxe_CallStack.lastException = e1;
			if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
			return false;
		}
		return true;
	};
	var _$UInt_UInt_$Impl_$ = {};
	$hxClasses["_UInt.UInt_Impl_"] = _$UInt_UInt_$Impl_$;
	_$UInt_UInt_$Impl_$.__name__ = ["_UInt", "UInt_Impl_"];
	_$UInt_UInt_$Impl_$.gt = function (a, b) {
		var aNeg = a < 0;
		var bNeg = b < 0;
		if (aNeg != bNeg) return aNeg; else return a > b;
	};
	_$UInt_UInt_$Impl_$.toFloat = function (this1) {
		var $int = this1;
		if ($int < 0) return 4294967296.0 + $int; else return $int + 0.0;
	};
	var Xml = function (nodeType) {
		this.nodeType = nodeType;
		this.children = [];
		this.attributeMap = new haxe_ds_StringMap();
	};
	$hxClasses["Xml"] = Xml;
	Xml.__name__ = ["Xml"];
	Xml.createElement = function (name) {
		var xml = new Xml(Xml.Element);
		if (xml.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + xml.nodeType);
		xml.nodeName = name;
		return xml;
	};
	Xml.createPCData = function (data) {
		var xml = new Xml(Xml.PCData);
		if (xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
		xml.nodeValue = data;
		return xml;
	};
	Xml.createCData = function (data) {
		var xml = new Xml(Xml.CData);
		if (xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
		xml.nodeValue = data;
		return xml;
	};
	Xml.createComment = function (data) {
		var xml = new Xml(Xml.Comment);
		if (xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
		xml.nodeValue = data;
		return xml;
	};
	Xml.createDocType = function (data) {
		var xml = new Xml(Xml.DocType);
		if (xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
		xml.nodeValue = data;
		return xml;
	};
	Xml.createProcessingInstruction = function (data) {
		var xml = new Xml(Xml.ProcessingInstruction);
		if (xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
		xml.nodeValue = data;
		return xml;
	};
	Xml.createDocument = function () {
		return new Xml(Xml.Document);
	};
	Xml.prototype = {
		get: function (att) {
			if (this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
			return this.attributeMap.get(att);
		}
		, set: function (att, value) {
			if (this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
			this.attributeMap.set(att, value);
		}
		, exists: function (att) {
			if (this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
			return this.attributeMap.exists(att);
		}
		, attributes: function () {
			if (this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
			return this.attributeMap.keys();
		}
		, firstElement: function () {
			if (this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
			var _g = 0;
			var _g1 = this.children;
			while (_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				if (child.nodeType == Xml.Element) return child;
			}
			return null;
		}
		, addChild: function (x) {
			if (this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
			if (x.parent != null) x.parent.removeChild(x);
			this.children.push(x);
			x.parent = this;
		}
		, removeChild: function (x) {
			if (this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
			if (HxOverrides.remove(this.children, x)) {
				x.parent = null;
				return true;
			}
			return false;
		}
		, __class__: Xml
	};
	var cocktail_api_CocktailView = function () {
	};
	$hxClasses["cocktail.api.CocktailView"] = cocktail_api_CocktailView;
	cocktail_api_CocktailView.__name__ = ["cocktail", "api", "CocktailView"];
	cocktail_api_CocktailView.prototype = {
		loadHTML: function (html, url) {
			if (this.document != null) this.dispose();
			this.createDocument();
			this.initDocument(this.document, html, url);
		}
		, loadURL: function (url, baseUrl) {
			var _g = this;
			if (this.document != null) this.dispose();
			if (baseUrl == null) baseUrl = url;
			this.createDocument();
			var res = haxe_Resource.getString(url);
			if (res != null) {
				this.initDocument(this.document, res, baseUrl);
				return;
			}
			var nativeHttp = new cocktail_port_platform_flash_$player_NativeHttp(this.document.timer);
			var onHTMLLoaded = function (e) {
				_g.initDocument(_g.document, nativeHttp.response, baseUrl);
			};
			var onLoadError = function (e1) {
				throw new js__$Boot_HaxeError("could not load " + url);
			};
			nativeHttp.addEventListener("load", onHTMLLoaded);
			nativeHttp.addEventListener("error", onLoadError);
			nativeHttp.load(url, "GET", null, null, cocktail_core_http_DataFormatValue.TEXT);
		}
		, dispose: function () {
			if (this.document != null) this.document.dispose();
			if (this.window != null) this.window.dispose();
			if (this._platform != null) this._platform.dispose();
		}
		, createDocument: function () {
			this._platform = this.initPlatform();
			this.document = new cocktail_core_html_HTMLDocument();
			this.window = new cocktail_core_window_Window(this.document);
			this.updateViewport(this.viewport);
		}
		, initPlatform: function () {
			var platform = new cocktail_port_platform_flash_$player_Platform();
			this.root = platform.getRootPlatformLayer();
			return platform;
		}
		, initDocument: function (htmlDocument, html, url) {
			this.setDocumentBindings(this.document);
			this.setPlatformBindings(this._platform, this.document);
			if (url != null) htmlDocument.location.set_href(url);
			if (html != null) htmlDocument.set_innerHTML(html);
		}
		, setPlatformBindings: function (platform, htmlDocument) {
			this.setMouseBindings(platform, htmlDocument);
			this.setKeyboardBindings(platform, htmlDocument);
			this.setTouchBindings(platform, htmlDocument);
			this.setFullscreenBindings(platform, htmlDocument);
			this.setViewportBindings(platform, htmlDocument);
			this.setMouseCursorBindings(platform, htmlDocument);
			this.setNavigationBindings(platform, htmlDocument);
		}
		, setDocumentBindings: function (htmlDocument) {
			this.document.onDocumentUpdated = $bind(this, this.onDocumentUpdated);
			this.document.onDocumentInvalidated = $bind(this, this.onDocumentInvalidated);
		}
		, updateViewport: function (viewport) {
			if (this.window == null) return;
			if (viewport == null) this._platform.set_viewport(null); else {
				var rect = new cocktail_core_geom_RectangleVO();
				rect.x = viewport.x;
				rect.y = viewport.y;
				rect.width = viewport.width;
				rect.height = viewport.height;
				this._platform.set_viewport(rect);
			}
		}
		, setMouseBindings: function (platform, htmlDocument) {
			platform.mouseListener.onMouseDown = $bind(htmlDocument, htmlDocument.onPlatformMouseEvent);
			platform.mouseListener.onMouseUp = $bind(htmlDocument, htmlDocument.onPlatformMouseEvent);
			platform.mouseListener.onMouseMove = $bind(htmlDocument, htmlDocument.onPlatformMouseMoveEvent);
			platform.mouseListener.onMouseWheel = $bind(htmlDocument, htmlDocument.onPlatformMouseWheelEvent);
			platform.mouseListener.onMouseLeave = $bind(htmlDocument, htmlDocument.onPlatformMouseLeaveEvent);
		}
		, setMouseCursorBindings: function (platform, htmlDocument) {
			this.document.onSetMouseCursor = ($_ = platform.mouseListener, $bind($_, $_.setMouseCursor));
		}
		, setKeyboardBindings: function (platform, htmlDocument) {
			platform.keyboardListener.onKeyDown = $bind(this, this.onPlatformKeyDown);
			platform.keyboardListener.onKeyUp = $bind(htmlDocument, htmlDocument.onPlatformKeyUpEvent);
		}
		, setTouchBindings: function (platform, htmlDocument) {
			platform.touchListener.onTouchStart = $bind(htmlDocument, htmlDocument.onPlatformTouchEvent);
			platform.touchListener.onTouchMove = $bind(htmlDocument, htmlDocument.onPlatformTouchEvent);
			platform.touchListener.onTouchEnd = $bind(htmlDocument, htmlDocument.onPlatformTouchEvent);
		}
		, setFullscreenBindings: function (platform, htmlDocument) {
			platform.onFullScreenChange = ($_ = this.document, $bind($_, $_.onPlatformFullScreenChange));
			this.document.onEnterFullscreen = $bind(platform, platform.enterFullscreen);
			this.document.onExitFullscreen = $bind(platform, platform.exitFullscreen);
			this.document.isFullscreen = $bind(platform, platform.fullscreen);
			this.document.isFullScreenEnabled = $bind(platform, platform.fullScreenEnabled);
		}
		, setViewportBindings: function (platform, htmlDocument) {
			platform.onResize = ($_ = this.document, $bind($_, $_.onPlatformResizeEvent));
			platform.onOrientationChange = ($_ = this.document, $bind($_, $_.onPlatformOrientationChangeEvent));
			this.document.getViewportHeight = function () {
				return platform.get_viewportHeight();
			};
			this.document.getViewportWidth = function () {
				return platform.get_viewportWidth();
			};
			this.document.getTopPlatformLayer = $bind(platform, platform.getTopPlatformLayer);
		}
		, setNavigationBindings: function (platform, htmlDocument) {
			this.document.onNavigateToURL = $bind(platform, platform.open);
		}
		, onDocumentUpdated: function () {
		}
		, onDocumentInvalidated: function () {
			var _g = this;
			this.document.timer.delay(function (timestamp) {
				_g.document.update();
			});
		}
		, onPlatformKeyDown: function (keyboardEvent) {
			this.document.onPlatformKeyDownEvent(keyboardEvent);
			this.onAfterKeyDownEvent(keyboardEvent, this.document);
		}
		, onAfterKeyDownEvent: function (keyboardEvent, htmlDocument) {
			var _g = Std.parseInt(keyboardEvent.keyChar);
			if (_g != null) switch (_g) {
				case 9:
					if (keyboardEvent.defaultPrevented == false) {
						if (keyboardEvent.shiftKey == true) htmlDocument.focusPreviousElement(); else htmlDocument.focusNextElement();
					}
					break;
				case 13: case 32:
					if (keyboardEvent.defaultPrevented == false) {
						if (htmlDocument.get_activeElement() != null) htmlDocument.get_activeElement().triggerActivationBehaviour();
					}
					break;
			}
		}
		, set_viewport: function (value) {
			this.viewport = value;
			this.updateViewport(this.viewport);
			return value;
		}
		, __class__: cocktail_api_CocktailView
		, __properties__: { set_viewport: "set_viewport" }
	};
	var cocktail_core_boxmodel_BoxStylesComputer = function () {
	};
	$hxClasses["cocktail.core.boxmodel.BoxStylesComputer"] = cocktail_core_boxmodel_BoxStylesComputer;
	cocktail_core_boxmodel_BoxStylesComputer.__name__ = ["cocktail", "core", "boxmodel", "BoxStylesComputer"];
	cocktail_core_boxmodel_BoxStylesComputer.prototype = {
		measure: function (style, containingBlockData) {
			this.measurePaddings(style, containingBlockData);
			this.measureBordersWidth(style);
			this.measureOutline(style);
			this.measureDimensionsConstraints(style, containingBlockData);
			this.measureDimensionsAndMargins(style, containingBlockData);
			if (style.isPositioned == true) this.measurePositionOffsets(style, containingBlockData);
		}
		, measureDimensionsConstraints: function (style, containingBlockData) {
			style.usedValues.maxHeight = this.getComputedConstrainedDimension(style.getTransitionablePropertyValue(18), containingBlockData.height, containingBlockData.isHeightAuto);
			style.usedValues.minHeight = this.getComputedConstrainedDimension(style.getTransitionablePropertyValue(17), containingBlockData.height, containingBlockData.isHeightAuto, true);
			style.usedValues.maxWidth = this.getComputedConstrainedDimension(style.getTransitionablePropertyValue(20), containingBlockData.width, containingBlockData.isWidthAuto);
			style.usedValues.minWidth = this.getComputedConstrainedDimension(style.getTransitionablePropertyValue(19), containingBlockData.width, containingBlockData.isWidthAuto, true);
		}
		, measurePositionOffsets: function (style, containingBlockData) {
			style.usedValues.left = this.getComputedPositionOffset(style.getTransitionablePropertyValue(22), containingBlockData.width);
			style.usedValues.right = this.getComputedPositionOffset(style.getTransitionablePropertyValue(23), containingBlockData.width);
			style.usedValues.top = this.getComputedPositionOffset(style.getTransitionablePropertyValue(21), containingBlockData.height);
			style.usedValues.bottom = this.getComputedPositionOffset(style.getTransitionablePropertyValue(24), containingBlockData.height);
		}
		, measureDimensionsAndMargins: function (style, containingBlockData) {
			style.usedValues.width = this.constrainWidth(style, this.measureWidthAndHorizontalMargins(style, containingBlockData));
			style.usedValues.height = this.constrainHeight(style, this.measureHeightAndVerticalMargins(style, containingBlockData));
		}
		, measurePaddings: function (style, containingBlockData) {
			style.usedValues.paddingLeft = this.getComputedPadding(style.getTransitionablePropertyValue(11), containingBlockData.width);
			style.usedValues.paddingRight = this.getComputedPadding(style.getTransitionablePropertyValue(12), containingBlockData.width);
			style.usedValues.paddingTop = this.getComputedPadding(style.getTransitionablePropertyValue(13), containingBlockData.width);
			style.usedValues.paddingBottom = this.getComputedPadding(style.getTransitionablePropertyValue(14), containingBlockData.width);
		}
		, measureBordersWidth: function (style) {
			style.usedValues.borderLeftWidth = this.getComputedBorderWidth(style.getTransitionablePropertyValue(65));
			style.usedValues.borderTopWidth = this.getComputedBorderWidth(style.getTransitionablePropertyValue(62));
			style.usedValues.borderRightWidth = this.getComputedBorderWidth(style.getTransitionablePropertyValue(63));
			style.usedValues.borderBottomWidth = this.getComputedBorderWidth(style.getTransitionablePropertyValue(64));
		}
		, measureOutline: function (style) {
			style.usedValues.outlineWidth = this.getComputedBorderWidth(style.getComputedOrInitialProperty(82));
		}
		, measureWidthAndHorizontalMargins: function (style, containingBlockData) {
			if (style.hasAutoWidth == true) return this.measureAutoWidth(style, containingBlockData); else return this.measureWidth(style, containingBlockData);
		}
		, measureAutoWidth: function (style, containingBlockData) {
			var usedWidth = 0.0;
			style.usedValues.marginLeft = this.getComputedMargin(style.getTransitionablePropertyValue(6), style.getTransitionablePropertyValue(7), containingBlockData.width, usedWidth, style.hasAutoWidth, style.usedValues.paddingRight + style.usedValues.paddingLeft + style.usedValues.borderLeftWidth + style.usedValues.borderRightWidth, true);
			style.usedValues.marginRight = this.getComputedMargin(style.getTransitionablePropertyValue(7), style.getTransitionablePropertyValue(6), containingBlockData.width, usedWidth, style.hasAutoWidth, style.usedValues.paddingRight + style.usedValues.paddingLeft + style.usedValues.borderLeftWidth + style.usedValues.borderRightWidth, true);
			var computedWidth = this.getComputedAutoWidth(style, containingBlockData);
			var constrainedWidth = this.constrainWidth(style, computedWidth);
			if (constrainedWidth != computedWidth) {
				if (style.hasAutoMarginLeft && style.hasAutoMarginRight) {
					var marginWidth = (containingBlockData.width - style.usedValues.paddingLeft - style.usedValues.paddingRight - style.usedValues.borderLeftWidth - style.usedValues.borderRightWidth - constrainedWidth) / 2;
					style.usedValues.marginLeft = marginWidth;
					style.usedValues.marginRight = marginWidth;
				}
			}
			return computedWidth;
		}
		, measureWidth: function (style, containingBlockData) {
			var computedWidth = this.constrainWidth(style, this.getComputedWidth(style, containingBlockData));
			style.usedValues.marginLeft = this.getComputedMargin(style.getTransitionablePropertyValue(6), style.getTransitionablePropertyValue(7), containingBlockData.width, computedWidth, style.hasAutoWidth, style.usedValues.paddingRight + style.usedValues.paddingLeft + style.usedValues.borderLeftWidth + style.usedValues.borderRightWidth, true);
			style.usedValues.marginRight = this.getComputedMargin(style.getTransitionablePropertyValue(7), style.getTransitionablePropertyValue(6), containingBlockData.width, computedWidth, style.hasAutoWidth, style.usedValues.paddingRight + style.usedValues.paddingLeft + style.usedValues.borderLeftWidth + style.usedValues.borderRightWidth, true);
			return computedWidth;
		}
		, measureHeightAndVerticalMargins: function (style, containingBlockData) {
			if (style.hasAutoHeight == true) return this.measureAutoHeight(style, containingBlockData); else return this.measureHeight(style, containingBlockData);
		}
		, measureAutoHeight: function (style, containingBlockData) {
			var computedHeight = this.getComputedAutoHeight(style, containingBlockData);
			style.usedValues.marginTop = this.getComputedMargin(style.getTransitionablePropertyValue(8), style.getTransitionablePropertyValue(9), containingBlockData.height, computedHeight, style.hasAutoHeight, style.usedValues.paddingTop + style.usedValues.paddingBottom + style.usedValues.borderTopWidth + style.usedValues.borderBottomWidth, false);
			style.usedValues.marginBottom = this.getComputedMargin(style.getTransitionablePropertyValue(9), style.getTransitionablePropertyValue(8), containingBlockData.height, computedHeight, style.hasAutoHeight, style.usedValues.paddingTop + style.usedValues.paddingBottom + style.usedValues.borderTopWidth + style.usedValues.borderBottomWidth, false);
			return computedHeight;
		}
		, measureHeight: function (style, containingBlockData) {
			var computedHeight = this.constrainHeight(style, this.getComputedHeight(style, containingBlockData));
			style.usedValues.marginTop = this.getComputedMargin(style.getTransitionablePropertyValue(8), style.getTransitionablePropertyValue(9), containingBlockData.height, computedHeight, style.hasAutoHeight, style.usedValues.paddingTop + style.usedValues.paddingBottom + style.usedValues.borderTopWidth + style.usedValues.borderBottomWidth, false);
			style.usedValues.marginBottom = this.getComputedMargin(style.getTransitionablePropertyValue(9), style.getTransitionablePropertyValue(8), containingBlockData.height, computedHeight, style.hasAutoHeight, style.usedValues.paddingTop + style.usedValues.paddingBottom + style.usedValues.borderTopWidth + style.usedValues.borderBottomWidth, false);
			return computedHeight;
		}
		, getComputedWidth: function (style, containingBlockData) {
			return this.getComputedDimension(style.getTransitionablePropertyValue(15), containingBlockData.width, containingBlockData.isWidthAuto);
		}
		, getComputedAutoWidth: function (style, containingBlockData) {
			return containingBlockData.width - style.usedValues.paddingLeft - style.usedValues.paddingRight - style.usedValues.borderLeftWidth - style.usedValues.borderRightWidth - style.usedValues.marginLeft - style.usedValues.marginRight;
		}
		, getComputedHeight: function (style, containingBlockData) {
			return this.getComputedDimension(style.getTransitionablePropertyValue(16), containingBlockData.height, containingBlockData.isHeightAuto);
		}
		, getComputedAutoHeight: function (style, containingBlockData) {
			return 0;
		}
		, getComputedMarginLeft: function (style, computedWidth, containingBlockData) {
			return this.getComputedMargin(style.getTransitionablePropertyValue(6), style.getTransitionablePropertyValue(7), containingBlockData.width, computedWidth, style.hasAutoWidth, style.usedValues.paddingRight + style.usedValues.paddingLeft + style.usedValues.borderLeftWidth + style.usedValues.borderRightWidth, true);
		}
		, getComputedMarginRight: function (style, computedWidth, containingBlockData) {
			return this.getComputedMargin(style.getTransitionablePropertyValue(7), style.getTransitionablePropertyValue(6), containingBlockData.width, computedWidth, style.hasAutoWidth, style.usedValues.paddingRight + style.usedValues.paddingLeft + style.usedValues.borderLeftWidth + style.usedValues.borderRightWidth, true);
		}
		, getComputedMarginTop: function (style, computedHeight, containingBlockData) {
			return this.getComputedMargin(style.getTransitionablePropertyValue(8), style.getTransitionablePropertyValue(9), containingBlockData.height, computedHeight, style.hasAutoHeight, style.usedValues.paddingTop + style.usedValues.paddingBottom + style.usedValues.borderTopWidth + style.usedValues.borderBottomWidth, false);
		}
		, getComputedMarginBottom: function (style, computedHeight, containingBlockData) {
			return this.getComputedMargin(style.getTransitionablePropertyValue(9), style.getTransitionablePropertyValue(8), containingBlockData.height, computedHeight, style.hasAutoHeight, style.usedValues.paddingTop + style.usedValues.paddingBottom + style.usedValues.borderTopWidth + style.usedValues.borderBottomWidth, false);
		}
		, getComputedMargin: function (marginStyleValue, opositeMargin, containingHTMLElementDimension, computedDimension, isDimensionAuto, computedPaddingsAndBordersDimension, isHorizontalMargin) {
			var usedMargin = 0;
			switch (marginStyleValue[1]) {
				case 18:
					var value = marginStyleValue[2];
					usedMargin = value;
					break;
				case 2:
					var value1 = marginStyleValue[2];
					if (isDimensionAuto == true) usedMargin = 0.0; else usedMargin = containingHTMLElementDimension * (value1 * 0.01);
					break;
				case 4:
					var value2 = marginStyleValue[2];
					if (value2 != cocktail_core_css_CSSKeywordValue.AUTO) throw new js__$Boot_HaxeError("Illegal keyword value for margin style");
					usedMargin = this.getComputedAutoMargin(marginStyleValue, opositeMargin, containingHTMLElementDimension, computedDimension, isDimensionAuto, computedPaddingsAndBordersDimension, isHorizontalMargin);
					break;
				default:
					throw new js__$Boot_HaxeError("Illegal value for margin style");
			}
			return usedMargin;
		}
		, getComputedAutoMargin: function (marginStyleValue, opositeMargin, containingHTMLElementDimension, computedDimension, isDimensionAuto, computedPaddingsAndBordersDimension, isHorizontalMargin) {
			var computedMargin = 0;
			if (isHorizontalMargin == false || isDimensionAuto == true) computedMargin = 0.0; else switch (opositeMargin[1]) {
				case 4:
					var value = opositeMargin[2];
					if (value != cocktail_core_css_CSSKeywordValue.AUTO) throw new js__$Boot_HaxeError("Illegal keyword value for margin");
					computedMargin = (containingHTMLElementDimension - computedDimension - computedPaddingsAndBordersDimension) / 2;
					break;
				default:
					var opositeComputedMargin = this.getComputedMargin(opositeMargin, marginStyleValue, containingHTMLElementDimension, computedDimension, isDimensionAuto, computedPaddingsAndBordersDimension, isHorizontalMargin);
					computedMargin = containingHTMLElementDimension - computedDimension - computedPaddingsAndBordersDimension - opositeComputedMargin;
			}
			return computedMargin;
		}
		, getComputedConstrainedDimension: function (constrainedDimension, containingHTMLElementDimension, isContainingDimensionAuto, isMinConstraint) {
			if (isMinConstraint == null) isMinConstraint = false;
			var computedConstraintDimension = 0;
			switch (constrainedDimension[1]) {
				case 18:
					var value = constrainedDimension[2];
					computedConstraintDimension = value;
					break;
				case 2:
					var value1 = constrainedDimension[2];
					if (isContainingDimensionAuto == true) {
						if (isMinConstraint == true) computedConstraintDimension = 0; else computedConstraintDimension = 100000;
					} else computedConstraintDimension = containingHTMLElementDimension * (value1 * 0.01);
					break;
				case 4:
					var value2 = constrainedDimension[2];
					if (value2 != cocktail_core_css_CSSKeywordValue.NONE) throw new js__$Boot_HaxeError("Illegal keyword value for dimension constraints style");
					if (isMinConstraint == true) computedConstraintDimension = 0.0; else computedConstraintDimension = 100000;
					break;
				default:
					throw new js__$Boot_HaxeError("Illegal value for dimension constraints style");
			}
			return computedConstraintDimension;
		}
		, getComputedPositionOffset: function (positionOffsetStyleValue, containingHTMLElementDimension) {
			var computedPositionOffset = 0.0;
			switch (positionOffsetStyleValue[1]) {
				case 18:
					var value = positionOffsetStyleValue[2];
					computedPositionOffset = value;
					break;
				case 2:
					var value1 = positionOffsetStyleValue[2];
					computedPositionOffset = containingHTMLElementDimension * (value1 * 0.01);
					break;
				default:
			}
			return computedPositionOffset;
		}
		, getComputedDimension: function (dimensionStyleValue, containingHTMLElementDimension, isContainingDimensionAuto) {
			var computedDimensions;
			switch (dimensionStyleValue[1]) {
				case 18:
					var value = dimensionStyleValue[2];
					computedDimensions = value;
					break;
				case 2:
					var value1 = dimensionStyleValue[2];
					computedDimensions = containingHTMLElementDimension * (value1 * 0.01);
					break;
				case 4:
					var value2 = dimensionStyleValue[2];
					if (value2 == cocktail_core_css_CSSKeywordValue.AUTO) computedDimensions = 0; else throw new js__$Boot_HaxeError("Illegal keyword value for width or height");
					break;
				default:
					throw new js__$Boot_HaxeError("Illegal value for width or height");
			}
			return computedDimensions;
		}
		, getComputedPadding: function (paddingStyleValue, containingHTMLElementDimension) {
			var computedPaddingValue;
			switch (paddingStyleValue[1]) {
				case 18:
					var value = paddingStyleValue[2];
					computedPaddingValue = value;
					break;
				case 2:
					var value1 = paddingStyleValue[2];
					computedPaddingValue = containingHTMLElementDimension * (value1 * 0.01);
					break;
				default:
					throw new js__$Boot_HaxeError("Illegal value for padding");
			}
			return computedPaddingValue;
		}
		, getComputedBorderWidth: function (borderWidthStyleValue) {
			var computedBorderWidthValue;
			switch (borderWidthStyleValue[1]) {
				case 18:
					var value = borderWidthStyleValue[2];
					computedBorderWidthValue = value;
					break;
				default:
					throw new js__$Boot_HaxeError("illegal value for border width");
			}
			return computedBorderWidthValue;
		}
		, constrainWidth: function (style, usedWidth) {
			var usedValues = style.usedValues;
			if (style.hasMaxWidth == true) {
				if (usedWidth > usedValues.maxWidth) usedWidth = usedValues.maxWidth;
			}
			if (usedWidth < usedValues.minWidth) usedWidth = usedValues.minWidth;
			return usedWidth;
		}
		, constrainHeight: function (style, usedHeight) {
			var usedValues = style.usedValues;
			if (style.hasMaxHeight == true) {
				if (usedHeight > usedValues.maxHeight) usedHeight = usedValues.maxHeight;
			}
			if (usedHeight < usedValues.minHeight) usedHeight = usedValues.minHeight;
			return usedHeight;
		}
		, __class__: cocktail_core_boxmodel_BoxStylesComputer
	};
	var cocktail_core_boxmodel_BlockBoxStylesComputer = function () {
		cocktail_core_boxmodel_BoxStylesComputer.call(this);
	};
	$hxClasses["cocktail.core.boxmodel.BlockBoxStylesComputer"] = cocktail_core_boxmodel_BlockBoxStylesComputer;
	cocktail_core_boxmodel_BlockBoxStylesComputer.__name__ = ["cocktail", "core", "boxmodel", "BlockBoxStylesComputer"];
	cocktail_core_boxmodel_BlockBoxStylesComputer.__super__ = cocktail_core_boxmodel_BoxStylesComputer;
	cocktail_core_boxmodel_BlockBoxStylesComputer.prototype = $extend(cocktail_core_boxmodel_BoxStylesComputer.prototype, {
		__class__: cocktail_core_boxmodel_BlockBoxStylesComputer
	});
	var cocktail_core_boxmodel_EmbeddedBlockBoxStylesComputer = function () {
		cocktail_core_boxmodel_BoxStylesComputer.call(this);
	};
	$hxClasses["cocktail.core.boxmodel.EmbeddedBlockBoxStylesComputer"] = cocktail_core_boxmodel_EmbeddedBlockBoxStylesComputer;
	cocktail_core_boxmodel_EmbeddedBlockBoxStylesComputer.__name__ = ["cocktail", "core", "boxmodel", "EmbeddedBlockBoxStylesComputer"];
	cocktail_core_boxmodel_EmbeddedBlockBoxStylesComputer.__super__ = cocktail_core_boxmodel_BoxStylesComputer;
	cocktail_core_boxmodel_EmbeddedBlockBoxStylesComputer.prototype = $extend(cocktail_core_boxmodel_BoxStylesComputer.prototype, {
		measureDimensionsAndMargins: function (style, containingBlockData) {
			var usedValues = style.usedValues;
			var usedWidth = this.measureWidthAndHorizontalMargins(style, containingBlockData);
			var usedHeight = this.measureHeightAndVerticalMargins(style, containingBlockData);
			if (style.hasAutoWidth == true && style.hasAutoHeight == true) this.constrainDimensions(style, usedWidth, usedHeight); else {
				usedValues.width = this.constrainWidth(style, usedWidth);
				usedValues.height = this.constrainHeight(style, usedHeight);
			}
		}
		, constrainDimensions: function (style, usedWidth, usedHeight) {
			var usedValues = style.usedValues;
			var maxHeight = usedValues.maxHeight;
			var minHeight = usedValues.minHeight;
			var maxWidth = usedValues.maxWidth;
			var minWidth = usedValues.minWidth;
			var widthSuperiorToMaxWidth = false;
			if (style.hasMaxWidth == true) widthSuperiorToMaxWidth = usedWidth > maxWidth;
			var heightSuperiorToMaxHeight = false;
			if (style.hasMaxHeight == true) heightSuperiorToMaxHeight = usedHeight > maxHeight;
			var widthInferiorToMinWidth = usedWidth < minWidth;
			var heightInferiorToMinHeight = usedHeight < minHeight;
			if (widthSuperiorToMaxWidth == true) {
				if (heightSuperiorToMaxHeight == true) {
					if (maxWidth / usedWidth <= maxHeight / usedHeight) {
						if (minHeight > maxWidth * (usedHeight / usedWidth)) usedHeight = minHeight; else usedHeight = maxWidth * (usedHeight / usedWidth);
						usedWidth = maxWidth;
					}
				} else if (heightInferiorToMinHeight == true) {
					usedWidth = maxWidth;
					usedHeight = minHeight;
				} else {
					if (maxWidth * (usedHeight / usedWidth) > minHeight) usedHeight = maxWidth * (usedHeight / usedWidth); else usedHeight = minHeight;
					usedWidth = maxWidth;
				}
			} else if (widthInferiorToMinWidth == true) {
				if (heightInferiorToMinHeight == true) {
					if (minWidth / usedWidth <= minHeight / usedHeight) {
						if (maxWidth < minHeight * (usedWidth / usedHeight)) usedWidth = maxWidth; else usedWidth = minHeight * (usedWidth / usedHeight);
						usedHeight = minHeight;
					} else {
						if (maxHeight < minWidth * (usedHeight / usedWidth)) usedHeight = maxHeight; else usedHeight = minWidth * (usedHeight / usedWidth);
						usedWidth = minWidth;
					}
				} else if (heightSuperiorToMaxHeight == true) {
					usedWidth = minWidth;
					usedHeight = maxHeight;
				} else {
					if (minWidth * (usedHeight / usedWidth) < maxHeight) usedHeight = minWidth * (usedHeight / usedWidth); else usedHeight = maxHeight;
					usedWidth = minWidth;
				}
			} else if (heightSuperiorToMaxHeight == true) {
				if (maxHeight * (usedWidth / usedHeight) > minWidth) usedWidth = maxHeight * (usedWidth / usedHeight); else usedWidth = minWidth;
				usedHeight = maxHeight;
			} else if (heightInferiorToMinHeight == true) {
				if (minHeight * (usedWidth / usedHeight) < minHeight) usedWidth = minHeight * (usedWidth / usedHeight); else usedWidth = minHeight;
				usedHeight = minHeight;
			}
			usedValues.width = usedWidth;
			usedValues.height = usedHeight;
		}
		, measureAutoWidth: function (style, containingBlockData) {
			var usedValues = style.usedValues;
			var usedWidth = this.getComputedAutoWidth(style, containingBlockData);
			usedValues.marginLeft = this.getComputedMargin(style.getTransitionablePropertyValue(6), style.getTransitionablePropertyValue(7), containingBlockData.width, usedWidth, style.hasAutoWidth, style.usedValues.paddingRight + style.usedValues.paddingLeft + style.usedValues.borderLeftWidth + style.usedValues.borderRightWidth, true);
			usedValues.marginRight = this.getComputedMargin(style.getTransitionablePropertyValue(7), style.getTransitionablePropertyValue(6), containingBlockData.width, usedWidth, style.hasAutoWidth, style.usedValues.paddingRight + style.usedValues.paddingLeft + style.usedValues.borderLeftWidth + style.usedValues.borderRightWidth, true);
			return usedWidth;
		}
		, getComputedAutoWidth: function (style, containingBlockData) {
			var usedValues = style.usedValues;
			var usedWidth = 0.0;
			var embeddedHTMLElement = style.htmlElement;
			if (embeddedHTMLElement.getAttributeNode("width") != null) usedWidth = embeddedHTMLElement.get_width(); else if (style.hasAutoHeight == true) {
				if (embeddedHTMLElement.get_intrinsicWidth() != null) usedWidth = embeddedHTMLElement.get_intrinsicWidth(); else if (embeddedHTMLElement.get_intrinsicHeight() != null && embeddedHTMLElement.get_intrinsicRatio() != null) usedWidth = embeddedHTMLElement.get_intrinsicHeight() * embeddedHTMLElement.get_intrinsicRatio(); else if (embeddedHTMLElement.get_intrinsicRatio() != null) {
					if (containingBlockData.isWidthAuto == false) usedWidth = containingBlockData.width - usedValues.marginLeft - usedValues.marginRight - usedValues.paddingLeft - usedValues.paddingRight - usedValues.borderLeftWidth - usedValues.borderRightWidth; else usedWidth = 0.0;
				}
			} else {
				var usedHeight = this.constrainHeight(style, this.getComputedDimension(style.getTransitionablePropertyValue(16), containingBlockData.height, containingBlockData.isHeightAuto));
				if (embeddedHTMLElement.get_intrinsicRatio() != null) usedWidth = usedHeight / embeddedHTMLElement.get_intrinsicRatio(); else if (embeddedHTMLElement.get_intrinsicWidth() != null) usedWidth = embeddedHTMLElement.get_intrinsicWidth(); else usedWidth = 300;
			}
			return usedWidth;
		}
		, getComputedAutoHeight: function (style, containingBlockData) {
			var usedValues = style.usedValues;
			var usedHeight = 0.0;
			var embeddedHTMLElement = style.htmlElement;
			if (embeddedHTMLElement.getAttributeNode("height") != null) usedHeight = embeddedHTMLElement.get_height(); else if (style.hasAutoWidth == true) {
				if (embeddedHTMLElement.get_intrinsicHeight() != null) usedHeight = embeddedHTMLElement.get_intrinsicHeight(); else if (embeddedHTMLElement.get_intrinsicWidth() != null && embeddedHTMLElement.get_intrinsicRatio() != null) usedHeight = embeddedHTMLElement.get_intrinsicWidth() * embeddedHTMLElement.get_intrinsicRatio(); else if (embeddedHTMLElement.get_intrinsicRatio() != null) {
				}
			} else if (embeddedHTMLElement.get_intrinsicRatio() != null) {
				var usedWidth = this.constrainWidth(style, this.getComputedDimension(style.getTransitionablePropertyValue(15), containingBlockData.width, containingBlockData.isWidthAuto));
				usedHeight = usedWidth * embeddedHTMLElement.get_intrinsicRatio();
			} else if (embeddedHTMLElement.get_intrinsicHeight() != null) usedHeight = embeddedHTMLElement.get_intrinsicHeight(); else usedHeight = 150;
			return usedHeight;
		}
		, getComputedAutoMargin: function (marginStyleValue, opositeMargin, containingHTMLElementDimension, computedDimension, isDimensionAuto, computedPaddingsAndBordersDimension, isHorizontalMargin) {
			var usedMargin;
			if (isHorizontalMargin == false) usedMargin = 0.0; else usedMargin = cocktail_core_boxmodel_BoxStylesComputer.prototype.getComputedAutoMargin.call(this, marginStyleValue, opositeMargin, containingHTMLElementDimension, computedDimension, false, computedPaddingsAndBordersDimension, isHorizontalMargin);
			return usedMargin;
		}
		, __class__: cocktail_core_boxmodel_EmbeddedBlockBoxStylesComputer
	});
	var cocktail_core_boxmodel_EmbeddedInlineBoxStylesComputer = function () {
		cocktail_core_boxmodel_EmbeddedBlockBoxStylesComputer.call(this);
	};
	$hxClasses["cocktail.core.boxmodel.EmbeddedInlineBoxStylesComputer"] = cocktail_core_boxmodel_EmbeddedInlineBoxStylesComputer;
	cocktail_core_boxmodel_EmbeddedInlineBoxStylesComputer.__name__ = ["cocktail", "core", "boxmodel", "EmbeddedInlineBoxStylesComputer"];
	cocktail_core_boxmodel_EmbeddedInlineBoxStylesComputer.__super__ = cocktail_core_boxmodel_EmbeddedBlockBoxStylesComputer;
	cocktail_core_boxmodel_EmbeddedInlineBoxStylesComputer.prototype = $extend(cocktail_core_boxmodel_EmbeddedBlockBoxStylesComputer.prototype, {
		getComputedAutoMargin: function (marginStyleValue, opositeMargin, containingHTMLElementDimension, computedDimension, isDimensionAuto, computedPaddingsAndBordersDimension, isHorizontalMargin) {
			return 0.0;
		}
		, __class__: cocktail_core_boxmodel_EmbeddedInlineBoxStylesComputer
	});
	var cocktail_core_boxmodel_EmbeddedFloatBoxStylesComputer = function () {
		cocktail_core_boxmodel_EmbeddedInlineBoxStylesComputer.call(this);
	};
	$hxClasses["cocktail.core.boxmodel.EmbeddedFloatBoxStylesComputer"] = cocktail_core_boxmodel_EmbeddedFloatBoxStylesComputer;
	cocktail_core_boxmodel_EmbeddedFloatBoxStylesComputer.__name__ = ["cocktail", "core", "boxmodel", "EmbeddedFloatBoxStylesComputer"];
	cocktail_core_boxmodel_EmbeddedFloatBoxStylesComputer.__super__ = cocktail_core_boxmodel_EmbeddedInlineBoxStylesComputer;
	cocktail_core_boxmodel_EmbeddedFloatBoxStylesComputer.prototype = $extend(cocktail_core_boxmodel_EmbeddedInlineBoxStylesComputer.prototype, {
		__class__: cocktail_core_boxmodel_EmbeddedFloatBoxStylesComputer
	});
	var cocktail_core_boxmodel_EmbeddedInlineBlockBoxStylesComputer = function () {
		cocktail_core_boxmodel_EmbeddedInlineBoxStylesComputer.call(this);
	};
	$hxClasses["cocktail.core.boxmodel.EmbeddedInlineBlockBoxStylesComputer"] = cocktail_core_boxmodel_EmbeddedInlineBlockBoxStylesComputer;
	cocktail_core_boxmodel_EmbeddedInlineBlockBoxStylesComputer.__name__ = ["cocktail", "core", "boxmodel", "EmbeddedInlineBlockBoxStylesComputer"];
	cocktail_core_boxmodel_EmbeddedInlineBlockBoxStylesComputer.__super__ = cocktail_core_boxmodel_EmbeddedInlineBoxStylesComputer;
	cocktail_core_boxmodel_EmbeddedInlineBlockBoxStylesComputer.prototype = $extend(cocktail_core_boxmodel_EmbeddedInlineBoxStylesComputer.prototype, {
		__class__: cocktail_core_boxmodel_EmbeddedInlineBlockBoxStylesComputer
	});
	var cocktail_core_boxmodel_EmbeddedPositionedBoxStylesComputer = function () {
		cocktail_core_boxmodel_EmbeddedBlockBoxStylesComputer.call(this);
	};
	$hxClasses["cocktail.core.boxmodel.EmbeddedPositionedBoxStylesComputer"] = cocktail_core_boxmodel_EmbeddedPositionedBoxStylesComputer;
	cocktail_core_boxmodel_EmbeddedPositionedBoxStylesComputer.__name__ = ["cocktail", "core", "boxmodel", "EmbeddedPositionedBoxStylesComputer"];
	cocktail_core_boxmodel_EmbeddedPositionedBoxStylesComputer.__super__ = cocktail_core_boxmodel_EmbeddedBlockBoxStylesComputer;
	cocktail_core_boxmodel_EmbeddedPositionedBoxStylesComputer.prototype = $extend(cocktail_core_boxmodel_EmbeddedBlockBoxStylesComputer.prototype, {
		measurePositionOffsets: function (style, containingBlockData) {
			this.measureHorizontalPositionOffsets(style, containingBlockData);
			this.measureVerticalPositionOffsets(style, containingBlockData);
		}
		, measureHorizontalPositionOffsets: function (style, containingBlockData) {
			var usedValues = style.usedValues;
			if (style.hasAutoLeft == true || style.hasAutoRight == true) {
				if (style.hasAutoMarginLeft == true) usedValues.marginLeft = 0;
				if (style.hasAutoMarginRight == true) usedValues.marginRight = 0;
				if (style.hasAutoLeft == true && style.hasAutoRight == true) {
					usedValues.left = this.getComputedStaticLeft(style, containingBlockData);
					usedValues.right = containingBlockData.width - usedValues.width - usedValues.marginLeft - usedValues.marginRight - usedValues.paddingLeft - usedValues.paddingRight - usedValues.borderLeftWidth - usedValues.borderRightWidth - usedValues.left;
				} else if (style.hasAutoLeft == true) {
					usedValues.right = this.getComputedPositionOffset(style.getTransitionablePropertyValue(23), containingBlockData.width);
					usedValues.left = containingBlockData.width - usedValues.width - usedValues.marginLeft - usedValues.marginRight - usedValues.right - usedValues.paddingLeft - usedValues.paddingRight - usedValues.borderLeftWidth - usedValues.borderRightWidth;
				} else if (style.hasAutoRight == true) {
					usedValues.left = this.getComputedPositionOffset(style.getTransitionablePropertyValue(22), containingBlockData.width);
					usedValues.right = containingBlockData.width - usedValues.width - usedValues.marginLeft - usedValues.marginRight - usedValues.left - usedValues.paddingLeft - usedValues.paddingRight - usedValues.borderLeftWidth - usedValues.borderRightWidth;
				}
			} else {
				usedValues.left = this.getComputedPositionOffset(style.getTransitionablePropertyValue(22), containingBlockData.width);
				usedValues.right = this.getComputedPositionOffset(style.getTransitionablePropertyValue(23), containingBlockData.width);
				if (style.hasAutoMarginLeft == true && style.hasAutoMarginRight == true) {
					var margin = (containingBlockData.width - usedValues.left - usedValues.right - usedValues.paddingLeft - usedValues.paddingRight - usedValues.borderLeftWidth - usedValues.borderRightWidth) / 2;
					var usedMargin = (containingBlockData.width - usedValues.width - usedValues.paddingLeft - usedValues.paddingRight - usedValues.borderLeftWidth - usedValues.borderRightWidth - usedValues.left - usedValues.right) / 2;
					if (usedMargin >= 0) {
						usedValues.marginLeft = usedMargin;
						usedValues.marginRight = usedMargin;
					} else {
						usedValues.marginLeft = 0;
						usedValues.marginRight = containingBlockData.width - usedValues.width - usedValues.paddingLeft - usedValues.paddingRight - usedValues.borderLeftWidth - usedValues.borderRightWidth - usedValues.left - usedValues.right;
					}
					usedValues.marginLeft = 0;
				} else if (style.hasAutoMarginLeft == true) usedValues.marginLeft = containingBlockData.width - usedValues.width - usedValues.paddingLeft - usedValues.paddingRight - usedValues.borderLeftWidth - usedValues.borderRightWidth - usedValues.left - usedValues.right - usedValues.marginRight; else if (style.hasAutoMarginRight == true) usedValues.marginRight = containingBlockData.width - usedValues.width - usedValues.paddingLeft - usedValues.paddingRight - usedValues.borderLeftWidth - usedValues.borderRightWidth - usedValues.left - usedValues.right - usedValues.marginLeft;
			}
		}
		, measureVerticalPositionOffsets: function (style, containingBlockData) {
			var usedValues = style.usedValues;
			if (style.hasAutoTop == true || style.hasAutoBottom == true) {
				if (style.hasAutoMarginTop == true) usedValues.marginTop = 0;
				if (style.hasAutoMarginBottom == true) usedValues.marginBottom = 0;
				if (style.hasAutoTop == true && style.hasAutoBottom == true) {
					usedValues.top = this.getComputedStaticTop(style, containingBlockData);
					usedValues.bottom = containingBlockData.height - usedValues.height - usedValues.marginTop - usedValues.marginBottom - usedValues.paddingTop - usedValues.paddingBottom - usedValues.borderTopWidth - usedValues.borderBottomWidth - usedValues.top;
				} else if (style.hasAutoTop == true) {
					usedValues.bottom = this.getComputedPositionOffset(style.getTransitionablePropertyValue(24), containingBlockData.height);
					usedValues.top = containingBlockData.height - usedValues.height - usedValues.marginTop - usedValues.marginBottom - usedValues.bottom - usedValues.paddingTop - usedValues.paddingBottom - usedValues.borderTopWidth - usedValues.borderBottomWidth;
				} else if (style.hasAutoBottom == true) {
					usedValues.top = this.getComputedPositionOffset(style.getTransitionablePropertyValue(21), containingBlockData.height);
					usedValues.bottom = containingBlockData.height - usedValues.height - usedValues.marginTop - usedValues.marginBottom - usedValues.top - usedValues.paddingTop - usedValues.paddingBottom - usedValues.borderTopWidth - usedValues.borderBottomWidth;
				} else {
					usedValues.top = this.getComputedPositionOffset(style.getTransitionablePropertyValue(21), containingBlockData.height);
					usedValues.bottom = this.getComputedPositionOffset(style.getTransitionablePropertyValue(24), containingBlockData.height);
				}
			} else {
				usedValues.top = this.getComputedPositionOffset(style.getTransitionablePropertyValue(21), containingBlockData.height);
				usedValues.bottom = this.getComputedPositionOffset(style.getTransitionablePropertyValue(24), containingBlockData.height);
				if (style.hasAutoMarginTop == true && style.hasAutoMarginBottom == true) {
					var margin = (containingBlockData.height - usedValues.top - usedValues.bottom - usedValues.paddingTop - usedValues.paddingBottom - usedValues.borderTopWidth - usedValues.borderBottomWidth) / 2;
					var usedMargin = (containingBlockData.height - usedValues.height - usedValues.paddingTop - usedValues.paddingBottom - usedValues.borderTopWidth - usedValues.borderBottomWidth - usedValues.top - usedValues.bottom) / 2;
					if (usedMargin >= 0) {
						usedValues.marginTop = usedMargin;
						usedValues.marginBottom = usedMargin;
					} else {
						usedValues.marginTop = 0;
						usedValues.marginBottom = containingBlockData.height - usedValues.height - usedValues.paddingTop - usedValues.paddingBottom - usedValues.borderTopWidth - usedValues.borderBottomWidth - usedValues.top - usedValues.bottom;
					}
				} else if (style.hasAutoMarginTop == true) usedValues.marginTop = containingBlockData.height - usedValues.height - usedValues.paddingTop - usedValues.paddingBottom - usedValues.borderTopWidth - usedValues.borderBottomWidth - usedValues.top - usedValues.bottom - usedValues.marginBottom; else if (style.hasAutoMarginBottom == true) usedValues.marginBottom = containingBlockData.height - usedValues.height - usedValues.paddingTop - usedValues.paddingBottom - usedValues.borderTopWidth - usedValues.borderBottomWidth - usedValues.top - usedValues.bottom - usedValues.marginTop;
			}
		}
		, getComputedStaticLeft: function (style, containingBlockData) {
			return style.usedValues.marginLeft;
		}
		, getComputedStaticTop: function (style, containingBlockData) {
			return style.usedValues.marginTop;
		}
		, __class__: cocktail_core_boxmodel_EmbeddedPositionedBoxStylesComputer
	});
	var cocktail_core_boxmodel_InlineBlockBoxStylesComputer = function () {
		cocktail_core_boxmodel_BoxStylesComputer.call(this);
	};
	$hxClasses["cocktail.core.boxmodel.InlineBlockBoxStylesComputer"] = cocktail_core_boxmodel_InlineBlockBoxStylesComputer;
	cocktail_core_boxmodel_InlineBlockBoxStylesComputer.__name__ = ["cocktail", "core", "boxmodel", "InlineBlockBoxStylesComputer"];
	cocktail_core_boxmodel_InlineBlockBoxStylesComputer.__super__ = cocktail_core_boxmodel_BoxStylesComputer;
	cocktail_core_boxmodel_InlineBlockBoxStylesComputer.prototype = $extend(cocktail_core_boxmodel_BoxStylesComputer.prototype, {
		getComputedAutoMargin: function (marginStyleValue, opositeMargin, containingHTMLElementDimension, computedDimension, isDimensionAuto, computedPaddingsAndBordersDimension, isHorizontalMargin) {
			return 0.0;
		}
		, __class__: cocktail_core_boxmodel_InlineBlockBoxStylesComputer
	});
	var cocktail_core_boxmodel_FloatBoxStylesComputer = function () {
		cocktail_core_boxmodel_InlineBlockBoxStylesComputer.call(this);
	};
	$hxClasses["cocktail.core.boxmodel.FloatBoxStylesComputer"] = cocktail_core_boxmodel_FloatBoxStylesComputer;
	cocktail_core_boxmodel_FloatBoxStylesComputer.__name__ = ["cocktail", "core", "boxmodel", "FloatBoxStylesComputer"];
	cocktail_core_boxmodel_FloatBoxStylesComputer.__super__ = cocktail_core_boxmodel_InlineBlockBoxStylesComputer;
	cocktail_core_boxmodel_FloatBoxStylesComputer.prototype = $extend(cocktail_core_boxmodel_InlineBlockBoxStylesComputer.prototype, {
		getComputedAutoWidth: function (style, containingBlockData) {
			return 0.0;
		}
		, __class__: cocktail_core_boxmodel_FloatBoxStylesComputer
	});
	var cocktail_core_boxmodel_InLineBoxStylesComputer = function () {
		cocktail_core_boxmodel_BoxStylesComputer.call(this);
	};
	$hxClasses["cocktail.core.boxmodel.InLineBoxStylesComputer"] = cocktail_core_boxmodel_InLineBoxStylesComputer;
	cocktail_core_boxmodel_InLineBoxStylesComputer.__name__ = ["cocktail", "core", "boxmodel", "InLineBoxStylesComputer"];
	cocktail_core_boxmodel_InLineBoxStylesComputer.__super__ = cocktail_core_boxmodel_BoxStylesComputer;
	cocktail_core_boxmodel_InLineBoxStylesComputer.prototype = $extend(cocktail_core_boxmodel_BoxStylesComputer.prototype, {
		measureAutoHeight: function (style, containingBlockData) {
			var computedHeight = this.getComputedAutoHeight(style, containingBlockData);
			style.usedValues.marginTop = 0.0;
			style.usedValues.marginBottom = 0.0;
			return computedHeight;
		}
		, measureHeight: function (style, containingBlockData) {
			var computedHeight = this.getComputedHeight(style, containingBlockData);
			style.usedValues.marginTop = 0.0;
			style.usedValues.marginBottom = 0.0;
			return computedHeight;
		}
		, getComputedAutoMargin: function (marginStyleValue, opositeMargin, containingHTMLElementDimension, computedDimension, isDimensionAuto, computedPaddingsAndBordersDimension, isHorizontalMargin) {
			return 0.0;
		}
		, getComputedWidth: function (style, containingBlockData) {
			return 0.0;
		}
		, getComputedHeight: function (style, containingBlockData) {
			return 0.0;
		}
		, __class__: cocktail_core_boxmodel_InLineBoxStylesComputer
	});
	var cocktail_core_boxmodel_PositionedBoxStylesComputer = function () {
		cocktail_core_boxmodel_BoxStylesComputer.call(this);
	};
	$hxClasses["cocktail.core.boxmodel.PositionedBoxStylesComputer"] = cocktail_core_boxmodel_PositionedBoxStylesComputer;
	cocktail_core_boxmodel_PositionedBoxStylesComputer.__name__ = ["cocktail", "core", "boxmodel", "PositionedBoxStylesComputer"];
	cocktail_core_boxmodel_PositionedBoxStylesComputer.__super__ = cocktail_core_boxmodel_BoxStylesComputer;
	cocktail_core_boxmodel_PositionedBoxStylesComputer.prototype = $extend(cocktail_core_boxmodel_BoxStylesComputer.prototype, {
		measurePositionOffsets: function (style, containingBlockData) {
		}
		, measureAutoWidth: function (style, containingBlockData) {
			var usedValues = style.usedValues;
			var usedWidth = 0.0;
			if (style.hasAutoMarginLeft == true) usedValues.marginLeft = 0; else usedValues.marginLeft = this.getComputedMargin(style.getTransitionablePropertyValue(6), style.getTransitionablePropertyValue(7), containingBlockData.width, usedWidth, style.hasAutoWidth, style.usedValues.paddingRight + style.usedValues.paddingLeft + style.usedValues.borderLeftWidth + style.usedValues.borderRightWidth, true);
			if (style.hasAutoMarginRight == true) usedValues.marginRight = 0; else usedValues.marginRight = this.getComputedMargin(style.getTransitionablePropertyValue(7), style.getTransitionablePropertyValue(6), containingBlockData.width, usedWidth, style.hasAutoWidth, style.usedValues.paddingRight + style.usedValues.paddingLeft + style.usedValues.borderLeftWidth + style.usedValues.borderRightWidth, true);
			if (style.hasAutoLeft == false && style.hasAutoRight == false) {
				usedValues.left = this.getComputedPositionOffset(style.getTransitionablePropertyValue(22), containingBlockData.width);
				usedValues.right = this.getComputedPositionOffset(style.getTransitionablePropertyValue(23), containingBlockData.width);
				usedWidth = containingBlockData.width - usedValues.marginLeft - usedValues.left - usedValues.right - usedValues.marginRight - usedValues.paddingLeft - usedValues.paddingRight - usedValues.borderLeftWidth - usedValues.borderRightWidth;
			} else {
				if (style.hasAutoLeft == true) usedValues.right = this.getComputedPositionOffset(style.getTransitionablePropertyValue(23), containingBlockData.width); else if (style.hasAutoRight == true) usedValues.left = this.getComputedPositionOffset(style.getTransitionablePropertyValue(22), containingBlockData.width);
				usedWidth = 0;
			}
			return usedWidth;
		}
		, measureWidth: function (style, containingBlockData) {
			var usedValues = style.usedValues;
			var usedWidth = this.getComputedWidth(style, containingBlockData);
			if (style.hasAutoLeft == false && style.hasAutoRight == false) {
				usedValues.left = this.getComputedPositionOffset(style.getTransitionablePropertyValue(22), containingBlockData.width);
				usedValues.right = this.getComputedPositionOffset(style.getTransitionablePropertyValue(23), containingBlockData.width);
				if (style.hasAutoMarginLeft == true && style.hasAutoMarginRight == true) {
					var usedMargin = (containingBlockData.width - usedWidth - usedValues.paddingLeft - usedValues.paddingRight - usedValues.borderLeftWidth - usedValues.borderRightWidth - usedValues.left - usedValues.right) / 2;
					if (usedMargin >= 0) {
						usedValues.marginLeft = usedMargin;
						usedValues.marginRight = usedMargin;
					} else {
						usedValues.marginLeft = 0;
						usedValues.marginRight = containingBlockData.width - usedWidth - usedValues.paddingLeft - usedValues.paddingRight - usedValues.borderLeftWidth - usedValues.borderRightWidth - usedValues.left - usedValues.right;
					}
				} else if (style.hasAutoMarginLeft == true) {
					usedValues.marginRight = this.getComputedMargin(style.getTransitionablePropertyValue(7), style.getTransitionablePropertyValue(6), containingBlockData.width, usedWidth, style.hasAutoWidth, style.usedValues.paddingRight + style.usedValues.paddingLeft + style.usedValues.borderLeftWidth + style.usedValues.borderRightWidth, true);
					usedValues.marginLeft = containingBlockData.width - usedWidth - usedValues.paddingLeft - usedValues.paddingRight - usedValues.borderLeftWidth - usedValues.borderRightWidth - usedValues.left - usedValues.right - usedValues.marginRight;
				} else if (style.hasAutoMarginRight == true) {
					usedValues.marginLeft = this.getComputedMargin(style.getTransitionablePropertyValue(6), style.getTransitionablePropertyValue(7), containingBlockData.width, usedWidth, style.hasAutoWidth, style.usedValues.paddingRight + style.usedValues.paddingLeft + style.usedValues.borderLeftWidth + style.usedValues.borderRightWidth, true);
					usedValues.marginRight = containingBlockData.width - usedWidth - usedValues.paddingLeft - usedValues.paddingRight - usedValues.borderLeftWidth - usedValues.borderRightWidth - usedValues.left - usedValues.right - usedValues.marginLeft;
				} else {
					usedValues.marginLeft = this.getComputedMargin(style.getTransitionablePropertyValue(6), style.getTransitionablePropertyValue(7), containingBlockData.width, usedWidth, style.hasAutoWidth, style.usedValues.paddingRight + style.usedValues.paddingLeft + style.usedValues.borderLeftWidth + style.usedValues.borderRightWidth, true);
					usedValues.marginRight = this.getComputedMargin(style.getTransitionablePropertyValue(7), style.getTransitionablePropertyValue(6), containingBlockData.width, usedWidth, style.hasAutoWidth, style.usedValues.paddingRight + style.usedValues.paddingLeft + style.usedValues.borderLeftWidth + style.usedValues.borderRightWidth, true);
				}
			} else {
				if (style.hasAutoMarginLeft == true) usedValues.marginLeft = 0; else usedValues.marginLeft = this.getComputedMargin(style.getTransitionablePropertyValue(6), style.getTransitionablePropertyValue(7), containingBlockData.width, usedWidth, style.hasAutoWidth, style.usedValues.paddingRight + style.usedValues.paddingLeft + style.usedValues.borderLeftWidth + style.usedValues.borderRightWidth, true);
				if (style.hasAutoMarginRight == true) usedValues.marginRight = 0; else usedValues.marginRight = this.getComputedMargin(style.getTransitionablePropertyValue(7), style.getTransitionablePropertyValue(6), containingBlockData.width, usedWidth, style.hasAutoWidth, style.usedValues.paddingRight + style.usedValues.paddingLeft + style.usedValues.borderLeftWidth + style.usedValues.borderRightWidth, true);
				if (style.hasAutoLeft == true && style.hasAutoRight == true) {
					usedValues.left = this.getComputedStaticLeft(style, containingBlockData);
					usedValues.right = containingBlockData.width - usedValues.marginLeft - usedValues.marginRight - usedWidth - usedValues.paddingLeft - usedValues.paddingRight - usedValues.borderLeftWidth - usedValues.borderRightWidth - usedValues.left;
				} else if (style.hasAutoLeft == true) {
					usedValues.right = this.getComputedPositionOffset(style.getTransitionablePropertyValue(23), containingBlockData.width);
					usedValues.left = containingBlockData.width - usedValues.marginLeft - usedValues.marginRight - usedWidth - usedValues.paddingLeft - usedValues.paddingRight - usedValues.borderLeftWidth - usedValues.borderRightWidth - usedValues.right;
				} else if (style.hasAutoRight == true) {
					usedValues.left = this.getComputedPositionOffset(style.getTransitionablePropertyValue(22), containingBlockData.width);
					usedValues.right = containingBlockData.width - usedValues.marginLeft - usedValues.marginRight - usedWidth - usedValues.paddingLeft - usedValues.paddingRight - usedValues.borderLeftWidth - usedValues.borderRightWidth - usedValues.left;
				}
			}
			return usedWidth;
		}
		, measureAutoHeight: function (style, containingBlockData) {
			var usedValues = style.usedValues;
			var usedHeight = 0.0;
			if (style.hasAutoMarginTop == true) usedValues.marginTop = 0; else usedValues.marginTop = this.getComputedMargin(style.getTransitionablePropertyValue(8), style.getTransitionablePropertyValue(9), containingBlockData.height, usedHeight, style.hasAutoHeight, style.usedValues.paddingTop + style.usedValues.paddingBottom + style.usedValues.borderTopWidth + style.usedValues.borderBottomWidth, false);
			if (style.hasAutoMarginBottom == true) usedValues.marginBottom = 0; else usedValues.marginBottom = this.getComputedMargin(style.getTransitionablePropertyValue(9), style.getTransitionablePropertyValue(8), containingBlockData.height, usedHeight, style.hasAutoHeight, style.usedValues.paddingTop + style.usedValues.paddingBottom + style.usedValues.borderTopWidth + style.usedValues.borderBottomWidth, false);
			if (style.hasAutoTop == false && style.hasAutoBottom == false) {
				usedValues.top = this.getComputedPositionOffset(style.getTransitionablePropertyValue(21), containingBlockData.height);
				usedValues.bottom = this.getComputedPositionOffset(style.getTransitionablePropertyValue(24), containingBlockData.height);
				usedHeight = containingBlockData.height - usedValues.marginTop - usedValues.top - usedValues.bottom - usedValues.marginBottom - usedValues.paddingTop - usedValues.paddingBottom - usedValues.borderTopWidth - usedValues.borderBottomWidth;
			} else if (style.hasAutoBottom == true) {
				usedValues.top = this.getComputedPositionOffset(style.getTransitionablePropertyValue(21), containingBlockData.height);
				usedValues.bottom = containingBlockData.height - usedValues.marginTop - usedValues.marginBottom - usedValues.height - usedValues.paddingTop - usedValues.paddingBottom - usedValues.borderTopWidth - usedValues.borderBottomWidth - usedValues.top;
			} else if (style.hasAutoTop == true) {
				usedValues.bottom = this.getComputedPositionOffset(style.getTransitionablePropertyValue(24), containingBlockData.height);
				usedValues.top = containingBlockData.height - usedValues.marginTop - usedValues.marginBottom - usedValues.height - usedValues.paddingTop - usedValues.paddingBottom - usedValues.borderTopWidth - usedValues.borderBottomWidth - usedValues.bottom;
			}
			return usedHeight;
		}
		, measureHeight: function (style, containingBlockData) {
			var usedValues = style.usedValues;
			var usedHeight = this.getComputedHeight(style, containingBlockData);
			if (style.hasAutoTop == false && style.hasAutoBottom == false) {
				usedValues.top = this.getComputedPositionOffset(style.getTransitionablePropertyValue(21), containingBlockData.height);
				usedValues.bottom = this.getComputedPositionOffset(style.getTransitionablePropertyValue(24), containingBlockData.height);
				if (style.hasAutoMarginTop == true && style.hasAutoMarginBottom == true) {
					var usedMargin = (containingBlockData.height - usedValues.height - usedValues.paddingTop - usedValues.paddingBottom - usedValues.borderTopWidth - usedValues.borderBottomWidth - usedValues.top - usedValues.bottom) / 2;
					if (usedMargin >= 0) {
						usedValues.marginTop = usedMargin;
						usedValues.marginBottom = usedMargin;
					} else {
						usedValues.marginBottom = 0;
						usedValues.marginTop = containingBlockData.height - usedValues.height - usedValues.paddingTop - usedValues.paddingBottom - usedValues.borderTopWidth - usedValues.borderBottomWidth - usedValues.bottom - usedValues.top;
					}
				} else if (style.hasAutoMarginTop == true) {
					usedValues.marginBottom = this.getComputedMargin(style.getTransitionablePropertyValue(9), style.getTransitionablePropertyValue(8), containingBlockData.height, usedHeight, style.hasAutoHeight, style.usedValues.paddingTop + style.usedValues.paddingBottom + style.usedValues.borderTopWidth + style.usedValues.borderBottomWidth, false);
					usedValues.marginTop = containingBlockData.height - usedValues.height - usedValues.paddingTop - usedValues.paddingBottom - usedValues.borderTopWidth - usedValues.borderBottomWidth - usedValues.top - usedValues.bottom - usedValues.marginBottom;
				} else if (style.hasAutoMarginBottom == true) {
					usedValues.marginTop = this.getComputedMargin(style.getTransitionablePropertyValue(8), style.getTransitionablePropertyValue(9), containingBlockData.height, usedHeight, style.hasAutoHeight, style.usedValues.paddingTop + style.usedValues.paddingBottom + style.usedValues.borderTopWidth + style.usedValues.borderBottomWidth, false);
					usedValues.marginBottom = containingBlockData.height - usedValues.height - usedValues.paddingTop - usedValues.paddingBottom - usedValues.borderTopWidth - usedValues.borderBottomWidth - usedValues.top - usedValues.bottom - usedValues.marginTop;
				} else {
					usedValues.marginTop = this.getComputedMargin(style.getTransitionablePropertyValue(8), style.getTransitionablePropertyValue(9), containingBlockData.height, usedHeight, style.hasAutoHeight, style.usedValues.paddingTop + style.usedValues.paddingBottom + style.usedValues.borderTopWidth + style.usedValues.borderBottomWidth, false);
					usedValues.marginBottom = this.getComputedMargin(style.getTransitionablePropertyValue(9), style.getTransitionablePropertyValue(8), containingBlockData.height, usedHeight, style.hasAutoHeight, style.usedValues.paddingTop + style.usedValues.paddingBottom + style.usedValues.borderTopWidth + style.usedValues.borderBottomWidth, false);
				}
			} else {
				if (style.hasAutoMarginTop == true) usedValues.marginTop = 0; else usedValues.marginTop = this.getComputedMargin(style.getTransitionablePropertyValue(8), style.getTransitionablePropertyValue(9), containingBlockData.height, usedHeight, style.hasAutoHeight, style.usedValues.paddingTop + style.usedValues.paddingBottom + style.usedValues.borderTopWidth + style.usedValues.borderBottomWidth, false);
				if (style.hasAutoMarginBottom == true) usedValues.marginBottom = 0; else usedValues.marginBottom = this.getComputedMargin(style.getTransitionablePropertyValue(9), style.getTransitionablePropertyValue(8), containingBlockData.height, usedHeight, style.hasAutoHeight, style.usedValues.paddingTop + style.usedValues.paddingBottom + style.usedValues.borderTopWidth + style.usedValues.borderBottomWidth, false);
				if (style.hasAutoTop == true && style.hasAutoBottom == true) {
					usedValues.top = this.getComputedStaticTop(style, containingBlockData);
					usedValues.bottom = containingBlockData.height - usedValues.marginTop - usedValues.marginBottom - usedValues.height - usedValues.paddingTop - usedValues.paddingBottom - usedValues.borderTopWidth - usedValues.borderBottomWidth - usedValues.top;
				} else if (style.hasAutoBottom == true) {
					usedValues.top = this.getComputedPositionOffset(style.getTransitionablePropertyValue(21), containingBlockData.height);
					usedValues.bottom = containingBlockData.height - usedValues.marginTop - usedValues.marginBottom - usedValues.height - usedValues.paddingTop - usedValues.paddingBottom - usedValues.borderTopWidth - usedValues.borderBottomWidth - usedValues.top;
				} else if (style.hasAutoTop == true) {
					usedValues.bottom = this.getComputedPositionOffset(style.getTransitionablePropertyValue(24), containingBlockData.height);
					usedValues.top = containingBlockData.height - usedValues.marginTop - usedValues.marginBottom - usedValues.height - usedValues.paddingTop - usedValues.paddingBottom - usedValues.borderTopWidth - usedValues.borderBottomWidth - usedValues.bottom;
				}
			}
			return usedHeight;
		}
		, getComputedStaticLeft: function (style, containingBlockData) {
			return style.usedValues.marginLeft;
		}
		, getComputedStaticTop: function (style, containingBlockData) {
			return style.usedValues.marginTop;
		}
		, __class__: cocktail_core_boxmodel_PositionedBoxStylesComputer
	});
	var cocktail_core_event_EventTarget = function () {
	};
	$hxClasses["cocktail.core.event.EventTarget"] = cocktail_core_event_EventTarget;
	cocktail_core_event_EventTarget.__name__ = ["cocktail", "core", "event", "EventTarget"];
	cocktail_core_event_EventTarget.prototype = {
		dispatchEvent: function (evt) {
			evt.currentTarget = this;
			if (evt.dispatched == false) {
				evt.target = this;
				evt.dispatched = true;
				var targetAncestors = this.getTargetAncestors();
				evt.eventPhase = 1;
				targetAncestors.reverse();
				var length = targetAncestors.length;
				var _g = 0;
				while (_g < length) {
					var i = _g++;
					targetAncestors[i].dispatchEvent(evt);
					if (this.shouldStopEventPropagation(evt) == true) return this.endEventDispatching(evt);
				}
				evt.eventPhase = 2;
				this.dispatchEvent(evt);
				if (this.shouldStopEventPropagation(evt) == true) return this.endEventDispatching(evt);
				if (evt.bubbles == true) {
					evt.eventPhase = 3;
					targetAncestors.reverse();
					var length1 = targetAncestors.length;
					var _g1 = 0;
					while (_g1 < length1) {
						var i1 = _g1++;
						targetAncestors[i1].dispatchEvent(evt);
						if (this.shouldStopEventPropagation(evt) == true) return this.endEventDispatching(evt);
					}
					return this.endEventDispatching(evt);
				}
			} else if (this._registeredEventListeners != null) {
				var eventRegisteredForEventType = this._registeredEventListeners.get(evt.type);
				if (eventRegisteredForEventType != null) this.doDispatchEvent(eventRegisteredForEventType, evt);
			}
			return evt.defaultPrevented;
		}
		, addEventListener: function (type, listener, useCapture) {
			if (useCapture == null) useCapture = false;
			if (this._registeredEventListeners == null) this._registeredEventListeners = new haxe_ds_StringMap();
			if (this._registeredEventListeners.exists(type) == false) {
				var value = [];
				this._registeredEventListeners.set(type, value);
			}
			var eventListener = new cocktail_core_event_EventListener(type, listener, useCapture);
			this._registeredEventListeners.get(type).push(eventListener);
		}
		, removeEventListener: function (type, listener, useCapture) {
			if (useCapture == null) useCapture = false;
			if (this._registeredEventListeners == null) return;
			var registeredEventListenersForType = this._registeredEventListeners.get(type);
			if (registeredEventListenersForType != null) {
				var newEventListeners = [];
				var length = registeredEventListenersForType.length;
				var _g = 0;
				while (_g < length) {
					var i = _g++;
					var eventListener = registeredEventListenersForType[i];
					if (eventListener.eventType != type || eventListener.useCapture != useCapture || eventListener.listener != listener) newEventListeners.push(eventListener);
				}
				this._registeredEventListeners.set(type, newEventListeners);
			}
		}
		, doDispatchEvent: function (eventListeners, evt) {
			var length = eventListeners.length;
			var _g = 0;
			while (_g < length) {
				var i = _g++;
				var eventListener = eventListeners[i];
				if (evt.eventPhase == 1) {
					if (eventListener.useCapture == true) eventListener.handleEvent(evt);
				} else if (evt.eventPhase == 3) {
					if (eventListener.useCapture == false) eventListener.handleEvent(evt);
				} else if (evt.eventPhase == 2) eventListener.handleEvent(evt);
				if (evt.immediatePropagationStopped == true) return;
			}
		}
		, shouldStopEventPropagation: function (evt) {
			return evt.propagationStopped == true || evt.immediatePropagationStopped == true;
		}
		, endEventDispatching: function (evt) {
			var defaultPrevented = evt.defaultPrevented;
			this.executeDefaultActionIfNeeded(defaultPrevented, evt);
			return defaultPrevented;
		}
		, getTargetAncestors: function () {
			this._targetAncestors = [];
			return this._targetAncestors;
		}
		, executeDefaultActionIfNeeded: function (defaultPrevented, event) {
		}
		, __class__: cocktail_core_event_EventTarget
	};
	var cocktail_core_config_Config = function () {
		cocktail_core_event_EventTarget.call(this);
		this.touchMovePreventClickDistance = 10;
		this.useStageVideoIfAvailable = false;
		this.defaultFont = "serif";
		this.defaultFontColor = "#000000";
		this.xxSmallFontSize = 9;
		this.xSmallFontSize = 10;
		this.smallFontSize = 13;
		this.mediumFontSize = 16;
		this.largeFontSize = 18;
		this.xLargeFontSize = 24;
		this.xxLargeFontSize = 32;
		this.thinBorderWidth = 1;
		this.mediumBorderWidth = 3;
		this.thickBorderWidth = 5;
		this.enableCompositing = false;
		this.objectBelowWhenNoCompositing = true;
		this.videoBelowWhenNoCompositing = true;
	};
	$hxClasses["cocktail.core.config.Config"] = cocktail_core_config_Config;
	cocktail_core_config_Config.__name__ = ["cocktail", "core", "config", "Config"];
	cocktail_core_config_Config._instance = null;
	cocktail_core_config_Config.getInstance = function () {
		if (cocktail_core_config_Config._instance == null) cocktail_core_config_Config._instance = new cocktail_core_config_Config();
		return cocktail_core_config_Config._instance;
	};
	cocktail_core_config_Config.__super__ = cocktail_core_event_EventTarget;
	cocktail_core_config_Config.prototype = $extend(cocktail_core_event_EventTarget.prototype, {
		updateConfig: function (name, value) {
			var didUpdate = false;
			switch (name) {
				case "useStageVideoIfAvailable": case "enableCompositing": case "objectBelowWhenNoCompositing": case "videoBelowWhenNoCompositing":
					this.updateBoolParam(name, value);
					didUpdate = true;
					break;
				case "touchMovePreventClickDistance": case "xxSmallFontSize": case "xSmallFontSize": case "smallFontSize": case "mediumFontSize": case "largeFontSize": case "xLargeFontSize": case "xxLargeFontSize": case "thinBorderWidth": case "mediumBorderWidth": case "thickBorderWidth":
					this.updateIntParam(name, value);
					didUpdate = true;
					break;
				case "defaultFont": case "defaultFontColor":
					this.updateStringParam(name, value);
					didUpdate = true;
					break;
			}
			if (didUpdate == true) {
				var configEvent = new cocktail_core_event_CustomEvent();
				configEvent.initCustomEvent("configchanged", false, false, name);
				this.dispatchEvent(configEvent);
			}
		}
		, updateBoolParam: function (name, value) {
			if (value == "true") this[name] = true; else if (value == "false") this[name] = false;
		}
		, updateIntParam: function (name, value) {
			var $int = Std.parseInt(value);
			if ($int != null) this[name] = $int;
		}
		, updateStringParam: function (name, value) {
			this[name] = value;
		}
		, __class__: cocktail_core_config_Config
	});
	var cocktail_core_css_CSSConstants = function () {
	};
	$hxClasses["cocktail.core.css.CSSConstants"] = cocktail_core_css_CSSConstants;
	cocktail_core_css_CSSConstants.__name__ = ["cocktail", "core", "css", "CSSConstants"];
	cocktail_core_css_CSSConstants.getPropertyIndexFromName = function (name) {
		switch (name) {
			case "display":
				return 0;
			case "position":
				return 1;
			case "float":
				return 2;
			case "clear":
				return 3;
			case "z-index":
				return 4;
			case "margin":
				return 5;
			case "margin-left":
				return 6;
			case "margin-top":
				return 8;
			case "margin-right":
				return 7;
			case "margin-bottom":
				return 9;
			case "padding":
				return 10;
			case "padding-left":
				return 11;
			case "padding-right":
				return 12;
			case "padding-top":
				return 13;
			case "padding-bottom":
				return 14;
			case "width":
				return 15;
			case "height":
				return 16;
			case "min-height":
				return 17;
			case "max-height":
				return 18;
			case "min-width":
				return 19;
			case "max-width":
				return 20;
			case "top":
				return 21;
			case "right":
				return 23;
			case "bottom":
				return 24;
			case "left":
				return 22;
			case "background-color":
				return 25;
			case "background-image":
				return 26;
			case "background-repeat":
				return 27;
			case "background-origin":
				return 28;
			case "background-size":
				return 29;
			case "background-position":
				return 30;
			case "background-clip":
				return 31;
			case "background-attachment":
				return 32;
			case "background":
				return 33;
			case "font-size":
				return 34;
			case "font-weight":
				return 35;
			case "font-style":
				return 36;
			case "font-family":
				return 37;
			case "font-variant":
				return 38;
			case "font":
				return 39;
			case "color":
				return 40;
			case "line-height":
				return 41;
			case "text-transform":
				return 42;
			case "letter-spacing":
				return 43;
			case "word-spacing":
				return 44;
			case "white-space":
				return 45;
			case "text-align":
				return 46;
			case "text-indent":
				return 47;
			case "vertical-align":
				return 48;
			case "visibility":
				return 49;
			case "overflow":
				return 50;
			case "overflow-x":
				return 51;
			case "overflow-y":
				return 52;
			case "opacity":
				return 53;
			case "cursor":
				return 54;
			case "transition-duration":
				return 55;
			case "transition-delay":
				return 56;
			case "transition-property":
				return 57;
			case "transition-timing-function":
				return 58;
			case "transition":
				return 59;
			case "transform-origin":
				return 60;
			case "transform":
				return 61;
			case "border-top-width":
				return 62;
			case "border-right-width":
				return 63;
			case "border-bottom-width":
				return 64;
			case "border-left-width":
				return 65;
			case "border-width":
				return 66;
			case "border-top-color":
				return 67;
			case "border-right-color":
				return 68;
			case "border-bottom-color":
				return 69;
			case "border-left-color":
				return 70;
			case "border-color":
				return 71;
			case "border-top-style":
				return 72;
			case "border-right-style":
				return 73;
			case "border-bottom-style":
				return 74;
			case "border-left-style":
				return 75;
			case "border-style":
				return 76;
			case "border-top":
				return 77;
			case "border-right":
				return 78;
			case "border-bottom":
				return 79;
			case "border-left":
				return 80;
			case "border":
				return 81;
			case "outline-width":
				return 82;
			case "outline-style":
				return 83;
			case "outline-color":
				return 84;
			case "outline":
				return 85;
			case "text-decoration":
				return 86;
			default:
				return -1;
		}
	};
	cocktail_core_css_CSSConstants.getPropertyNameFromIndex = function (index) {
		switch (index) {
			case 0:
				return "display";
			case 1:
				return "position";
			case 2:
				return "float";
			case 3:
				return "clear";
			case 4:
				return "z-index";
			case 5:
				return "margin";
			case 6:
				return "margin-left";
			case 8:
				return "margin-top";
			case 7:
				return "margin-right";
			case 9:
				return "margin-bottom";
			case 10:
				return "padding";
			case 11:
				return "padding-left";
			case 12:
				return "padding-right";
			case 13:
				return "padding-top";
			case 14:
				return "padding-bottom";
			case 15:
				return "width";
			case 16:
				return "height";
			case 17:
				return "min-height";
			case 18:
				return "max-height";
			case 19:
				return "min-width";
			case 20:
				return "max-width";
			case 21:
				return "top";
			case 23:
				return "right";
			case 24:
				return "bottom";
			case 22:
				return "left";
			case 25:
				return "background-color";
			case 26:
				return "background-image";
			case 27:
				return "background-repeat";
			case 28:
				return "background-origin";
			case 29:
				return "background-size";
			case 30:
				return "background-position";
			case 31:
				return "background-clip";
			case 32:
				return "background-attachment";
			case 33:
				return "background";
			case 34:
				return "font-size";
			case 35:
				return "font-weight";
			case 36:
				return "font-style";
			case 37:
				return "font-family";
			case 38:
				return "font-variant";
			case 39:
				return "font";
			case 40:
				return "color";
			case 41:
				return "line-height";
			case 42:
				return "text-transform";
			case 43:
				return "letter-spacing";
			case 44:
				return "word-spacing";
			case 45:
				return "white-space";
			case 46:
				return "text-align";
			case 47:
				return "text-indent";
			case 48:
				return "vertical-align";
			case 49:
				return "visibility";
			case 50:
				return "overflow";
			case 51:
				return "overflow-x";
			case 52:
				return "overflow-y";
			case 53:
				return "opacity";
			case 54:
				return "cursor";
			case 55:
				return "transition-duration";
			case 56:
				return "transition-delay";
			case 57:
				return "transition-property";
			case 58:
				return "transition-timing-function";
			case 59:
				return "transition";
			case 60:
				return "transform-origin";
			case 61:
				return "transform";
			case 62:
				return "border-top-width";
			case 63:
				return "border-right-width";
			case 64:
				return "border-bottom-width";
			case 65:
				return "border-left-width";
			case 66:
				return "border-width";
			case 67:
				return "border-top-color";
			case 68:
				return "border-right-color";
			case 69:
				return "border-bottom-color";
			case 70:
				return "border-left-color";
			case 71:
				return "border-color";
			case 72:
				return "border-top-style";
			case 73:
				return "border-right-style";
			case 74:
				return "border-bottom-style";
			case 75:
				return "border-left-style";
			case 76:
				return "border-style";
			case 77:
				return "border-top";
			case 78:
				return "border-right";
			case 79:
				return "border-bottom";
			case 80:
				return "border-left";
			case 81:
				return "border";
			case 82:
				return "outline-width";
			case 83:
				return "outline-style";
			case 84:
				return "outline-color";
			case 85:
				return "outline";
			case 86:
				return "text-decoration";
			default:
				throw new js__$Boot_HaxeError("unknown property");
		}
	};
	cocktail_core_css_CSSConstants.prototype = {
		__class__: cocktail_core_css_CSSConstants
	};
	var cocktail_core_css_TypedPropertyVO = function () {
	};
	$hxClasses["cocktail.core.css.TypedPropertyVO"] = cocktail_core_css_TypedPropertyVO;
	cocktail_core_css_TypedPropertyVO.__name__ = ["cocktail", "core", "css", "TypedPropertyVO"];
	cocktail_core_css_TypedPropertyVO.prototype = {
		__class__: cocktail_core_css_TypedPropertyVO
	};
	var cocktail_core_css_PropertyVO = function () {
		this.important = false;
	};
	$hxClasses["cocktail.core.css.PropertyVO"] = cocktail_core_css_PropertyVO;
	cocktail_core_css_PropertyVO.__name__ = ["cocktail", "core", "css", "PropertyVO"];
	cocktail_core_css_PropertyVO.prototype = {
		__class__: cocktail_core_css_PropertyVO
	};
	var cocktail_core_css_StyleDeclarationVO = function () {
	};
	$hxClasses["cocktail.core.css.StyleDeclarationVO"] = cocktail_core_css_StyleDeclarationVO;
	cocktail_core_css_StyleDeclarationVO.__name__ = ["cocktail", "core", "css", "StyleDeclarationVO"];
	cocktail_core_css_StyleDeclarationVO.prototype = {
		__class__: cocktail_core_css_StyleDeclarationVO
	};
	var cocktail_core_css_MatchedPseudoClassesVO = function (hover, focus, active, link, enabled, disabled, checked, fullscreen, hasId, hasClasses, nodeId, nodeClassList, nodeType) {
		this.hover = hover;
		this.focus = focus;
		this.active = active;
		this.link = link;
		this.enabled = enabled;
		this.disabled = disabled;
		this.checked = checked;
		this.fullscreen = fullscreen;
		this.hasId = hasId;
		this.hasClasses = false;
		this.nodeId = nodeId;
		this.nodeClassList = nodeClassList;
		this.nodeType = nodeType;
	};
	$hxClasses["cocktail.core.css.MatchedPseudoClassesVO"] = cocktail_core_css_MatchedPseudoClassesVO;
	cocktail_core_css_MatchedPseudoClassesVO.__name__ = ["cocktail", "core", "css", "MatchedPseudoClassesVO"];
	cocktail_core_css_MatchedPseudoClassesVO.prototype = {
		__class__: cocktail_core_css_MatchedPseudoClassesVO
	};
	var cocktail_core_css_PropertyOriginValue = $hxClasses["cocktail.core.css.PropertyOriginValue"] = { __ename__: ["cocktail", "core", "css", "PropertyOriginValue"], __constructs__: ["AUTHOR", "USER_AGENT"] };
	cocktail_core_css_PropertyOriginValue.AUTHOR = ["AUTHOR", 0];
	cocktail_core_css_PropertyOriginValue.AUTHOR.toString = $estr;
	cocktail_core_css_PropertyOriginValue.AUTHOR.__enum__ = cocktail_core_css_PropertyOriginValue;
	cocktail_core_css_PropertyOriginValue.USER_AGENT = ["USER_AGENT", 1];
	cocktail_core_css_PropertyOriginValue.USER_AGENT.toString = $estr;
	cocktail_core_css_PropertyOriginValue.USER_AGENT.__enum__ = cocktail_core_css_PropertyOriginValue;
	var cocktail_core_css_UsedValuesVO = function () {
		this.minHeight = 0.0;
		this.maxHeight = 0.0;
		this.minWidth = 0.0;
		this.maxWidth = 0.0;
		this.width = 0.0;
		this.height = 0.0;
		this.marginLeft = 0.0;
		this.marginRight = 0.0;
		this.marginTop = 0.0;
		this.marginBottom = 0.0;
		this.paddingLeft = 0.0;
		this.paddingRight = 0.0;
		this.paddingTop = 0.0;
		this.paddingBottom = 0.0;
		this.left = 0.0;
		this.right = 0.0;
		this.top = 0.0;
		this.bottom = 0.0;
		this.textIndent = 0;
		this.lineHeight = 0.0;
		this.letterSpacing = 0.0;
		this.color = new cocktail_core_css_ColorVO(0, 1.0);
		this.transformOrigin = new cocktail_core_geom_PointVO(0.0, 0.0);
		this.transform = new cocktail_core_geom_Matrix();
		this.backgroundColor = new cocktail_core_css_ColorVO(0, 0.0);
		this.borderLeftWidth = 0.0;
		this.borderRightWidth = 0.0;
		this.borderTopWidth = 0.0;
		this.borderBottomWidth = 0.0;
		this.borderLeftColor = new cocktail_core_css_ColorVO(0, 1.0);
		this.borderRightColor = new cocktail_core_css_ColorVO(0, 1.0);
		this.borderTopColor = new cocktail_core_css_ColorVO(0, 1.0);
		this.borderBottomColor = new cocktail_core_css_ColorVO(0, 1.0);
		this.outlineWidth = 0.0;
		this.outlineColor = new cocktail_core_css_ColorVO(0, 1.0);
	};
	$hxClasses["cocktail.core.css.UsedValuesVO"] = cocktail_core_css_UsedValuesVO;
	cocktail_core_css_UsedValuesVO.__name__ = ["cocktail", "core", "css", "UsedValuesVO"];
	cocktail_core_css_UsedValuesVO.prototype = {
		__class__: cocktail_core_css_UsedValuesVO
	};
	var cocktail_core_css_ColorVO = function (color, alpha) {
		this.color = color;
		this.alpha = alpha;
	};
	$hxClasses["cocktail.core.css.ColorVO"] = cocktail_core_css_ColorVO;
	cocktail_core_css_ColorVO.__name__ = ["cocktail", "core", "css", "ColorVO"];
	cocktail_core_css_ColorVO.prototype = {
		__class__: cocktail_core_css_ColorVO
	};
	var cocktail_core_css_SelectorSpecificityVO = function () {
		this.idSelectorsNumber = 0;
		this.classAttributesAndPseudoClassesNumber = 0;
		this.typeAndPseudoElementsNumber = 0;
	};
	$hxClasses["cocktail.core.css.SelectorSpecificityVO"] = cocktail_core_css_SelectorSpecificityVO;
	cocktail_core_css_SelectorSpecificityVO.__name__ = ["cocktail", "core", "css", "SelectorSpecificityVO"];
	cocktail_core_css_SelectorSpecificityVO.prototype = {
		__class__: cocktail_core_css_SelectorSpecificityVO
	};
	var cocktail_core_css_SelectorVO = function (components, pseudoElement, beginsWithClass, firstClass, beginsWithId, firstId, beginsWithType, firstType, isSimpleClassSelector, isSimpleIdSelector, isSimpleTypeSelector) {
		this.components = components;
		this.pseudoElement = pseudoElement;
		this.beginsWithClass = beginsWithClass;
		this.firstClass = firstClass;
		this.beginsWithId = beginsWithId;
		this.firstId = firstId;
		this.beginsWithType = beginsWithType;
		this.firstType = firstType;
		this.isSimpleClassSelector = isSimpleClassSelector;
		this.isSimpleIdSelector = isSimpleIdSelector;
		this.isSimpleTypeSelector = isSimpleTypeSelector;
	};
	$hxClasses["cocktail.core.css.SelectorVO"] = cocktail_core_css_SelectorVO;
	cocktail_core_css_SelectorVO.__name__ = ["cocktail", "core", "css", "SelectorVO"];
	cocktail_core_css_SelectorVO.prototype = {
		__class__: cocktail_core_css_SelectorVO
	};
	var cocktail_core_css_SimpleSelectorSequenceVO = function (startValue, simpleSelectors) {
		this.startValue = startValue;
		this.simpleSelectors = simpleSelectors;
	};
	$hxClasses["cocktail.core.css.SimpleSelectorSequenceVO"] = cocktail_core_css_SimpleSelectorSequenceVO;
	cocktail_core_css_SimpleSelectorSequenceVO.__name__ = ["cocktail", "core", "css", "SimpleSelectorSequenceVO"];
	cocktail_core_css_SimpleSelectorSequenceVO.prototype = {
		__class__: cocktail_core_css_SimpleSelectorSequenceVO
	};
	var cocktail_core_css_SelectorComponentValue = $hxClasses["cocktail.core.css.SelectorComponentValue"] = { __ename__: ["cocktail", "core", "css", "SelectorComponentValue"], __constructs__: ["SIMPLE_SELECTOR_SEQUENCE", "COMBINATOR"] };
	cocktail_core_css_SelectorComponentValue.SIMPLE_SELECTOR_SEQUENCE = function (value) { var $x = ["SIMPLE_SELECTOR_SEQUENCE", 0, value]; $x.__enum__ = cocktail_core_css_SelectorComponentValue; $x.toString = $estr; return $x; };
	cocktail_core_css_SelectorComponentValue.COMBINATOR = function (value) { var $x = ["COMBINATOR", 1, value]; $x.__enum__ = cocktail_core_css_SelectorComponentValue; $x.toString = $estr; return $x; };
	var cocktail_core_css_SimpleSelectorSequenceItemValue = $hxClasses["cocktail.core.css.SimpleSelectorSequenceItemValue"] = { __ename__: ["cocktail", "core", "css", "SimpleSelectorSequenceItemValue"], __constructs__: ["ATTRIBUTE", "PSEUDO_CLASS", "CSS_CLASS", "ID"] };
	cocktail_core_css_SimpleSelectorSequenceItemValue.ATTRIBUTE = function (value) { var $x = ["ATTRIBUTE", 0, value]; $x.__enum__ = cocktail_core_css_SimpleSelectorSequenceItemValue; $x.toString = $estr; return $x; };
	cocktail_core_css_SimpleSelectorSequenceItemValue.PSEUDO_CLASS = function (value) { var $x = ["PSEUDO_CLASS", 1, value]; $x.__enum__ = cocktail_core_css_SimpleSelectorSequenceItemValue; $x.toString = $estr; return $x; };
	cocktail_core_css_SimpleSelectorSequenceItemValue.CSS_CLASS = function (value) { var $x = ["CSS_CLASS", 2, value]; $x.__enum__ = cocktail_core_css_SimpleSelectorSequenceItemValue; $x.toString = $estr; return $x; };
	cocktail_core_css_SimpleSelectorSequenceItemValue.ID = function (value) { var $x = ["ID", 3, value]; $x.__enum__ = cocktail_core_css_SimpleSelectorSequenceItemValue; $x.toString = $estr; return $x; };
	var cocktail_core_css_SimpleSelectorSequenceStartValue = $hxClasses["cocktail.core.css.SimpleSelectorSequenceStartValue"] = { __ename__: ["cocktail", "core", "css", "SimpleSelectorSequenceStartValue"], __constructs__: ["UNIVERSAL", "TYPE"] };
	cocktail_core_css_SimpleSelectorSequenceStartValue.UNIVERSAL = ["UNIVERSAL", 0];
	cocktail_core_css_SimpleSelectorSequenceStartValue.UNIVERSAL.toString = $estr;
	cocktail_core_css_SimpleSelectorSequenceStartValue.UNIVERSAL.__enum__ = cocktail_core_css_SimpleSelectorSequenceStartValue;
	cocktail_core_css_SimpleSelectorSequenceStartValue.TYPE = function (value) { var $x = ["TYPE", 1, value]; $x.__enum__ = cocktail_core_css_SimpleSelectorSequenceStartValue; $x.toString = $estr; return $x; };
	var cocktail_core_css_AttributeSelectorValue = $hxClasses["cocktail.core.css.AttributeSelectorValue"] = { __ename__: ["cocktail", "core", "css", "AttributeSelectorValue"], __constructs__: ["ATTRIBUTE", "ATTRIBUTE_VALUE", "ATTRIBUTE_LIST", "ATTRIBUTE_VALUE_BEGINS", "ATTRIBUTE_VALUE_ENDS", "ATTRIBUTE_VALUE_CONTAINS", "ATTRIBUTE_VALUE_BEGINS_HYPHEN_LIST"] };
	cocktail_core_css_AttributeSelectorValue.ATTRIBUTE = function (value) { var $x = ["ATTRIBUTE", 0, value]; $x.__enum__ = cocktail_core_css_AttributeSelectorValue; $x.toString = $estr; return $x; };
	cocktail_core_css_AttributeSelectorValue.ATTRIBUTE_VALUE = function (name, value) { var $x = ["ATTRIBUTE_VALUE", 1, name, value]; $x.__enum__ = cocktail_core_css_AttributeSelectorValue; $x.toString = $estr; return $x; };
	cocktail_core_css_AttributeSelectorValue.ATTRIBUTE_LIST = function (name, value) { var $x = ["ATTRIBUTE_LIST", 2, name, value]; $x.__enum__ = cocktail_core_css_AttributeSelectorValue; $x.toString = $estr; return $x; };
	cocktail_core_css_AttributeSelectorValue.ATTRIBUTE_VALUE_BEGINS = function (name, value) { var $x = ["ATTRIBUTE_VALUE_BEGINS", 3, name, value]; $x.__enum__ = cocktail_core_css_AttributeSelectorValue; $x.toString = $estr; return $x; };
	cocktail_core_css_AttributeSelectorValue.ATTRIBUTE_VALUE_ENDS = function (name, value) { var $x = ["ATTRIBUTE_VALUE_ENDS", 4, name, value]; $x.__enum__ = cocktail_core_css_AttributeSelectorValue; $x.toString = $estr; return $x; };
	cocktail_core_css_AttributeSelectorValue.ATTRIBUTE_VALUE_CONTAINS = function (name, value) { var $x = ["ATTRIBUTE_VALUE_CONTAINS", 5, name, value]; $x.__enum__ = cocktail_core_css_AttributeSelectorValue; $x.toString = $estr; return $x; };
	cocktail_core_css_AttributeSelectorValue.ATTRIBUTE_VALUE_BEGINS_HYPHEN_LIST = function (name, value) { var $x = ["ATTRIBUTE_VALUE_BEGINS_HYPHEN_LIST", 6, name, value]; $x.__enum__ = cocktail_core_css_AttributeSelectorValue; $x.toString = $estr; return $x; };
	var cocktail_core_css_PseudoClassSelectorValue = $hxClasses["cocktail.core.css.PseudoClassSelectorValue"] = { __ename__: ["cocktail", "core", "css", "PseudoClassSelectorValue"], __constructs__: ["UNKNOWN", "STRUCTURAL", "LINK", "TARGET", "FULLSCREEN", "LANG", "USER_ACTION", "UI_ELEMENT_STATES", "NOT"] };
	cocktail_core_css_PseudoClassSelectorValue.UNKNOWN = ["UNKNOWN", 0];
	cocktail_core_css_PseudoClassSelectorValue.UNKNOWN.toString = $estr;
	cocktail_core_css_PseudoClassSelectorValue.UNKNOWN.__enum__ = cocktail_core_css_PseudoClassSelectorValue;
	cocktail_core_css_PseudoClassSelectorValue.STRUCTURAL = function (value) { var $x = ["STRUCTURAL", 1, value]; $x.__enum__ = cocktail_core_css_PseudoClassSelectorValue; $x.toString = $estr; return $x; };
	cocktail_core_css_PseudoClassSelectorValue.LINK = function (value) { var $x = ["LINK", 2, value]; $x.__enum__ = cocktail_core_css_PseudoClassSelectorValue; $x.toString = $estr; return $x; };
	cocktail_core_css_PseudoClassSelectorValue.TARGET = ["TARGET", 3];
	cocktail_core_css_PseudoClassSelectorValue.TARGET.toString = $estr;
	cocktail_core_css_PseudoClassSelectorValue.TARGET.__enum__ = cocktail_core_css_PseudoClassSelectorValue;
	cocktail_core_css_PseudoClassSelectorValue.FULLSCREEN = ["FULLSCREEN", 4];
	cocktail_core_css_PseudoClassSelectorValue.FULLSCREEN.toString = $estr;
	cocktail_core_css_PseudoClassSelectorValue.FULLSCREEN.__enum__ = cocktail_core_css_PseudoClassSelectorValue;
	cocktail_core_css_PseudoClassSelectorValue.LANG = function (value) { var $x = ["LANG", 5, value]; $x.__enum__ = cocktail_core_css_PseudoClassSelectorValue; $x.toString = $estr; return $x; };
	cocktail_core_css_PseudoClassSelectorValue.USER_ACTION = function (value) { var $x = ["USER_ACTION", 6, value]; $x.__enum__ = cocktail_core_css_PseudoClassSelectorValue; $x.toString = $estr; return $x; };
	cocktail_core_css_PseudoClassSelectorValue.UI_ELEMENT_STATES = function (value) { var $x = ["UI_ELEMENT_STATES", 7, value]; $x.__enum__ = cocktail_core_css_PseudoClassSelectorValue; $x.toString = $estr; return $x; };
	cocktail_core_css_PseudoClassSelectorValue.NOT = function (value) { var $x = ["NOT", 8, value]; $x.__enum__ = cocktail_core_css_PseudoClassSelectorValue; $x.toString = $estr; return $x; };
	var cocktail_core_css_StructuralPseudoClassSelectorValue = $hxClasses["cocktail.core.css.StructuralPseudoClassSelectorValue"] = { __ename__: ["cocktail", "core", "css", "StructuralPseudoClassSelectorValue"], __constructs__: ["ROOT", "FIRST_CHILD", "LAST_CHILD", "FIRST_OF_TYPE", "LAST_OF_TYPE", "ONLY_CHILD", "ONLY_OF_TYPE", "EMPTY", "NTH_CHILD", "NTH_LAST_CHILD", "NTH_OF_TYPE", "NTH_LAST_OF_TYPE"] };
	cocktail_core_css_StructuralPseudoClassSelectorValue.ROOT = ["ROOT", 0];
	cocktail_core_css_StructuralPseudoClassSelectorValue.ROOT.toString = $estr;
	cocktail_core_css_StructuralPseudoClassSelectorValue.ROOT.__enum__ = cocktail_core_css_StructuralPseudoClassSelectorValue;
	cocktail_core_css_StructuralPseudoClassSelectorValue.FIRST_CHILD = ["FIRST_CHILD", 1];
	cocktail_core_css_StructuralPseudoClassSelectorValue.FIRST_CHILD.toString = $estr;
	cocktail_core_css_StructuralPseudoClassSelectorValue.FIRST_CHILD.__enum__ = cocktail_core_css_StructuralPseudoClassSelectorValue;
	cocktail_core_css_StructuralPseudoClassSelectorValue.LAST_CHILD = ["LAST_CHILD", 2];
	cocktail_core_css_StructuralPseudoClassSelectorValue.LAST_CHILD.toString = $estr;
	cocktail_core_css_StructuralPseudoClassSelectorValue.LAST_CHILD.__enum__ = cocktail_core_css_StructuralPseudoClassSelectorValue;
	cocktail_core_css_StructuralPseudoClassSelectorValue.FIRST_OF_TYPE = ["FIRST_OF_TYPE", 3];
	cocktail_core_css_StructuralPseudoClassSelectorValue.FIRST_OF_TYPE.toString = $estr;
	cocktail_core_css_StructuralPseudoClassSelectorValue.FIRST_OF_TYPE.__enum__ = cocktail_core_css_StructuralPseudoClassSelectorValue;
	cocktail_core_css_StructuralPseudoClassSelectorValue.LAST_OF_TYPE = ["LAST_OF_TYPE", 4];
	cocktail_core_css_StructuralPseudoClassSelectorValue.LAST_OF_TYPE.toString = $estr;
	cocktail_core_css_StructuralPseudoClassSelectorValue.LAST_OF_TYPE.__enum__ = cocktail_core_css_StructuralPseudoClassSelectorValue;
	cocktail_core_css_StructuralPseudoClassSelectorValue.ONLY_CHILD = ["ONLY_CHILD", 5];
	cocktail_core_css_StructuralPseudoClassSelectorValue.ONLY_CHILD.toString = $estr;
	cocktail_core_css_StructuralPseudoClassSelectorValue.ONLY_CHILD.__enum__ = cocktail_core_css_StructuralPseudoClassSelectorValue;
	cocktail_core_css_StructuralPseudoClassSelectorValue.ONLY_OF_TYPE = ["ONLY_OF_TYPE", 6];
	cocktail_core_css_StructuralPseudoClassSelectorValue.ONLY_OF_TYPE.toString = $estr;
	cocktail_core_css_StructuralPseudoClassSelectorValue.ONLY_OF_TYPE.__enum__ = cocktail_core_css_StructuralPseudoClassSelectorValue;
	cocktail_core_css_StructuralPseudoClassSelectorValue.EMPTY = ["EMPTY", 7];
	cocktail_core_css_StructuralPseudoClassSelectorValue.EMPTY.toString = $estr;
	cocktail_core_css_StructuralPseudoClassSelectorValue.EMPTY.__enum__ = cocktail_core_css_StructuralPseudoClassSelectorValue;
	cocktail_core_css_StructuralPseudoClassSelectorValue.NTH_CHILD = function (value) { var $x = ["NTH_CHILD", 8, value]; $x.__enum__ = cocktail_core_css_StructuralPseudoClassSelectorValue; $x.toString = $estr; return $x; };
	cocktail_core_css_StructuralPseudoClassSelectorValue.NTH_LAST_CHILD = function (value) { var $x = ["NTH_LAST_CHILD", 9, value]; $x.__enum__ = cocktail_core_css_StructuralPseudoClassSelectorValue; $x.toString = $estr; return $x; };
	cocktail_core_css_StructuralPseudoClassSelectorValue.NTH_OF_TYPE = function (value) { var $x = ["NTH_OF_TYPE", 10, value]; $x.__enum__ = cocktail_core_css_StructuralPseudoClassSelectorValue; $x.toString = $estr; return $x; };
	cocktail_core_css_StructuralPseudoClassSelectorValue.NTH_LAST_OF_TYPE = function (value) { var $x = ["NTH_LAST_OF_TYPE", 11, value]; $x.__enum__ = cocktail_core_css_StructuralPseudoClassSelectorValue; $x.toString = $estr; return $x; };
	var cocktail_core_css_StructuralPseudoClassArgumentValue = $hxClasses["cocktail.core.css.StructuralPseudoClassArgumentValue"] = { __ename__: ["cocktail", "core", "css", "StructuralPseudoClassArgumentValue"], __constructs__: ["ODD", "EVEN"] };
	cocktail_core_css_StructuralPseudoClassArgumentValue.ODD = ["ODD", 0];
	cocktail_core_css_StructuralPseudoClassArgumentValue.ODD.toString = $estr;
	cocktail_core_css_StructuralPseudoClassArgumentValue.ODD.__enum__ = cocktail_core_css_StructuralPseudoClassArgumentValue;
	cocktail_core_css_StructuralPseudoClassArgumentValue.EVEN = ["EVEN", 1];
	cocktail_core_css_StructuralPseudoClassArgumentValue.EVEN.toString = $estr;
	cocktail_core_css_StructuralPseudoClassArgumentValue.EVEN.__enum__ = cocktail_core_css_StructuralPseudoClassArgumentValue;
	var cocktail_core_css_LinkPseudoClassValue = $hxClasses["cocktail.core.css.LinkPseudoClassValue"] = { __ename__: ["cocktail", "core", "css", "LinkPseudoClassValue"], __constructs__: ["LINK", "VISITED"] };
	cocktail_core_css_LinkPseudoClassValue.LINK = ["LINK", 0];
	cocktail_core_css_LinkPseudoClassValue.LINK.toString = $estr;
	cocktail_core_css_LinkPseudoClassValue.LINK.__enum__ = cocktail_core_css_LinkPseudoClassValue;
	cocktail_core_css_LinkPseudoClassValue.VISITED = ["VISITED", 1];
	cocktail_core_css_LinkPseudoClassValue.VISITED.toString = $estr;
	cocktail_core_css_LinkPseudoClassValue.VISITED.__enum__ = cocktail_core_css_LinkPseudoClassValue;
	var cocktail_core_css_UserActionPseudoClassValue = $hxClasses["cocktail.core.css.UserActionPseudoClassValue"] = { __ename__: ["cocktail", "core", "css", "UserActionPseudoClassValue"], __constructs__: ["ACTIVE", "HOVER", "FOCUS"] };
	cocktail_core_css_UserActionPseudoClassValue.ACTIVE = ["ACTIVE", 0];
	cocktail_core_css_UserActionPseudoClassValue.ACTIVE.toString = $estr;
	cocktail_core_css_UserActionPseudoClassValue.ACTIVE.__enum__ = cocktail_core_css_UserActionPseudoClassValue;
	cocktail_core_css_UserActionPseudoClassValue.HOVER = ["HOVER", 1];
	cocktail_core_css_UserActionPseudoClassValue.HOVER.toString = $estr;
	cocktail_core_css_UserActionPseudoClassValue.HOVER.__enum__ = cocktail_core_css_UserActionPseudoClassValue;
	cocktail_core_css_UserActionPseudoClassValue.FOCUS = ["FOCUS", 2];
	cocktail_core_css_UserActionPseudoClassValue.FOCUS.toString = $estr;
	cocktail_core_css_UserActionPseudoClassValue.FOCUS.__enum__ = cocktail_core_css_UserActionPseudoClassValue;
	var cocktail_core_css_UIElementStatesValue = $hxClasses["cocktail.core.css.UIElementStatesValue"] = { __ename__: ["cocktail", "core", "css", "UIElementStatesValue"], __constructs__: ["ENABLED", "DISABLED", "CHECKED"] };
	cocktail_core_css_UIElementStatesValue.ENABLED = ["ENABLED", 0];
	cocktail_core_css_UIElementStatesValue.ENABLED.toString = $estr;
	cocktail_core_css_UIElementStatesValue.ENABLED.__enum__ = cocktail_core_css_UIElementStatesValue;
	cocktail_core_css_UIElementStatesValue.DISABLED = ["DISABLED", 1];
	cocktail_core_css_UIElementStatesValue.DISABLED.toString = $estr;
	cocktail_core_css_UIElementStatesValue.DISABLED.__enum__ = cocktail_core_css_UIElementStatesValue;
	cocktail_core_css_UIElementStatesValue.CHECKED = ["CHECKED", 2];
	cocktail_core_css_UIElementStatesValue.CHECKED.toString = $estr;
	cocktail_core_css_UIElementStatesValue.CHECKED.__enum__ = cocktail_core_css_UIElementStatesValue;
	var cocktail_core_css_PseudoElementSelectorValue = $hxClasses["cocktail.core.css.PseudoElementSelectorValue"] = { __ename__: ["cocktail", "core", "css", "PseudoElementSelectorValue"], __constructs__: ["NONE", "FIRST_LINE", "FIRST_LETTER", "BEFORE", "AFTER"] };
	cocktail_core_css_PseudoElementSelectorValue.NONE = ["NONE", 0];
	cocktail_core_css_PseudoElementSelectorValue.NONE.toString = $estr;
	cocktail_core_css_PseudoElementSelectorValue.NONE.__enum__ = cocktail_core_css_PseudoElementSelectorValue;
	cocktail_core_css_PseudoElementSelectorValue.FIRST_LINE = ["FIRST_LINE", 1];
	cocktail_core_css_PseudoElementSelectorValue.FIRST_LINE.toString = $estr;
	cocktail_core_css_PseudoElementSelectorValue.FIRST_LINE.__enum__ = cocktail_core_css_PseudoElementSelectorValue;
	cocktail_core_css_PseudoElementSelectorValue.FIRST_LETTER = ["FIRST_LETTER", 2];
	cocktail_core_css_PseudoElementSelectorValue.FIRST_LETTER.toString = $estr;
	cocktail_core_css_PseudoElementSelectorValue.FIRST_LETTER.__enum__ = cocktail_core_css_PseudoElementSelectorValue;
	cocktail_core_css_PseudoElementSelectorValue.BEFORE = ["BEFORE", 3];
	cocktail_core_css_PseudoElementSelectorValue.BEFORE.toString = $estr;
	cocktail_core_css_PseudoElementSelectorValue.BEFORE.__enum__ = cocktail_core_css_PseudoElementSelectorValue;
	cocktail_core_css_PseudoElementSelectorValue.AFTER = ["AFTER", 4];
	cocktail_core_css_PseudoElementSelectorValue.AFTER.toString = $estr;
	cocktail_core_css_PseudoElementSelectorValue.AFTER.__enum__ = cocktail_core_css_PseudoElementSelectorValue;
	var cocktail_core_css_CombinatorValue = $hxClasses["cocktail.core.css.CombinatorValue"] = { __ename__: ["cocktail", "core", "css", "CombinatorValue"], __constructs__: ["DESCENDANT", "CHILD", "ADJACENT_SIBLING", "GENERAL_SIBLING"] };
	cocktail_core_css_CombinatorValue.DESCENDANT = ["DESCENDANT", 0];
	cocktail_core_css_CombinatorValue.DESCENDANT.toString = $estr;
	cocktail_core_css_CombinatorValue.DESCENDANT.__enum__ = cocktail_core_css_CombinatorValue;
	cocktail_core_css_CombinatorValue.CHILD = ["CHILD", 1];
	cocktail_core_css_CombinatorValue.CHILD.toString = $estr;
	cocktail_core_css_CombinatorValue.CHILD.__enum__ = cocktail_core_css_CombinatorValue;
	cocktail_core_css_CombinatorValue.ADJACENT_SIBLING = ["ADJACENT_SIBLING", 2];
	cocktail_core_css_CombinatorValue.ADJACENT_SIBLING.toString = $estr;
	cocktail_core_css_CombinatorValue.ADJACENT_SIBLING.__enum__ = cocktail_core_css_CombinatorValue;
	cocktail_core_css_CombinatorValue.GENERAL_SIBLING = ["GENERAL_SIBLING", 3];
	cocktail_core_css_CombinatorValue.GENERAL_SIBLING.toString = $estr;
	cocktail_core_css_CombinatorValue.GENERAL_SIBLING.__enum__ = cocktail_core_css_CombinatorValue;
	var cocktail_core_css_CSSPropertyValue = $hxClasses["cocktail.core.css.CSSPropertyValue"] = { __ename__: ["cocktail", "core", "css", "CSSPropertyValue"], __constructs__: ["INTEGER", "NUMBER", "PERCENTAGE", "IDENTIFIER", "KEYWORD", "URL", "STRING", "LENGTH", "ANGLE", "TIME", "FREQUENCY", "RESOLUTION", "COLOR", "GROUP", "FONT_SIZE_LINE_HEIGHT_GROUP", "CSS_LIST", "INHERIT", "INITIAL", "ABSOLUTE_LENGTH", "STEPS", "CUBIC_BEZIER", "TRANSFORM_FUNCTION"] };
	cocktail_core_css_CSSPropertyValue.INTEGER = function (value) { var $x = ["INTEGER", 0, value]; $x.__enum__ = cocktail_core_css_CSSPropertyValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSPropertyValue.NUMBER = function (value) { var $x = ["NUMBER", 1, value]; $x.__enum__ = cocktail_core_css_CSSPropertyValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSPropertyValue.PERCENTAGE = function (value) { var $x = ["PERCENTAGE", 2, value]; $x.__enum__ = cocktail_core_css_CSSPropertyValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSPropertyValue.IDENTIFIER = function (value) { var $x = ["IDENTIFIER", 3, value]; $x.__enum__ = cocktail_core_css_CSSPropertyValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSPropertyValue.KEYWORD = function (value) { var $x = ["KEYWORD", 4, value]; $x.__enum__ = cocktail_core_css_CSSPropertyValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSPropertyValue.URL = function (value) { var $x = ["URL", 5, value]; $x.__enum__ = cocktail_core_css_CSSPropertyValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSPropertyValue.STRING = function (value) { var $x = ["STRING", 6, value]; $x.__enum__ = cocktail_core_css_CSSPropertyValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSPropertyValue.LENGTH = function (value) { var $x = ["LENGTH", 7, value]; $x.__enum__ = cocktail_core_css_CSSPropertyValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSPropertyValue.ANGLE = function (value) { var $x = ["ANGLE", 8, value]; $x.__enum__ = cocktail_core_css_CSSPropertyValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSPropertyValue.TIME = function (value) { var $x = ["TIME", 9, value]; $x.__enum__ = cocktail_core_css_CSSPropertyValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSPropertyValue.FREQUENCY = function (value) { var $x = ["FREQUENCY", 10, value]; $x.__enum__ = cocktail_core_css_CSSPropertyValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSPropertyValue.RESOLUTION = function (value) { var $x = ["RESOLUTION", 11, value]; $x.__enum__ = cocktail_core_css_CSSPropertyValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSPropertyValue.COLOR = function (value) { var $x = ["COLOR", 12, value]; $x.__enum__ = cocktail_core_css_CSSPropertyValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSPropertyValue.GROUP = function (value) { var $x = ["GROUP", 13, value]; $x.__enum__ = cocktail_core_css_CSSPropertyValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSPropertyValue.FONT_SIZE_LINE_HEIGHT_GROUP = function (fontSize, lineHeight) { var $x = ["FONT_SIZE_LINE_HEIGHT_GROUP", 14, fontSize, lineHeight]; $x.__enum__ = cocktail_core_css_CSSPropertyValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSPropertyValue.CSS_LIST = function (value) { var $x = ["CSS_LIST", 15, value]; $x.__enum__ = cocktail_core_css_CSSPropertyValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSPropertyValue.INHERIT = ["INHERIT", 16];
	cocktail_core_css_CSSPropertyValue.INHERIT.toString = $estr;
	cocktail_core_css_CSSPropertyValue.INHERIT.__enum__ = cocktail_core_css_CSSPropertyValue;
	cocktail_core_css_CSSPropertyValue.INITIAL = ["INITIAL", 17];
	cocktail_core_css_CSSPropertyValue.INITIAL.toString = $estr;
	cocktail_core_css_CSSPropertyValue.INITIAL.__enum__ = cocktail_core_css_CSSPropertyValue;
	cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH = function (value) { var $x = ["ABSOLUTE_LENGTH", 18, value]; $x.__enum__ = cocktail_core_css_CSSPropertyValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSPropertyValue.STEPS = function (intervalNumbers, intervalChange) { var $x = ["STEPS", 19, intervalNumbers, intervalChange]; $x.__enum__ = cocktail_core_css_CSSPropertyValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSPropertyValue.CUBIC_BEZIER = function (x1, y1, x2, y2) { var $x = ["CUBIC_BEZIER", 20, x1, y1, x2, y2]; $x.__enum__ = cocktail_core_css_CSSPropertyValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION = function (value) { var $x = ["TRANSFORM_FUNCTION", 21, value]; $x.__enum__ = cocktail_core_css_CSSPropertyValue; $x.toString = $estr; return $x; };
	var cocktail_core_css_CSSColorValue = $hxClasses["cocktail.core.css.CSSColorValue"] = { __ename__: ["cocktail", "core", "css", "CSSColorValue"], __constructs__: ["RGB", "RGB_PERCENTAGE", "RGBA", "RGBA_PERCENTAGE", "HEX", "HSL", "HSLA", "KEYWORD", "TRANSPARENT", "CURRENT_COLOR"] };
	cocktail_core_css_CSSColorValue.RGB = function (red, green, blue) { var $x = ["RGB", 0, red, green, blue]; $x.__enum__ = cocktail_core_css_CSSColorValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSColorValue.RGB_PERCENTAGE = function (red, green, blue) { var $x = ["RGB_PERCENTAGE", 1, red, green, blue]; $x.__enum__ = cocktail_core_css_CSSColorValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSColorValue.RGBA = function (red, green, blue, alpha) { var $x = ["RGBA", 2, red, green, blue, alpha]; $x.__enum__ = cocktail_core_css_CSSColorValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSColorValue.RGBA_PERCENTAGE = function (red, green, blue, alpha) { var $x = ["RGBA_PERCENTAGE", 3, red, green, blue, alpha]; $x.__enum__ = cocktail_core_css_CSSColorValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSColorValue.HEX = function (value) { var $x = ["HEX", 4, value]; $x.__enum__ = cocktail_core_css_CSSColorValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSColorValue.HSL = function (hue, saturation, lightness) { var $x = ["HSL", 5, hue, saturation, lightness]; $x.__enum__ = cocktail_core_css_CSSColorValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSColorValue.HSLA = function (hue, saturation, lightness, alpha) { var $x = ["HSLA", 6, hue, saturation, lightness, alpha]; $x.__enum__ = cocktail_core_css_CSSColorValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSColorValue.KEYWORD = function (value) { var $x = ["KEYWORD", 7, value]; $x.__enum__ = cocktail_core_css_CSSColorValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSColorValue.TRANSPARENT = ["TRANSPARENT", 8];
	cocktail_core_css_CSSColorValue.TRANSPARENT.toString = $estr;
	cocktail_core_css_CSSColorValue.TRANSPARENT.__enum__ = cocktail_core_css_CSSColorValue;
	cocktail_core_css_CSSColorValue.CURRENT_COLOR = ["CURRENT_COLOR", 9];
	cocktail_core_css_CSSColorValue.CURRENT_COLOR.toString = $estr;
	cocktail_core_css_CSSColorValue.CURRENT_COLOR.__enum__ = cocktail_core_css_CSSColorValue;
	var cocktail_core_css_CSSColorKeyword = $hxClasses["cocktail.core.css.CSSColorKeyword"] = { __ename__: ["cocktail", "core", "css", "CSSColorKeyword"], __constructs__: ["ALICE_BLUE", "ANTIQUE_WHITE", "AQUA", "AQUAMARINE", "AZURE", "BEIGE", "BISQUE", "BLACK", "BLANCHE_DALMOND", "BLUE", "BLUE_VIOLET", "BROWN", "BURLY_WOOD", "CADET_BLUE", "CHARTREUSE", "CHOCOLATE", "CORAL", "CORNFLOWER_BLUE", "CORNSILK", "CRIMSON", "CYAN", "DARK_BLUE", "DARK_CYAN", "DARK_GOLDEN_ROD", "DARK_GRAY", "DARK_GREEN", "DARK_GREY", "DARK_KHAKI", "DARK_MAGENTA", "DARK_OLIVE_GREEN", "DARK_ORANGE", "DARK_ORCHID", "DARK_RED", "DARK_SALMON", "DARK_SEA_GREEN", "DARK_SLATE_BLUE", "DARK_SLATE_GRAY", "DARK_SLATE_GREY", "DARK_TURQUOISE", "DARK_VIOLET", "DEEP_PINK", "DEEP_SKY_BLUE", "DIM_GRAY", "DIM_GREY", "DODGER_BLUE", "FIRE_BRICK", "FLORAL_WHITE", "FOREST_GREEN", "FUCHSIA", "GAINSBORO", "GHOST_WHITE", "GOLD", "GOLDEN_ROD", "GRAY", "GREEN", "GREEN_YELLOW", "GREY", "HONEY_DEW", "HOT_PINK", "INDIAN_RED", "INDIGO", "IVORY", "KHAKI", "LAVENDER", "LAVENDER_BLUSH", "LAWN_GREEN", "LEMON_CHIFFON", "LIGHT_BLUE", "LIGHT_CORAL", "LIGHT_CYAN", "LIGHT_GOLDENROD_YELLOW", "LIGHT_GRAY", "LIGHT_GREEN", "LIGHT_GREY", "LIGHT_PINK", "LIGHT_SALMON", "LIGHT_SEA_GREEN", "LIGHT_SKY_BLUE", "LIGHT_SLATE_GRAY", "LIGHT_SLATE_GREY", "LIGHT_STEEL_BLUE", "LIGHT_YELLOW", "LIME", "LIME_GREEN", "LINEN", "MAGENTA", "MAROON", "MEDIUM_AQUAMARINE", "MEDIUM_BLUE", "MEDIUM_ORCHID", "MEDIUM_PURPLE", "MEDIUM_SEA_GREEN", "MEDIUM_SLATE_BLUE", "MEDIUM_SPRING_GREEN", "MEDIUM_TURQUOISE", "MEDIUM_VIOLET_RED", "MIDNIGHT_BLUE", "MINT_CREAM", "MISTY_ROSE", "MOCCASIN", "NAVAJO_WHITE", "NAVY", "OLD_LACE", "OLIVE", "OLIVE_DRAB", "ORANGE", "ORANGE_RED", "ORCHID", "PALE_GOLDEN_ROD", "PALE_GREEN", "PALE_TURQUOISE", "PALE_VIOLET_RED", "PAPAYA_WHIP", "PEACH_PUFF", "PERU", "PINK", "PLUM", "POWDER_BLUE", "PURPLE", "RED", "ROSY_BROWN", "ROYAL_BLUE", "SADDLE_BROWN", "SALMON", "SANDY_BROWN", "SEA_GREEN", "SEA_SHELL", "SIENNA", "SILVER", "SKY_BLUE", "SLATE_BLUE", "SLATE_GRAY", "SLATE_GREY", "SNOW", "SPRING_GREEN", "STEEL_BLUE", "TAN", "TEAL", "THISLE", "TOMATO", "TURQUOISE", "VIOLET", "WHEAT", "WHITE", "WHITE_SMOKE", "YELLOW", "YELLOW_GREEN"] };
	cocktail_core_css_CSSColorKeyword.ALICE_BLUE = ["ALICE_BLUE", 0];
	cocktail_core_css_CSSColorKeyword.ALICE_BLUE.toString = $estr;
	cocktail_core_css_CSSColorKeyword.ALICE_BLUE.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.ANTIQUE_WHITE = ["ANTIQUE_WHITE", 1];
	cocktail_core_css_CSSColorKeyword.ANTIQUE_WHITE.toString = $estr;
	cocktail_core_css_CSSColorKeyword.ANTIQUE_WHITE.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.AQUA = ["AQUA", 2];
	cocktail_core_css_CSSColorKeyword.AQUA.toString = $estr;
	cocktail_core_css_CSSColorKeyword.AQUA.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.AQUAMARINE = ["AQUAMARINE", 3];
	cocktail_core_css_CSSColorKeyword.AQUAMARINE.toString = $estr;
	cocktail_core_css_CSSColorKeyword.AQUAMARINE.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.AZURE = ["AZURE", 4];
	cocktail_core_css_CSSColorKeyword.AZURE.toString = $estr;
	cocktail_core_css_CSSColorKeyword.AZURE.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.BEIGE = ["BEIGE", 5];
	cocktail_core_css_CSSColorKeyword.BEIGE.toString = $estr;
	cocktail_core_css_CSSColorKeyword.BEIGE.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.BISQUE = ["BISQUE", 6];
	cocktail_core_css_CSSColorKeyword.BISQUE.toString = $estr;
	cocktail_core_css_CSSColorKeyword.BISQUE.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.BLACK = ["BLACK", 7];
	cocktail_core_css_CSSColorKeyword.BLACK.toString = $estr;
	cocktail_core_css_CSSColorKeyword.BLACK.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.BLANCHE_DALMOND = ["BLANCHE_DALMOND", 8];
	cocktail_core_css_CSSColorKeyword.BLANCHE_DALMOND.toString = $estr;
	cocktail_core_css_CSSColorKeyword.BLANCHE_DALMOND.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.BLUE = ["BLUE", 9];
	cocktail_core_css_CSSColorKeyword.BLUE.toString = $estr;
	cocktail_core_css_CSSColorKeyword.BLUE.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.BLUE_VIOLET = ["BLUE_VIOLET", 10];
	cocktail_core_css_CSSColorKeyword.BLUE_VIOLET.toString = $estr;
	cocktail_core_css_CSSColorKeyword.BLUE_VIOLET.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.BROWN = ["BROWN", 11];
	cocktail_core_css_CSSColorKeyword.BROWN.toString = $estr;
	cocktail_core_css_CSSColorKeyword.BROWN.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.BURLY_WOOD = ["BURLY_WOOD", 12];
	cocktail_core_css_CSSColorKeyword.BURLY_WOOD.toString = $estr;
	cocktail_core_css_CSSColorKeyword.BURLY_WOOD.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.CADET_BLUE = ["CADET_BLUE", 13];
	cocktail_core_css_CSSColorKeyword.CADET_BLUE.toString = $estr;
	cocktail_core_css_CSSColorKeyword.CADET_BLUE.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.CHARTREUSE = ["CHARTREUSE", 14];
	cocktail_core_css_CSSColorKeyword.CHARTREUSE.toString = $estr;
	cocktail_core_css_CSSColorKeyword.CHARTREUSE.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.CHOCOLATE = ["CHOCOLATE", 15];
	cocktail_core_css_CSSColorKeyword.CHOCOLATE.toString = $estr;
	cocktail_core_css_CSSColorKeyword.CHOCOLATE.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.CORAL = ["CORAL", 16];
	cocktail_core_css_CSSColorKeyword.CORAL.toString = $estr;
	cocktail_core_css_CSSColorKeyword.CORAL.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.CORNFLOWER_BLUE = ["CORNFLOWER_BLUE", 17];
	cocktail_core_css_CSSColorKeyword.CORNFLOWER_BLUE.toString = $estr;
	cocktail_core_css_CSSColorKeyword.CORNFLOWER_BLUE.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.CORNSILK = ["CORNSILK", 18];
	cocktail_core_css_CSSColorKeyword.CORNSILK.toString = $estr;
	cocktail_core_css_CSSColorKeyword.CORNSILK.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.CRIMSON = ["CRIMSON", 19];
	cocktail_core_css_CSSColorKeyword.CRIMSON.toString = $estr;
	cocktail_core_css_CSSColorKeyword.CRIMSON.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.CYAN = ["CYAN", 20];
	cocktail_core_css_CSSColorKeyword.CYAN.toString = $estr;
	cocktail_core_css_CSSColorKeyword.CYAN.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.DARK_BLUE = ["DARK_BLUE", 21];
	cocktail_core_css_CSSColorKeyword.DARK_BLUE.toString = $estr;
	cocktail_core_css_CSSColorKeyword.DARK_BLUE.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.DARK_CYAN = ["DARK_CYAN", 22];
	cocktail_core_css_CSSColorKeyword.DARK_CYAN.toString = $estr;
	cocktail_core_css_CSSColorKeyword.DARK_CYAN.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.DARK_GOLDEN_ROD = ["DARK_GOLDEN_ROD", 23];
	cocktail_core_css_CSSColorKeyword.DARK_GOLDEN_ROD.toString = $estr;
	cocktail_core_css_CSSColorKeyword.DARK_GOLDEN_ROD.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.DARK_GRAY = ["DARK_GRAY", 24];
	cocktail_core_css_CSSColorKeyword.DARK_GRAY.toString = $estr;
	cocktail_core_css_CSSColorKeyword.DARK_GRAY.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.DARK_GREEN = ["DARK_GREEN", 25];
	cocktail_core_css_CSSColorKeyword.DARK_GREEN.toString = $estr;
	cocktail_core_css_CSSColorKeyword.DARK_GREEN.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.DARK_GREY = ["DARK_GREY", 26];
	cocktail_core_css_CSSColorKeyword.DARK_GREY.toString = $estr;
	cocktail_core_css_CSSColorKeyword.DARK_GREY.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.DARK_KHAKI = ["DARK_KHAKI", 27];
	cocktail_core_css_CSSColorKeyword.DARK_KHAKI.toString = $estr;
	cocktail_core_css_CSSColorKeyword.DARK_KHAKI.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.DARK_MAGENTA = ["DARK_MAGENTA", 28];
	cocktail_core_css_CSSColorKeyword.DARK_MAGENTA.toString = $estr;
	cocktail_core_css_CSSColorKeyword.DARK_MAGENTA.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.DARK_OLIVE_GREEN = ["DARK_OLIVE_GREEN", 29];
	cocktail_core_css_CSSColorKeyword.DARK_OLIVE_GREEN.toString = $estr;
	cocktail_core_css_CSSColorKeyword.DARK_OLIVE_GREEN.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.DARK_ORANGE = ["DARK_ORANGE", 30];
	cocktail_core_css_CSSColorKeyword.DARK_ORANGE.toString = $estr;
	cocktail_core_css_CSSColorKeyword.DARK_ORANGE.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.DARK_ORCHID = ["DARK_ORCHID", 31];
	cocktail_core_css_CSSColorKeyword.DARK_ORCHID.toString = $estr;
	cocktail_core_css_CSSColorKeyword.DARK_ORCHID.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.DARK_RED = ["DARK_RED", 32];
	cocktail_core_css_CSSColorKeyword.DARK_RED.toString = $estr;
	cocktail_core_css_CSSColorKeyword.DARK_RED.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.DARK_SALMON = ["DARK_SALMON", 33];
	cocktail_core_css_CSSColorKeyword.DARK_SALMON.toString = $estr;
	cocktail_core_css_CSSColorKeyword.DARK_SALMON.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.DARK_SEA_GREEN = ["DARK_SEA_GREEN", 34];
	cocktail_core_css_CSSColorKeyword.DARK_SEA_GREEN.toString = $estr;
	cocktail_core_css_CSSColorKeyword.DARK_SEA_GREEN.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.DARK_SLATE_BLUE = ["DARK_SLATE_BLUE", 35];
	cocktail_core_css_CSSColorKeyword.DARK_SLATE_BLUE.toString = $estr;
	cocktail_core_css_CSSColorKeyword.DARK_SLATE_BLUE.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.DARK_SLATE_GRAY = ["DARK_SLATE_GRAY", 36];
	cocktail_core_css_CSSColorKeyword.DARK_SLATE_GRAY.toString = $estr;
	cocktail_core_css_CSSColorKeyword.DARK_SLATE_GRAY.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.DARK_SLATE_GREY = ["DARK_SLATE_GREY", 37];
	cocktail_core_css_CSSColorKeyword.DARK_SLATE_GREY.toString = $estr;
	cocktail_core_css_CSSColorKeyword.DARK_SLATE_GREY.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.DARK_TURQUOISE = ["DARK_TURQUOISE", 38];
	cocktail_core_css_CSSColorKeyword.DARK_TURQUOISE.toString = $estr;
	cocktail_core_css_CSSColorKeyword.DARK_TURQUOISE.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.DARK_VIOLET = ["DARK_VIOLET", 39];
	cocktail_core_css_CSSColorKeyword.DARK_VIOLET.toString = $estr;
	cocktail_core_css_CSSColorKeyword.DARK_VIOLET.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.DEEP_PINK = ["DEEP_PINK", 40];
	cocktail_core_css_CSSColorKeyword.DEEP_PINK.toString = $estr;
	cocktail_core_css_CSSColorKeyword.DEEP_PINK.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.DEEP_SKY_BLUE = ["DEEP_SKY_BLUE", 41];
	cocktail_core_css_CSSColorKeyword.DEEP_SKY_BLUE.toString = $estr;
	cocktail_core_css_CSSColorKeyword.DEEP_SKY_BLUE.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.DIM_GRAY = ["DIM_GRAY", 42];
	cocktail_core_css_CSSColorKeyword.DIM_GRAY.toString = $estr;
	cocktail_core_css_CSSColorKeyword.DIM_GRAY.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.DIM_GREY = ["DIM_GREY", 43];
	cocktail_core_css_CSSColorKeyword.DIM_GREY.toString = $estr;
	cocktail_core_css_CSSColorKeyword.DIM_GREY.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.DODGER_BLUE = ["DODGER_BLUE", 44];
	cocktail_core_css_CSSColorKeyword.DODGER_BLUE.toString = $estr;
	cocktail_core_css_CSSColorKeyword.DODGER_BLUE.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.FIRE_BRICK = ["FIRE_BRICK", 45];
	cocktail_core_css_CSSColorKeyword.FIRE_BRICK.toString = $estr;
	cocktail_core_css_CSSColorKeyword.FIRE_BRICK.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.FLORAL_WHITE = ["FLORAL_WHITE", 46];
	cocktail_core_css_CSSColorKeyword.FLORAL_WHITE.toString = $estr;
	cocktail_core_css_CSSColorKeyword.FLORAL_WHITE.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.FOREST_GREEN = ["FOREST_GREEN", 47];
	cocktail_core_css_CSSColorKeyword.FOREST_GREEN.toString = $estr;
	cocktail_core_css_CSSColorKeyword.FOREST_GREEN.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.FUCHSIA = ["FUCHSIA", 48];
	cocktail_core_css_CSSColorKeyword.FUCHSIA.toString = $estr;
	cocktail_core_css_CSSColorKeyword.FUCHSIA.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.GAINSBORO = ["GAINSBORO", 49];
	cocktail_core_css_CSSColorKeyword.GAINSBORO.toString = $estr;
	cocktail_core_css_CSSColorKeyword.GAINSBORO.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.GHOST_WHITE = ["GHOST_WHITE", 50];
	cocktail_core_css_CSSColorKeyword.GHOST_WHITE.toString = $estr;
	cocktail_core_css_CSSColorKeyword.GHOST_WHITE.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.GOLD = ["GOLD", 51];
	cocktail_core_css_CSSColorKeyword.GOLD.toString = $estr;
	cocktail_core_css_CSSColorKeyword.GOLD.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.GOLDEN_ROD = ["GOLDEN_ROD", 52];
	cocktail_core_css_CSSColorKeyword.GOLDEN_ROD.toString = $estr;
	cocktail_core_css_CSSColorKeyword.GOLDEN_ROD.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.GRAY = ["GRAY", 53];
	cocktail_core_css_CSSColorKeyword.GRAY.toString = $estr;
	cocktail_core_css_CSSColorKeyword.GRAY.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.GREEN = ["GREEN", 54];
	cocktail_core_css_CSSColorKeyword.GREEN.toString = $estr;
	cocktail_core_css_CSSColorKeyword.GREEN.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.GREEN_YELLOW = ["GREEN_YELLOW", 55];
	cocktail_core_css_CSSColorKeyword.GREEN_YELLOW.toString = $estr;
	cocktail_core_css_CSSColorKeyword.GREEN_YELLOW.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.GREY = ["GREY", 56];
	cocktail_core_css_CSSColorKeyword.GREY.toString = $estr;
	cocktail_core_css_CSSColorKeyword.GREY.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.HONEY_DEW = ["HONEY_DEW", 57];
	cocktail_core_css_CSSColorKeyword.HONEY_DEW.toString = $estr;
	cocktail_core_css_CSSColorKeyword.HONEY_DEW.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.HOT_PINK = ["HOT_PINK", 58];
	cocktail_core_css_CSSColorKeyword.HOT_PINK.toString = $estr;
	cocktail_core_css_CSSColorKeyword.HOT_PINK.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.INDIAN_RED = ["INDIAN_RED", 59];
	cocktail_core_css_CSSColorKeyword.INDIAN_RED.toString = $estr;
	cocktail_core_css_CSSColorKeyword.INDIAN_RED.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.INDIGO = ["INDIGO", 60];
	cocktail_core_css_CSSColorKeyword.INDIGO.toString = $estr;
	cocktail_core_css_CSSColorKeyword.INDIGO.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.IVORY = ["IVORY", 61];
	cocktail_core_css_CSSColorKeyword.IVORY.toString = $estr;
	cocktail_core_css_CSSColorKeyword.IVORY.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.KHAKI = ["KHAKI", 62];
	cocktail_core_css_CSSColorKeyword.KHAKI.toString = $estr;
	cocktail_core_css_CSSColorKeyword.KHAKI.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.LAVENDER = ["LAVENDER", 63];
	cocktail_core_css_CSSColorKeyword.LAVENDER.toString = $estr;
	cocktail_core_css_CSSColorKeyword.LAVENDER.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.LAVENDER_BLUSH = ["LAVENDER_BLUSH", 64];
	cocktail_core_css_CSSColorKeyword.LAVENDER_BLUSH.toString = $estr;
	cocktail_core_css_CSSColorKeyword.LAVENDER_BLUSH.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.LAWN_GREEN = ["LAWN_GREEN", 65];
	cocktail_core_css_CSSColorKeyword.LAWN_GREEN.toString = $estr;
	cocktail_core_css_CSSColorKeyword.LAWN_GREEN.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.LEMON_CHIFFON = ["LEMON_CHIFFON", 66];
	cocktail_core_css_CSSColorKeyword.LEMON_CHIFFON.toString = $estr;
	cocktail_core_css_CSSColorKeyword.LEMON_CHIFFON.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.LIGHT_BLUE = ["LIGHT_BLUE", 67];
	cocktail_core_css_CSSColorKeyword.LIGHT_BLUE.toString = $estr;
	cocktail_core_css_CSSColorKeyword.LIGHT_BLUE.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.LIGHT_CORAL = ["LIGHT_CORAL", 68];
	cocktail_core_css_CSSColorKeyword.LIGHT_CORAL.toString = $estr;
	cocktail_core_css_CSSColorKeyword.LIGHT_CORAL.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.LIGHT_CYAN = ["LIGHT_CYAN", 69];
	cocktail_core_css_CSSColorKeyword.LIGHT_CYAN.toString = $estr;
	cocktail_core_css_CSSColorKeyword.LIGHT_CYAN.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.LIGHT_GOLDENROD_YELLOW = ["LIGHT_GOLDENROD_YELLOW", 70];
	cocktail_core_css_CSSColorKeyword.LIGHT_GOLDENROD_YELLOW.toString = $estr;
	cocktail_core_css_CSSColorKeyword.LIGHT_GOLDENROD_YELLOW.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.LIGHT_GRAY = ["LIGHT_GRAY", 71];
	cocktail_core_css_CSSColorKeyword.LIGHT_GRAY.toString = $estr;
	cocktail_core_css_CSSColorKeyword.LIGHT_GRAY.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.LIGHT_GREEN = ["LIGHT_GREEN", 72];
	cocktail_core_css_CSSColorKeyword.LIGHT_GREEN.toString = $estr;
	cocktail_core_css_CSSColorKeyword.LIGHT_GREEN.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.LIGHT_GREY = ["LIGHT_GREY", 73];
	cocktail_core_css_CSSColorKeyword.LIGHT_GREY.toString = $estr;
	cocktail_core_css_CSSColorKeyword.LIGHT_GREY.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.LIGHT_PINK = ["LIGHT_PINK", 74];
	cocktail_core_css_CSSColorKeyword.LIGHT_PINK.toString = $estr;
	cocktail_core_css_CSSColorKeyword.LIGHT_PINK.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.LIGHT_SALMON = ["LIGHT_SALMON", 75];
	cocktail_core_css_CSSColorKeyword.LIGHT_SALMON.toString = $estr;
	cocktail_core_css_CSSColorKeyword.LIGHT_SALMON.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.LIGHT_SEA_GREEN = ["LIGHT_SEA_GREEN", 76];
	cocktail_core_css_CSSColorKeyword.LIGHT_SEA_GREEN.toString = $estr;
	cocktail_core_css_CSSColorKeyword.LIGHT_SEA_GREEN.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.LIGHT_SKY_BLUE = ["LIGHT_SKY_BLUE", 77];
	cocktail_core_css_CSSColorKeyword.LIGHT_SKY_BLUE.toString = $estr;
	cocktail_core_css_CSSColorKeyword.LIGHT_SKY_BLUE.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.LIGHT_SLATE_GRAY = ["LIGHT_SLATE_GRAY", 78];
	cocktail_core_css_CSSColorKeyword.LIGHT_SLATE_GRAY.toString = $estr;
	cocktail_core_css_CSSColorKeyword.LIGHT_SLATE_GRAY.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.LIGHT_SLATE_GREY = ["LIGHT_SLATE_GREY", 79];
	cocktail_core_css_CSSColorKeyword.LIGHT_SLATE_GREY.toString = $estr;
	cocktail_core_css_CSSColorKeyword.LIGHT_SLATE_GREY.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.LIGHT_STEEL_BLUE = ["LIGHT_STEEL_BLUE", 80];
	cocktail_core_css_CSSColorKeyword.LIGHT_STEEL_BLUE.toString = $estr;
	cocktail_core_css_CSSColorKeyword.LIGHT_STEEL_BLUE.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.LIGHT_YELLOW = ["LIGHT_YELLOW", 81];
	cocktail_core_css_CSSColorKeyword.LIGHT_YELLOW.toString = $estr;
	cocktail_core_css_CSSColorKeyword.LIGHT_YELLOW.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.LIME = ["LIME", 82];
	cocktail_core_css_CSSColorKeyword.LIME.toString = $estr;
	cocktail_core_css_CSSColorKeyword.LIME.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.LIME_GREEN = ["LIME_GREEN", 83];
	cocktail_core_css_CSSColorKeyword.LIME_GREEN.toString = $estr;
	cocktail_core_css_CSSColorKeyword.LIME_GREEN.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.LINEN = ["LINEN", 84];
	cocktail_core_css_CSSColorKeyword.LINEN.toString = $estr;
	cocktail_core_css_CSSColorKeyword.LINEN.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.MAGENTA = ["MAGENTA", 85];
	cocktail_core_css_CSSColorKeyword.MAGENTA.toString = $estr;
	cocktail_core_css_CSSColorKeyword.MAGENTA.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.MAROON = ["MAROON", 86];
	cocktail_core_css_CSSColorKeyword.MAROON.toString = $estr;
	cocktail_core_css_CSSColorKeyword.MAROON.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.MEDIUM_AQUAMARINE = ["MEDIUM_AQUAMARINE", 87];
	cocktail_core_css_CSSColorKeyword.MEDIUM_AQUAMARINE.toString = $estr;
	cocktail_core_css_CSSColorKeyword.MEDIUM_AQUAMARINE.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.MEDIUM_BLUE = ["MEDIUM_BLUE", 88];
	cocktail_core_css_CSSColorKeyword.MEDIUM_BLUE.toString = $estr;
	cocktail_core_css_CSSColorKeyword.MEDIUM_BLUE.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.MEDIUM_ORCHID = ["MEDIUM_ORCHID", 89];
	cocktail_core_css_CSSColorKeyword.MEDIUM_ORCHID.toString = $estr;
	cocktail_core_css_CSSColorKeyword.MEDIUM_ORCHID.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.MEDIUM_PURPLE = ["MEDIUM_PURPLE", 90];
	cocktail_core_css_CSSColorKeyword.MEDIUM_PURPLE.toString = $estr;
	cocktail_core_css_CSSColorKeyword.MEDIUM_PURPLE.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.MEDIUM_SEA_GREEN = ["MEDIUM_SEA_GREEN", 91];
	cocktail_core_css_CSSColorKeyword.MEDIUM_SEA_GREEN.toString = $estr;
	cocktail_core_css_CSSColorKeyword.MEDIUM_SEA_GREEN.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.MEDIUM_SLATE_BLUE = ["MEDIUM_SLATE_BLUE", 92];
	cocktail_core_css_CSSColorKeyword.MEDIUM_SLATE_BLUE.toString = $estr;
	cocktail_core_css_CSSColorKeyword.MEDIUM_SLATE_BLUE.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.MEDIUM_SPRING_GREEN = ["MEDIUM_SPRING_GREEN", 93];
	cocktail_core_css_CSSColorKeyword.MEDIUM_SPRING_GREEN.toString = $estr;
	cocktail_core_css_CSSColorKeyword.MEDIUM_SPRING_GREEN.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.MEDIUM_TURQUOISE = ["MEDIUM_TURQUOISE", 94];
	cocktail_core_css_CSSColorKeyword.MEDIUM_TURQUOISE.toString = $estr;
	cocktail_core_css_CSSColorKeyword.MEDIUM_TURQUOISE.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.MEDIUM_VIOLET_RED = ["MEDIUM_VIOLET_RED", 95];
	cocktail_core_css_CSSColorKeyword.MEDIUM_VIOLET_RED.toString = $estr;
	cocktail_core_css_CSSColorKeyword.MEDIUM_VIOLET_RED.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.MIDNIGHT_BLUE = ["MIDNIGHT_BLUE", 96];
	cocktail_core_css_CSSColorKeyword.MIDNIGHT_BLUE.toString = $estr;
	cocktail_core_css_CSSColorKeyword.MIDNIGHT_BLUE.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.MINT_CREAM = ["MINT_CREAM", 97];
	cocktail_core_css_CSSColorKeyword.MINT_CREAM.toString = $estr;
	cocktail_core_css_CSSColorKeyword.MINT_CREAM.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.MISTY_ROSE = ["MISTY_ROSE", 98];
	cocktail_core_css_CSSColorKeyword.MISTY_ROSE.toString = $estr;
	cocktail_core_css_CSSColorKeyword.MISTY_ROSE.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.MOCCASIN = ["MOCCASIN", 99];
	cocktail_core_css_CSSColorKeyword.MOCCASIN.toString = $estr;
	cocktail_core_css_CSSColorKeyword.MOCCASIN.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.NAVAJO_WHITE = ["NAVAJO_WHITE", 100];
	cocktail_core_css_CSSColorKeyword.NAVAJO_WHITE.toString = $estr;
	cocktail_core_css_CSSColorKeyword.NAVAJO_WHITE.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.NAVY = ["NAVY", 101];
	cocktail_core_css_CSSColorKeyword.NAVY.toString = $estr;
	cocktail_core_css_CSSColorKeyword.NAVY.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.OLD_LACE = ["OLD_LACE", 102];
	cocktail_core_css_CSSColorKeyword.OLD_LACE.toString = $estr;
	cocktail_core_css_CSSColorKeyword.OLD_LACE.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.OLIVE = ["OLIVE", 103];
	cocktail_core_css_CSSColorKeyword.OLIVE.toString = $estr;
	cocktail_core_css_CSSColorKeyword.OLIVE.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.OLIVE_DRAB = ["OLIVE_DRAB", 104];
	cocktail_core_css_CSSColorKeyword.OLIVE_DRAB.toString = $estr;
	cocktail_core_css_CSSColorKeyword.OLIVE_DRAB.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.ORANGE = ["ORANGE", 105];
	cocktail_core_css_CSSColorKeyword.ORANGE.toString = $estr;
	cocktail_core_css_CSSColorKeyword.ORANGE.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.ORANGE_RED = ["ORANGE_RED", 106];
	cocktail_core_css_CSSColorKeyword.ORANGE_RED.toString = $estr;
	cocktail_core_css_CSSColorKeyword.ORANGE_RED.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.ORCHID = ["ORCHID", 107];
	cocktail_core_css_CSSColorKeyword.ORCHID.toString = $estr;
	cocktail_core_css_CSSColorKeyword.ORCHID.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.PALE_GOLDEN_ROD = ["PALE_GOLDEN_ROD", 108];
	cocktail_core_css_CSSColorKeyword.PALE_GOLDEN_ROD.toString = $estr;
	cocktail_core_css_CSSColorKeyword.PALE_GOLDEN_ROD.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.PALE_GREEN = ["PALE_GREEN", 109];
	cocktail_core_css_CSSColorKeyword.PALE_GREEN.toString = $estr;
	cocktail_core_css_CSSColorKeyword.PALE_GREEN.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.PALE_TURQUOISE = ["PALE_TURQUOISE", 110];
	cocktail_core_css_CSSColorKeyword.PALE_TURQUOISE.toString = $estr;
	cocktail_core_css_CSSColorKeyword.PALE_TURQUOISE.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.PALE_VIOLET_RED = ["PALE_VIOLET_RED", 111];
	cocktail_core_css_CSSColorKeyword.PALE_VIOLET_RED.toString = $estr;
	cocktail_core_css_CSSColorKeyword.PALE_VIOLET_RED.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.PAPAYA_WHIP = ["PAPAYA_WHIP", 112];
	cocktail_core_css_CSSColorKeyword.PAPAYA_WHIP.toString = $estr;
	cocktail_core_css_CSSColorKeyword.PAPAYA_WHIP.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.PEACH_PUFF = ["PEACH_PUFF", 113];
	cocktail_core_css_CSSColorKeyword.PEACH_PUFF.toString = $estr;
	cocktail_core_css_CSSColorKeyword.PEACH_PUFF.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.PERU = ["PERU", 114];
	cocktail_core_css_CSSColorKeyword.PERU.toString = $estr;
	cocktail_core_css_CSSColorKeyword.PERU.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.PINK = ["PINK", 115];
	cocktail_core_css_CSSColorKeyword.PINK.toString = $estr;
	cocktail_core_css_CSSColorKeyword.PINK.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.PLUM = ["PLUM", 116];
	cocktail_core_css_CSSColorKeyword.PLUM.toString = $estr;
	cocktail_core_css_CSSColorKeyword.PLUM.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.POWDER_BLUE = ["POWDER_BLUE", 117];
	cocktail_core_css_CSSColorKeyword.POWDER_BLUE.toString = $estr;
	cocktail_core_css_CSSColorKeyword.POWDER_BLUE.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.PURPLE = ["PURPLE", 118];
	cocktail_core_css_CSSColorKeyword.PURPLE.toString = $estr;
	cocktail_core_css_CSSColorKeyword.PURPLE.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.RED = ["RED", 119];
	cocktail_core_css_CSSColorKeyword.RED.toString = $estr;
	cocktail_core_css_CSSColorKeyword.RED.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.ROSY_BROWN = ["ROSY_BROWN", 120];
	cocktail_core_css_CSSColorKeyword.ROSY_BROWN.toString = $estr;
	cocktail_core_css_CSSColorKeyword.ROSY_BROWN.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.ROYAL_BLUE = ["ROYAL_BLUE", 121];
	cocktail_core_css_CSSColorKeyword.ROYAL_BLUE.toString = $estr;
	cocktail_core_css_CSSColorKeyword.ROYAL_BLUE.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.SADDLE_BROWN = ["SADDLE_BROWN", 122];
	cocktail_core_css_CSSColorKeyword.SADDLE_BROWN.toString = $estr;
	cocktail_core_css_CSSColorKeyword.SADDLE_BROWN.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.SALMON = ["SALMON", 123];
	cocktail_core_css_CSSColorKeyword.SALMON.toString = $estr;
	cocktail_core_css_CSSColorKeyword.SALMON.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.SANDY_BROWN = ["SANDY_BROWN", 124];
	cocktail_core_css_CSSColorKeyword.SANDY_BROWN.toString = $estr;
	cocktail_core_css_CSSColorKeyword.SANDY_BROWN.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.SEA_GREEN = ["SEA_GREEN", 125];
	cocktail_core_css_CSSColorKeyword.SEA_GREEN.toString = $estr;
	cocktail_core_css_CSSColorKeyword.SEA_GREEN.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.SEA_SHELL = ["SEA_SHELL", 126];
	cocktail_core_css_CSSColorKeyword.SEA_SHELL.toString = $estr;
	cocktail_core_css_CSSColorKeyword.SEA_SHELL.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.SIENNA = ["SIENNA", 127];
	cocktail_core_css_CSSColorKeyword.SIENNA.toString = $estr;
	cocktail_core_css_CSSColorKeyword.SIENNA.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.SILVER = ["SILVER", 128];
	cocktail_core_css_CSSColorKeyword.SILVER.toString = $estr;
	cocktail_core_css_CSSColorKeyword.SILVER.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.SKY_BLUE = ["SKY_BLUE", 129];
	cocktail_core_css_CSSColorKeyword.SKY_BLUE.toString = $estr;
	cocktail_core_css_CSSColorKeyword.SKY_BLUE.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.SLATE_BLUE = ["SLATE_BLUE", 130];
	cocktail_core_css_CSSColorKeyword.SLATE_BLUE.toString = $estr;
	cocktail_core_css_CSSColorKeyword.SLATE_BLUE.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.SLATE_GRAY = ["SLATE_GRAY", 131];
	cocktail_core_css_CSSColorKeyword.SLATE_GRAY.toString = $estr;
	cocktail_core_css_CSSColorKeyword.SLATE_GRAY.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.SLATE_GREY = ["SLATE_GREY", 132];
	cocktail_core_css_CSSColorKeyword.SLATE_GREY.toString = $estr;
	cocktail_core_css_CSSColorKeyword.SLATE_GREY.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.SNOW = ["SNOW", 133];
	cocktail_core_css_CSSColorKeyword.SNOW.toString = $estr;
	cocktail_core_css_CSSColorKeyword.SNOW.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.SPRING_GREEN = ["SPRING_GREEN", 134];
	cocktail_core_css_CSSColorKeyword.SPRING_GREEN.toString = $estr;
	cocktail_core_css_CSSColorKeyword.SPRING_GREEN.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.STEEL_BLUE = ["STEEL_BLUE", 135];
	cocktail_core_css_CSSColorKeyword.STEEL_BLUE.toString = $estr;
	cocktail_core_css_CSSColorKeyword.STEEL_BLUE.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.TAN = ["TAN", 136];
	cocktail_core_css_CSSColorKeyword.TAN.toString = $estr;
	cocktail_core_css_CSSColorKeyword.TAN.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.TEAL = ["TEAL", 137];
	cocktail_core_css_CSSColorKeyword.TEAL.toString = $estr;
	cocktail_core_css_CSSColorKeyword.TEAL.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.THISLE = ["THISLE", 138];
	cocktail_core_css_CSSColorKeyword.THISLE.toString = $estr;
	cocktail_core_css_CSSColorKeyword.THISLE.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.TOMATO = ["TOMATO", 139];
	cocktail_core_css_CSSColorKeyword.TOMATO.toString = $estr;
	cocktail_core_css_CSSColorKeyword.TOMATO.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.TURQUOISE = ["TURQUOISE", 140];
	cocktail_core_css_CSSColorKeyword.TURQUOISE.toString = $estr;
	cocktail_core_css_CSSColorKeyword.TURQUOISE.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.VIOLET = ["VIOLET", 141];
	cocktail_core_css_CSSColorKeyword.VIOLET.toString = $estr;
	cocktail_core_css_CSSColorKeyword.VIOLET.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.WHEAT = ["WHEAT", 142];
	cocktail_core_css_CSSColorKeyword.WHEAT.toString = $estr;
	cocktail_core_css_CSSColorKeyword.WHEAT.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.WHITE = ["WHITE", 143];
	cocktail_core_css_CSSColorKeyword.WHITE.toString = $estr;
	cocktail_core_css_CSSColorKeyword.WHITE.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.WHITE_SMOKE = ["WHITE_SMOKE", 144];
	cocktail_core_css_CSSColorKeyword.WHITE_SMOKE.toString = $estr;
	cocktail_core_css_CSSColorKeyword.WHITE_SMOKE.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.YELLOW = ["YELLOW", 145];
	cocktail_core_css_CSSColorKeyword.YELLOW.toString = $estr;
	cocktail_core_css_CSSColorKeyword.YELLOW.__enum__ = cocktail_core_css_CSSColorKeyword;
	cocktail_core_css_CSSColorKeyword.YELLOW_GREEN = ["YELLOW_GREEN", 146];
	cocktail_core_css_CSSColorKeyword.YELLOW_GREEN.toString = $estr;
	cocktail_core_css_CSSColorKeyword.YELLOW_GREEN.__enum__ = cocktail_core_css_CSSColorKeyword;
	var cocktail_core_css_CSSTransformFunctionValue = $hxClasses["cocktail.core.css.CSSTransformFunctionValue"] = { __ename__: ["cocktail", "core", "css", "CSSTransformFunctionValue"], __constructs__: ["MATRIX", "TRANSLATE", "TRANSLATE_X", "TRANSLATE_Y", "SCALE", "SCALE_X", "SCALE_Y", "ROTATE", "SKEW_X", "SKEW_Y", "SKEW"] };
	cocktail_core_css_CSSTransformFunctionValue.MATRIX = function (a, b, c, d, e, f) { var $x = ["MATRIX", 0, a, b, c, d, e, f]; $x.__enum__ = cocktail_core_css_CSSTransformFunctionValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSTransformFunctionValue.TRANSLATE = function (tx, ty) { var $x = ["TRANSLATE", 1, tx, ty]; $x.__enum__ = cocktail_core_css_CSSTransformFunctionValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSTransformFunctionValue.TRANSLATE_X = function (tx) { var $x = ["TRANSLATE_X", 2, tx]; $x.__enum__ = cocktail_core_css_CSSTransformFunctionValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSTransformFunctionValue.TRANSLATE_Y = function (ty) { var $x = ["TRANSLATE_Y", 3, ty]; $x.__enum__ = cocktail_core_css_CSSTransformFunctionValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSTransformFunctionValue.SCALE = function (sx, sy) { var $x = ["SCALE", 4, sx, sy]; $x.__enum__ = cocktail_core_css_CSSTransformFunctionValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSTransformFunctionValue.SCALE_X = function (sx) { var $x = ["SCALE_X", 5, sx]; $x.__enum__ = cocktail_core_css_CSSTransformFunctionValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSTransformFunctionValue.SCALE_Y = function (sy) { var $x = ["SCALE_Y", 6, sy]; $x.__enum__ = cocktail_core_css_CSSTransformFunctionValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSTransformFunctionValue.ROTATE = function (angle) { var $x = ["ROTATE", 7, angle]; $x.__enum__ = cocktail_core_css_CSSTransformFunctionValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSTransformFunctionValue.SKEW_X = function (angle) { var $x = ["SKEW_X", 8, angle]; $x.__enum__ = cocktail_core_css_CSSTransformFunctionValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSTransformFunctionValue.SKEW_Y = function (angle) { var $x = ["SKEW_Y", 9, angle]; $x.__enum__ = cocktail_core_css_CSSTransformFunctionValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSTransformFunctionValue.SKEW = function (angleX, angleY) { var $x = ["SKEW", 10, angleX, angleY]; $x.__enum__ = cocktail_core_css_CSSTransformFunctionValue; $x.toString = $estr; return $x; };
	var cocktail_core_css_CSSTranslationValue = $hxClasses["cocktail.core.css.CSSTranslationValue"] = { __ename__: ["cocktail", "core", "css", "CSSTranslationValue"], __constructs__: ["ABSOLUTE_LENGTH", "LENGTH", "PERCENTAGE"] };
	cocktail_core_css_CSSTranslationValue.ABSOLUTE_LENGTH = function (value) { var $x = ["ABSOLUTE_LENGTH", 0, value]; $x.__enum__ = cocktail_core_css_CSSTranslationValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSTranslationValue.LENGTH = function (value) { var $x = ["LENGTH", 1, value]; $x.__enum__ = cocktail_core_css_CSSTranslationValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSTranslationValue.PERCENTAGE = function (value) { var $x = ["PERCENTAGE", 2, value]; $x.__enum__ = cocktail_core_css_CSSTranslationValue; $x.toString = $estr; return $x; };
	var cocktail_core_css_CSSFrequencyValue = $hxClasses["cocktail.core.css.CSSFrequencyValue"] = { __ename__: ["cocktail", "core", "css", "CSSFrequencyValue"], __constructs__: ["HERTZ", "KILO_HERTZ"] };
	cocktail_core_css_CSSFrequencyValue.HERTZ = function (value) { var $x = ["HERTZ", 0, value]; $x.__enum__ = cocktail_core_css_CSSFrequencyValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSFrequencyValue.KILO_HERTZ = function (value) { var $x = ["KILO_HERTZ", 1, value]; $x.__enum__ = cocktail_core_css_CSSFrequencyValue; $x.toString = $estr; return $x; };
	var cocktail_core_css_CSSResolutionValue = $hxClasses["cocktail.core.css.CSSResolutionValue"] = { __ename__: ["cocktail", "core", "css", "CSSResolutionValue"], __constructs__: ["DPI", "DPCM", "DPPX"] };
	cocktail_core_css_CSSResolutionValue.DPI = function (value) { var $x = ["DPI", 0, value]; $x.__enum__ = cocktail_core_css_CSSResolutionValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSResolutionValue.DPCM = function (value) { var $x = ["DPCM", 1, value]; $x.__enum__ = cocktail_core_css_CSSResolutionValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSResolutionValue.DPPX = function (value) { var $x = ["DPPX", 2, value]; $x.__enum__ = cocktail_core_css_CSSResolutionValue; $x.toString = $estr; return $x; };
	var cocktail_core_css_CSSAngleValue = $hxClasses["cocktail.core.css.CSSAngleValue"] = { __ename__: ["cocktail", "core", "css", "CSSAngleValue"], __constructs__: ["DEG", "GRAD", "RAD", "TURN"] };
	cocktail_core_css_CSSAngleValue.DEG = function (value) { var $x = ["DEG", 0, value]; $x.__enum__ = cocktail_core_css_CSSAngleValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSAngleValue.GRAD = function (value) { var $x = ["GRAD", 1, value]; $x.__enum__ = cocktail_core_css_CSSAngleValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSAngleValue.RAD = function (value) { var $x = ["RAD", 2, value]; $x.__enum__ = cocktail_core_css_CSSAngleValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSAngleValue.TURN = function (value) { var $x = ["TURN", 3, value]; $x.__enum__ = cocktail_core_css_CSSAngleValue; $x.toString = $estr; return $x; };
	var cocktail_core_css_CSSLengthValue = $hxClasses["cocktail.core.css.CSSLengthValue"] = { __ename__: ["cocktail", "core", "css", "CSSLengthValue"], __constructs__: ["PX", "CM", "MM", "PT", "PC", "IN", "EM", "REM", "EX", "CH", "VW", "VH", "VMIN", "VMAX"] };
	cocktail_core_css_CSSLengthValue.PX = function (value) { var $x = ["PX", 0, value]; $x.__enum__ = cocktail_core_css_CSSLengthValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSLengthValue.CM = function (value) { var $x = ["CM", 1, value]; $x.__enum__ = cocktail_core_css_CSSLengthValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSLengthValue.MM = function (value) { var $x = ["MM", 2, value]; $x.__enum__ = cocktail_core_css_CSSLengthValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSLengthValue.PT = function (value) { var $x = ["PT", 3, value]; $x.__enum__ = cocktail_core_css_CSSLengthValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSLengthValue.PC = function (value) { var $x = ["PC", 4, value]; $x.__enum__ = cocktail_core_css_CSSLengthValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSLengthValue.IN = function (value) { var $x = ["IN", 5, value]; $x.__enum__ = cocktail_core_css_CSSLengthValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSLengthValue.EM = function (value) { var $x = ["EM", 6, value]; $x.__enum__ = cocktail_core_css_CSSLengthValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSLengthValue.REM = function (value) { var $x = ["REM", 7, value]; $x.__enum__ = cocktail_core_css_CSSLengthValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSLengthValue.EX = function (value) { var $x = ["EX", 8, value]; $x.__enum__ = cocktail_core_css_CSSLengthValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSLengthValue.CH = function (value) { var $x = ["CH", 9, value]; $x.__enum__ = cocktail_core_css_CSSLengthValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSLengthValue.VW = function (value) { var $x = ["VW", 10, value]; $x.__enum__ = cocktail_core_css_CSSLengthValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSLengthValue.VH = function (value) { var $x = ["VH", 11, value]; $x.__enum__ = cocktail_core_css_CSSLengthValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSLengthValue.VMIN = function (value) { var $x = ["VMIN", 12, value]; $x.__enum__ = cocktail_core_css_CSSLengthValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSLengthValue.VMAX = function (value) { var $x = ["VMAX", 13, value]; $x.__enum__ = cocktail_core_css_CSSLengthValue; $x.toString = $estr; return $x; };
	var cocktail_core_css_RelativeLengthReferenceData = function () {
		this.em = 0;
		this.rem = 0;
		this.viewportHeight = 0;
		this.viewportWidth = 0;
		this.ch = 0;
		this.ex = 0;
	};
	$hxClasses["cocktail.core.css.RelativeLengthReferenceData"] = cocktail_core_css_RelativeLengthReferenceData;
	cocktail_core_css_RelativeLengthReferenceData.__name__ = ["cocktail", "core", "css", "RelativeLengthReferenceData"];
	cocktail_core_css_RelativeLengthReferenceData.prototype = {
		__class__: cocktail_core_css_RelativeLengthReferenceData
	};
	var cocktail_core_css_CSSTimeValue = $hxClasses["cocktail.core.css.CSSTimeValue"] = { __ename__: ["cocktail", "core", "css", "CSSTimeValue"], __constructs__: ["SECONDS", "MILLISECONDS"] };
	cocktail_core_css_CSSTimeValue.SECONDS = function (value) { var $x = ["SECONDS", 0, value]; $x.__enum__ = cocktail_core_css_CSSTimeValue; $x.toString = $estr; return $x; };
	cocktail_core_css_CSSTimeValue.MILLISECONDS = function (value) { var $x = ["MILLISECONDS", 1, value]; $x.__enum__ = cocktail_core_css_CSSTimeValue; $x.toString = $estr; return $x; };
	var cocktail_core_css_CSSKeywordValue = $hxClasses["cocktail.core.css.CSSKeywordValue"] = { __ename__: ["cocktail", "core", "css", "CSSKeywordValue"], __constructs__: ["NORMAL", "BOLD", "BOLDER", "LIGHTER", "ITALIC", "OBLIQUE", "SMALL_CAPS", "PRE", "NO_WRAP", "PRE_WRAP", "PRE_LINE", "LEFT", "RIGHT", "CENTER", "JUSTIFY", "CAPITALIZE", "UPPERCASE", "LOWERCASE", "NONE", "BASELINE", "SUB", "SUPER", "TOP", "TEXT_TOP", "MIDDLE", "BOTTOM", "TEXT_BOTTOM", "AUTO", "BLOCK", "INLINE_BLOCK", "INLINE", "BOTH", "STATIC", "RELATIVE", "ABSOLUTE", "FIXED", "VISIBLE", "HIDDEN", "SCROLL", "BORDER_BOX", "PADDING_BOX", "CONTENT_BOX", "CONTAIN", "COVER", "CROSSHAIR", "DEFAULT", "POINTER", "TEXT", "ALL", "EASE", "LINEAR", "EASE_IN", "EASE_OUT", "EASE_IN_OUT", "STEP_START", "STEP_END", "START", "END", "XX_SMALL", "X_SMALL", "SMALL", "MEDIUM", "LARGE", "X_LARGE", "XX_LARGE", "LARGER", "SMALLER", "REPEAT", "REPEAT_X", "REPEAT_Y", "SPACE", "ROUND", "NO_REPEAT", "THIN", "THICK", "DOTTED", "DASHED", "SOLID", "DOUBLE", "GROOVE", "RIDGE", "INSET", "OUTSET", "INVERT", "UNDERLINE", "OVERLINE", "LINE_THROUGH", "BLINK"] };
	cocktail_core_css_CSSKeywordValue.NORMAL = ["NORMAL", 0];
	cocktail_core_css_CSSKeywordValue.NORMAL.toString = $estr;
	cocktail_core_css_CSSKeywordValue.NORMAL.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.BOLD = ["BOLD", 1];
	cocktail_core_css_CSSKeywordValue.BOLD.toString = $estr;
	cocktail_core_css_CSSKeywordValue.BOLD.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.BOLDER = ["BOLDER", 2];
	cocktail_core_css_CSSKeywordValue.BOLDER.toString = $estr;
	cocktail_core_css_CSSKeywordValue.BOLDER.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.LIGHTER = ["LIGHTER", 3];
	cocktail_core_css_CSSKeywordValue.LIGHTER.toString = $estr;
	cocktail_core_css_CSSKeywordValue.LIGHTER.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.ITALIC = ["ITALIC", 4];
	cocktail_core_css_CSSKeywordValue.ITALIC.toString = $estr;
	cocktail_core_css_CSSKeywordValue.ITALIC.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.OBLIQUE = ["OBLIQUE", 5];
	cocktail_core_css_CSSKeywordValue.OBLIQUE.toString = $estr;
	cocktail_core_css_CSSKeywordValue.OBLIQUE.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.SMALL_CAPS = ["SMALL_CAPS", 6];
	cocktail_core_css_CSSKeywordValue.SMALL_CAPS.toString = $estr;
	cocktail_core_css_CSSKeywordValue.SMALL_CAPS.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.PRE = ["PRE", 7];
	cocktail_core_css_CSSKeywordValue.PRE.toString = $estr;
	cocktail_core_css_CSSKeywordValue.PRE.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.NO_WRAP = ["NO_WRAP", 8];
	cocktail_core_css_CSSKeywordValue.NO_WRAP.toString = $estr;
	cocktail_core_css_CSSKeywordValue.NO_WRAP.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.PRE_WRAP = ["PRE_WRAP", 9];
	cocktail_core_css_CSSKeywordValue.PRE_WRAP.toString = $estr;
	cocktail_core_css_CSSKeywordValue.PRE_WRAP.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.PRE_LINE = ["PRE_LINE", 10];
	cocktail_core_css_CSSKeywordValue.PRE_LINE.toString = $estr;
	cocktail_core_css_CSSKeywordValue.PRE_LINE.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.LEFT = ["LEFT", 11];
	cocktail_core_css_CSSKeywordValue.LEFT.toString = $estr;
	cocktail_core_css_CSSKeywordValue.LEFT.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.RIGHT = ["RIGHT", 12];
	cocktail_core_css_CSSKeywordValue.RIGHT.toString = $estr;
	cocktail_core_css_CSSKeywordValue.RIGHT.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.CENTER = ["CENTER", 13];
	cocktail_core_css_CSSKeywordValue.CENTER.toString = $estr;
	cocktail_core_css_CSSKeywordValue.CENTER.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.JUSTIFY = ["JUSTIFY", 14];
	cocktail_core_css_CSSKeywordValue.JUSTIFY.toString = $estr;
	cocktail_core_css_CSSKeywordValue.JUSTIFY.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.CAPITALIZE = ["CAPITALIZE", 15];
	cocktail_core_css_CSSKeywordValue.CAPITALIZE.toString = $estr;
	cocktail_core_css_CSSKeywordValue.CAPITALIZE.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.UPPERCASE = ["UPPERCASE", 16];
	cocktail_core_css_CSSKeywordValue.UPPERCASE.toString = $estr;
	cocktail_core_css_CSSKeywordValue.UPPERCASE.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.LOWERCASE = ["LOWERCASE", 17];
	cocktail_core_css_CSSKeywordValue.LOWERCASE.toString = $estr;
	cocktail_core_css_CSSKeywordValue.LOWERCASE.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.NONE = ["NONE", 18];
	cocktail_core_css_CSSKeywordValue.NONE.toString = $estr;
	cocktail_core_css_CSSKeywordValue.NONE.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.BASELINE = ["BASELINE", 19];
	cocktail_core_css_CSSKeywordValue.BASELINE.toString = $estr;
	cocktail_core_css_CSSKeywordValue.BASELINE.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.SUB = ["SUB", 20];
	cocktail_core_css_CSSKeywordValue.SUB.toString = $estr;
	cocktail_core_css_CSSKeywordValue.SUB.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.SUPER = ["SUPER", 21];
	cocktail_core_css_CSSKeywordValue.SUPER.toString = $estr;
	cocktail_core_css_CSSKeywordValue.SUPER.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.TOP = ["TOP", 22];
	cocktail_core_css_CSSKeywordValue.TOP.toString = $estr;
	cocktail_core_css_CSSKeywordValue.TOP.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.TEXT_TOP = ["TEXT_TOP", 23];
	cocktail_core_css_CSSKeywordValue.TEXT_TOP.toString = $estr;
	cocktail_core_css_CSSKeywordValue.TEXT_TOP.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.MIDDLE = ["MIDDLE", 24];
	cocktail_core_css_CSSKeywordValue.MIDDLE.toString = $estr;
	cocktail_core_css_CSSKeywordValue.MIDDLE.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.BOTTOM = ["BOTTOM", 25];
	cocktail_core_css_CSSKeywordValue.BOTTOM.toString = $estr;
	cocktail_core_css_CSSKeywordValue.BOTTOM.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.TEXT_BOTTOM = ["TEXT_BOTTOM", 26];
	cocktail_core_css_CSSKeywordValue.TEXT_BOTTOM.toString = $estr;
	cocktail_core_css_CSSKeywordValue.TEXT_BOTTOM.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.AUTO = ["AUTO", 27];
	cocktail_core_css_CSSKeywordValue.AUTO.toString = $estr;
	cocktail_core_css_CSSKeywordValue.AUTO.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.BLOCK = ["BLOCK", 28];
	cocktail_core_css_CSSKeywordValue.BLOCK.toString = $estr;
	cocktail_core_css_CSSKeywordValue.BLOCK.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.INLINE_BLOCK = ["INLINE_BLOCK", 29];
	cocktail_core_css_CSSKeywordValue.INLINE_BLOCK.toString = $estr;
	cocktail_core_css_CSSKeywordValue.INLINE_BLOCK.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.INLINE = ["INLINE", 30];
	cocktail_core_css_CSSKeywordValue.INLINE.toString = $estr;
	cocktail_core_css_CSSKeywordValue.INLINE.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.BOTH = ["BOTH", 31];
	cocktail_core_css_CSSKeywordValue.BOTH.toString = $estr;
	cocktail_core_css_CSSKeywordValue.BOTH.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.STATIC = ["STATIC", 32];
	cocktail_core_css_CSSKeywordValue.STATIC.toString = $estr;
	cocktail_core_css_CSSKeywordValue.STATIC.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.RELATIVE = ["RELATIVE", 33];
	cocktail_core_css_CSSKeywordValue.RELATIVE.toString = $estr;
	cocktail_core_css_CSSKeywordValue.RELATIVE.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.ABSOLUTE = ["ABSOLUTE", 34];
	cocktail_core_css_CSSKeywordValue.ABSOLUTE.toString = $estr;
	cocktail_core_css_CSSKeywordValue.ABSOLUTE.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.FIXED = ["FIXED", 35];
	cocktail_core_css_CSSKeywordValue.FIXED.toString = $estr;
	cocktail_core_css_CSSKeywordValue.FIXED.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.VISIBLE = ["VISIBLE", 36];
	cocktail_core_css_CSSKeywordValue.VISIBLE.toString = $estr;
	cocktail_core_css_CSSKeywordValue.VISIBLE.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.HIDDEN = ["HIDDEN", 37];
	cocktail_core_css_CSSKeywordValue.HIDDEN.toString = $estr;
	cocktail_core_css_CSSKeywordValue.HIDDEN.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.SCROLL = ["SCROLL", 38];
	cocktail_core_css_CSSKeywordValue.SCROLL.toString = $estr;
	cocktail_core_css_CSSKeywordValue.SCROLL.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.BORDER_BOX = ["BORDER_BOX", 39];
	cocktail_core_css_CSSKeywordValue.BORDER_BOX.toString = $estr;
	cocktail_core_css_CSSKeywordValue.BORDER_BOX.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.PADDING_BOX = ["PADDING_BOX", 40];
	cocktail_core_css_CSSKeywordValue.PADDING_BOX.toString = $estr;
	cocktail_core_css_CSSKeywordValue.PADDING_BOX.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.CONTENT_BOX = ["CONTENT_BOX", 41];
	cocktail_core_css_CSSKeywordValue.CONTENT_BOX.toString = $estr;
	cocktail_core_css_CSSKeywordValue.CONTENT_BOX.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.CONTAIN = ["CONTAIN", 42];
	cocktail_core_css_CSSKeywordValue.CONTAIN.toString = $estr;
	cocktail_core_css_CSSKeywordValue.CONTAIN.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.COVER = ["COVER", 43];
	cocktail_core_css_CSSKeywordValue.COVER.toString = $estr;
	cocktail_core_css_CSSKeywordValue.COVER.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.CROSSHAIR = ["CROSSHAIR", 44];
	cocktail_core_css_CSSKeywordValue.CROSSHAIR.toString = $estr;
	cocktail_core_css_CSSKeywordValue.CROSSHAIR.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.DEFAULT = ["DEFAULT", 45];
	cocktail_core_css_CSSKeywordValue.DEFAULT.toString = $estr;
	cocktail_core_css_CSSKeywordValue.DEFAULT.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.POINTER = ["POINTER", 46];
	cocktail_core_css_CSSKeywordValue.POINTER.toString = $estr;
	cocktail_core_css_CSSKeywordValue.POINTER.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.TEXT = ["TEXT", 47];
	cocktail_core_css_CSSKeywordValue.TEXT.toString = $estr;
	cocktail_core_css_CSSKeywordValue.TEXT.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.ALL = ["ALL", 48];
	cocktail_core_css_CSSKeywordValue.ALL.toString = $estr;
	cocktail_core_css_CSSKeywordValue.ALL.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.EASE = ["EASE", 49];
	cocktail_core_css_CSSKeywordValue.EASE.toString = $estr;
	cocktail_core_css_CSSKeywordValue.EASE.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.LINEAR = ["LINEAR", 50];
	cocktail_core_css_CSSKeywordValue.LINEAR.toString = $estr;
	cocktail_core_css_CSSKeywordValue.LINEAR.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.EASE_IN = ["EASE_IN", 51];
	cocktail_core_css_CSSKeywordValue.EASE_IN.toString = $estr;
	cocktail_core_css_CSSKeywordValue.EASE_IN.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.EASE_OUT = ["EASE_OUT", 52];
	cocktail_core_css_CSSKeywordValue.EASE_OUT.toString = $estr;
	cocktail_core_css_CSSKeywordValue.EASE_OUT.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.EASE_IN_OUT = ["EASE_IN_OUT", 53];
	cocktail_core_css_CSSKeywordValue.EASE_IN_OUT.toString = $estr;
	cocktail_core_css_CSSKeywordValue.EASE_IN_OUT.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.STEP_START = ["STEP_START", 54];
	cocktail_core_css_CSSKeywordValue.STEP_START.toString = $estr;
	cocktail_core_css_CSSKeywordValue.STEP_START.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.STEP_END = ["STEP_END", 55];
	cocktail_core_css_CSSKeywordValue.STEP_END.toString = $estr;
	cocktail_core_css_CSSKeywordValue.STEP_END.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.START = ["START", 56];
	cocktail_core_css_CSSKeywordValue.START.toString = $estr;
	cocktail_core_css_CSSKeywordValue.START.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.END = ["END", 57];
	cocktail_core_css_CSSKeywordValue.END.toString = $estr;
	cocktail_core_css_CSSKeywordValue.END.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.XX_SMALL = ["XX_SMALL", 58];
	cocktail_core_css_CSSKeywordValue.XX_SMALL.toString = $estr;
	cocktail_core_css_CSSKeywordValue.XX_SMALL.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.X_SMALL = ["X_SMALL", 59];
	cocktail_core_css_CSSKeywordValue.X_SMALL.toString = $estr;
	cocktail_core_css_CSSKeywordValue.X_SMALL.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.SMALL = ["SMALL", 60];
	cocktail_core_css_CSSKeywordValue.SMALL.toString = $estr;
	cocktail_core_css_CSSKeywordValue.SMALL.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.MEDIUM = ["MEDIUM", 61];
	cocktail_core_css_CSSKeywordValue.MEDIUM.toString = $estr;
	cocktail_core_css_CSSKeywordValue.MEDIUM.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.LARGE = ["LARGE", 62];
	cocktail_core_css_CSSKeywordValue.LARGE.toString = $estr;
	cocktail_core_css_CSSKeywordValue.LARGE.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.X_LARGE = ["X_LARGE", 63];
	cocktail_core_css_CSSKeywordValue.X_LARGE.toString = $estr;
	cocktail_core_css_CSSKeywordValue.X_LARGE.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.XX_LARGE = ["XX_LARGE", 64];
	cocktail_core_css_CSSKeywordValue.XX_LARGE.toString = $estr;
	cocktail_core_css_CSSKeywordValue.XX_LARGE.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.LARGER = ["LARGER", 65];
	cocktail_core_css_CSSKeywordValue.LARGER.toString = $estr;
	cocktail_core_css_CSSKeywordValue.LARGER.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.SMALLER = ["SMALLER", 66];
	cocktail_core_css_CSSKeywordValue.SMALLER.toString = $estr;
	cocktail_core_css_CSSKeywordValue.SMALLER.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.REPEAT = ["REPEAT", 67];
	cocktail_core_css_CSSKeywordValue.REPEAT.toString = $estr;
	cocktail_core_css_CSSKeywordValue.REPEAT.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.REPEAT_X = ["REPEAT_X", 68];
	cocktail_core_css_CSSKeywordValue.REPEAT_X.toString = $estr;
	cocktail_core_css_CSSKeywordValue.REPEAT_X.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.REPEAT_Y = ["REPEAT_Y", 69];
	cocktail_core_css_CSSKeywordValue.REPEAT_Y.toString = $estr;
	cocktail_core_css_CSSKeywordValue.REPEAT_Y.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.SPACE = ["SPACE", 70];
	cocktail_core_css_CSSKeywordValue.SPACE.toString = $estr;
	cocktail_core_css_CSSKeywordValue.SPACE.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.ROUND = ["ROUND", 71];
	cocktail_core_css_CSSKeywordValue.ROUND.toString = $estr;
	cocktail_core_css_CSSKeywordValue.ROUND.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.NO_REPEAT = ["NO_REPEAT", 72];
	cocktail_core_css_CSSKeywordValue.NO_REPEAT.toString = $estr;
	cocktail_core_css_CSSKeywordValue.NO_REPEAT.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.THIN = ["THIN", 73];
	cocktail_core_css_CSSKeywordValue.THIN.toString = $estr;
	cocktail_core_css_CSSKeywordValue.THIN.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.THICK = ["THICK", 74];
	cocktail_core_css_CSSKeywordValue.THICK.toString = $estr;
	cocktail_core_css_CSSKeywordValue.THICK.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.DOTTED = ["DOTTED", 75];
	cocktail_core_css_CSSKeywordValue.DOTTED.toString = $estr;
	cocktail_core_css_CSSKeywordValue.DOTTED.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.DASHED = ["DASHED", 76];
	cocktail_core_css_CSSKeywordValue.DASHED.toString = $estr;
	cocktail_core_css_CSSKeywordValue.DASHED.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.SOLID = ["SOLID", 77];
	cocktail_core_css_CSSKeywordValue.SOLID.toString = $estr;
	cocktail_core_css_CSSKeywordValue.SOLID.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.DOUBLE = ["DOUBLE", 78];
	cocktail_core_css_CSSKeywordValue.DOUBLE.toString = $estr;
	cocktail_core_css_CSSKeywordValue.DOUBLE.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.GROOVE = ["GROOVE", 79];
	cocktail_core_css_CSSKeywordValue.GROOVE.toString = $estr;
	cocktail_core_css_CSSKeywordValue.GROOVE.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.RIDGE = ["RIDGE", 80];
	cocktail_core_css_CSSKeywordValue.RIDGE.toString = $estr;
	cocktail_core_css_CSSKeywordValue.RIDGE.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.INSET = ["INSET", 81];
	cocktail_core_css_CSSKeywordValue.INSET.toString = $estr;
	cocktail_core_css_CSSKeywordValue.INSET.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.OUTSET = ["OUTSET", 82];
	cocktail_core_css_CSSKeywordValue.OUTSET.toString = $estr;
	cocktail_core_css_CSSKeywordValue.OUTSET.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.INVERT = ["INVERT", 83];
	cocktail_core_css_CSSKeywordValue.INVERT.toString = $estr;
	cocktail_core_css_CSSKeywordValue.INVERT.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.UNDERLINE = ["UNDERLINE", 84];
	cocktail_core_css_CSSKeywordValue.UNDERLINE.toString = $estr;
	cocktail_core_css_CSSKeywordValue.UNDERLINE.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.OVERLINE = ["OVERLINE", 85];
	cocktail_core_css_CSSKeywordValue.OVERLINE.toString = $estr;
	cocktail_core_css_CSSKeywordValue.OVERLINE.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.LINE_THROUGH = ["LINE_THROUGH", 86];
	cocktail_core_css_CSSKeywordValue.LINE_THROUGH.toString = $estr;
	cocktail_core_css_CSSKeywordValue.LINE_THROUGH.__enum__ = cocktail_core_css_CSSKeywordValue;
	cocktail_core_css_CSSKeywordValue.BLINK = ["BLINK", 87];
	cocktail_core_css_CSSKeywordValue.BLINK.toString = $estr;
	cocktail_core_css_CSSKeywordValue.BLINK.__enum__ = cocktail_core_css_CSSKeywordValue;
	var cocktail_core_css_CSSRule = function (parentStyleSheet, parentRule) {
		this.parentStyleSheet = parentStyleSheet;
		this.parentRule = parentRule;
	};
	$hxClasses["cocktail.core.css.CSSRule"] = cocktail_core_css_CSSRule;
	cocktail_core_css_CSSRule.__name__ = ["cocktail", "core", "css", "CSSRule"];
	cocktail_core_css_CSSRule.prototype = {
		dispose: function () {
			if (this.parentRule != null) {
				this.parentRule.dispose();
				this.parentRule = null;
			}
			if (this.parentStyleSheet != null) this.parentStyleSheet.dispose();
		}
		, get_cssText: function () {
			return this.cssText;
		}
		, set_cssText: function (value) {
			return this.cssText = value;
		}
		, __class__: cocktail_core_css_CSSRule
		, __properties__: { set_cssText: "set_cssText", get_cssText: "get_cssText" }
	};
	var cocktail_core_css_CSSMediaRule = function (parentStyleSheet, parentRule) {
		cocktail_core_css_CSSRule.call(this, parentStyleSheet, parentRule);
	};
	$hxClasses["cocktail.core.css.CSSMediaRule"] = cocktail_core_css_CSSMediaRule;
	cocktail_core_css_CSSMediaRule.__name__ = ["cocktail", "core", "css", "CSSMediaRule"];
	cocktail_core_css_CSSMediaRule.__super__ = cocktail_core_css_CSSRule;
	cocktail_core_css_CSSMediaRule.prototype = $extend(cocktail_core_css_CSSRule.prototype, {
		insertRule: function (rule, index) {
			return -1;
		}
		, deleteRule: function (index) {
		}
		, __class__: cocktail_core_css_CSSMediaRule
	});
	var cocktail_core_css_CSSStyleDeclaration = function (parentRule, onStyleChange) {
		this._onStyleChange = onStyleChange;
		this.parentRule = parentRule;
		this.length = 0;
	};
	$hxClasses["cocktail.core.css.CSSStyleDeclaration"] = cocktail_core_css_CSSStyleDeclaration;
	cocktail_core_css_CSSStyleDeclaration.__name__ = ["cocktail", "core", "css", "CSSStyleDeclaration"];
	cocktail_core_css_CSSStyleDeclaration.prototype = {
		dispose: function () {
			this._indexedProperties = null;
			this._propertiesPositions = null;
			this._onStyleChange = null;
			if (this.parentRule != null) {
				this.parentRule.dispose();
				this.parentRule = null;
			}
		}
		, reset: function () {
			this._onStyleChange = null;
			this.parentRule = null;
			this.length = 0;
			this.resetIndexedProperties();
			this.resetPropertiesPositions();
		}
		, resetIndexedProperties: function () {
			if (this._indexedProperties == null) this._indexedProperties = [];
			var _g = 0;
			while (_g < 87) {
				var i = _g++;
				this._indexedProperties[i] = null;
			}
		}
		, resetPropertiesPositions: function () {
			if (this._propertiesPositions == null) this._propertiesPositions = [];
			var _g = 0;
			while (_g < 87) {
				var i = _g++;
				this._propertiesPositions[i] = -1;
			}
		}
		, decrementPropertiesPositions: function (removedPropertyIndex) {
			var foundProperty = false;
			var _g1 = 0;
			var _g = this.length;
			while (_g1 < _g) {
				var i = _g1++;
				if (foundProperty == true) this._propertiesPositions[i] = this._propertiesPositions[i - 1];
				if (this._propertiesPositions[i] == removedPropertyIndex) foundProperty = true;
			}
		}
		, item: function (index) {
			if (index > this.length - 1) return -1;
			return this._propertiesPositions[index];
		}
		, getPropertyValue: function (propertyIndex) {
			var typedProperty;
			if (this._indexedProperties == null) {
				this.resetIndexedProperties();
				this.resetPropertiesPositions();
			}
			typedProperty = this._indexedProperties[propertyIndex];
			if (typedProperty != null) return cocktail_core_css_parsers_CSSStyleSerializer.serialize(typedProperty.typedValue);
			return null;
		}
		, setProperty: function (index, value, priority) {
			if (this._indexedProperties == null) {
				this.resetIndexedProperties();
				this.resetPropertiesPositions();
			}
			if (value == null) this.removeProperty(index); else {
				var typedProperty = cocktail_core_css_parsers_CSSStyleParser.parseStyleValue(cocktail_core_css_CSSConstants.getPropertyNameFromIndex(index), value, 0, null);
				if (typedProperty != null) this.applyProperty(typedProperty.index, typedProperty.typedValue, typedProperty.important);
			}
		}
		, removeProperty: function (index) {
			var typedProperty;
			if (this._indexedProperties == null) {
				this.resetIndexedProperties();
				this.resetPropertiesPositions();
			}
			typedProperty = this._indexedProperties[index];
			if (typedProperty != null) {
				this.decrementPropertiesPositions(index);
				this._propertiesPositions[this.length] = -1;
				this.length--;
				this._indexedProperties[index] = null;
				if (this._onStyleChange != null) this._onStyleChange(index);
				return index;
			}
			return -1;
		}
		, getPropertyPriority: function (propertyIndex) {
			var typedProperty;
			if (this._indexedProperties == null) {
				this.resetIndexedProperties();
				this.resetPropertiesPositions();
			}
			typedProperty = this._indexedProperties[propertyIndex];
			if (typedProperty != null) {
				if (typedProperty.important == true) return "important"; else return "";
			}
			return null;
		}
		, getTypedProperty: function (propertyIndex) {
			if (this._indexedProperties == null) {
				this.resetIndexedProperties();
				this.resetPropertiesPositions();
			}
			return this._indexedProperties[propertyIndex];
		}
		, setTypedProperty: function (propertyIndex, typedValue, important) {
			if (this._indexedProperties == null) {
				this.resetIndexedProperties();
				this.resetPropertiesPositions();
			}
			var currentProperty;
			if (this._indexedProperties == null) {
				this.resetIndexedProperties();
				this.resetPropertiesPositions();
			}
			currentProperty = this._indexedProperties[propertyIndex];
			if (currentProperty == null) {
				var newProperty = new cocktail_core_css_TypedPropertyVO();
				newProperty.important = important;
				newProperty.typedValue = typedValue;
				newProperty.index = propertyIndex;
				this._propertiesPositions[this.length] = propertyIndex;
				this.length++;
				this._indexedProperties[propertyIndex] = newProperty;
				if (this._onStyleChange != null) this._onStyleChange(propertyIndex);
			} else if (currentProperty.typedValue != typedValue || currentProperty.important != important) {
				currentProperty.typedValue = typedValue;
				currentProperty.important = important;
				if (this._onStyleChange != null) this._onStyleChange(propertyIndex);
			}
		}
		, setTypedPropertyInitial: function (propertyIndex, typedValue, important) {
			var newProperty = new cocktail_core_css_TypedPropertyVO();
			newProperty.important = important;
			newProperty.typedValue = typedValue;
			newProperty.index = propertyIndex;
			if (this._indexedProperties == null) {
				this.resetIndexedProperties();
				this.resetPropertiesPositions();
			}
			this._propertiesPositions[this.length] = propertyIndex;
			this.length++;
			this._indexedProperties[propertyIndex] = newProperty;
			if (this._onStyleChange != null) this._onStyleChange(propertyIndex);
		}
		, applyProperty: function (propertyIndex, styleValue, important) {
			if (this.isShorthand(propertyIndex) == true) {
				if (this.isValidShorthand(propertyIndex, styleValue) == true) this.setShorthand(propertyIndex, styleValue, important);
			} else if (this.isValidProperty(propertyIndex, styleValue) == true) this.setTypedProperty(propertyIndex, styleValue, important);
		}
		, isValidProperty: function (propertyIndex, styleValue) {
			switch (propertyIndex) {
				case 15: case 16:
					switch (styleValue[1]) {
						case 7:
							var value = styleValue[2];
							if (this.isPositiveLength(value) == true) return true;
							break;
						case 0:
							var value1 = styleValue[2];
							if (value1 == 0) return true;
							break;
						case 2:
							var value2 = styleValue[2];
							if (value2 >= 0) return true;
							break;
						case 4:
							var value3 = styleValue[2];
							if (value3 == cocktail_core_css_CSSKeywordValue.AUTO) return true;
							break;
						case 16: case 17:
							return true;
						default:
					}
					break;
				case 0:
					switch (styleValue[1]) {
						case 4:
							var value4 = styleValue[2];
							switch (value4[1]) {
								case 30: case 29: case 18: case 28:
									return true;
								default:
							}
							break;
						case 16: case 17:
							return true;
						default:
					}
					break;
				case 49:
					switch (styleValue[1]) {
						case 4:
							var value5 = styleValue[2];
							switch (value5[1]) {
								case 36: case 37:
									return true;
								default:
							}
							break;
						case 16: case 17:
							return true;
						default:
					}
					break;
				case 1:
					switch (styleValue[1]) {
						case 4:
							var value6 = styleValue[2];
							switch (value6[1]) {
								case 32: case 35: case 34: case 33:
									return true;
								default:
							}
							break;
						case 16: case 17:
							return true;
						default:
					}
					break;
				case 34:
					switch (styleValue[1]) {
						case 7:
							var value7 = styleValue[2];
							if (this.isPositiveLength(value7) == true) return true;
							break;
						case 2:
							var value8 = styleValue[2];
							if (value8 >= 0) return true;
							break;
						case 4:
							var value9 = styleValue[2];
							switch (value9[1]) {
								case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 66:
									return true;
								default:
							}
							break;
						case 16: case 17:
							return true;
						default:
					}
					break;
				case 8: case 6: case 9: case 7:
					return this.isValidMarginProperty(styleValue);
				case 13: case 14: case 11: case 12:
					return this.isValidPaddingProperty(styleValue);
				case 20: case 18:
					switch (styleValue[1]) {
						case 4:
							var value10 = styleValue[2];
							switch (value10[1]) {
								case 18:
									return true;
								default:
							}
							break;
						case 7:
							var value11 = styleValue[2];
							if (this.isPositiveLength(value11) == true) return true;
							break;
						case 2:
							var value12 = styleValue[2];
							if (value12 >= 0) return true;
							break;
						case 16: case 17:
							return true;
						default:
					}
					break;
				case 53:
					switch (styleValue[1]) {
						case 1:
							var value13 = styleValue[2];
							return true;
						case 0:
							var value14 = styleValue[2];
							return true;
						case 16: case 17:
							return true;
						default:
					}
					break;
				case 19: case 17:
					switch (styleValue[1]) {
						case 7:
							var value15 = styleValue[2];
							if (this.isPositiveLength(value15) == true) return true;
							break;
						case 2:
							var value16 = styleValue[2];
							if (value16 >= 0) return true;
							break;
						case 16: case 17:
							return true;
						default:
					}
					break;
				case 22: case 23: case 21: case 24:
					switch (styleValue[1]) {
						case 7:
							var value17 = styleValue[2];
							return true;
						case 2:
							var value18 = styleValue[2];
							return true;
						case 0:
							var value19 = styleValue[2];
							if (value19 == 0) return true;
							break;
						case 4:
							var value20 = styleValue[2];
							if (value20 == cocktail_core_css_CSSKeywordValue.AUTO) return true;
							break;
						case 16: case 17:
							return true;
						default:
					}
					break;
				case 36:
					switch (styleValue[1]) {
						case 4:
							var value21 = styleValue[2];
							switch (value21[1]) {
								case 4: case 5: case 0:
									return true;
								default:
							}
							break;
						case 16: case 17:
							return true;
						default:
					}
					break;
				case 61:
					switch (styleValue[1]) {
						case 4:
							var value22 = styleValue[2];
							switch (value22[1]) {
								case 18:
									return true;
								default:
							}
							break;
						case 21:
							var value23 = styleValue[2];
							return true;
						case 15:
							var value24 = styleValue[2];
							var _g1 = 0;
							var _g = value24.length;
							while (_g1 < _g) {
								var i = _g1++;
								{
									var _g2 = value24[i];
									switch (_g2[1]) {
										case 21:
											var value25 = _g2[2];
											break;
										default:
											return false;
									}
								}
							}
							return true;
						case 16: case 17:
							return true;
						default:
					}
					break;
				case 60:
					switch (styleValue[1]) {
						case 13:
							var value26 = styleValue[2];
							if (value26.length != 2) return false;
							var horizontalValueIsValid = this.isValidTransformOrigin(value26[0], true, false);
							if (horizontalValueIsValid == false) return false;
							return this.isValidTransformOrigin(value26[1], false, true);
						case 16: case 17:
							return true;
						default:
							return this.isValidTransformOrigin(styleValue, true, true);
					}
					break;
				case 51: case 52:
					switch (styleValue[1]) {
						case 4:
							var value27 = styleValue[2];
							switch (value27[1]) {
								case 36: case 38: case 37: case 27:
									return true;
								default:
							}
							break;
						case 16: case 17:
							return true;
						default:
					}
					break;
				case 37:
					switch (styleValue[1]) {
						case 15:
							var values = styleValue[2];
							var length = values.length;
							var _g3 = 0;
							while (_g3 < length) {
								var i1 = _g3++;
								{
									var _g11 = values[i1];
									switch (_g11[1]) {
										case 3:
											var value28 = _g11[2];
											break;
										case 6:
											var value29 = _g11[2];
											break;
										default:
											return false;
									}
								}
							}
							return true;
						case 3:
							var value30 = styleValue[2];
							return true;
						case 6:
							var value31 = styleValue[2];
							return true;
						case 16: case 17:
							return true;
						default:
					}
					break;
				case 2: case 3:
					switch (styleValue[1]) {
						case 4:
							var value32 = styleValue[2];
							switch (value32[1]) {
								case 11: case 12: case 31: case 18:
									return true;
								default:
							}
							break;
						case 16: case 17:
							return true;
						default:
					}
					break;
				case 45:
					switch (styleValue[1]) {
						case 4:
							var value33 = styleValue[2];
							switch (value33[1]) {
								case 0: case 8: case 10: case 7: case 9:
									return true;
								default:
							}
							break;
						case 16: case 17:
							return true;
						default:
					}
					break;
				case 42:
					switch (styleValue[1]) {
						case 4:
							var value34 = styleValue[2];
							switch (value34[1]) {
								case 18: case 16: case 17: case 15:
									return true;
								default:
							}
							break;
						case 16: case 17:
							return true;
						default:
					}
					break;
				case 35:
					switch (styleValue[1]) {
						case 4:
							var value35 = styleValue[2];
							switch (value35[1]) {
								case 0: case 1: case 2: case 3:
									return true;
								default:
							}
							break;
						case 0:
							var value36 = styleValue[2];
							switch (value36) {
								case 100: case 200: case 300: case 400: case 500: case 600: case 700: case 800: case 900:
									return true;
								default:
							}
							break;
						case 16: case 17:
							return true;
						default:
					}
					break;
				case 38:
					switch (styleValue[1]) {
						case 4:
							var value37 = styleValue[2];
							switch (value37[1]) {
								case 0: case 6:
									return true;
								default:
							}
							break;
						case 16: case 17:
							return true;
						default:
					}
					break;
				case 46:
					switch (styleValue[1]) {
						case 4:
							var value38 = styleValue[2];
							switch (value38[1]) {
								case 11: case 12: case 13: case 14:
									return true;
								default:
							}
							break;
						case 16: case 17:
							return true;
						default:
					}
					break;
				case 48:
					switch (styleValue[1]) {
						case 4:
							var value39 = styleValue[2];
							switch (value39[1]) {
								case 19: case 20: case 21: case 26: case 23: case 24: case 22: case 25:
									return true;
								default:
							}
							break;
						case 2:
							var value40 = styleValue[2];
							return true;
						case 7:
							var value41 = styleValue[2];
							return true;
						case 16: case 17:
							return true;
						default:
					}
					break;
				case 54:
					switch (styleValue[1]) {
						case 4:
							var value42 = styleValue[2];
							switch (value42[1]) {
								case 27: case 44: case 45: case 46: case 47:
									return true;
								default:
							}
							break;
						case 5:
							var value43 = styleValue[2];
							return true;
						case 16: case 17:
							return true;
						default:
					}
					break;
				case 4:
					switch (styleValue[1]) {
						case 4:
							var value44 = styleValue[2];
							if (value44 == cocktail_core_css_CSSKeywordValue.AUTO) return true;
							break;
						case 0:
							var value45 = styleValue[2];
							return true;
						case 16: case 17:
							return true;
						default:
					}
					break;
				case 41:
					switch (styleValue[1]) {
						case 4:
							var value46 = styleValue[2];
							if (value46 == cocktail_core_css_CSSKeywordValue.NORMAL) return true;
							break;
						case 7:
							var value47 = styleValue[2];
							if (this.isPositiveLength(value47) == true) return true;
							break;
						case 1:
							var value48 = styleValue[2];
							if (value48 >= 0) return true;
							break;
						case 0:
							var value49 = styleValue[2];
							if (value49 >= 0) return true;
							break;
						case 2:
							var value50 = styleValue[2];
							if (value50 >= 0) return true;
							break;
						case 16: case 17:
							return true;
						default:
					}
					break;
				case 47:
					switch (styleValue[1]) {
						case 0:
							var value51 = styleValue[2];
							if (value51 == 0) return true;
							break;
						case 7:
							var value52 = styleValue[2];
							return true;
						case 2:
							var value53 = styleValue[2];
							return true;
						case 16: case 17:
							return true;
						default:
					}
					break;
				case 43: case 44:
					switch (styleValue[1]) {
						case 4:
							var value54 = styleValue[2];
							if (value54 == cocktail_core_css_CSSKeywordValue.NORMAL) return true;
							break;
						case 7:
							var value55 = styleValue[2];
							return true;
						case 16: case 17:
							return true;
						default:
					}
					break;
				case 40: case 25:
					switch (styleValue[1]) {
						case 12:
							var value56 = styleValue[2];
							return true;
						case 16: case 17:
							return true;
						default:
					}
					break;
				case 26:
					switch (styleValue[1]) {
						case 4:
							var value57 = styleValue[2];
							if (value57 == cocktail_core_css_CSSKeywordValue.NONE) return true;
							break;
						case 5:
							var value58 = styleValue[2];
							return true;
						case 15:
							var value59 = styleValue[2];
							var isImageList = true;
							var _g12 = 0;
							var _g4 = value59.length;
							while (_g12 < _g4) {
								var i2 = _g12++;
								{
									var _g21 = value59[i2];
									switch (_g21[1]) {
										case 5:
											var value60 = _g21[2];
											break;
										case 4:
											var value61 = _g21[2];
											if (value61 != cocktail_core_css_CSSKeywordValue.NONE) isImageList = false;
											break;
										default:
											isImageList = false;
									}
								}
							}
							if (isImageList == true) return true;
							break;
						case 16: case 17:
							return true;
						default:
					}
					break;
				case 32:
					switch (styleValue[1]) {
						case 4:
							var value62 = styleValue[2];
							switch (value62[1]) {
								case 38: case 35:
									return true;
								default:
							}
							break;
						case 16: case 17:
							return true;
						default:
					}
					break;
				case 30:
					switch (styleValue[1]) {
						case 13:
							var value63 = styleValue[2];
							var _g5 = value63.length;
							switch (_g5) {
								case 2:
									var isValidHorizontalPosition = this.isValidBackgroundPosition(value63[0]);
									if (isValidHorizontalPosition == false) return false;
									return this.isValidBackgroundPosition(value63[1]);
							}
							break;
						default:
							return this.isValidBackgroundPosition(styleValue);
					}
					break;
				case 27:
					switch (styleValue[1]) {
						case 4:
							var value64 = styleValue[2];
							switch (value64[1]) {
								case 67: case 68: case 69: case 72: case 71: case 70:
									return true;
								default:
							}
							break;
						case 13:
							var value65 = styleValue[2];
							if (value65.length == 2) {
								var isFirstValueValid = false;
								{
									var _g6 = value65[0];
									switch (_g6[1]) {
										case 4:
											var value66 = _g6[2];
											switch (value66[1]) {
												case 67: case 70: case 71: case 72:
													isFirstValueValid = true;
													break;
												default:
											}
											break;
										default:
									}
								}
								var isSecondValueValid = false;
								{
									var _g7 = value65[1];
									switch (_g7[1]) {
										case 4:
											var value67 = _g7[2];
											switch (value67[1]) {
												case 67: case 70: case 71: case 72:
													isSecondValueValid = true;
													break;
												default:
											}
											break;
										default:
									}
								}
								if (isFirstValueValid == true && isSecondValueValid == true) return true;
							}
							break;
						case 15:
							var value68 = styleValue[2];
							var _g13 = 0;
							var _g8 = value68.length;
							while (_g13 < _g8) {
								var i3 = _g13++;
								if (this.isValidProperty(27, value68[i3]) == false) return false;
							}
							return true;
						case 16: case 17:
							return true;
						default:
					}
					break;
				case 29:
					switch (styleValue[1]) {
						case 4:
							var value69 = styleValue[2];
							switch (value69[1]) {
								case 43: case 42: case 27:
									return true;
								default:
							}
							break;
						case 13:
							var value70 = styleValue[2];
							if (value70.length == 2) {
								var isFirstValueValid1 = this.isValidBackgroundSize(value70[0]);
								if (isFirstValueValid1 == false) return false;
								return this.isValidBackgroundSize(value70[1]);
							}
							break;
						case 15:
							var value71 = styleValue[2];
							var _g14 = 0;
							var _g9 = value71.length;
							while (_g14 < _g9) {
								var i4 = _g14++;
								if (this.isValidProperty(29, value71[i4]) == false) return false;
							}
							return true;
						default:
							return this.isValidBackgroundSize(styleValue);
					}
					break;
				case 31: case 28:
					switch (styleValue[1]) {
						case 4:
							var value72 = styleValue[2];
							switch (value72[1]) {
								case 39: case 40: case 41:
									return true;
								default:
							}
							break;
						case 15:
							var value73 = styleValue[2];
							var _g15 = 0;
							var _g10 = value73.length;
							while (_g15 < _g10) {
								var i5 = _g15++;
								if (this.isValidProperty(propertyIndex, value73[i5]) == false) return false;
							}
							return true;
						case 16: case 17:
							return true;
						default:
					}
					break;
				case 57:
					switch (styleValue[1]) {
						case 15:
							var value74 = styleValue[2];
							var length1 = value74.length;
							var _g16 = 0;
							while (_g16 < length1) {
								var i6 = _g16++;
								var isValid = this.isValidTransitionProperty(value74[i6]);
								if (isValid == false) return false;
							}
							return true;
						default:
							return this.isValidTransitionProperty(styleValue);
					}
					break;
				case 55: case 56:
					switch (styleValue[1]) {
						case 15:
							var value75 = styleValue[2];
							var length2 = value75.length;
							var _g17 = 0;
							while (_g17 < length2) {
								var i7 = _g17++;
								var isValid1 = this.isValidTransitionDelayOrDuration(value75[i7]);
								if (isValid1 == false) return false;
							}
							return true;
						default:
							return this.isValidTransitionDelayOrDuration(styleValue);
					}
					break;
				case 58:
					switch (styleValue[1]) {
						case 15:
							var value76 = styleValue[2];
							var length3 = value76.length;
							var _g18 = 0;
							while (_g18 < length3) {
								var i8 = _g18++;
								var isValid2 = this.isValidTransitionTimingFunction(value76[i8]);
								if (isValid2 == false) return false;
							}
							break;
						default:
							return this.isValidTransitionTimingFunction(styleValue);
					}
					break;
				case 62: case 63: case 64: case 65: case 82:
					switch (styleValue[1]) {
						case 16: case 17:
							return true;
						default:
							return this.isValidBorderWidthValue(styleValue);
					}
					break;
				case 67: case 68: case 69: case 70:
					switch (styleValue[1]) {
						case 16: case 17:
							return true;
						default:
							return this.isValidBorderColorValue(styleValue);
					}
					break;
				case 72: case 73: case 74: case 75:
					switch (styleValue[1]) {
						case 16: case 17:
							return true;
						default:
							return this.isValidBorderStyleValue(styleValue);
					}
					break;
				case 83:
					switch (styleValue[1]) {
						case 16: case 17:
							return true;
						default:
							return this.isValidOutlineStyleValue(styleValue);
					}
					break;
				case 84:
					switch (styleValue[1]) {
						case 16: case 17:
							return true;
						default:
							return this.isValidOutlineColorValue(styleValue);
					}
					break;
				case 86:
					switch (styleValue[1]) {
						case 4:
							var value77 = styleValue[2];
							switch (value77[1]) {
								case 18: case 84: case 85: case 86: case 87:
									return true;
								default:
							}
							break;
						case 13:
							var value78 = styleValue[2];
							if (value78.length != 2 && value78.length != 3 && value78.length != 4) return false;
							var foundUnderline = false;
							var foundOverline = false;
							var foundLineThrough = false;
							var foundBlink = false;
							var _g19 = 0;
							var _g20 = value78.length;
							while (_g19 < _g20) {
								var i9 = _g19++;
								{
									var _g22 = value78[i9];
									switch (_g22[1]) {
										case 4:
											var value79 = _g22[2];
											switch (value79[1]) {
												case 84:
													if (foundUnderline == true) return false;
													foundUnderline = true;
													break;
												case 85:
													if (foundOverline == true) return false;
													foundOverline = true;
													break;
												case 86:
													if (foundLineThrough == true) return false;
													foundLineThrough = true;
													break;
												case 87:
													if (foundBlink == true) return false;
													foundBlink = true;
													break;
												default:
													false;
											}
											break;
										default:
											false;
									}
								}
							}
							return true;
						case 16: case 17:
							return true;
						default:
					}
					break;
			}
			return false;
		}
		, isValidTransitionTimingFunction: function (property) {
			switch (property[1]) {
				case 4:
					var value = property[2];
					switch (value[1]) {
						case 49: case 51: case 50: case 52: case 53: case 54: case 55:
							return true;
						default:
					}
					break;
				case 19:
					var intervalChange = property[3];
					var intervalNumbers = property[2];
					return true;
				case 20:
					var y2 = property[5];
					var x2 = property[4];
					var y1 = property[3];
					var x1 = property[2];
					return true;
				default:
			}
			return false;
		}
		, isValidTransitionProperty: function (property) {
			switch (property[1]) {
				case 4:
					var value = property[2];
					switch (value[1]) {
						case 18: case 48: case 11: case 12: case 22: case 25:
							return true;
						default:
					}
					break;
				case 3:
					var value1 = property[2];
					return true;
				case 16: case 17:
					return true;
				default:
			}
			return false;
		}
		, isValidTransitionDelayOrDuration: function (property) {
			switch (property[1]) {
				case 0:
					var value = property[2];
					if (value == 0) return true;
					break;
				case 9:
					var value1 = property[2];
					return true;
				case 16: case 17:
					return true;
				default:
			}
			return false;
		}
		, isValidBackgroundPosition: function (property) {
			switch (property[1]) {
				case 7:
					var value = property[2];
					return true;
				case 0:
					var value1 = property[2];
					return value1 == 0;
				case 2:
					var value2 = property[2];
					return true;
				case 4:
					var value3 = property[2];
					switch (value3[1]) {
						case 11: case 13: case 12: case 25: case 22:
							return true;
						default:
					}
					break;
				case 16: case 17:
					return true;
				default:
			}
			return false;
		}
		, isValidBackgroundSize: function (property) {
			switch (property[1]) {
				case 4:
					var value = property[2];
					return value == cocktail_core_css_CSSKeywordValue.AUTO;
				case 7:
					var value1 = property[2];
					if (this.isPositiveLength(value1)) return true;
					break;
				case 0:
					var value2 = property[2];
					return value2 == 0;
				case 2:
					var value3 = property[2];
					return true;
				case 16: case 17:
					return true;
				default:
			}
			return false;
		}
		, isShorthand: function (propertyIndex) {
			switch (propertyIndex) {
				case 5: case 10: case 50: case 59: case 33: case 39: case 77: case 80: case 78: case 79: case 66: case 71: case 76: case 81: case 85:
					return true;
				default:
					return false;
			}
		}
		, setShorthand: function (propertyIndex, styleValue, important) {
			switch (propertyIndex) {
				case 5:
					switch (styleValue[1]) {
						case 7:
							var value = styleValue[2];
							this.setTypedProperty(6, styleValue, important);
							this.setTypedProperty(7, styleValue, important);
							this.setTypedProperty(8, styleValue, important);
							this.setTypedProperty(9, styleValue, important);
							break;
						case 2:
							var value1 = styleValue[2];
							this.setTypedProperty(6, styleValue, important);
							this.setTypedProperty(7, styleValue, important);
							this.setTypedProperty(8, styleValue, important);
							this.setTypedProperty(9, styleValue, important);
							break;
						case 0:
							var value2 = styleValue[2];
							this.setTypedProperty(6, styleValue, important);
							this.setTypedProperty(7, styleValue, important);
							this.setTypedProperty(8, styleValue, important);
							this.setTypedProperty(9, styleValue, important);
							break;
						case 16: case 17:
							this.setTypedProperty(6, styleValue, important);
							this.setTypedProperty(7, styleValue, important);
							this.setTypedProperty(8, styleValue, important);
							this.setTypedProperty(9, styleValue, important);
							break;
						case 4:
							var value3 = styleValue[2];
							if (value3 == cocktail_core_css_CSSKeywordValue.AUTO) {
								this.setTypedProperty(6, styleValue, important);
								this.setTypedProperty(7, styleValue, important);
								this.setTypedProperty(8, styleValue, important);
								this.setTypedProperty(9, styleValue, important);
							}
							break;
						case 13:
							var value4 = styleValue[2];
							var _g = value4.length;
							switch (_g) {
								case 2:
									this.setTypedProperty(6, value4[1], important);
									this.setTypedProperty(7, value4[1], important);
									this.setTypedProperty(8, value4[0], important);
									this.setTypedProperty(9, value4[0], important);
									break;
								case 3:
									this.setTypedProperty(6, value4[1], important);
									this.setTypedProperty(7, value4[1], important);
									this.setTypedProperty(8, value4[0], important);
									this.setTypedProperty(9, value4[2], important);
									break;
								case 4:
									this.setTypedProperty(6, value4[3], important);
									this.setTypedProperty(7, value4[1], important);
									this.setTypedProperty(8, value4[0], important);
									this.setTypedProperty(9, value4[2], important);
									break;
							}
							break;
						default:
					}
					break;
				case 10:
					switch (styleValue[1]) {
						case 7:
							var value5 = styleValue[2];
							this.setTypedProperty(11, styleValue, important);
							this.setTypedProperty(12, styleValue, important);
							this.setTypedProperty(13, styleValue, important);
							this.setTypedProperty(14, styleValue, important);
							break;
						case 2:
							var value6 = styleValue[2];
							this.setTypedProperty(11, styleValue, important);
							this.setTypedProperty(12, styleValue, important);
							this.setTypedProperty(13, styleValue, important);
							this.setTypedProperty(14, styleValue, important);
							break;
						case 0:
							var value7 = styleValue[2];
							this.setTypedProperty(11, styleValue, important);
							this.setTypedProperty(12, styleValue, important);
							this.setTypedProperty(13, styleValue, important);
							this.setTypedProperty(14, styleValue, important);
							break;
						case 16: case 17:
							this.setTypedProperty(11, styleValue, important);
							this.setTypedProperty(12, styleValue, important);
							this.setTypedProperty(13, styleValue, important);
							this.setTypedProperty(14, styleValue, important);
							break;
						case 13:
							var value8 = styleValue[2];
							var _g1 = value8.length;
							switch (_g1) {
								case 2:
									this.setTypedProperty(11, value8[1], important);
									this.setTypedProperty(12, value8[1], important);
									this.setTypedProperty(13, value8[0], important);
									this.setTypedProperty(14, value8[0], important);
									break;
								case 3:
									this.setTypedProperty(11, value8[1], important);
									this.setTypedProperty(12, value8[1], important);
									this.setTypedProperty(13, value8[0], important);
									this.setTypedProperty(14, value8[2], important);
									break;
								case 4:
									this.setTypedProperty(11, value8[3], important);
									this.setTypedProperty(12, value8[1], important);
									this.setTypedProperty(13, value8[0], important);
									this.setTypedProperty(14, value8[2], important);
									break;
							}
							break;
						default:
					}
					break;
				case 50:
					switch (styleValue[1]) {
						case 4:
							var value9 = styleValue[2];
							this.setTypedProperty(51, styleValue, important);
							this.setTypedProperty(52, styleValue, important);
							break;
						case 13:
							var value10 = styleValue[2];
							this.setTypedProperty(51, value10[0], important);
							this.setTypedProperty(52, value10[1], important);
							break;
						default:
					}
					break;
				case 33:
					switch (styleValue[1]) {
						case 5:
							var value11 = styleValue[2];
							this.setTypedProperty(26, styleValue, important);
							break;
						case 12:
							var value12 = styleValue[2];
							this.setTypedProperty(25, styleValue, important);
							break;
						case 4:
							var value13 = styleValue[2];
							if (this.isValidBackgroundRepeat(styleValue) == true) this.setTypedProperty(27, styleValue, important); else if (this.isValidBackgroundPosition(styleValue) == true) this.setTypedProperty(30, styleValue, important); else if (this.isValidBackgroundAttachment(styleValue) == true) this.setTypedProperty(32, styleValue, important); else switch (value13[1]) {
								case 18:
									var initialStyleDeclaration = cocktail_core_css_InitialStyleDeclaration.getInstance();
									this.setTypedProperty(32, ((function ($this) {
										var $r;
										if (initialStyleDeclaration._indexedProperties == null) {
											initialStyleDeclaration.resetIndexedProperties();
											initialStyleDeclaration.resetPropertiesPositions();
										}
										$r = initialStyleDeclaration._indexedProperties[32];
										return $r;
									}(this))).typedValue, important);
									this.setTypedProperty(30, ((function ($this) {
										var $r;
										if (initialStyleDeclaration._indexedProperties == null) {
											initialStyleDeclaration.resetIndexedProperties();
											initialStyleDeclaration.resetPropertiesPositions();
										}
										$r = initialStyleDeclaration._indexedProperties[30];
										return $r;
									}(this))).typedValue, important);
									this.setTypedProperty(25, ((function ($this) {
										var $r;
										if (initialStyleDeclaration._indexedProperties == null) {
											initialStyleDeclaration.resetIndexedProperties();
											initialStyleDeclaration.resetPropertiesPositions();
										}
										$r = initialStyleDeclaration._indexedProperties[25];
										return $r;
									}(this))).typedValue, important);
									this.setTypedProperty(27, ((function ($this) {
										var $r;
										if (initialStyleDeclaration._indexedProperties == null) {
											initialStyleDeclaration.resetIndexedProperties();
											initialStyleDeclaration.resetPropertiesPositions();
										}
										$r = initialStyleDeclaration._indexedProperties[27];
										return $r;
									}(this))).typedValue, important);
									this.setTypedProperty(26, ((function ($this) {
										var $r;
										if (initialStyleDeclaration._indexedProperties == null) {
											initialStyleDeclaration.resetIndexedProperties();
											initialStyleDeclaration.resetPropertiesPositions();
										}
										$r = initialStyleDeclaration._indexedProperties[26];
										return $r;
									}(this))).typedValue, important);
									break;
								default:
							}
							break;
						case 13:
							var value14 = styleValue[2];
							var length = value14.length;
							var firstBackgroundPosition = null;
							var _g2 = 0;
							while (_g2 < length) {
								var i = _g2++;
								{
									var _g11 = value14[i];
									switch (_g11[1]) {
										case 12:
											var color = _g11[2];
											this.setTypedProperty(25, value14[i], important);
											break;
										case 5:
											var url = _g11[2];
											this.setTypedProperty(26, value14[i], important);
											break;
										default:
											if (this.isValidBackgroundRepeat(value14[i]) == true) this.setTypedProperty(27, value14[i], important); else if (this.isValidBackgroundAttachment(value14[i]) == true) this.setTypedProperty(32, value14[i], important); else if (this.isValidBackgroundPosition(value14[i]) == true) {
												if (firstBackgroundPosition == null) {
													this.setTypedProperty(30, value14[i], important);
													firstBackgroundPosition = value14[i];
												} else this.setTypedProperty(30, cocktail_core_css_CSSPropertyValue.GROUP([firstBackgroundPosition, value14[i]]), important);
											}
									}
								}
							}
							break;
						default:
					}
					break;
				case 39:
					switch (styleValue[1]) {
						case 13:
							var values = styleValue[2];
							this.setFontShorthandGoup(values, important);
							this.setTypedProperty(37, values[values.length - 1], important);
							break;
						case 15:
							var values1 = styleValue[2];
							{
								var _g3 = values1[0];
								switch (_g3[1]) {
									case 13:
										var groupValues = _g3[2];
										this.setFontShorthandGoup(groupValues, important);
										var fontNames = [];
										fontNames.push(groupValues[groupValues.length - 1]);
										var length1 = values1.length;
										var i1 = 1;
										while (i1 < length1) {
											fontNames.push(values1[i1]);
											i1++;
										}
										this.setTypedProperty(37, cocktail_core_css_CSSPropertyValue.CSS_LIST(fontNames), important);
										break;
									default:
								}
							}
							break;
						default:
					}
					break;
				case 59:
					var transitionPropertyValues = [];
					var transitionDurationValues = [];
					var transitionDelayValues = [];
					var transitionTimingFunctionValues = [];
					switch (styleValue[1]) {
						case 15:
							var value15 = styleValue[2];
							var _g12 = 0;
							var _g4 = value15.length;
							while (_g12 < _g4) {
								var i2 = _g12++;
								{
									var _g21 = value15[i2];
									switch (_g21[1]) {
										case 13:
											var value16 = _g21[2];
											this.setTransitionGroupShorthand(value16, transitionPropertyValues, transitionDurationValues, transitionDelayValues, transitionTimingFunctionValues);
											break;
										default:
											this.setTransitionShorthand(value15[i2], false, transitionPropertyValues, transitionDurationValues, transitionDelayValues, transitionTimingFunctionValues);
									}
								}
							}
							break;
						case 13:
							var value17 = styleValue[2];
							this.setTransitionGroupShorthand(value17, transitionPropertyValues, transitionDurationValues, transitionDelayValues, transitionTimingFunctionValues);
							break;
						default:
							this.setTransitionShorthand(styleValue, false, transitionPropertyValues, transitionDurationValues, transitionDelayValues, transitionTimingFunctionValues);
					}
					if (transitionPropertyValues.length > 0) {
						if (transitionPropertyValues.length == 1) this.setTypedProperty(57, transitionPropertyValues[0], important); else this.setTypedProperty(57, cocktail_core_css_CSSPropertyValue.CSS_LIST(transitionPropertyValues), important);
					}
					if (transitionDelayValues.length > 0) {
						if (transitionDelayValues.length == 1) this.setTypedProperty(56, transitionDelayValues[0], important); else this.setTypedProperty(56, cocktail_core_css_CSSPropertyValue.CSS_LIST(transitionDelayValues), important);
					}
					if (transitionDurationValues.length > 0) {
						if (transitionDurationValues.length == 1) this.setTypedProperty(55, transitionDurationValues[0], important); else this.setTypedProperty(55, cocktail_core_css_CSSPropertyValue.CSS_LIST(transitionDurationValues), important);
					}
					if (transitionTimingFunctionValues.length > 0) {
						if (transitionTimingFunctionValues.length == 1) this.setTypedProperty(58, transitionTimingFunctionValues[0], important); else this.setTypedProperty(58, cocktail_core_css_CSSPropertyValue.CSS_LIST(transitionTimingFunctionValues), important);
					}
					break;
				case 66:
					switch (styleValue[1]) {
						case 4:
							var value18 = styleValue[2];
							this.setTypedProperty(62, styleValue, important);
							this.setTypedProperty(63, styleValue, important);
							this.setTypedProperty(64, styleValue, important);
							this.setTypedProperty(65, styleValue, important);
							break;
						case 7:
							var value19 = styleValue[2];
							this.setTypedProperty(62, styleValue, important);
							this.setTypedProperty(63, styleValue, important);
							this.setTypedProperty(64, styleValue, important);
							this.setTypedProperty(65, styleValue, important);
							break;
						case 0:
							var value20 = styleValue[2];
							this.setTypedProperty(62, styleValue, important);
							this.setTypedProperty(63, styleValue, important);
							this.setTypedProperty(64, styleValue, important);
							this.setTypedProperty(65, styleValue, important);
							break;
						case 13:
							var value21 = styleValue[2];
							var _g5 = value21.length;
							switch (_g5) {
								case 2:
									this.setTypedProperty(62, value21[0], important);
									this.setTypedProperty(63, value21[1], important);
									this.setTypedProperty(64, value21[0], important);
									this.setTypedProperty(65, value21[1], important);
									break;
								case 3:
									this.setTypedProperty(62, value21[0], important);
									this.setTypedProperty(63, value21[1], important);
									this.setTypedProperty(64, value21[3], important);
									this.setTypedProperty(65, value21[1], important);
									break;
								case 4:
									this.setTypedProperty(62, value21[0], important);
									this.setTypedProperty(63, value21[1], important);
									this.setTypedProperty(64, value21[2], important);
									this.setTypedProperty(65, value21[3], important);
									break;
								default:
							}
							break;
						case 16: case 17:
							this.setTypedProperty(62, styleValue, important);
							this.setTypedProperty(63, styleValue, important);
							this.setTypedProperty(64, styleValue, important);
							this.setTypedProperty(65, styleValue, important);
							break;
						default:
					}
					break;
				case 71:
					switch (styleValue[1]) {
						case 12:
							var value22 = styleValue[2];
							this.setTypedProperty(67, styleValue, important);
							this.setTypedProperty(68, styleValue, important);
							this.setTypedProperty(69, styleValue, important);
							this.setTypedProperty(70, styleValue, important);
							break;
						case 13:
							var value23 = styleValue[2];
							var _g6 = value23.length;
							switch (_g6) {
								case 2:
									this.setTypedProperty(67, value23[0], important);
									this.setTypedProperty(68, value23[1], important);
									this.setTypedProperty(69, value23[0], important);
									this.setTypedProperty(70, value23[1], important);
									break;
								case 3:
									this.setTypedProperty(67, value23[0], important);
									this.setTypedProperty(68, value23[1], important);
									this.setTypedProperty(69, value23[3], important);
									this.setTypedProperty(70, value23[1], important);
									break;
								case 4:
									this.setTypedProperty(67, value23[0], important);
									this.setTypedProperty(68, value23[1], important);
									this.setTypedProperty(69, value23[2], important);
									this.setTypedProperty(70, value23[3], important);
									break;
								default:
							}
							break;
						case 16: case 17:
							this.setTypedProperty(62, styleValue, important);
							this.setTypedProperty(63, styleValue, important);
							this.setTypedProperty(64, styleValue, important);
							this.setTypedProperty(65, styleValue, important);
							break;
						default:
					}
					break;
				case 76:
					switch (styleValue[1]) {
						case 4:
							var value24 = styleValue[2];
							this.setTypedProperty(72, styleValue, important);
							this.setTypedProperty(73, styleValue, important);
							this.setTypedProperty(74, styleValue, important);
							this.setTypedProperty(75, styleValue, important);
							break;
						case 13:
							var value25 = styleValue[2];
							var _g7 = value25.length;
							switch (_g7) {
								case 2:
									this.setTypedProperty(72, value25[0], important);
									this.setTypedProperty(73, value25[1], important);
									this.setTypedProperty(74, value25[0], important);
									this.setTypedProperty(75, value25[1], important);
									break;
								case 3:
									this.setTypedProperty(72, value25[0], important);
									this.setTypedProperty(73, value25[1], important);
									this.setTypedProperty(74, value25[3], important);
									this.setTypedProperty(75, value25[1], important);
									break;
								case 4:
									this.setTypedProperty(72, value25[0], important);
									this.setTypedProperty(73, value25[1], important);
									this.setTypedProperty(74, value25[2], important);
									this.setTypedProperty(75, value25[3], important);
									break;
								default:
							}
							break;
						case 16: case 17:
							this.setTypedProperty(72, styleValue, important);
							this.setTypedProperty(73, styleValue, important);
							this.setTypedProperty(74, styleValue, important);
							this.setTypedProperty(75, styleValue, important);
							break;
						default:
					}
					break;
				case 77: case 79: case 80: case 78: case 81:
					switch (styleValue[1]) {
						case 13:
							var value26 = styleValue[2];
							var borderColor = null;
							var borderWidth = null;
							var borderStyle = null;
							var _g13 = 0;
							var _g8 = value26.length;
							while (_g13 < _g8) {
								var i3 = _g13++;
								if (this.isValidBorderColorValue(value26[i3]) == true) borderColor = value26[i3]; else if (this.isValidBorderWidthValue(value26[i3]) == true) borderWidth = value26[i3]; else if (this.isValidBorderStyleValue(value26[i3]) == true) borderStyle = value26[i3];
							}
							this.setTypedBordersProperties(propertyIndex, borderWidth, borderColor, borderStyle, important);
							break;
						default:
							this.setBorderShorthand(propertyIndex, styleValue, important);
					}
					break;
				case 85:
					switch (styleValue[1]) {
						case 13:
							var value27 = styleValue[2];
							var outlineColor = null;
							var outlineWidth = null;
							var outlineStyle = null;
							var _g14 = 0;
							var _g9 = value27.length;
							while (_g14 < _g9) {
								var i4 = _g14++;
								if (this.isValidOutlineColorValue(value27[i4]) == true) outlineColor = value27[i4]; else if (this.isValidBorderWidthValue(value27[i4]) == true) outlineWidth = value27[i4]; else if (this.isValidOutlineStyleValue(value27[i4]) == true) outlineStyle = value27[i4];
							}
							this.setTypedOutlineProperties(outlineWidth, outlineColor, outlineStyle, important);
							break;
						default:
							if (this.isValidOutlineColorValue(styleValue) == true) this.setTypedOutlineProperties(null, styleValue, null, important); else if (this.isValidOutlineStyleValue(styleValue) == true) this.setTypedOutlineProperties(null, null, styleValue, important); else if (this.isValidBorderWidthValue(styleValue) == true) this.setTypedOutlineProperties(styleValue, null, null, important);
					}
					break;
				default:
			}
		}
		, setBorderShorthand: function (propertyIndex, styleValue, important) {
			switch (styleValue[1]) {
				case 4:
					var value = styleValue[2];
					if (this.isValidBorderWidthValue(styleValue) == true) this.setTypedBordersProperties(propertyIndex, styleValue, null, null, important); else if (this.isValidBorderStyleValue(styleValue) == true) this.setTypedBordersProperties(propertyIndex, null, null, styleValue, important);
					break;
				case 0:
					var value1 = styleValue[2];
					this.setTypedBordersProperties(propertyIndex, styleValue, null, null, important);
					break;
				case 7:
					var value2 = styleValue[2];
					this.setTypedBordersProperties(propertyIndex, styleValue, null, null, important);
					break;
				case 12:
					var value3 = styleValue[2];
					this.setTypedBordersProperties(propertyIndex, null, styleValue, null, important);
					break;
				case 16: case 17:
					this.setTypedBordersProperties(propertyIndex, styleValue, styleValue, styleValue, important);
					break;
				default:
			}
		}
		, setTypedBordersProperties: function (propertyIndex, borderWidth, borderColor, borderStyle, important) {
			switch (propertyIndex) {
				case 77:
					this.setTypedBorderProperties(62, borderWidth, 67, borderColor, 72, borderStyle, important);
					break;
				case 78:
					this.setTypedBorderProperties(63, borderWidth, 68, borderColor, 73, borderStyle, important);
					break;
				case 79:
					this.setTypedBorderProperties(64, borderWidth, 69, borderColor, 74, borderStyle, important);
					break;
				case 80:
					this.setTypedBorderProperties(65, borderWidth, 70, borderColor, 75, borderStyle, important);
					break;
				case 81:
					this.setTypedBorderProperties(62, borderWidth, 67, borderColor, 72, borderStyle, important);
					this.setTypedBorderProperties(63, borderWidth, 68, borderColor, 73, borderStyle, important);
					this.setTypedBorderProperties(64, borderWidth, 69, borderColor, 74, borderStyle, important);
					this.setTypedBorderProperties(65, borderWidth, 70, borderColor, 75, borderStyle, important);
					break;
				default:
			}
		}
		, setTypedBorderProperties: function (borderWidthPropertyIndex, borderWidth, borderColorPropertyIndex, borderColor, borderStylePropertyIndex, borderStyle, important) {
			if (borderWidth == null) borderWidth = cocktail_core_css_InitialStyleDeclaration.getInstance().getTypedProperty(62).typedValue;
			this.setTypedProperty(borderWidthPropertyIndex, borderWidth, important);
			if (borderColor == null) borderColor = cocktail_core_css_InitialStyleDeclaration.getInstance().getTypedProperty(67).typedValue;
			this.setTypedProperty(borderColorPropertyIndex, borderColor, important);
			if (borderStyle == null) borderStyle = cocktail_core_css_InitialStyleDeclaration.getInstance().getTypedProperty(72).typedValue;
			this.setTypedProperty(borderStylePropertyIndex, borderStyle, important);
		}
		, setTypedOutlineProperties: function (outlineWidth, outlineColor, outlineStyle, important) {
			if (outlineWidth == null) outlineWidth = cocktail_core_css_InitialStyleDeclaration.getInstance().getTypedProperty(82).typedValue;
			this.setTypedProperty(82, outlineWidth, important);
			if (outlineColor == null) outlineColor = cocktail_core_css_InitialStyleDeclaration.getInstance().getTypedProperty(84).typedValue;
			this.setTypedProperty(84, outlineColor, important);
			if (outlineStyle == null) outlineStyle = cocktail_core_css_InitialStyleDeclaration.getInstance().getTypedProperty(83).typedValue;
			this.setTypedProperty(83, outlineStyle, important);
		}
		, setTransitionGroupShorthand: function (styleValues, transitionProperty, transitionDuration, transitionDelay, transitionTimingFunction) {
			var hasTransitionDuration = false;
			var _g1 = 0;
			var _g = styleValues.length;
			while (_g1 < _g) {
				var i = _g1++;
				this.setTransitionShorthand(styleValues[i], hasTransitionDuration, transitionProperty, transitionDuration, transitionDelay, transitionTimingFunction);
				if (this.isValidTransitionDelayOrDuration(styleValues[i]) == true) hasTransitionDuration = true;
			}
		}
		, setTransitionShorthand: function (styleValue, useDelayForTime, transitionProperty, transitionDuration, transitionDelay, transitionTimingFunction) {
			switch (styleValue[1]) {
				case 3:
					var value = styleValue[2];
					transitionProperty.push(styleValue);
					break;
				case 9:
					var value1 = styleValue[2];
					if (useDelayForTime == false) transitionDuration.push(styleValue); else transitionDelay.push(styleValue);
					break;
				case 4:
					var value2 = styleValue[2];
					if (this.isValidTransitionProperty(styleValue) == true) transitionProperty.push(styleValue); else if (this.isValidTransitionTimingFunction(styleValue) == true) transitionTimingFunction.push(styleValue);
					break;
				default:
					transitionTimingFunction.push(styleValue);
			}
		}
		, isValidShorthand: function (propertyIndex, styleValue) {
			switch (propertyIndex) {
				case 5:
					switch (styleValue[1]) {
						case 7:
							var value = styleValue[2];
							return this.isValidMarginProperty(styleValue);
						case 2:
							var value1 = styleValue[2];
							return this.isValidMarginProperty(styleValue);
						case 0:
							var value2 = styleValue[2];
							return this.isValidMarginProperty(styleValue);
						case 4:
							var value3 = styleValue[2];
							return this.isValidMarginProperty(styleValue);
						case 16: case 17:
							return true;
						case 13:
							var value4 = styleValue[2];
							var _g = value4.length;
							switch (_g) {
								case 2:
									var isValid = this.isValidMarginProperty(value4[0]);
									if (isValid == false) return false;
									return this.isValidMarginProperty(value4[1]);
								case 3:
									var isValid1 = this.isValidMarginProperty(value4[0]);
									if (isValid1 == false) return false;
									isValid1 = this.isValidMarginProperty(value4[1]);
									if (isValid1 == false) return false;
									return this.isValidMarginProperty(value4[2]);
								case 4:
									var isValid2 = this.isValidMarginProperty(value4[0]);
									if (isValid2 == false) return false;
									isValid2 = this.isValidMarginProperty(value4[1]);
									if (isValid2 == false) return false;
									isValid2 = this.isValidMarginProperty(value4[2]);
									if (isValid2 == false) return false;
									return this.isValidMarginProperty(value4[3]);
							}
							break;
						default:
					}
					break;
				case 10:
					switch (styleValue[1]) {
						case 7:
							var value5 = styleValue[2];
							return this.isValidPaddingProperty(styleValue);
						case 2:
							var value6 = styleValue[2];
							return this.isValidPaddingProperty(styleValue);
						case 0:
							var value7 = styleValue[2];
							return this.isValidPaddingProperty(styleValue);
						case 16: case 17:
							return true;
						case 13:
							var value8 = styleValue[2];
							var _g1 = value8.length;
							switch (_g1) {
								case 2:
									var isValid3 = this.isValidPaddingProperty(value8[0]);
									if (isValid3 == false) return false;
									return this.isValidPaddingProperty(value8[1]);
								case 3:
									var isValid4 = this.isValidPaddingProperty(value8[0]);
									if (isValid4 == false) return false;
									isValid4 = this.isValidPaddingProperty(value8[1]);
									if (isValid4 == false) return false;
									return this.isValidPaddingProperty(value8[2]);
								case 4:
									var isValid5 = this.isValidPaddingProperty(value8[0]);
									if (isValid5 == false) return false;
									isValid5 = this.isValidPaddingProperty(value8[1]);
									if (isValid5 == false) return false;
									isValid5 = this.isValidPaddingProperty(value8[2]);
									if (isValid5 == false) return false;
									return this.isValidPaddingProperty(value8[3]);
							}
							break;
						default:
					}
					break;
				case 33:
					return this.isValidBackgroundShorthand(styleValue);
				case 50:
					switch (styleValue[1]) {
						case 4:
							var value9 = styleValue[2];
							return this.isValidOverflowValue(styleValue);
						case 16: case 17:
							return true;
						case 13:
							var value10 = styleValue[2];
							var isValid6 = this.isValidOverflowValue(value10[0]);
							if (isValid6 == false) return false;
							return this.isValidOverflowValue(value10[1]);
						default:
					}
					break;
				case 39:
					return this.isValidFontShorthand(styleValue);
				case 59:
					switch (styleValue[1]) {
						case 15:
							var value11 = styleValue[2];
							var length = value11.length;
							var _g2 = 0;
							while (_g2 < length) {
								var i = _g2++;
								if (this.isValidTransitionShorthand(value11[i]) == false) return false;
							}
							return true;
						default:
							return this.isValidTransitionShorthand(styleValue);
					}
					break;
				case 66:
					switch (styleValue[1]) {
						case 4:
							var value12 = styleValue[2];
							return this.isValidBorderWidthValue(styleValue);
						case 7:
							var value13 = styleValue[2];
							return this.isValidBorderWidthValue(styleValue);
						case 0:
							var value14 = styleValue[2];
							return this.isValidBorderWidthValue(styleValue);
						case 13:
							var value15 = styleValue[2];
							var _g3 = value15.length;
							switch (_g3) {
								case 2:
									if (this.isValidBorderWidthValue(value15[0]) == true && this.isValidBorderWidthValue(value15[1]) == true) return true;
									break;
								case 3:
									if (this.isValidBorderWidthValue(value15[0]) == true && this.isValidBorderWidthValue(value15[1]) == true && this.isValidBorderWidthValue(value15[2])) return true;
									break;
								case 4:
									if (this.isValidBorderWidthValue(value15[0]) == true && this.isValidBorderWidthValue(value15[1]) == true && this.isValidBorderWidthValue(value15[2]) && this.isValidBorderWidthValue(value15[3])) return true;
									break;
								default:
							}
							break;
						case 16: case 17:
							return true;
						default:
					}
					break;
				case 71:
					switch (styleValue[1]) {
						case 12:
							var value16 = styleValue[2];
							return this.isValidBorderColorValue(styleValue);
						case 13:
							var value17 = styleValue[2];
							var _g4 = value17.length;
							switch (_g4) {
								case 2:
									if (this.isValidBorderColorValue(value17[0]) == true && this.isValidBorderColorValue(value17[1]) == true) return true;
									break;
								case 3:
									if (this.isValidBorderColorValue(value17[0]) == true && this.isValidBorderColorValue(value17[1]) == true && this.isValidBorderColorValue(value17[2])) return true;
									break;
								case 4:
									if (this.isValidBorderColorValue(value17[0]) == true && this.isValidBorderColorValue(value17[1]) == true && this.isValidBorderColorValue(value17[2]) && this.isValidBorderColorValue(value17[3])) return true;
									break;
								default:
							}
							break;
						case 16: case 17:
							return true;
						default:
					}
					break;
				case 76:
					switch (styleValue[1]) {
						case 4:
							var value18 = styleValue[2];
							return this.isValidBorderStyleValue(styleValue);
						case 13:
							var value19 = styleValue[2];
							var _g5 = value19.length;
							switch (_g5) {
								case 2:
									if (this.isValidBorderStyleValue(value19[0]) == true && this.isValidBorderStyleValue(value19[1]) == true) return true;
									break;
								case 3:
									if (this.isValidBorderStyleValue(value19[0]) == true && this.isValidBorderStyleValue(value19[1]) == true && this.isValidBorderStyleValue(value19[2])) return true;
									break;
								case 4:
									if (this.isValidBorderStyleValue(value19[0]) == true && this.isValidBorderStyleValue(value19[1]) == true && this.isValidBorderStyleValue(value19[2]) && this.isValidBorderStyleValue(value19[3])) return true;
									break;
								default:
							}
							break;
						case 16: case 17:
							return true;
						default:
					}
					break;
				case 77: case 78: case 79: case 80: case 81:
					switch (styleValue[1]) {
						case 4:
							var value20 = styleValue[2];
							if (this.isValidBorderWidthValue(styleValue) == true || this.isValidBorderStyleValue(styleValue) == true) return true;
							break;
						case 12:
							var value21 = styleValue[2];
							return true;
						case 0:
							var value22 = styleValue[2];
							if (value22 == 0) return true;
							break;
						case 7:
							var value23 = styleValue[2];
							if (this.isPositiveLength(value23) == true) return true;
							break;
						case 13:
							var value24 = styleValue[2];
							if (value24.length != 2 && value24.length != 3) return false;
							var foundBorderWidth = false;
							var foundBorderStyle = false;
							var foundBorderColor = false;
							var _g11 = 0;
							var _g6 = value24.length;
							while (_g11 < _g6) {
								var i1 = _g11++;
								if (this.isValidBorderWidthValue(value24[i1]) == true) {
									if (foundBorderWidth == true) return false;
									foundBorderWidth = true;
								} else if (this.isValidBorderColorValue(value24[i1]) == true) {
									if (foundBorderColor == true) return false;
									foundBorderColor = true;
								} else if (this.isValidBorderStyleValue(value24[i1]) == true) {
									if (foundBorderStyle == true) return false;
									foundBorderStyle = true;
								} else return false;
							}
							return true;
						case 16: case 17:
							return true;
						default:
					}
					break;
				case 85:
					switch (styleValue[1]) {
						case 4:
							var value25 = styleValue[2];
							if (this.isValidBorderWidthValue(styleValue) == true || this.isValidOutlineStyleValue(styleValue) == true || this.isValidOutlineColorValue(styleValue) == true) return true;
							break;
						case 12:
							var value26 = styleValue[2];
							return true;
						case 0:
							var value27 = styleValue[2];
							if (value27 == 0) return true;
							break;
						case 7:
							var value28 = styleValue[2];
							if (this.isPositiveLength(value28) == true) return true;
							break;
						case 13:
							var value29 = styleValue[2];
							if (value29.length != 2 && value29.length != 3) return false;
							var foundOutlineWidth = false;
							var foundOutlineStyle = false;
							var foundOutlineColor = false;
							var _g12 = 0;
							var _g7 = value29.length;
							while (_g12 < _g7) {
								var i2 = _g12++;
								if (this.isValidBorderWidthValue(value29[i2]) == true) {
									if (foundOutlineWidth == true) return false;
									foundOutlineWidth = true;
								} else if (this.isValidOutlineColorValue(value29[i2]) == true) {
									if (foundOutlineColor == true) return false;
									foundOutlineColor = true;
								} else if (this.isValidOutlineStyleValue(value29[i2]) == true) {
									if (foundOutlineStyle == true) return false;
									foundOutlineStyle = true;
								} else return false;
							}
							return true;
						case 16: case 17:
							return true;
						default:
					}
					break;
				default:
			}
			return false;
		}
		, isValidBackgroundShorthand: function (styleValue) {
			switch (styleValue[1]) {
				case 5:
					var value = styleValue[2];
					return true;
				case 12:
					var value1 = styleValue[2];
					return true;
				case 4:
					var value2 = styleValue[2];
					switch (value2[1]) {
						case 67: case 68: case 69: case 72: case 35: case 38: case 11: case 13: case 12: case 22: case 25: case 18:
							return true;
						default:
					}
					break;
				case 13:
					var value3 = styleValue[2];
					var length = value3.length;
					var foundBackgroundColor = false;
					var foundBackgroundImage = false;
					var foundBackgroundRepeat = false;
					var foundBackgroundAttachment = false;
					var foundFirstBackgroundPosition = false;
					var foundSecondBackgroundPosition = false;
					var _g = 0;
					while (_g < length) {
						var i = _g++;
						{
							var _g1 = value3[i];
							switch (_g1[1]) {
								case 12:
									var value4 = _g1[2];
									if (foundBackgroundColor == true) return false;
									foundBackgroundColor = true;
									break;
								case 5:
									var value5 = _g1[2];
									if (foundBackgroundImage == true) return false;
									foundBackgroundImage = true;
									foundBackgroundColor = true;
									break;
								default:
									if (this.isValidBackgroundRepeat(value3[i]) == true) {
										if (foundBackgroundRepeat == true) return false;
										foundBackgroundRepeat = true;
										foundBackgroundImage = true;
										foundBackgroundColor = true;
									} else if (this.isValidBackgroundAttachment(value3[i]) == true) {
										if (foundBackgroundAttachment == true) return false;
										foundBackgroundAttachment = true;
										foundBackgroundColor = true;
										foundBackgroundRepeat = true;
										foundBackgroundImage = true;
									} else if (this.isValidBackgroundPosition(value3[i]) == true) {
										if (foundSecondBackgroundPosition == true) return false;
										if (foundFirstBackgroundPosition == true) foundSecondBackgroundPosition = true; else foundFirstBackgroundPosition = true;
										foundBackgroundAttachment = true;
										foundBackgroundColor = true;
										foundBackgroundRepeat = true;
										foundBackgroundImage = true;
									}
							}
						}
					}
					return true;
				case 16: case 17:
					return true;
				default:
			}
			return false;
		}
		, isValidBackgroundRepeat: function (styleValue) {
			switch (styleValue[1]) {
				case 4:
					var value = styleValue[2];
					switch (value[1]) {
						case 67: case 68: case 69: case 72:
							return true;
						default:
					}
					break;
				default:
			}
			return false;
		}
		, isValidBackgroundAttachment: function (styleValue) {
			switch (styleValue[1]) {
				case 4:
					var value = styleValue[2];
					switch (value[1]) {
						case 35: case 38:
							return true;
						default:
					}
					break;
				default:
			}
			return false;
		}
		, isValidTransitionShorthand: function (styleValue) {
			switch (styleValue[1]) {
				case 9:
					var value = styleValue[2];
					return this.isValidTransitionDelayOrDuration(styleValue);
				case 3:
					var value1 = styleValue[2];
					return true;
				case 4:
					var keyword = styleValue[2];
					var isValid = this.isValidTransitionProperty(styleValue);
					if (isValid == true) return true;
					return this.isValidTransitionTimingFunction(styleValue);
				case 13:
					var value2 = styleValue[2];
					return this.isValidTransitionGroup(value2);
				case 16: case 17:
					return true;
				default:
					return this.isValidTransitionTimingFunction(styleValue);
			}
		}
		, setFontShorthandGoup: function (styleValues, important) {
			var foundFontStyle = false;
			var foundFontVariant = false;
			var foundFontWeight = false;
			var length = styleValues.length;
			var _g = 0;
			while (_g < length) {
				var i = _g++;
				{
					var _g1 = styleValues[i];
					switch (_g1[1]) {
						case 4:
							var value = _g1[2];
							switch (value[1]) {
								case 4: case 5:
									this.setTypedProperty(36, styleValues[i], important);
									foundFontStyle = true;
									break;
								case 6:
									this.setTypedProperty(38, styleValues[i], important);
									foundFontVariant = true;
									break;
								case 1: case 2: case 3:
									this.setTypedProperty(35, styleValues[i], important);
									foundFontWeight = true;
									break;
								case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 66:
									this.setTypedProperty(34, styleValues[i], important);
									break;
								case 0:
									if (foundFontStyle == true) {
										if (foundFontVariant == true) this.setTypedProperty(35, styleValues[i], important); else this.setTypedProperty(38, styleValues[i], important);
									} else this.setTypedProperty(36, styleValues[i], important);
									break;
								default:
							}
							break;
						case 0:
							var value1 = _g1[2];
							switch (value1) {
								case 100: case 200: case 300: case 400: case 500: case 600: case 700: case 800: case 900:
									this.setTypedProperty(35, styleValues[i], important);
									foundFontWeight = true;
									break;
								default:
							}
							break;
						case 7:
							var value2 = _g1[2];
							this.setTypedProperty(34, styleValues[i], important);
							break;
						case 2:
							var value3 = _g1[2];
							this.setTypedProperty(34, styleValues[i], important);
							break;
						case 14:
							var lineHeight = _g1[3];
							var fontSize = _g1[2];
							this.setTypedProperty(34, fontSize, important);
							this.setTypedProperty(41, lineHeight, important);
							break;
						default:
					}
				}
			}
		}
		, isValidFontShorthand: function (styleValue) {
			switch (styleValue[1]) {
				case 13:
					var values = styleValue[2];
					return this.isValidFontGroup(values);
				case 15:
					var values1 = styleValue[2];
					{
						var _g = values1[0];
						switch (_g[1]) {
							case 13:
								var groupValues = _g[2];
								var isValidFontGroup = this.isValidFontGroup(groupValues);
								if (isValidFontGroup == true) {
									var length = values1.length;
									var i = 1;
									while (i < length) {
										{
											var _g1 = values1[i];
											switch (_g1[1]) {
												case 6:
													var value = _g1[2];
													break;
												case 3:
													var value1 = _g1[2];
													break;
												default:
													return false;
											}
										}
										i++;
									}
								} else return false;
								break;
							default:
								return false;
						}
					}
					break;
				case 16: case 17:
					return true;
				default:
					return false;
			}
			return false;
		}
		, isValidFontGroup: function (styleValues) {
			var foundFontStyle = false;
			var foundFontVariant = false;
			var foundFontWeight = false;
			var foundFontSize = false;
			var foundFontNotation = false;
			var foundFontFamily = false;
			var length = styleValues.length;
			var _g = 0;
			while (_g < length) {
				var i = _g++;
				{
					var _g1 = styleValues[i];
					switch (_g1[1]) {
						case 4:
							var value = _g1[2];
							switch (value[1]) {
								case 4: case 5:
									if (foundFontStyle == true) return false;
									foundFontStyle = true;
									break;
								case 6:
									if (foundFontVariant == true) return false;
									foundFontVariant = true;
									break;
								case 1: case 2: case 3:
									if (foundFontWeight == true) return false;
									foundFontWeight = true;
									break;
								case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 66:
									if (foundFontSize == true) return false;
									foundFontSize = true;
									foundFontStyle = true;
									foundFontVariant = true;
									break;
								case 0:
									if (foundFontStyle == true) {
										if (foundFontVariant == true) {
											if (foundFontWeight == true) return false; else foundFontWeight = true;
										} else foundFontVariant = true;
									} else foundFontStyle = true;
									break;
								default:
									return false;
							}
							break;
						case 0:
							var value1 = _g1[2];
							switch (value1) {
								case 100: case 200: case 300: case 400: case 500: case 600: case 700: case 800: case 900:
									if (foundFontWeight == true) return false;
									foundFontWeight = true;
									break;
								default:
									return false;
							}
							break;
						case 6:
							var value2 = _g1[2];
							if (foundFontSize == false) return false;
							foundFontFamily = true;
							foundFontNotation = true;
							foundFontSize = true;
							foundFontStyle = true;
							foundFontVariant = true;
							foundFontWeight = true;
							break;
						case 3:
							var value3 = _g1[2];
							if (foundFontSize == false) return false;
							foundFontFamily = true;
							foundFontNotation = true;
							foundFontSize = true;
							foundFontStyle = true;
							foundFontVariant = true;
							foundFontWeight = true;
							break;
						case 7:
							var value4 = _g1[2];
							if (foundFontSize == true) return false;
							foundFontNotation = true;
							foundFontSize = true;
							foundFontStyle = true;
							foundFontVariant = true;
							foundFontWeight = true;
							break;
						case 2:
							var value5 = _g1[2];
							if (foundFontSize == true) return false;
							foundFontNotation = true;
							foundFontSize = true;
							foundFontStyle = true;
							foundFontVariant = true;
							foundFontWeight = true;
							break;
						case 14:
							var lineHeight = _g1[3];
							var fontSize = _g1[2];
							if (foundFontNotation == true) return false;
							foundFontNotation = true;
							foundFontSize = true;
							foundFontStyle = true;
							foundFontVariant = true;
							foundFontWeight = true;
							break;
						default:
							return false;
					}
				}
			}
			if (foundFontFamily == false || foundFontSize == false) return false;
			return true;
		}
		, isValidTransitionGroup: function (styleValues) {
			var hasTransitionProperty = false;
			var hasTransitionTimingFunction = false;
			var hasTransitionDelay = false;
			var hasTransitionDuration = false;
			if (styleValues.length == 2 || styleValues.length == 3 || styleValues.length == 4) {
				if (this.isValidTransitionProperty(styleValues[0])) hasTransitionProperty = true; else if (this.isValidTransitionDelayOrDuration(styleValues[0])) hasTransitionDuration = true; else if (this.isValidTransitionTimingFunction(styleValues[0])) hasTransitionTimingFunction = true; else return false;
				if (this.isValidTransitionProperty(styleValues[1])) {
					if (hasTransitionProperty == true) return false;
				} else if (this.isValidTransitionDelayOrDuration(styleValues[1])) {
					if (hasTransitionDuration == true) hasTransitionDelay = true; else hasTransitionDuration = true;
				} else if (this.isValidTransitionTimingFunction(styleValues[1])) {
					if (hasTransitionTimingFunction == true) return false;
				} else return false;
				if (styleValues.length == 2) return true;
				if (this.isValidTransitionProperty(styleValues[2])) {
					if (hasTransitionProperty == true) return false;
				} else if (this.isValidTransitionDelayOrDuration(styleValues[2])) {
					if (hasTransitionDuration == true) {
						if (hasTransitionDelay == true) return false; else hasTransitionDelay = true;
					} else hasTransitionDuration = true;
				} else if (this.isValidTransitionTimingFunction(styleValues[2])) {
					if (hasTransitionTimingFunction == true) return false;
				} else return false;
				if (styleValues.length == 3) return true;
				if (this.isValidTransitionProperty(styleValues[3])) {
					if (hasTransitionProperty == true) return false;
				} else if (this.isValidTransitionDelayOrDuration(styleValues[3])) {
					if (hasTransitionDuration == true) {
						if (hasTransitionDelay == true) return false; else hasTransitionDelay = true;
					} else hasTransitionDuration = true;
				} else if (this.isValidTransitionTimingFunction(styleValues[3])) {
					if (hasTransitionTimingFunction == true) return false;
				} else return false;
				return true;
			}
			return false;
		}
		, isValidBorderWidthValue: function (styleValue) {
			switch (styleValue[1]) {
				case 4:
					var value = styleValue[2];
					switch (value[1]) {
						case 73: case 61: case 74:
							return true;
						default:
					}
					break;
				case 7:
					var value1 = styleValue[2];
					if (this.isPositiveLength(value1) == true) return true;
					break;
				case 0:
					var value2 = styleValue[2];
					if (value2 == 0) return true;
					break;
				default:
			}
			return false;
		}
		, isValidBorderColorValue: function (styleValue) {
			switch (styleValue[1]) {
				case 12:
					var value = styleValue[2];
					return true;
				default:
			}
			return false;
		}
		, isValidBorderStyleValue: function (styleValue) {
			switch (styleValue[1]) {
				case 4:
					var value = styleValue[2];
					switch (value[1]) {
						case 18: case 37: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82:
							return true;
						default:
					}
					break;
				default:
			}
			return false;
		}
		, isValidOutlineColorValue: function (styleValue) {
			switch (styleValue[1]) {
				case 4:
					var value = styleValue[2];
					switch (value[1]) {
						case 83:
							return true;
						default:
							return this.isValidBorderColorValue(styleValue);
					}
					break;
				default:
					return this.isValidBorderColorValue(styleValue);
			}
		}
		, isValidOutlineStyleValue: function (styleValue) {
			switch (styleValue[1]) {
				case 4:
					var value = styleValue[2];
					switch (value[1]) {
						case 37:
							return false;
						default:
							return this.isValidBorderStyleValue(styleValue);
					}
					break;
				default:
					return this.isValidBorderStyleValue(styleValue);
			}
		}
		, isValidOverflowValue: function (styleValue) {
			switch (styleValue[1]) {
				case 4:
					var value = styleValue[2];
					switch (value[1]) {
						case 36: case 38: case 37: case 27:
							return true;
						default:
					}
					break;
				default:
			}
			return false;
		}
		, isValidMarginProperty: function (styleValue) {
			switch (styleValue[1]) {
				case 7:
					var value = styleValue[2];
					return true;
				case 0:
					var value1 = styleValue[2];
					if (value1 == 0) return true;
					break;
				case 2:
					var value2 = styleValue[2];
					return true;
				case 4:
					var value3 = styleValue[2];
					switch (value3[1]) {
						case 27:
							return true;
						default:
					}
					break;
				case 16:
					return true;
				default:
			}
			return false;
		}
		, isValidPaddingProperty: function (styleValue) {
			switch (styleValue[1]) {
				case 7:
					var value = styleValue[2];
					if (this.isPositiveLength(value) == true) return true;
					break;
				case 0:
					var value1 = styleValue[2];
					if (value1 == 0) return true;
					break;
				case 2:
					var value2 = styleValue[2];
					if (value2 >= 0) return true;
					break;
				case 16:
					return true;
				default:
			}
			return false;
		}
		, isValidTransformOrigin: function (styleValue, areHorizontalKeywordValueAllowed, areVerticalKeywordAllowed) {
			switch (styleValue[1]) {
				case 7:
					var value = styleValue[2];
					return true;
				case 0:
					var value1 = styleValue[2];
					if (value1 == 0) return true;
					break;
				case 2:
					var value2 = styleValue[2];
					return true;
				case 4:
					var value3 = styleValue[2];
					switch (value3[1]) {
						case 13:
							return true;
						case 11: case 12:
							if (areHorizontalKeywordValueAllowed == true) return true;
							break;
						case 22: case 25:
							if (areVerticalKeywordAllowed == true) return true;
							break;
						default:
					}
					break;
				default:
			}
			return false;
		}
		, isPositiveLength: function (length) {
			switch (length[1]) {
				case 0:
					var value = length[2];
					return value >= 0;
				case 6:
					var value1 = length[2];
					return value1 >= 0;
				case 5:
					var value2 = length[2];
					return value2 >= 0;
				case 4:
					var value3 = length[2];
					return value3 >= 0;
				case 8:
					var value4 = length[2];
					return value4 >= 0;
				case 3:
					var value5 = length[2];
					return value5 >= 0;
				case 2:
					var value6 = length[2];
					return value6 >= 0;
				case 1:
					var value7 = length[2];
					return value7 >= 0;
				case 9:
					var value8 = length[2];
					return value8 >= 0;
				case 7:
					var value9 = length[2];
					return value9 >= 0;
				case 11:
					var value10 = length[2];
					return value10 >= 0;
				case 10:
					var value11 = length[2];
					return value11 >= 0;
				case 12:
					var value12 = length[2];
					return value12 >= 0;
				case 13:
					var value13 = length[2];
					return value13 >= 0;
			}
		}
		, serializeStyleDeclaration: function () {
			var serializedStyleDeclaration = "";
			var _g1 = 0;
			var _g = this.length;
			while (_g1 < _g) {
				var i = _g1++;
				var property = this._indexedProperties[this._propertiesPositions[i]];
				serializedStyleDeclaration += cocktail_core_css_CSSConstants.getPropertyNameFromIndex(property.index) + ":" + cocktail_core_css_parsers_CSSStyleSerializer.serialize(property.typedValue);
				if (property.important == true) serializedStyleDeclaration += " !important";
				serializedStyleDeclaration += ";";
			}
			return serializedStyleDeclaration;
		}
		, get_cssText: function () {
			return this.serializeStyleDeclaration();
		}
		, set_cssText: function (value) {
			this.resetIndexedProperties();
			this.resetPropertiesPositions();
			this.length = 0;
			var baseUrl = null;
			if (this.parentRule != null) {
				if (this.parentRule.parentStyleSheet != null) baseUrl = this.parentRule.parentStyleSheet.href;
			}
			var typedProperties = cocktail_core_css_parsers_CSSStyleParser.parseStyle(value, baseUrl);
			var length = typedProperties.length;
			var _g = 0;
			while (_g < length) {
				var i = _g++;
				var typedProperty = typedProperties[i];
				this.applyProperty(typedProperty.index, typedProperty.typedValue, typedProperty.important);
			}
			return value;
		}
		, get_opacity: function () {
			return this.getPropertyValue(53);
		}
		, set_opacity: function (value) {
			this.setProperty(53, value);
			return value;
		}
		, get_visibility: function () {
			return this.getPropertyValue(49);
		}
		, set_visibility: function (value) {
			this.setProperty(49, value);
			return value;
		}
		, get_margin: function () {
			return this.getPropertyValue(5);
		}
		, set_margin: function (value) {
			this.setProperty(5, value);
			return value;
		}
		, get_marginLeft: function () {
			return this.getPropertyValue(6);
		}
		, set_marginLeft: function (value) {
			this.setProperty(6, value);
			return value;
		}
		, get_marginRight: function () {
			return this.getPropertyValue(7);
		}
		, set_marginRight: function (value) {
			this.setProperty(7, value);
			return value;
		}
		, get_marginTop: function () {
			return this.getPropertyValue(8);
		}
		, set_marginTop: function (value) {
			this.setProperty(8, value);
			return value;
		}
		, get_marginBottom: function () {
			return this.getPropertyValue(9);
		}
		, set_marginBottom: function (value) {
			this.setProperty(9, value);
			return value;
		}
		, get_padding: function () {
			return this.getPropertyValue(10);
		}
		, set_padding: function (value) {
			this.setProperty(10, value);
			return value;
		}
		, get_paddingLeft: function () {
			return this.getPropertyValue(11);
		}
		, set_paddingLeft: function (value) {
			this.setProperty(11, value);
			return value;
		}
		, get_paddingRight: function () {
			return this.getPropertyValue(12);
		}
		, set_paddingRight: function (value) {
			this.setProperty(12, value);
			return value;
		}
		, get_paddingTop: function () {
			return this.getPropertyValue(13);
		}
		, set_paddingTop: function (value) {
			this.setProperty(13, value);
			return value;
		}
		, get_paddingBottom: function () {
			return this.getPropertyValue(14);
		}
		, set_paddingBottom: function (value) {
			this.setProperty(14, value);
			return value;
		}
		, get_display: function () {
			return this.getPropertyValue(0);
		}
		, set_display: function (value) {
			this.setProperty(0, value);
			return value;
		}
		, get_position: function () {
			return this.getPropertyValue(1);
		}
		, set_position: function (value) {
			this.setProperty(1, value);
			return value;
		}
		, get_zIndex: function () {
			return this.getPropertyValue(4);
		}
		, set_zIndex: function (value) {
			this.setProperty(4, value);
			return value;
		}
		, get_width: function () {
			return this.getPropertyValue(15);
		}
		, set_width: function (value) {
			this.setProperty(15, value);
			return value;
		}
		, get_height: function () {
			return this.getPropertyValue(16);
		}
		, set_height: function (value) {
			this.setProperty(16, value);
			return value;
		}
		, get_minHeight: function () {
			return this.getPropertyValue(17);
		}
		, set_minHeight: function (value) {
			this.setProperty(17, value);
			return value;
		}
		, get_maxHeight: function () {
			return this.getPropertyValue(18);
		}
		, set_maxHeight: function (value) {
			this.setProperty(18, value);
			return value;
		}
		, get_minWidth: function () {
			return this.getPropertyValue(19);
		}
		, set_minWidth: function (value) {
			this.setProperty(19, value);
			return value;
		}
		, get_maxWidth: function () {
			return this.getPropertyValue(20);
		}
		, set_maxWidth: function (value) {
			this.setProperty(20, value);
			return value;
		}
		, get_top: function () {
			return this.getPropertyValue(21);
		}
		, set_top: function (value) {
			this.setProperty(21, value);
			return value;
		}
		, get_left: function () {
			return this.getPropertyValue(22);
		}
		, set_left: function (value) {
			this.setProperty(22, value);
			return value;
		}
		, get_bottom: function () {
			return this.getPropertyValue(24);
		}
		, set_bottom: function (value) {
			this.setProperty(24, value);
			return value;
		}
		, get_right: function () {
			return this.getPropertyValue(23);
		}
		, set_right: function (value) {
			this.setProperty(23, value);
			return value;
		}
		, get_cssFloat: function () {
			return this.getPropertyValue(2);
		}
		, set_cssFloat: function (value) {
			this.setProperty(2, value);
			return value;
		}
		, get_clear: function () {
			return this.getPropertyValue(3);
		}
		, set_clear: function (value) {
			this.setProperty(3, value);
			return value;
		}
		, set_font: function (value) {
			this.setProperty(39, value);
			return value;
		}
		, get_font: function () {
			return this.getPropertyValue(39);
		}
		, get_fontSize: function () {
			return this.getPropertyValue(34);
		}
		, set_fontSize: function (value) {
			this.setProperty(34, value);
			return value;
		}
		, get_fontWeight: function () {
			return this.getPropertyValue(35);
		}
		, set_fontWeight: function (value) {
			this.setProperty(35, value);
			return value;
		}
		, get_fontStyle: function () {
			return this.getPropertyValue(36);
		}
		, set_fontStyle: function (value) {
			this.setProperty(36, value);
			return value;
		}
		, get_fontFamily: function () {
			return this.getPropertyValue(37);
		}
		, set_fontFamily: function (value) {
			this.setProperty(37, value);
			return value;
		}
		, get_fontVariant: function () {
			return this.getPropertyValue(38);
		}
		, set_fontVariant: function (value) {
			this.setProperty(38, value);
			return value;
		}
		, get_textTransform: function () {
			return this.getPropertyValue(42);
		}
		, set_textTransform: function (value) {
			this.setProperty(42, value);
			return value;
		}
		, get_letterSpacing: function () {
			return this.getPropertyValue(43);
		}
		, set_letterSpacing: function (value) {
			this.setProperty(43, value);
			return value;
		}
		, get_color: function () {
			return this.getPropertyValue(40);
		}
		, set_color: function (value) {
			this.setProperty(40, value);
			return value;
		}
		, get_wordSpacing: function () {
			return this.getPropertyValue(44);
		}
		, set_wordSpacing: function (value) {
			this.setProperty(44, value);
			return value;
		}
		, get_lineHeight: function () {
			return this.getPropertyValue(41);
		}
		, set_lineHeight: function (value) {
			this.setProperty(41, value);
			return value;
		}
		, get_verticalAlign: function () {
			return this.getPropertyValue(48);
		}
		, set_verticalAlign: function (value) {
			this.setProperty(48, value);
			return value;
		}
		, get_textIndent: function () {
			return this.getPropertyValue(47);
		}
		, set_textIndent: function (value) {
			this.setProperty(47, value);
			return value;
		}
		, get_whiteSpace: function () {
			return this.getPropertyValue(45);
		}
		, set_whiteSpace: function (value) {
			this.setProperty(45, value);
			return value;
		}
		, get_textAlign: function () {
			return this.getPropertyValue(46);
		}
		, set_textAlign: function (value) {
			this.setProperty(46, value);
			return value;
		}
		, set_background: function (value) {
			this.setProperty(33, value);
			return value;
		}
		, get_background: function () {
			return this.getPropertyValue(33);
		}
		, set_backgroundColor: function (value) {
			this.setProperty(25, value);
			return value;
		}
		, get_backgroundColor: function () {
			return this.getPropertyValue(25);
		}
		, set_backgroundImage: function (value) {
			this.setProperty(26, value);
			return value;
		}
		, get_backgroundImage: function () {
			return this.getPropertyValue(26);
		}
		, set_backgroundRepeat: function (value) {
			this.setProperty(27, value);
			return value;
		}
		, get_backgroundRepeat: function () {
			return this.getPropertyValue(27);
		}
		, set_backgroundSize: function (value) {
			this.setProperty(29, value);
			return value;
		}
		, get_backgroundSize: function () {
			return this.getPropertyValue(29);
		}
		, set_backgroundClip: function (value) {
			this.setProperty(31, value);
			return value;
		}
		, get_backgroundClip: function () {
			return this.getPropertyValue(31);
		}
		, set_backgroundAttachment: function (value) {
			this.setProperty(32, value);
			return value;
		}
		, get_backgroundAttachment: function () {
			return this.getPropertyValue(32);
		}
		, set_backgroundPosition: function (value) {
			this.setProperty(30, value);
			return value;
		}
		, get_backgroundPosition: function () {
			return this.getPropertyValue(30);
		}
		, set_backgroundOrigin: function (value) {
			this.setProperty(28, value);
			return value;
		}
		, get_backgroundOrigin: function () {
			return this.getPropertyValue(28);
		}
		, get_overflow: function () {
			return this.getPropertyValue(50);
		}
		, set_overflow: function (value) {
			this.setProperty(50, value);
			return value;
		}
		, get_overflowX: function () {
			return this.getPropertyValue(51);
		}
		, set_overflowX: function (value) {
			this.setProperty(51, value);
			return value;
		}
		, get_overflowY: function () {
			return this.getPropertyValue(52);
		}
		, set_overflowY: function (value) {
			this.setProperty(52, value);
			return value;
		}
		, set_cursor: function (value) {
			this.setProperty(54, value);
			return value;
		}
		, get_cursor: function () {
			return this.getPropertyValue(54);
		}
		, get_transitionProperty: function () {
			return this.getPropertyValue(57);
		}
		, set_transitionProperty: function (value) {
			this.setProperty(57, value);
			return value;
		}
		, get_transitionDuration: function () {
			return this.getPropertyValue(55);
		}
		, set_transitionDuration: function (value) {
			this.setProperty(55, value);
			return value;
		}
		, get_transitionDelay: function () {
			return this.getPropertyValue(56);
		}
		, set_transitionDelay: function (value) {
			this.setProperty(56, value);
			return value;
		}
		, get_transitionTimingFunction: function () {
			return this.getPropertyValue(58);
		}
		, set_transitionTimingFunction: function (value) {
			this.setProperty(58, value);
			return value;
		}
		, get_transform: function () {
			return this.getPropertyValue(61);
		}
		, set_transform: function (value) {
			this.setProperty(61, value);
			return value;
		}
		, get_transformOrigin: function () {
			return this.getPropertyValue(60);
		}
		, set_transformOrigin: function (value) {
			this.setProperty(60, value);
			return value;
		}
		, get_borderTopWidth: function () {
			return this.getPropertyValue(62);
		}
		, set_borderTopWidth: function (value) {
			this.setProperty(62, value);
			return value;
		}
		, get_borderRightWidth: function () {
			return this.getPropertyValue(63);
		}
		, set_borderRightWidth: function (value) {
			this.setProperty(63, value);
			return value;
		}
		, get_borderBottomWidth: function () {
			return this.getPropertyValue(64);
		}
		, set_borderBottomWidth: function (value) {
			this.setProperty(64, value);
			return value;
		}
		, get_borderLeftWidth: function () {
			return this.getPropertyValue(65);
		}
		, set_borderLeftWidth: function (value) {
			this.setProperty(65, value);
			return value;
		}
		, get_borderWidth: function () {
			return this.getPropertyValue(66);
		}
		, set_borderWidth: function (value) {
			this.setProperty(66, value);
			return value;
		}
		, get_borderTopColor: function () {
			return this.getPropertyValue(67);
		}
		, set_borderTopColor: function (value) {
			this.setProperty(67, value);
			return value;
		}
		, get_borderRightColor: function () {
			return this.getPropertyValue(68);
		}
		, set_borderRightColor: function (value) {
			this.setProperty(68, value);
			return value;
		}
		, get_borderBottomColor: function () {
			return this.getPropertyValue(69);
		}
		, set_borderBottomColor: function (value) {
			this.setProperty(69, value);
			return value;
		}
		, get_borderLeftColor: function () {
			return this.getPropertyValue(70);
		}
		, set_borderLeftColor: function (value) {
			this.setProperty(70, value);
			return value;
		}
		, get_borderColor: function () {
			return this.getPropertyValue(71);
		}
		, set_borderColor: function (value) {
			this.setProperty(71, value);
			return value;
		}
		, get_borderTopStyle: function () {
			return this.getPropertyValue(72);
		}
		, set_borderTopStyle: function (value) {
			this.setProperty(72, value);
			return value;
		}
		, get_borderRightStyle: function () {
			return this.getPropertyValue(73);
		}
		, set_borderRightStyle: function (value) {
			this.setProperty(73, value);
			return value;
		}
		, get_borderBottomStyle: function () {
			return this.getPropertyValue(74);
		}
		, set_borderBottomStyle: function (value) {
			this.setProperty(74, value);
			return value;
		}
		, get_borderLeftStyle: function () {
			return this.getPropertyValue(75);
		}
		, set_borderLeftStyle: function (value) {
			this.setProperty(75, value);
			return value;
		}
		, get_borderStyle: function () {
			return this.getPropertyValue(76);
		}
		, set_borderStyle: function (value) {
			this.setProperty(76, value);
			return value;
		}
		, get_borderTop: function () {
			return this.getPropertyValue(77);
		}
		, set_borderTop: function (value) {
			this.setProperty(77, value);
			return value;
		}
		, get_borderRight: function () {
			return this.getPropertyValue(78);
		}
		, set_borderRight: function (value) {
			this.setProperty(78, value);
			return value;
		}
		, get_borderBottom: function () {
			return this.getPropertyValue(79);
		}
		, set_borderBottom: function (value) {
			this.setProperty(79, value);
			return value;
		}
		, get_borderLeft: function () {
			return this.getPropertyValue(80);
		}
		, set_borderLeft: function (value) {
			this.setProperty(80, value);
			return value;
		}
		, get_border: function () {
			return this.getPropertyValue(81);
		}
		, set_border: function (value) {
			this.setProperty(81, value);
			return value;
		}
		, get_outline: function () {
			return this.getPropertyValue(85);
		}
		, set_outline: function (value) {
			this.setProperty(85, value);
			return value;
		}
		, get_outlineWidth: function () {
			return this.getPropertyValue(82);
		}
		, set_outlineWidth: function (value) {
			this.setProperty(82, value);
			return value;
		}
		, get_outlineColor: function () {
			return this.getPropertyValue(84);
		}
		, set_outlineColor: function (value) {
			this.setProperty(84, value);
			return value;
		}
		, get_outlineStyle: function () {
			return this.getPropertyValue(83);
		}
		, set_outlineStyle: function (value) {
			this.setProperty(83, value);
			return value;
		}
		, get_textDecoration: function () {
			return this.getPropertyValue(86);
		}
		, set_textDecoration: function (value) {
			this.setProperty(86, value);
			return value;
		}
		, __class__: cocktail_core_css_CSSStyleDeclaration
		, __properties__: { set_cssText: "set_cssText", get_cssText: "get_cssText", set_outlineStyle: "set_outlineStyle", get_outlineStyle: "get_outlineStyle", set_outlineColor: "set_outlineColor", get_outlineColor: "get_outlineColor", set_outlineWidth: "set_outlineWidth", get_outlineWidth: "get_outlineWidth", set_outline: "set_outline", get_outline: "get_outline", set_cursor: "set_cursor", get_cursor: "get_cursor", set_transformOrigin: "set_transformOrigin", get_transformOrigin: "get_transformOrigin", set_transform: "set_transform", get_transform: "get_transform", set_transitionDelay: "set_transitionDelay", get_transitionDelay: "get_transitionDelay", set_transitionTimingFunction: "set_transitionTimingFunction", get_transitionTimingFunction: "get_transitionTimingFunction", set_transitionDuration: "set_transitionDuration", get_transitionDuration: "get_transitionDuration", set_transitionProperty: "set_transitionProperty", get_transitionProperty: "get_transitionProperty", set_overflowY: "set_overflowY", get_overflowY: "get_overflowY", set_overflowX: "set_overflowX", get_overflowX: "get_overflowX", set_overflow: "set_overflow", get_overflow: "get_overflow", set_visibility: "set_visibility", get_visibility: "get_visibility", set_opacity: "set_opacity", get_opacity: "get_opacity", set_textDecoration: "set_textDecoration", get_textDecoration: "get_textDecoration", set_verticalAlign: "set_verticalAlign", get_verticalAlign: "get_verticalAlign", set_textIndent: "set_textIndent", get_textIndent: "get_textIndent", set_textAlign: "set_textAlign", get_textAlign: "get_textAlign", set_whiteSpace: "set_whiteSpace", get_whiteSpace: "get_whiteSpace", set_wordSpacing: "set_wordSpacing", get_wordSpacing: "get_wordSpacing", set_letterSpacing: "set_letterSpacing", get_letterSpacing: "get_letterSpacing", set_textTransform: "set_textTransform", get_textTransform: "get_textTransform", set_lineHeight: "set_lineHeight", get_lineHeight: "get_lineHeight", set_color: "set_color", get_color: "get_color", set_fontVariant: "set_fontVariant", get_fontVariant: "get_fontVariant", set_fontFamily: "set_fontFamily", get_fontFamily: "get_fontFamily", set_fontStyle: "set_fontStyle", get_fontStyle: "get_fontStyle", set_fontWeight: "set_fontWeight", get_fontWeight: "get_fontWeight", set_fontSize: "set_fontSize", get_fontSize: "get_fontSize", set_font: "set_font", get_font: "get_font", set_border: "set_border", get_border: "get_border", set_borderLeft: "set_borderLeft", get_borderLeft: "get_borderLeft", set_borderBottom: "set_borderBottom", get_borderBottom: "get_borderBottom", set_borderRight: "set_borderRight", get_borderRight: "get_borderRight", set_borderTop: "set_borderTop", get_borderTop: "get_borderTop", set_borderStyle: "set_borderStyle", get_borderStyle: "get_borderStyle", set_borderLeftStyle: "set_borderLeftStyle", get_borderLeftStyle: "get_borderLeftStyle", set_borderBottomStyle: "set_borderBottomStyle", get_borderBottomStyle: "get_borderBottomStyle", set_borderRightStyle: "set_borderRightStyle", get_borderRightStyle: "get_borderRightStyle", set_borderTopStyle: "set_borderTopStyle", get_borderTopStyle: "get_borderTopStyle", set_borderColor: "set_borderColor", get_borderColor: "get_borderColor", set_borderLeftColor: "set_borderLeftColor", get_borderLeftColor: "get_borderLeftColor", set_borderBottomColor: "set_borderBottomColor", get_borderBottomColor: "get_borderBottomColor", set_borderRightColor: "set_borderRightColor", get_borderRightColor: "get_borderRightColor", set_borderTopColor: "set_borderTopColor", get_borderTopColor: "get_borderTopColor", set_borderWidth: "set_borderWidth", get_borderWidth: "get_borderWidth", set_borderLeftWidth: "set_borderLeftWidth", get_borderLeftWidth: "get_borderLeftWidth", set_borderBottomWidth: "set_borderBottomWidth", get_borderBottomWidth: "get_borderBottomWidth", set_borderRightWidth: "set_borderRightWidth", get_borderRightWidth: "get_borderRightWidth", set_borderTopWidth: "set_borderTopWidth", get_borderTopWidth: "get_borderTopWidth", set_backgroundAttachment: "set_backgroundAttachment", get_backgroundAttachment: "get_backgroundAttachment", set_backgroundClip: "set_backgroundClip", get_backgroundClip: "get_backgroundClip", set_backgroundPosition: "set_backgroundPosition", get_backgroundPosition: "get_backgroundPosition", set_backgroundSize: "set_backgroundSize", get_backgroundSize: "get_backgroundSize", set_backgroundOrigin: "set_backgroundOrigin", get_backgroundOrigin: "get_backgroundOrigin", set_backgroundRepeat: "set_backgroundRepeat", get_backgroundRepeat: "get_backgroundRepeat", set_backgroundImage: "set_backgroundImage", get_backgroundImage: "get_backgroundImage", set_backgroundColor: "set_backgroundColor", get_backgroundColor: "get_backgroundColor", set_background: "set_background", get_background: "get_background", set_right: "set_right", get_right: "get_right", set_bottom: "set_bottom", get_bottom: "get_bottom", set_left: "set_left", get_left: "get_left", set_top: "set_top", get_top: "get_top", set_maxWidth: "set_maxWidth", get_maxWidth: "get_maxWidth", set_minWidth: "set_minWidth", get_minWidth: "get_minWidth", set_maxHeight: "set_maxHeight", get_maxHeight: "get_maxHeight", set_minHeight: "set_minHeight", get_minHeight: "get_minHeight", set_height: "set_height", get_height: "get_height", set_width: "set_width", get_width: "get_width", set_paddingBottom: "set_paddingBottom", get_paddingBottom: "get_paddingBottom", set_paddingTop: "set_paddingTop", get_paddingTop: "get_paddingTop", set_paddingRight: "set_paddingRight", get_paddingRight: "get_paddingRight", set_paddingLeft: "set_paddingLeft", get_paddingLeft: "get_paddingLeft", set_padding: "set_padding", get_padding: "get_padding", set_marginBottom: "set_marginBottom", get_marginBottom: "get_marginBottom", set_marginTop: "set_marginTop", get_marginTop: "get_marginTop", set_marginRight: "set_marginRight", get_marginRight: "get_marginRight", set_marginLeft: "set_marginLeft", get_marginLeft: "get_marginLeft", set_margin: "set_margin", get_margin: "get_margin", set_zIndex: "set_zIndex", get_zIndex: "get_zIndex", set_clear: "set_clear", get_clear: "get_clear", set_cssFloat: "set_cssFloat", get_cssFloat: "get_cssFloat", set_position: "set_position", get_position: "get_position", set_display: "set_display", get_display: "get_display" }
	};
	var cocktail_core_css_CSSStyleRule = function (parentStyleSheet, parentRule) {
		cocktail_core_css_CSSRule.call(this, parentStyleSheet, parentRule);
		this.style = new cocktail_core_css_CSSStyleDeclaration(this);
		this._selectorParser = new cocktail_core_css_parsers_CSSSelectorParser();
		this.selectors = [];
		this.type = 1;
	};
	$hxClasses["cocktail.core.css.CSSStyleRule"] = cocktail_core_css_CSSStyleRule;
	cocktail_core_css_CSSStyleRule.__name__ = ["cocktail", "core", "css", "CSSStyleRule"];
	cocktail_core_css_CSSStyleRule.isSelectorChar = function (c) {
		return c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 42;
	};
	cocktail_core_css_CSSStyleRule.isStyleChar = function (c) {
		return c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 40 || c == 41;
	};
	cocktail_core_css_CSSStyleRule.isAsciiChar = function (c) {
		return c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57;
	};
	cocktail_core_css_CSSStyleRule.__super__ = cocktail_core_css_CSSRule;
	cocktail_core_css_CSSStyleRule.prototype = $extend(cocktail_core_css_CSSRule.prototype, {
		parse: function (css) {
			this.selectors = [];
			var state = cocktail_core_css_parsers_StyleRuleParserState.IGNORE_SPACES;
			var next = cocktail_core_css_parsers_StyleRuleParserState.BEGIN_SELECTOR;
			var start = 0;
			var position = 0;
			var c = css.charCodeAt(position);
			while (!(c != c)) {
				switch (state[1]) {
					case 0:
						switch (c) {
							case 10: case 13: case 9: case 32:
								break;
							default:
								state = next;
								continue;
						}
						break;
					case 1:
						state = cocktail_core_css_parsers_StyleRuleParserState.SELECTOR;
						next = cocktail_core_css_parsers_StyleRuleParserState.END_SELECTOR;
						start = position;
						continue;
						break;
					case 3:
						if (!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 42)) switch (c) {
							case 123:
								state = cocktail_core_css_parsers_StyleRuleParserState.END_SELECTOR;
								next = cocktail_core_css_parsers_StyleRuleParserState.BEGIN_STYLES;
								continue;
								break;
							case 44:
								state = cocktail_core_css_parsers_StyleRuleParserState.END_SELECTOR;
								next = cocktail_core_css_parsers_StyleRuleParserState.BEGIN_SELECTOR;
								continue;
								break;
						}
						break;
					case 2:
						var selector = HxOverrides.substr(css, start, position - start);
						var isValid = this._selectorParser.parseSelector(selector, this.selectors);
						if (isValid == false) {
							this.selectors = [];
							return;
						}
						state = next;
						break;
					case 4:
						state = cocktail_core_css_parsers_StyleRuleParserState.STYLES;
						next = cocktail_core_css_parsers_StyleRuleParserState.END_STYLES;
						start = position;
						continue;
						break;
					case 5:
						if (!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 40 || c == 41)) switch (c) {
							case 125:
								state = next;
								continue;
								break;
						}
						break;
					case 6:
						var styleDeclaration = HxOverrides.substr(css, start, position - start);
						this.style.set_cssText(styleDeclaration);
						state = cocktail_core_css_parsers_StyleRuleParserState.IGNORE_SPACES;
						next = cocktail_core_css_parsers_StyleRuleParserState.IGNORE_SPACES;
						break;
				}
				c = StringTools.fastCodeAt(css, ++position);
			}
		}
		, serializeStyleRule: function () {
			var serializedStyleRule = this.serializeSelectors(this.selectors);
			serializedStyleRule += "{" + this.style.get_cssText() + "}";
			return serializedStyleRule;
		}
		, serializeSelectors: function (selectors) {
			var serializedSelectors = "";
			var _g1 = 0;
			var _g = selectors.length;
			while (_g1 < _g) {
				var i = _g1++;
				var selector = selectors[i];
				serializedSelectors += cocktail_core_css_parsers_SelectorSerializer.serialize(selector);
				if (i < selectors.length - 1) serializedSelectors += ", ";
			}
			return serializedSelectors;
		}
		, set_cssText: function (value) {
			this.parse(value);
			return value;
		}
		, get_cssText: function () {
			return this.serializeStyleRule();
		}
		, get_selectorText: function () {
			return this.serializeSelectors(this.selectors);
		}
		, set_selectorText: function (value) {
			this.selectors = [];
			this._selectorParser.parseSelector(value, this.selectors);
			return value;
		}
		, __class__: cocktail_core_css_CSSStyleRule
		, __properties__: $extend(cocktail_core_css_CSSRule.prototype.__properties__, { set_selectorText: "set_selectorText", get_selectorText: "get_selectorText" })
	});
	var cocktail_core_css_StyleSheet = function (stylesheet, ownerNode, href, parentStyleSheet) {
		this.ownerNode = ownerNode;
		this.href = href;
		this.parentStyleSheet = parentStyleSheet;
	};
	$hxClasses["cocktail.core.css.StyleSheet"] = cocktail_core_css_StyleSheet;
	cocktail_core_css_StyleSheet.__name__ = ["cocktail", "core", "css", "StyleSheet"];
	cocktail_core_css_StyleSheet.prototype = {
		dispose: function () {
		}
		, __class__: cocktail_core_css_StyleSheet
	};
	var cocktail_core_css_CSSStyleSheet = function (stylesheet, origin, ownerNode, href, parentStyleSheet, ownerRule) {
		cocktail_core_css_StyleSheet.call(this, stylesheet, ownerNode, href, parentStyleSheet);
		this.cssRules = [];
		this.ownerRule = ownerRule;
		this.origin = origin;
		this._cssRulesParser = new cocktail_core_css_parsers_CSSRulesParser();
		var rules = this._cssRulesParser.parseRules(stylesheet);
		var _g1 = 0;
		var _g = rules.length;
		while (_g1 < _g) {
			var i = _g1++;
			this.insertRule(rules[i], this.cssRules.length);
		}
	};
	$hxClasses["cocktail.core.css.CSSStyleSheet"] = cocktail_core_css_CSSStyleSheet;
	cocktail_core_css_CSSStyleSheet.__name__ = ["cocktail", "core", "css", "CSSStyleSheet"];
	cocktail_core_css_CSSStyleSheet.__super__ = cocktail_core_css_StyleSheet;
	cocktail_core_css_CSSStyleSheet.prototype = $extend(cocktail_core_css_StyleSheet.prototype, {
		insertRule: function (rule, index) {
			var cssRule = this._cssRulesParser.parseRule(rule, this);
			this.cssRules.splice(index, 0, cssRule);
			return index;
		}
		, deleteRule: function (index) {
			HxOverrides.remove(this.cssRules, this.cssRules[index]);
		}
		, __class__: cocktail_core_css_CSSStyleSheet
	});
	var cocktail_core_css_CSSValueConverter = function () {
	};
	$hxClasses["cocktail.core.css.CSSValueConverter"] = cocktail_core_css_CSSValueConverter;
	cocktail_core_css_CSSValueConverter.__name__ = ["cocktail", "core", "css", "CSSValueConverter"];
	cocktail_core_css_CSSValueConverter.getPixelFromLength = function (length, relativeLengthReference) {
		var lengthValue;
		switch (length[1]) {
			case 0:
				var value = length[2];
				lengthValue = value;
				break;
			case 2:
				var value1 = length[2];
				lengthValue = value1 * 37.7952755905511779 / 10;
				break;
			case 1:
				var value2 = length[2];
				lengthValue = value2 * 37.7952755905511779;
				break;
			case 3:
				var value3 = length[2];
				lengthValue = value3 / 0.75;
				break;
			case 5:
				var value4 = length[2];
				lengthValue = value4 * 96.;
				break;
			case 4:
				var value5 = length[2];
				lengthValue = value5 * 16.;
				break;
			case 6:
				var value6 = length[2];
				lengthValue = relativeLengthReference.em * value6;
				break;
			case 8:
				var value7 = length[2];
				lengthValue = relativeLengthReference.ex * value7;
				break;
			case 9:
				var value8 = length[2];
				lengthValue = relativeLengthReference.ch * value8;
				break;
			case 7:
				var value9 = length[2];
				lengthValue = relativeLengthReference.rem * value9;
				break;
			case 13:
				var value10 = length[2];
				if (relativeLengthReference.viewportHeight > relativeLengthReference.viewportWidth) lengthValue = relativeLengthReference.viewportHeight * 0.01 * value10; else lengthValue = relativeLengthReference.viewportWidth * 0.01 * value10;
				break;
			case 12:
				var value11 = length[2];
				if (relativeLengthReference.viewportHeight < relativeLengthReference.viewportWidth) lengthValue = relativeLengthReference.viewportHeight * 0.01 * value11; else lengthValue = relativeLengthReference.viewportWidth * 0.01 * value11;
				break;
			case 11:
				var value12 = length[2];
				lengthValue = relativeLengthReference.viewportHeight * 0.01 * value12;
				break;
			case 10:
				var value13 = length[2];
				lengthValue = relativeLengthReference.viewportWidth * 0.01 * value13;
				break;
		}
		return lengthValue;
	};
	cocktail_core_css_CSSValueConverter.getBorderWidthFromBorderWidthKeyword = function (value) {
		switch (value[1]) {
			case 73:
				return cocktail_core_config_Config.getInstance().thinBorderWidth;
			case 61:
				return cocktail_core_config_Config.getInstance().mediumBorderWidth;
			case 74:
				return cocktail_core_config_Config.getInstance().thickBorderWidth;
			default:
				throw new js__$Boot_HaxeError("not a valid border width keyword");
		}
	};
	cocktail_core_css_CSSValueConverter.getFontFamilyAsStringArray = function (value) {
		var fontNames = [];
		switch (value[1]) {
			case 15:
				var value1 = value[2];
				var _g1 = 0;
				var _g = value1.length;
				while (_g1 < _g) {
					var i = _g1++;
					{
						var _g2 = value1[i];
						switch (_g2[1]) {
							case 6:
								var value2 = _g2[2];
								fontNames.push(value2);
								break;
							case 3:
								var value3 = _g2[2];
								fontNames.push(value3);
								break;
							default:
								throw new js__$Boot_HaxeError("Illegal value for font family style");
						}
					}
				}
				break;
			case 3:
				var value4 = value[2];
				fontNames = [value4];
				break;
			case 6:
				var value5 = value[2];
				fontNames = [value5];
				break;
			default:
				throw new js__$Boot_HaxeError("Illegal value for font family style");
		}
		return fontNames;
	};
	cocktail_core_css_CSSValueConverter.getFontSizeFromAbsoluteSizeValue = function (absoluteSize) {
		var fontSize = 0.0;
		switch (absoluteSize[1]) {
			case 58:
				fontSize = cocktail_core_config_Config.getInstance().xxSmallFontSize;
				break;
			case 59:
				fontSize = cocktail_core_config_Config.getInstance().xSmallFontSize;
				break;
			case 60:
				fontSize = cocktail_core_config_Config.getInstance().smallFontSize;
				break;
			case 61:
				fontSize = cocktail_core_config_Config.getInstance().mediumFontSize;
				break;
			case 62:
				fontSize = cocktail_core_config_Config.getInstance().largeFontSize;
				break;
			case 63:
				fontSize = cocktail_core_config_Config.getInstance().xLargeFontSize;
				break;
			case 64:
				fontSize = cocktail_core_config_Config.getInstance().xxLargeFontSize;
				break;
			default:
				throw new js__$Boot_HaxeError("Illegal keyword value for font size");
		}
		return fontSize;
	};
	cocktail_core_css_CSSValueConverter.getFontSizeFromRelativeSizeValue = function (relativeSize, parentFontSize) {
		var fontSize = 0.0;
		switch (relativeSize[1]) {
			case 65:
				fontSize = cocktail_core_css_CSSValueConverter.getLargerFontSize(parentFontSize);
				break;
			case 66:
				fontSize = cocktail_core_css_CSSValueConverter.getSmallerFontSize(parentFontSize);
				break;
			default:
				throw new js__$Boot_HaxeError("Illegal keyword value for font size");
		}
		return fontSize;
	};
	cocktail_core_css_CSSValueConverter.getPixelFromPercent = function (percent, reference) {
		return reference * (percent * 0.01);
	};
	cocktail_core_css_CSSValueConverter.getPercentFromPixel = function (pixel, reference) {
		return reference / pixel * 100;
	};
	cocktail_core_css_CSSValueConverter.getComputedCSSColorFromCSSColor = function (colorProperty, currentColor) {
		switch (colorProperty[1]) {
			case 7:
				var value = colorProperty[2];
				return cocktail_core_css_CSSValueConverter.getRGBAColorFromColorKeyword(value);
			case 8:
				return cocktail_core_css_CSSColorValue.RGBA(0, 0, 0, 0.0);
			case 0:
				var blue = colorProperty[4];
				var green = colorProperty[3];
				var red = colorProperty[2];
				red = cocktail_core_css_CSSValueConverter.clampInteger(red, 255, 0);
				green = cocktail_core_css_CSSValueConverter.clampInteger(green, 255, 0);
				blue = cocktail_core_css_CSSValueConverter.clampInteger(blue, 255, 0);
				return cocktail_core_css_CSSColorValue.RGBA(red, green, blue, 1.0);
			case 1:
				var blue1 = colorProperty[4];
				var green1 = colorProperty[3];
				var red1 = colorProperty[2];
				red1 = cocktail_core_css_CSSValueConverter.clampNumber(red1, 100, 0);
				green1 = cocktail_core_css_CSSValueConverter.clampNumber(green1, 100, 0);
				blue1 = cocktail_core_css_CSSValueConverter.clampNumber(blue1, 100, 0);
				return cocktail_core_css_CSSColorValue.RGBA(Math.round(255 * (red1 * 0.01)), Math.round(255 * (green1 * 0.01)), Math.round(255 * (blue1 * 0.01)), 1.0);
			case 2:
				var alpha = colorProperty[5];
				var blue2 = colorProperty[4];
				var green2 = colorProperty[3];
				var red2 = colorProperty[2];
				red2 = cocktail_core_css_CSSValueConverter.clampInteger(red2, 255, 0);
				green2 = cocktail_core_css_CSSValueConverter.clampInteger(green2, 255, 0);
				blue2 = cocktail_core_css_CSSValueConverter.clampInteger(blue2, 255, 0);
				alpha = cocktail_core_css_CSSValueConverter.clampNumber(alpha, 1.0, 0.0);
				return cocktail_core_css_CSSColorValue.RGBA(red2, green2, blue2, alpha);
			case 3:
				var alpha1 = colorProperty[5];
				var blue3 = colorProperty[4];
				var green3 = colorProperty[3];
				var red3 = colorProperty[2];
				red3 = cocktail_core_css_CSSValueConverter.clampNumber(red3, 100, 0);
				green3 = cocktail_core_css_CSSValueConverter.clampNumber(green3, 100, 0);
				blue3 = cocktail_core_css_CSSValueConverter.clampNumber(blue3, 100, 0);
				alpha1 = cocktail_core_css_CSSValueConverter.clampNumber(alpha1, 1.0, 0.0);
				return cocktail_core_css_CSSColorValue.RGBA(Math.round(255 * (red3 * 0.01)), Math.round(255 * (green3 * 0.01)), Math.round(255 * (blue3 * 0.01)), alpha1);
			case 5:
				var lightness = colorProperty[4];
				var saturation = colorProperty[3];
				var hue = colorProperty[2];
				hue = 360 / hue;
				saturation = 100 / saturation;
				lightness = 100 / lightness;
				return cocktail_core_css_CSSValueConverter.HSLAToRGBA(hue, saturation, lightness, 1.0);
			case 6:
				var alpha2 = colorProperty[5];
				var lightness1 = colorProperty[4];
				var saturation1 = colorProperty[3];
				var hue1 = colorProperty[2];
				hue1 = 360 / hue1;
				saturation1 = 100 / saturation1;
				lightness1 = 100 / lightness1;
				return cocktail_core_css_CSSValueConverter.HSLAToRGBA(hue1, saturation1, lightness1, alpha2);
			case 4:
				var value1 = colorProperty[2];
				var paddedHex = "";
				if (value1.length == 3) {
					paddedHex += value1.charAt(0);
					paddedHex += value1.charAt(0);
					paddedHex += value1.charAt(1);
					paddedHex += value1.charAt(1);
					paddedHex += value1.charAt(2);
					paddedHex += value1.charAt(2);
				} else paddedHex = value1;
				return cocktail_core_css_CSSValueConverter.hexToRGBA(paddedHex);
			case 9:
				return currentColor;
		}
	};
	cocktail_core_css_CSSValueConverter.getColorVOFromCSSColor = function (value, colorVO) {
		var colorValue = 0;
		var alphaValue = 0;
		switch (value[1]) {
			case 2:
				var alpha = value[5];
				var blue = value[4];
				var green = value[3];
				var red = value[2];
				colorValue = red;
				colorValue = (colorValue << 8) + green;
				colorValue = (colorValue << 8) + blue;
				alphaValue = alpha;
				break;
			default:
		}
		colorVO.color = colorValue;
		colorVO.alpha = alphaValue;
	};
	cocktail_core_css_CSSValueConverter.HSLAToRGBA = function (hue, saturation, lightness, alpha) {
		var m2 = 0;
		if (lightness < 0.5) m2 = lightness * (saturation + 1); else m2 = lightness + saturation - lightness * saturation;
		var m1 = lightness * 2 - m2;
		var r = Math.round(cocktail_core_css_CSSValueConverter.hueToRGB(m1, m2, hue + 0.333333333333333315));
		var g = Math.round(cocktail_core_css_CSSValueConverter.hueToRGB(m1, m2, hue));
		var b = Math.round(cocktail_core_css_CSSValueConverter.hueToRGB(m1, m2, hue - 0.333333333333333315));
		return cocktail_core_css_CSSColorValue.RGBA(r, g, b, alpha);
	};
	cocktail_core_css_CSSValueConverter.hueToRGB = function (m1, m2, h) {
		if (h < 0) h = h + 1;
		if (h > 1) h = h - 1;
		if (h * 6 < 1) return m1 + (m2 - m1) * h * 6;
		if (h * 2 < 1) return m2;
		if (h * 3 < 2) return m1 + (m2 - m1) * (0.66666666666666663 - h) * 6;
		return m1;
	};
	cocktail_core_css_CSSValueConverter.clampNumber = function (number, max, min) {
		if (number > max) return max;
		if (number < min) return min;
		return number;
	};
	cocktail_core_css_CSSValueConverter.clampInteger = function (integer, max, min) {
		if (integer > max) return max;
		if (integer < min) return min;
		return integer;
	};
	cocktail_core_css_CSSValueConverter.hexToRGBA = function (hex) {
		var red = cocktail_core_css_CSSValueConverter.hexToInt(hex.charAt(0)) * 16 + cocktail_core_css_CSSValueConverter.hexToInt(hex.charAt(1));
		var green = cocktail_core_css_CSSValueConverter.hexToInt(hex.charAt(2)) * 16 + cocktail_core_css_CSSValueConverter.hexToInt(hex.charAt(3));
		var blue = cocktail_core_css_CSSValueConverter.hexToInt(hex.charAt(4)) * 16 + cocktail_core_css_CSSValueConverter.hexToInt(hex.charAt(5));
		return cocktail_core_css_CSSColorValue.RGBA(red, green, blue, 1.0);
	};
	cocktail_core_css_CSSValueConverter.hexToInt = function ($char) {
		var _g = $char.toUpperCase();
		switch (_g) {
			case "0":
				return 0;
			case "1":
				return 1;
			case "2":
				return 2;
			case "3":
				return 3;
			case "4":
				return 4;
			case "5":
				return 5;
			case "6":
				return 6;
			case "7":
				return 7;
			case "8":
				return 8;
			case "9":
				return 9;
			case "A":
				return 10;
			case "B":
				return 11;
			case "C":
				return 12;
			case "D":
				return 13;
			case "E":
				return 14;
			case "F":
				return 15;
		}
		return 0;
	};
	cocktail_core_css_CSSValueConverter.getRGBAColorFromColorKeyword = function (value) {
		switch (value[1]) {
			case 0:
				return cocktail_core_css_CSSColorValue.RGBA(240, 248, 255, 1.0);
			case 1:
				return cocktail_core_css_CSSColorValue.RGBA(250, 235, 215, 1.0);
			case 2:
				return cocktail_core_css_CSSColorValue.RGBA(0, 255, 255, 1.0);
			case 3:
				return cocktail_core_css_CSSColorValue.RGBA(127, 255, 212, 1.0);
			case 4:
				return cocktail_core_css_CSSColorValue.RGBA(240, 255, 255, 1.0);
			case 5:
				return cocktail_core_css_CSSColorValue.RGBA(245, 245, 220, 1.0);
			case 6:
				return cocktail_core_css_CSSColorValue.RGBA(255, 228, 196, 1.0);
			case 7:
				return cocktail_core_css_CSSColorValue.RGBA(0, 0, 0, 1.0);
			case 8:
				return cocktail_core_css_CSSColorValue.RGBA(255, 235, 205, 1.0);
			case 9:
				return cocktail_core_css_CSSColorValue.RGBA(0, 0, 255, 1.0);
			case 10:
				return cocktail_core_css_CSSColorValue.RGBA(138, 43, 226, 1.0);
			case 11:
				return cocktail_core_css_CSSColorValue.RGBA(165, 42, 42, 1.0);
			case 12:
				return cocktail_core_css_CSSColorValue.RGBA(222, 184, 135, 1.0);
			case 13:
				return cocktail_core_css_CSSColorValue.RGBA(95, 158, 160, 1.0);
			case 14:
				return cocktail_core_css_CSSColorValue.RGBA(127, 255, 0, 1.0);
			case 15:
				return cocktail_core_css_CSSColorValue.RGBA(210, 105, 30, 1.0);
			case 16:
				return cocktail_core_css_CSSColorValue.RGBA(255, 127, 80, 1.0);
			case 17:
				return cocktail_core_css_CSSColorValue.RGBA(100, 149, 237, 1.0);
			case 18:
				return cocktail_core_css_CSSColorValue.RGBA(255, 248, 220, 1.0);
			case 19:
				return cocktail_core_css_CSSColorValue.RGBA(220, 20, 60, 1.0);
			case 20:
				return cocktail_core_css_CSSColorValue.RGBA(0, 255, 255, 1.0);
			case 21:
				return cocktail_core_css_CSSColorValue.RGBA(0, 0, 139, 1.0);
			case 22:
				return cocktail_core_css_CSSColorValue.RGBA(0, 139, 139, 1.0);
			case 23:
				return cocktail_core_css_CSSColorValue.RGBA(184, 134, 11, 1.0);
			case 24:
				return cocktail_core_css_CSSColorValue.RGBA(169, 169, 169, 1.0);
			case 25:
				return cocktail_core_css_CSSColorValue.RGBA(0, 100, 0, 1.0);
			case 26:
				return cocktail_core_css_CSSColorValue.RGBA(169, 169, 169, 1.0);
			case 27:
				return cocktail_core_css_CSSColorValue.RGBA(189, 183, 107, 1.0);
			case 28:
				return cocktail_core_css_CSSColorValue.RGBA(139, 0, 139, 1.0);
			case 29:
				return cocktail_core_css_CSSColorValue.RGBA(85, 107, 47, 1.0);
			case 30:
				return cocktail_core_css_CSSColorValue.RGBA(255, 140, 0, 1.0);
			case 31:
				return cocktail_core_css_CSSColorValue.RGBA(153, 50, 204, 1.0);
			case 32:
				return cocktail_core_css_CSSColorValue.RGBA(139, 0, 0, 1.0);
			case 33:
				return cocktail_core_css_CSSColorValue.RGBA(233, 150, 122, 1.0);
			case 34:
				return cocktail_core_css_CSSColorValue.RGBA(143, 188, 143, 1.0);
			case 35:
				return cocktail_core_css_CSSColorValue.RGBA(72, 61, 139, 1.0);
			case 36:
				return cocktail_core_css_CSSColorValue.RGBA(47, 79, 79, 1.0);
			case 37:
				return cocktail_core_css_CSSColorValue.RGBA(47, 79, 79, 1.0);
			case 38:
				return cocktail_core_css_CSSColorValue.RGBA(0, 206, 209, 1.0);
			case 39:
				return cocktail_core_css_CSSColorValue.RGBA(148, 0, 211, 1.0);
			case 40:
				return cocktail_core_css_CSSColorValue.RGBA(255, 20, 147, 1.0);
			case 41:
				return cocktail_core_css_CSSColorValue.RGBA(0, 191, 255, 1.0);
			case 42:
				return cocktail_core_css_CSSColorValue.RGBA(105, 105, 105, 1.0);
			case 43:
				return cocktail_core_css_CSSColorValue.RGBA(105, 105, 105, 1.0);
			case 44:
				return cocktail_core_css_CSSColorValue.RGBA(30, 144, 255, 1.0);
			case 45:
				return cocktail_core_css_CSSColorValue.RGBA(178, 34, 34, 1.0);
			case 46:
				return cocktail_core_css_CSSColorValue.RGBA(255, 250, 240, 1.0);
			case 47:
				return cocktail_core_css_CSSColorValue.RGBA(34, 139, 34, 1.0);
			case 48:
				return cocktail_core_css_CSSColorValue.RGBA(255, 0, 255, 1.0);
			case 49:
				return cocktail_core_css_CSSColorValue.RGBA(220, 220, 220, 1.0);
			case 50:
				return cocktail_core_css_CSSColorValue.RGBA(248, 248, 255, 1.0);
			case 51:
				return cocktail_core_css_CSSColorValue.RGBA(255, 215, 0, 1.0);
			case 52:
				return cocktail_core_css_CSSColorValue.RGBA(218, 165, 32, 1.0);
			case 53:
				return cocktail_core_css_CSSColorValue.RGBA(128, 128, 128, 1.0);
			case 54:
				return cocktail_core_css_CSSColorValue.RGBA(0, 128, 0, 1.0);
			case 55:
				return cocktail_core_css_CSSColorValue.RGBA(173, 255, 47, 1.0);
			case 56:
				return cocktail_core_css_CSSColorValue.RGBA(128, 128, 128, 1.0);
			case 57:
				return cocktail_core_css_CSSColorValue.RGBA(240, 255, 240, 1.0);
			case 58:
				return cocktail_core_css_CSSColorValue.RGBA(255, 105, 180, 1.0);
			case 59:
				return cocktail_core_css_CSSColorValue.RGBA(205, 92, 92, 1.0);
			case 60:
				return cocktail_core_css_CSSColorValue.RGBA(75, 0, 130, 1.0);
			case 61:
				return cocktail_core_css_CSSColorValue.RGBA(255, 255, 240, 1.0);
			case 62:
				return cocktail_core_css_CSSColorValue.RGBA(240, 230, 140, 1.0);
			case 63:
				return cocktail_core_css_CSSColorValue.RGBA(230, 230, 250, 1.0);
			case 64:
				return cocktail_core_css_CSSColorValue.RGBA(255, 240, 245, 1.0);
			case 65:
				return cocktail_core_css_CSSColorValue.RGBA(124, 252, 0, 1.0);
			case 66:
				return cocktail_core_css_CSSColorValue.RGBA(255, 250, 205, 1.0);
			case 67:
				return cocktail_core_css_CSSColorValue.RGBA(173, 216, 130, 1.0);
			case 68:
				return cocktail_core_css_CSSColorValue.RGBA(240, 128, 128, 1.0);
			case 69:
				return cocktail_core_css_CSSColorValue.RGBA(224, 255, 255, 1.0);
			case 70:
				return cocktail_core_css_CSSColorValue.RGBA(250, 250, 210, 1.0);
			case 71:
				return cocktail_core_css_CSSColorValue.RGBA(211, 211, 211, 1.0);
			case 72:
				return cocktail_core_css_CSSColorValue.RGBA(144, 238, 144, 1.0);
			case 73:
				return cocktail_core_css_CSSColorValue.RGBA(211, 211, 211, 1.0);
			case 74:
				return cocktail_core_css_CSSColorValue.RGBA(255, 182, 193, 1.0);
			case 75:
				return cocktail_core_css_CSSColorValue.RGBA(255, 160, 122, 1.0);
			case 76:
				return cocktail_core_css_CSSColorValue.RGBA(32, 178, 170, 1.0);
			case 77:
				return cocktail_core_css_CSSColorValue.RGBA(135, 206, 250, 1.0);
			case 78:
				return cocktail_core_css_CSSColorValue.RGBA(119, 136, 153, 1.0);
			case 79:
				return cocktail_core_css_CSSColorValue.RGBA(119, 136, 153, 1.0);
			case 80:
				return cocktail_core_css_CSSColorValue.RGBA(176, 196, 222, 1.0);
			case 81:
				return cocktail_core_css_CSSColorValue.RGBA(255, 255, 224, 1.0);
			case 82:
				return cocktail_core_css_CSSColorValue.RGBA(0, 255, 0, 1.0);
			case 83:
				return cocktail_core_css_CSSColorValue.RGBA(50, 205, 50, 1.0);
			case 84:
				return cocktail_core_css_CSSColorValue.RGBA(250, 240, 230, 1.0);
			case 85:
				return cocktail_core_css_CSSColorValue.RGBA(255, 0, 255, 1.0);
			case 86:
				return cocktail_core_css_CSSColorValue.RGBA(128, 0, 0, 1.0);
			case 87:
				return cocktail_core_css_CSSColorValue.RGBA(102, 205, 170, 1.0);
			case 88:
				return cocktail_core_css_CSSColorValue.RGBA(0, 0, 205, 1.0);
			case 89:
				return cocktail_core_css_CSSColorValue.RGBA(186, 85, 211, 1.0);
			case 90:
				return cocktail_core_css_CSSColorValue.RGBA(147, 112, 219, 1.0);
			case 91:
				return cocktail_core_css_CSSColorValue.RGBA(60, 179, 113, 1.0);
			case 92:
				return cocktail_core_css_CSSColorValue.RGBA(123, 104, 238, 1.0);
			case 93:
				return cocktail_core_css_CSSColorValue.RGBA(0, 250, 154, 1.0);
			case 94:
				return cocktail_core_css_CSSColorValue.RGBA(72, 209, 204, 1.0);
			case 95:
				return cocktail_core_css_CSSColorValue.RGBA(199, 21, 133, 1.0);
			case 96:
				return cocktail_core_css_CSSColorValue.RGBA(25, 25, 112, 1.0);
			case 97:
				return cocktail_core_css_CSSColorValue.RGBA(245, 255, 250, 1.0);
			case 98:
				return cocktail_core_css_CSSColorValue.RGBA(255, 228, 225, 1.0);
			case 99:
				return cocktail_core_css_CSSColorValue.RGBA(255, 228, 181, 1.0);
			case 100:
				return cocktail_core_css_CSSColorValue.RGBA(255, 222, 173, 1.0);
			case 101:
				return cocktail_core_css_CSSColorValue.RGBA(0, 0, 128, 1.0);
			case 102:
				return cocktail_core_css_CSSColorValue.RGBA(253, 245, 230, 1.0);
			case 103:
				return cocktail_core_css_CSSColorValue.RGBA(128, 128, 0, 1.0);
			case 104:
				return cocktail_core_css_CSSColorValue.RGBA(107, 142, 35, 1.0);
			case 105:
				return cocktail_core_css_CSSColorValue.RGBA(255, 165, 0, 1.0);
			case 106:
				return cocktail_core_css_CSSColorValue.RGBA(255, 69, 0, 1.0);
			case 107:
				return cocktail_core_css_CSSColorValue.RGBA(218, 112, 214, 1.0);
			case 108:
				return cocktail_core_css_CSSColorValue.RGBA(238, 232, 170, 1.0);
			case 109:
				return cocktail_core_css_CSSColorValue.RGBA(152, 251, 152, 1.0);
			case 110:
				return cocktail_core_css_CSSColorValue.RGBA(175, 238, 238, 1.0);
			case 111:
				return cocktail_core_css_CSSColorValue.RGBA(219, 112, 147, 1.0);
			case 112:
				return cocktail_core_css_CSSColorValue.RGBA(255, 239, 213, 1.0);
			case 113:
				return cocktail_core_css_CSSColorValue.RGBA(255, 218, 185, 1.0);
			case 114:
				return cocktail_core_css_CSSColorValue.RGBA(205, 133, 63, 1.0);
			case 115:
				return cocktail_core_css_CSSColorValue.RGBA(255, 192, 203, 1.0);
			case 116:
				return cocktail_core_css_CSSColorValue.RGBA(221, 160, 221, 1.0);
			case 117:
				return cocktail_core_css_CSSColorValue.RGBA(176, 224, 230, 1.0);
			case 118:
				return cocktail_core_css_CSSColorValue.RGBA(128, 0, 128, 1.0);
			case 119:
				return cocktail_core_css_CSSColorValue.RGBA(255, 0, 0, 1.0);
			case 120:
				return cocktail_core_css_CSSColorValue.RGBA(188, 143, 143, 1.0);
			case 121:
				return cocktail_core_css_CSSColorValue.RGBA(65, 105, 225, 1.0);
			case 122:
				return cocktail_core_css_CSSColorValue.RGBA(139, 69, 19, 1.0);
			case 123:
				return cocktail_core_css_CSSColorValue.RGBA(250, 128, 114, 1.0);
			case 124:
				return cocktail_core_css_CSSColorValue.RGBA(244, 164, 96, 1.0);
			case 125:
				return cocktail_core_css_CSSColorValue.RGBA(46, 139, 87, 1.0);
			case 126:
				return cocktail_core_css_CSSColorValue.RGBA(255, 245, 238, 1.0);
			case 127:
				return cocktail_core_css_CSSColorValue.RGBA(160, 82, 45, 1.0);
			case 128:
				return cocktail_core_css_CSSColorValue.RGBA(192, 192, 192, 1.0);
			case 129:
				return cocktail_core_css_CSSColorValue.RGBA(135, 206, 235, 1.0);
			case 130:
				return cocktail_core_css_CSSColorValue.RGBA(106, 90, 205, 1.0);
			case 131:
				return cocktail_core_css_CSSColorValue.RGBA(112, 128, 144, 1.0);
			case 132:
				return cocktail_core_css_CSSColorValue.RGBA(112, 128, 144, 1.0);
			case 133:
				return cocktail_core_css_CSSColorValue.RGBA(255, 250, 250, 1.0);
			case 134:
				return cocktail_core_css_CSSColorValue.RGBA(0, 255, 127, 1.0);
			case 135:
				return cocktail_core_css_CSSColorValue.RGBA(70, 130, 180, 1.0);
			case 136:
				return cocktail_core_css_CSSColorValue.RGBA(210, 180, 140, 1.0);
			case 137:
				return cocktail_core_css_CSSColorValue.RGBA(0, 128, 128, 1.0);
			case 138:
				return cocktail_core_css_CSSColorValue.RGBA(216, 191, 216, 1.0);
			case 139:
				return cocktail_core_css_CSSColorValue.RGBA(255, 99, 71, 1.0);
			case 140:
				return cocktail_core_css_CSSColorValue.RGBA(64, 224, 208, 1.0);
			case 141:
				return cocktail_core_css_CSSColorValue.RGBA(238, 130, 238, 1.0);
			case 142:
				return cocktail_core_css_CSSColorValue.RGBA(245, 222, 179, 1.0);
			case 143:
				return cocktail_core_css_CSSColorValue.RGBA(255, 255, 255, 1.0);
			case 144:
				return cocktail_core_css_CSSColorValue.RGBA(245, 245, 245, 1.0);
			case 145:
				return cocktail_core_css_CSSColorValue.RGBA(255, 255, 0, 1.0);
			case 146:
				return cocktail_core_css_CSSColorValue.RGBA(154, 205, 50, 1.0);
		}
	};
	cocktail_core_css_CSSValueConverter.getLargerFontSize = function (parentFontSize) {
		var fontSizeTable = [cocktail_core_config_Config.getInstance().xxSmallFontSize, cocktail_core_config_Config.getInstance().xSmallFontSize, cocktail_core_config_Config.getInstance().smallFontSize, cocktail_core_config_Config.getInstance().mediumFontSize, cocktail_core_config_Config.getInstance().largeFontSize, cocktail_core_config_Config.getInstance().xLargeFontSize, cocktail_core_config_Config.getInstance().xxLargeFontSize];
		var fontSize = fontSizeTable[fontSizeTable.length - 1];
		var _g1 = 0;
		var _g = fontSizeTable.length;
		while (_g1 < _g) {
			var i = _g1++;
			if (fontSizeTable[i] > parentFontSize) {
				fontSize = fontSizeTable[i];
				break;
			}
		}
		return fontSize;
	};
	cocktail_core_css_CSSValueConverter.getSmallerFontSize = function (parentFontSize) {
		var fontSizeTable = [cocktail_core_config_Config.getInstance().xxSmallFontSize, cocktail_core_config_Config.getInstance().xSmallFontSize, cocktail_core_config_Config.getInstance().smallFontSize, cocktail_core_config_Config.getInstance().mediumFontSize, cocktail_core_config_Config.getInstance().largeFontSize, cocktail_core_config_Config.getInstance().xLargeFontSize, cocktail_core_config_Config.getInstance().xxLargeFontSize];
		var fontSize = fontSizeTable[0];
		var i = fontSizeTable.length - 1;
		while (i > 0) {
			if (fontSizeTable[i] < parentFontSize) {
				fontSize = fontSizeTable[i];
				break;
			}
			i--;
		}
		return fontSize;
	};
	cocktail_core_css_CSSValueConverter.prototype = {
		__class__: cocktail_core_css_CSSValueConverter
	};
	var cocktail_core_css_CascadeManager = function () {
		this.propertiesToCascade = [];
		this.parentRelativeLengthReference = new cocktail_core_css_RelativeLengthReferenceData();
		this.relativeLengthReference = new cocktail_core_css_RelativeLengthReferenceData();
		this.reset();
	};
	$hxClasses["cocktail.core.css.CascadeManager"] = cocktail_core_css_CascadeManager;
	cocktail_core_css_CascadeManager.__name__ = ["cocktail", "core", "css", "CascadeManager"];
	cocktail_core_css_CascadeManager.prototype = {
		dispose: function () {
			this.propertiesToCascade = null;
		}
		, reset: function () {
			if (this.hasPropertiesToCascade == true) {
				var _g = 0;
				while (_g < 87) {
					var i = _g++;
					this.propertiesToCascade[i] = false;
				}
			}
			this.hasFontSize = false;
			this.hasFontFamily = false;
			this.hasBackgroundColor = false;
			this.hasColor = false;
			this.hasDisplay = false;
			this.hasFloat = false;
			this.hasOverflowX = false;
			this.hasOverflowY = false;
			this.hasLetterSpacing = false;
			this.hasLineHeight = false;
			this.hasTransform = false;
			this.hasZIndex = false;
			this.hasPosition = false;
			this.hasVisible = false;
			this.hasOpacity = false;
			this.hasBackgroundImage = false;
			this.hasVerticalAlign = false;
			this.hasClear = false;
			this.hasWhiteSpace = false;
			this.hasWidth = false;
			this.hasHeight = false;
			this.hasMaxHeight = false;
			this.hasMaxWidth = false;
			this.hasTextAlign = false;
			this.hasTop = false;
			this.hasBottom = false;
			this.hasLeft = false;
			this.hasRight = false;
			this.hasMarginTop = false;
			this.hasMarginBottom = false;
			this.hasMarginLeft = false;
			this.hasMarginRight = false;
			this.hasTransitionProperty = false;
			this.hasLeftBorderStyle = false;
			this.hasTopBorderStyle = false;
			this.hasRightBorderStyle = false;
			this.hasBottomBorderStyle = false;
			this.hasBottomBorderColor = false;
			this.hasTopBorderColor = false;
			this.hasLeftBorderColor = false;
			this.hasRightBorderColor = false;
			this.hasOutlineStyle = false;
			this.hasOutlineColor = false;
			this.hasPropertiesToCascade = false;
			this.cascadeAll = false;
		}
		, addPropertyToCascade: function (index) {
			if (this.cascadeAll == true) return;
			this.propertiesToCascade[index] = true;
			this.flagProperty(index);
			this.hasPropertiesToCascade = true;
		}
		, removePropertyToCascade: function (index) {
			this.unFlagProperty(index);
			this.propertiesToCascade[index] = false;
		}
		, shouldCascadeAll: function () {
			this.cascadeAll = true;
			this.hasPropertiesToCascade = true;
		}
		, flagProperty: function (index) {
			switch (index) {
				case 34:
					this.hasFontSize = true;
					break;
				case 8:
					this.hasMarginTop = true;
					break;
				case 9:
					this.hasMarginBottom = true;
					break;
				case 6:
					this.hasMarginLeft = true;
					break;
				case 7:
					this.hasMarginRight = true;
					break;
				case 57:
					this.hasTransitionProperty = true;
					break;
				case 21:
					this.hasTop = true;
					break;
				case 24:
					this.hasBottom = true;
					break;
				case 22:
					this.hasLeft = true;
					break;
				case 23:
					this.hasRight = true;
					break;
				case 46:
					this.hasTextAlign = true;
					break;
				case 18:
					this.hasMaxHeight = true;
					break;
				case 20:
					this.hasMaxWidth = true;
					break;
				case 15:
					this.hasWidth = true;
					break;
				case 16:
					this.hasHeight = true;
					break;
				case 3:
					this.hasClear = true;
					break;
				case 45:
					this.hasWhiteSpace = true;
					break;
				case 26:
					this.hasBackgroundImage = true;
					break;
				case 48:
					this.hasVerticalAlign = true;
					break;
				case 41:
					this.hasLineHeight = true;
					break;
				case 43:
					this.hasLetterSpacing = true;
					break;
				case 53:
					this.hasOpacity = true;
					break;
				case 37:
					this.hasFontFamily = true;
					break;
				case 49:
					this.hasVisible = true;
					break;
				case 25:
					this.hasBackgroundColor = true;
					break;
				case 40:
					this.hasColor = true;
					break;
				case 0:
					this.hasDisplay = true;
					break;
				case 2:
					this.hasFloat = true;
					break;
				case 51:
					this.hasOverflowX = true;
					break;
				case 52:
					this.hasOverflowY = true;
					break;
				case 61:
					this.hasTransform = true;
					break;
				case 4:
					this.hasZIndex = true;
					break;
				case 1:
					this.hasPosition = true;
					break;
				case 75:
					this.hasLeftBorderStyle = true;
					break;
				case 72:
					this.hasTopBorderStyle = true;
					break;
				case 73:
					this.hasRightBorderStyle = true;
					break;
				case 74:
					this.hasBottomBorderStyle = true;
					break;
				case 67:
					this.hasTopBorderColor = true;
					break;
				case 69:
					this.hasBottomBorderColor = true;
					break;
				case 68:
					this.hasRightBorderColor = true;
					break;
				case 70:
					this.hasLeftBorderColor = true;
					break;
				case 83:
					this.hasOutlineStyle = true;
					break;
				case 84:
					this.hasOutlineColor = true;
					break;
			}
		}
		, unFlagProperty: function (index) {
			switch (index) {
				case 40:
					this.hasColor = false;
					break;
				case 34:
					this.hasFontSize = false;
					break;
				case 37:
					this.hasFontFamily = false;
					break;
				case 57:
					this.hasTransitionProperty = false;
					break;
				case 72:
					this.hasTopBorderStyle = false;
					break;
				case 73:
					this.hasRightBorderStyle = false;
					break;
				case 75:
					this.hasLeftBorderStyle = false;
					break;
				case 74:
					this.hasBottomBorderStyle = false;
					break;
				case 83:
					this.hasOutlineStyle = false;
					break;
				default:
			}
		}
		, __class__: cocktail_core_css_CascadeManager
	};
	var cocktail_core_css_CoreStyle = function (htmlElement) {
		this.htmlElement = htmlElement;
		this._isFirstCascade = true;
		this.hasTransitionnableProperties = false;
		this.isFloat = false;
		this.isInlineLevel = false;
		this.isInlineBlock = false;
		this.isBlock = false;
		this.isVisible = false;
		this.isPositioned = false;
		this.isRelativePositioned = false;
		this.isFixedPositioned = false;
		this.canAlwaysOverflow = false;
		this.isTransformed = false;
		this.isTransparent = false;
		this.hasBackgroundImage = false;
		this.isTopAligned = false;
		this.isBottomAligned = false;
		this.isBaselineAligned = false;
		this.canHaveClearance = false;
		this.hasPreWhiteSpace = false;
		this.hasNoWrapWhiteSpace = false;
		this.hasNormalWhiteSpace = false;
		this.hasPreLineWhiteSpace = false;
		this.hasPreWrapWhiteSpace = false;
		this.hasAutoHeight = false;
		this.hasAutoWidth = false;
		this.hasMaxHeight = false;
		this.hasMaxWidth = false;
		this.isInline = false;
		this.isLeftAligned = false;
		this.hasAutoTop = false;
		this.hasAutoBottom = false;
		this.hasAutoLeft = false;
		this.hasAutoRight = false;
		this.hasAutoMarginTop = false;
		this.hasAutoMarginBottom = false;
		this.hasAutoMarginLeft = false;
		this.hasAutoMarginRight = false;
		this.isAbsolutelyPositioned = false;
		this.hasBackgroundColor = false;
		this.hasCSSTransform = false;
		this.hasHiddenOrScrollOverflowX = false;
		this.hasHiddenOrScrollOverflowY = false;
		this._initialStyleDeclaration = cocktail_core_css_InitialStyleDeclaration.getInstance();
		this._initialComputedStyleDeclaration = this._initialStyleDeclaration.initialComputedStyleDeclaration;
		this.init();
	};
	$hxClasses["cocktail.core.css.CoreStyle"] = cocktail_core_css_CoreStyle;
	cocktail_core_css_CoreStyle.__name__ = ["cocktail", "core", "css", "CoreStyle"];
	cocktail_core_css_CoreStyle.prototype = {
		dispose: function () {
			this.specifiedValues.dispose();
			this.computedValues.dispose();
			this._changedProperties = null;
			this._fontManager = null;
			this._transitionManager = null;
			this.usedValues = null;
			this.fontMetrics = null;
		}
		, init: function () {
			this.computedValues = new cocktail_core_css_CSSStyleDeclaration();
			this.specifiedValues = new cocktail_core_css_CSSStyleDeclaration();
			this._changedProperties = [];
			var htmlDocument = this.htmlElement.ownerDocument;
			this._fontManager = htmlDocument.fontManager;
			this._transitionManager = htmlDocument.transitionManager;
			this.fontMetrics = this._fontManager.getFontMetrics(cocktail_core_config_Config.getInstance().defaultFont, cocktail_core_config_Config.getInstance().mediumFontSize);
			this.usedValues = new cocktail_core_css_UsedValuesVO();
		}
		, initPendingComputedValues: function () {
			this._pendingComputedValues = [];
			var _g = 0;
			while (_g < 87) {
				var i = _g++;
				this._pendingComputedValues[i] = null;
			}
		}
		, initTransitioner: function () {
			this._transitioner = new cocktail_core_transition_Transitioner(this._transitionManager);
			this._transitioner.onTransitionCompleteCallback = $bind(this, this.onTransitionComplete);
			this._transitioner.onTransitionUpdateCallback = $bind(this, this.onTransitionUpdate);
		}
		, cascade: function (cascadeManager, initialStyleDeclaration, styleSheetDeclaration, inlineStyleDeclaration, parentStyleDeclaration, programmaticChange) {
			if (cascadeManager.hasPropertiesToCascade == false) return;
			var parentRelativeLengthReference = cascadeManager.parentRelativeLengthReference;
			var relativeLengthReference = cascadeManager.relativeLengthReference;
			this._changedProperties = [];
			var hasInlineStyle = inlineStyleDeclaration.length > 0;
			var hasStyleSheetStyle = styleSheetDeclaration.length > 0;
			var parentColor = this.getColor(((function ($this) {
				var $r;
				if (parentStyleDeclaration._indexedProperties == null) {
					parentStyleDeclaration.resetIndexedProperties();
					parentStyleDeclaration.resetPropertiesPositions();
				}
				$r = parentStyleDeclaration._indexedProperties[40];
				return $r;
			}(this))).typedValue);
			if (cascadeManager.hasTransitionProperty == true || cascadeManager.cascadeAll == true) {
				this.cascadeProperty(57, initialStyleDeclaration, styleSheetDeclaration, inlineStyleDeclaration, parentStyleDeclaration, parentColor, parentRelativeLengthReference, relativeLengthReference, programmaticChange, hasInlineStyle, hasStyleSheetStyle);
				this.hasTransitionnableProperties = this.isNone(this.getComputedOrInitialProperty(57)) == false;
				cascadeManager.removePropertyToCascade(57);
			}
			if (cascadeManager.hasLeftBorderStyle == true || cascadeManager.cascadeAll == true) {
				var leftBorderStyleDidChange = this.cascadeProperty(75, initialStyleDeclaration, styleSheetDeclaration, inlineStyleDeclaration, parentStyleDeclaration, parentColor, parentRelativeLengthReference, relativeLengthReference, programmaticChange, hasInlineStyle, hasStyleSheetStyle);
				if (leftBorderStyleDidChange == true) {
					this._changedProperties.push(65);
					cascadeManager.addPropertyToCascade(65);
				}
				cascadeManager.removePropertyToCascade(75);
			}
			if (cascadeManager.hasRightBorderStyle == true || cascadeManager.cascadeAll == true) {
				var rightBorderStyleDidChange = this.cascadeProperty(73, initialStyleDeclaration, styleSheetDeclaration, inlineStyleDeclaration, parentStyleDeclaration, parentColor, parentRelativeLengthReference, relativeLengthReference, programmaticChange, hasInlineStyle, hasStyleSheetStyle);
				if (rightBorderStyleDidChange == true) {
					this._changedProperties.push(63);
					cascadeManager.addPropertyToCascade(63);
				}
				cascadeManager.removePropertyToCascade(73);
			}
			if (cascadeManager.hasTopBorderStyle == true || cascadeManager.cascadeAll == true) {
				var topBorderStyleDidChange = this.cascadeProperty(72, initialStyleDeclaration, styleSheetDeclaration, inlineStyleDeclaration, parentStyleDeclaration, parentColor, parentRelativeLengthReference, relativeLengthReference, programmaticChange, hasInlineStyle, hasStyleSheetStyle);
				if (topBorderStyleDidChange == true) {
					this._changedProperties.push(62);
					cascadeManager.addPropertyToCascade(62);
				}
				cascadeManager.removePropertyToCascade(72);
			}
			if (cascadeManager.hasBottomBorderStyle == true || cascadeManager.cascadeAll == true) {
				var bottomBorderStyleDidChange = this.cascadeProperty(74, initialStyleDeclaration, styleSheetDeclaration, inlineStyleDeclaration, parentStyleDeclaration, parentColor, parentRelativeLengthReference, relativeLengthReference, programmaticChange, hasInlineStyle, hasStyleSheetStyle);
				if (bottomBorderStyleDidChange == true) {
					this._changedProperties.push(64);
					cascadeManager.addPropertyToCascade(64);
				}
				cascadeManager.removePropertyToCascade(74);
			}
			if (cascadeManager.hasOutlineStyle == true || cascadeManager.cascadeAll == true) {
				var outlineStyleDidChange = this.cascadeProperty(83, initialStyleDeclaration, styleSheetDeclaration, inlineStyleDeclaration, parentStyleDeclaration, parentColor, parentRelativeLengthReference, relativeLengthReference, programmaticChange, hasInlineStyle, hasStyleSheetStyle);
				if (outlineStyleDidChange == true) {
					this._changedProperties.push(82);
					cascadeManager.addPropertyToCascade(82);
				}
				cascadeManager.removePropertyToCascade(83);
			}
			if (cascadeManager.hasFontSize == true || cascadeManager.hasFontFamily == true || cascadeManager.cascadeAll == true) {
				var fontSizeDidChange = this.cascadeProperty(34, initialStyleDeclaration, styleSheetDeclaration, inlineStyleDeclaration, parentStyleDeclaration, parentColor, parentRelativeLengthReference, relativeLengthReference, programmaticChange, hasInlineStyle, hasStyleSheetStyle);
				var fontFamilyDidChange = this.cascadeProperty(37, initialStyleDeclaration, styleSheetDeclaration, inlineStyleDeclaration, parentStyleDeclaration, parentColor, parentRelativeLengthReference, relativeLengthReference, programmaticChange, hasInlineStyle, hasStyleSheetStyle);
				if (fontSizeDidChange == true || fontFamilyDidChange == true) {
					var lengthCSSProperties = initialStyleDeclaration.lengthCSSProperties;
					var length2 = lengthCSSProperties.length;
					var _g = 0;
					while (_g < length2) {
						var i = _g++;
						cascadeManager.addPropertyToCascade(lengthCSSProperties[i]);
					}
					if (this.computedValues.get_fontFamily() != null) this.fontMetrics = this._fontManager.getFontMetrics(this.computedValues.get_fontFamily(), this.getAbsoluteLength(this.getTransitionablePropertyValue(34))); else this.fontMetrics = this._fontManager.getFontMetrics(initialStyleDeclaration.initialComputedStyleDeclaration.get_fontFamily(), this.getAbsoluteLength(this.getTransitionablePropertyValue(34)));
				}
				cascadeManager.removePropertyToCascade(34);
				cascadeManager.removePropertyToCascade(37);
			}
			if (cascadeManager.hasColor == true) {
				var colorDidChange = this.cascadeProperty(40, initialStyleDeclaration, styleSheetDeclaration, inlineStyleDeclaration, parentStyleDeclaration, parentColor, parentRelativeLengthReference, relativeLengthReference, programmaticChange, hasInlineStyle, hasStyleSheetStyle);
				if (colorDidChange == true) {
					this._changedProperties.push(40);
					var colorCSSProperties = initialStyleDeclaration.colorCSSProperties;
					var length3 = colorCSSProperties.length;
					var _g1 = 0;
					while (_g1 < length3) {
						var i1 = _g1++;
						cascadeManager.addPropertyToCascade(colorCSSProperties[i1]);
					}
				}
				cascadeManager.removePropertyToCascade(40);
			}
			relativeLengthReference.em = this.fontMetrics.fontSize;
			relativeLengthReference.ex = this.fontMetrics.xHeight;
			relativeLengthReference.ch = this.fontMetrics.zeroHeight;
			var propertiesToCascade = null;
			if (cascadeManager.cascadeAll == true) propertiesToCascade = initialStyleDeclaration.supportedCSSProperties; else {
				propertiesToCascade = [];
				var flaggedProperties = cascadeManager.propertiesToCascade;
				var flaggedPropertiesLength = flaggedProperties.length;
				var _g2 = 0;
				while (_g2 < flaggedPropertiesLength) {
					var i2 = _g2++;
					if (flaggedProperties[i2] == true) propertiesToCascade.push(i2);
				}
			}
			var length = propertiesToCascade.length;
			var _g3 = 0;
			while (_g3 < length) {
				var i3 = _g3++;
				var didChangeSpecifiedValue = this.cascadeProperty(propertiesToCascade[i3], initialStyleDeclaration, styleSheetDeclaration, inlineStyleDeclaration, parentStyleDeclaration, parentColor, parentRelativeLengthReference, relativeLengthReference, programmaticChange, hasInlineStyle, hasStyleSheetStyle);
				if (didChangeSpecifiedValue == true) this._changedProperties.push(propertiesToCascade[i3]);
			}
			cascadeManager.reset();
			var length1 = this._changedProperties.length;
			var _g4 = 0;
			while (_g4 < length1) {
				var i4 = _g4++;
				cascadeManager.addPropertyToCascade(this._changedProperties[i4]);
			}
			this.applyPositionFloatAndDisplayRelationship();
			this.applyHiddenBordersWidth();
			this.applyNoneOutlineWidth();
			if (cascadeManager.hasBackgroundColor == true) {
				cocktail_core_css_CSSValueConverter.getColorVOFromCSSColor(this.getColor(this.getComputedOrInitialProperty(25)), this.usedValues.backgroundColor);
				this.hasBackgroundColor = this.usedValues.backgroundColor.alpha != 0.0;
			}
			if (cascadeManager.hasColor == true) cocktail_core_css_CSSValueConverter.getColorVOFromCSSColor(this.getColor(this.getComputedOrInitialProperty(40)), this.usedValues.color);
			if (cascadeManager.hasLeftBorderColor == true) cocktail_core_css_CSSValueConverter.getColorVOFromCSSColor(this.getColor(this.getTransitionablePropertyValue(70)), this.usedValues.borderLeftColor);
			if (cascadeManager.hasTopBorderColor == true) cocktail_core_css_CSSValueConverter.getColorVOFromCSSColor(this.getColor(this.getTransitionablePropertyValue(67)), this.usedValues.borderTopColor);
			if (cascadeManager.hasRightBorderColor == true) cocktail_core_css_CSSValueConverter.getColorVOFromCSSColor(this.getColor(this.getTransitionablePropertyValue(68)), this.usedValues.borderRightColor);
			if (cascadeManager.hasBottomBorderColor == true) cocktail_core_css_CSSValueConverter.getColorVOFromCSSColor(this.getColor(this.getTransitionablePropertyValue(69)), this.usedValues.borderBottomColor);
			if (cascadeManager.hasOutlineColor == true) {
				var _g5 = this.getComputedOrInitialProperty(84);
				switch (_g5[1]) {
					case 12:
						var value = _g5[2];
						cocktail_core_css_CSSValueConverter.getColorVOFromCSSColor(value, this.usedValues.outlineColor);
						break;
					default:
				}
			}
			this.setUsedLineHeight();
			if (cascadeManager.hasLetterSpacing == true) {
				var _g6 = this.getTransitionablePropertyValue(43);
				switch (_g6[1]) {
					case 18:
						var value1 = _g6[2];
						this.usedValues.letterSpacing = value1;
						break;
					case 4:
						var value2 = _g6[2];
						this.usedValues.letterSpacing = 0.0;
						break;
					default:
				}
			}
			this.updateCoreStyleAttribute(cascadeManager, this._isFirstCascade);
			if (this._isFirstCascade == true) this._isFirstCascade = false;
		}
		, updateCoreStyleAttribute: function (cascadeManager, isFirstCascade) {
			if (cascadeManager.hasFloat == true || isFirstCascade == true) this.isFloat = this.isNone(this.getComputedOrInitialProperty(2)) == false;
			if (cascadeManager.hasDisplay == true || cascadeManager.hasPosition == true || cascadeManager.hasFloat == true || isFirstCascade == true) {
				this.isInlineLevel = false;
				this.isInlineBlock = false;
				this.isBlock = false;
				this.isInline = false;
				var _g = this.getKeyword(this.getComputedOrInitialProperty(0));
				switch (_g[1]) {
					case 30:
						this.isInlineLevel = true;
						this.isInline = true;
						break;
					case 29:
						this.isInlineLevel = true;
						this.isInlineBlock = true;
						break;
					case 28:
						this.isBlock = true;
						break;
					default:
				}
			}
			if (cascadeManager.hasVisible == true || isFirstCascade == true) this.isVisible = this.getKeyword(this.getComputedOrInitialProperty(49)) != cocktail_core_css_CSSKeywordValue.HIDDEN;
			if (cascadeManager.hasPosition == true || isFirstCascade == true) {
				this.isPositioned = false;
				this.isRelativePositioned = false;
				this.isFixedPositioned = false;
				this.isAbsolutelyPositioned = false;
				var _g1 = this.getKeyword(this.getComputedOrInitialProperty(1));
				switch (_g1[1]) {
					case 32:
						break;
					case 34:
						this.isPositioned = true;
						this.isAbsolutelyPositioned = true;
						break;
					case 35:
						this.isPositioned = true;
						this.isFixedPositioned = true;
						this.isAbsolutelyPositioned = true;
						break;
					case 33:
						this.isPositioned = true;
						this.isRelativePositioned = true;
						break;
					default:
				}
			}
			if (cascadeManager.hasOverflowX || cascadeManager.hasOverflowY || isFirstCascade == true) {
				this.canAlwaysOverflow = true;
				this.hasHiddenOrScrollOverflowX = false;
				var _g2 = this.getKeyword(this.getComputedOrInitialProperty(51));
				switch (_g2[1]) {
					case 36:
						break;
					case 37: case 38:
						this.hasHiddenOrScrollOverflowX = true;
						this.canAlwaysOverflow = false;
						break;
					default:
						this.canAlwaysOverflow = false;
				}
				var _g3 = this.getKeyword(this.getComputedOrInitialProperty(52));
				switch (_g3[1]) {
					case 36:
						break;
					case 37: case 38:
						this.hasHiddenOrScrollOverflowY = true;
						this.canAlwaysOverflow = false;
						break;
					default:
						this.canAlwaysOverflow = false;
				}
			}
			if (cascadeManager.hasTransform || cascadeManager.hasPosition || isFirstCascade == true) {
				this.isTransformed = false;
				this.hasCSSTransform = false;
				if (this.isRelativePositioned == true) this.isTransformed = true; else if (this.isNone(this.getComputedOrInitialProperty(61)) == false) {
					this.isTransformed = true;
					this.hasCSSTransform = true;
				}
			}
			if (cascadeManager.hasOpacity == true || isFirstCascade == true) {
				this.isTransparent = false;
				{
					var _g4 = this.getTransitionablePropertyValue(53);
					switch (_g4[1]) {
						case 1:
							var value = _g4[2];
							this.isTransparent = value != 1.0;
							break;
						case 18:
							var value1 = _g4[2];
							this.isTransparent = value1 != 1.0;
							break;
						default:
					}
				}
			}
			if (cascadeManager.hasMarginTop == true || isFirstCascade == true) this.hasAutoMarginTop = this.isAuto(this.getTransitionablePropertyValue(8));
			if (cascadeManager.hasMarginBottom == true || isFirstCascade == true) this.hasAutoMarginBottom = this.isAuto(this.getTransitionablePropertyValue(9));
			if (cascadeManager.hasMarginLeft == true || isFirstCascade == true) this.hasAutoMarginLeft = this.isAuto(this.getTransitionablePropertyValue(6));
			if (cascadeManager.hasMarginRight == true || isFirstCascade == true) this.hasAutoMarginRight = this.isAuto(this.getTransitionablePropertyValue(7));
			if (cascadeManager.hasBackgroundImage == true || isFirstCascade == true) {
				this.hasBackgroundImage = false;
				if (this.isNone(this.getComputedOrInitialProperty(26)) == false) {
					this.hasBackgroundImage = true;
					{
						var _g5 = this.getComputedOrInitialProperty(26);
						switch (_g5[1]) {
							case 5:
								var value2 = _g5[2];
								var htmlDocument = this.htmlElement.ownerDocument;
								htmlDocument.resourceManager.getImageResource(value2);
								break;
							default:
						}
					}
				}
			}
			if (cascadeManager.hasVerticalAlign == true || isFirstCascade == true) {
				this.isTopAligned = false;
				this.isBottomAligned = false;
				this.isBaselineAligned = false;
				{
					var _g6 = this.getComputedOrInitialProperty(48);
					switch (_g6[1]) {
						case 4:
							var value3 = _g6[2];
							switch (value3[1]) {
								case 22:
									this.isTopAligned = true;
									break;
								case 25:
									this.isBottomAligned = true;
									break;
								case 19:
									this.isBaselineAligned = true;
									break;
								default:
							}
							break;
						default:
					}
				}
			}
			if (cascadeManager.hasClear == true || isFirstCascade == true) this.canHaveClearance = this.isNone(this.getComputedOrInitialProperty(3)) == false;
			if (cascadeManager.hasWhiteSpace == true || isFirstCascade == true) {
				this.hasPreLineWhiteSpace = false;
				this.hasPreWhiteSpace = false;
				this.hasNoWrapWhiteSpace = false;
				this.hasNormalWhiteSpace = false;
				this.hasPreWrapWhiteSpace = false;
				var _g7 = this.getKeyword(this.getComputedOrInitialProperty(45));
				switch (_g7[1]) {
					case 7:
						this.hasPreWhiteSpace = true;
						break;
					case 10:
						this.hasPreLineWhiteSpace = true;
						break;
					case 9:
						this.hasPreWrapWhiteSpace = true;
						break;
					case 8:
						this.hasNoWrapWhiteSpace = true;
						break;
					case 0:
						this.hasNormalWhiteSpace = true;
						break;
					default:
				}
			}
			if (cascadeManager.hasWidth == true || isFirstCascade == true) this.hasAutoWidth = this.isAuto(this.getTransitionablePropertyValue(15));
			if (cascadeManager.hasHeight == true || isFirstCascade == true) this.hasAutoHeight = this.isAuto(this.getTransitionablePropertyValue(16));
			if (cascadeManager.hasMaxHeight == true || isFirstCascade == true) this.hasMaxHeight = this.isNone(this.getTransitionablePropertyValue(18)) == false;
			if (cascadeManager.hasMaxWidth == true || isFirstCascade == true) this.hasMaxWidth = this.isNone(this.getTransitionablePropertyValue(20)) == false;
			if (cascadeManager.hasTextAlign == true || isFirstCascade == true) {
				this.isLeftAligned = false;
				var _g8 = this.getKeyword(this.getComputedOrInitialProperty(46));
				switch (_g8[1]) {
					case 11:
						this.isLeftAligned = true;
						break;
					default:
				}
			}
			if (cascadeManager.hasTop == true || isFirstCascade == true) this.hasAutoTop = this.isAuto(this.getTransitionablePropertyValue(21));
			if (cascadeManager.hasBottom == true || isFirstCascade == true) this.hasAutoBottom = this.isAuto(this.getTransitionablePropertyValue(24));
			if (cascadeManager.hasLeft == true || isFirstCascade == true) this.hasAutoLeft = this.isAuto(this.getTransitionablePropertyValue(22));
			if (cascadeManager.hasRight == true || isFirstCascade == true) this.hasAutoRight = this.isAuto(this.getTransitionablePropertyValue(23));
		}
		, setUsedLineHeight: function () {
			{
				var _g = this.getTransitionablePropertyValue(41);
				switch (_g[1]) {
					case 18:
						var value = _g[2];
						this.usedValues.lineHeight = value;
						break;
					case 4:
						var value1 = _g[2];
						this.usedValues.lineHeight = this.fontMetrics.fontSize * 1.2;
						break;
					case 1:
						var value2 = _g[2];
						this.usedValues.lineHeight = this.fontMetrics.fontSize * value2;
						break;
					default:
				}
			}
		}
		, cascadeProperty: function (propertyIndex, initialStyleDeclaration, styleSheetDeclaration, inlineStyleDeclaration, parentStyleDeclaration, parentColor, parentRelativeLengthReference, relativeLengthReference, programmaticChange, hasInlineStyle, hasStyleSheetStyle) {
			if (hasStyleSheetStyle == true) {
				var typedProperty;
				if (styleSheetDeclaration._indexedProperties == null) {
					styleSheetDeclaration.resetIndexedProperties();
					styleSheetDeclaration.resetPropertiesPositions();
				}
				typedProperty = styleSheetDeclaration._indexedProperties[propertyIndex];
				if (typedProperty != null) {
					if (typedProperty.important == true) return this.setProperty(propertyIndex, typedProperty, parentStyleDeclaration, initialStyleDeclaration, parentColor, parentRelativeLengthReference, relativeLengthReference, programmaticChange, false, false);
				}
			}
			if (hasInlineStyle == true) {
				var typedProperty1;
				if (inlineStyleDeclaration._indexedProperties == null) {
					inlineStyleDeclaration.resetIndexedProperties();
					inlineStyleDeclaration.resetPropertiesPositions();
				}
				typedProperty1 = inlineStyleDeclaration._indexedProperties[propertyIndex];
				if (typedProperty1 != null) return this.setProperty(propertyIndex, typedProperty1, parentStyleDeclaration, initialStyleDeclaration, parentColor, parentRelativeLengthReference, relativeLengthReference, programmaticChange, false, false);
			}
			if (hasStyleSheetStyle == true) {
				var typedProperty2;
				if (styleSheetDeclaration._indexedProperties == null) {
					styleSheetDeclaration.resetIndexedProperties();
					styleSheetDeclaration.resetPropertiesPositions();
				}
				typedProperty2 = styleSheetDeclaration._indexedProperties[propertyIndex];
				if (typedProperty2 != null) return this.setProperty(propertyIndex, typedProperty2, parentStyleDeclaration, initialStyleDeclaration, parentColor, parentRelativeLengthReference, relativeLengthReference, programmaticChange, false, false);
			}
			if ((function ($this) {
				var $r;
				switch (propertyIndex) {
					case 40: case 54: case 37: case 34: case 36: case 38: case 35: case 43: case 41: case 46: case 47: case 42: case 49: case 45: case 44:
						$r = true;
						break;
					default:
						$r = false;
				}
				return $r;
			}(this)) == true) {
				if ((function ($this) {
					var $r;
					if (parentStyleDeclaration._indexedProperties == null) {
						parentStyleDeclaration.resetIndexedProperties();
						parentStyleDeclaration.resetPropertiesPositions();
					}
					$r = parentStyleDeclaration._indexedProperties[propertyIndex];
					return $r;
				}(this)) != null) return this.setProperty(propertyIndex, (function ($this) {
					var $r;
					if (parentStyleDeclaration._indexedProperties == null) {
						parentStyleDeclaration.resetIndexedProperties();
						parentStyleDeclaration.resetPropertiesPositions();
					}
					$r = parentStyleDeclaration._indexedProperties[propertyIndex];
					return $r;
				}(this)), parentStyleDeclaration, initialStyleDeclaration, parentColor, parentRelativeLengthReference, relativeLengthReference, programmaticChange, true, false); else return this.setInitialProperty(propertyIndex);
			}
			return this.setInitialProperty(propertyIndex);
		}
		, setInitialProperty: function (propertyIndex) {
			if (this.specifiedValues.getTypedProperty(propertyIndex) != null) {
				this.specifiedValues.removeProperty(propertyIndex);
				this.computedValues.removeProperty(propertyIndex);
				this.htmlElement.invalidateStyle(propertyIndex);
				return true;
			} else if (this.computedValues.getTypedProperty(propertyIndex) != null) this.computedValues.removeProperty(propertyIndex);
			return false;
		}
		, setProperty: function (propertyIndex, cascadedProperty, parentStyleDeclaration, initialStyleDeclaration, parentColor, parentRelativeLengthReference, relativeLengthReference, programmaticChange, isInherited, isInitial) {
			var property = cascadedProperty.typedValue;
			var specifiedProperty = this.specifiedValues.getTypedProperty(propertyIndex);
			if (specifiedProperty != null) {
				if (property == specifiedProperty.typedValue) return false;
			}
			if (specifiedProperty != null) this.specifiedValues.setTypedProperty(propertyIndex, property, cascadedProperty.important); else this.specifiedValues.setTypedPropertyInitial(propertyIndex, property, cascadedProperty.important);
			var computedProperty = null;
			if (isInitial == false) switch (property[1]) {
				case 16:
					computedProperty = ((function ($this) {
						var $r;
						if (parentStyleDeclaration._indexedProperties == null) {
							parentStyleDeclaration.resetIndexedProperties();
							parentStyleDeclaration.resetPropertiesPositions();
						}
						$r = parentStyleDeclaration._indexedProperties[propertyIndex];
						return $r;
					}(this))).typedValue;
					isInherited = true;
					break;
				case 17:
					computedProperty = ((function ($this) {
						var $r;
						if (initialStyleDeclaration._indexedProperties == null) {
							initialStyleDeclaration.resetIndexedProperties();
							initialStyleDeclaration.resetPropertiesPositions();
						}
						$r = initialStyleDeclaration._indexedProperties[propertyIndex];
						return $r;
					}(this))).typedValue;
					break;
				default:
					computedProperty = this.getComputedProperty(propertyIndex, property, parentRelativeLengthReference, relativeLengthReference, parentColor);
			} else computedProperty = this.getComputedProperty(propertyIndex, property, parentRelativeLengthReference, relativeLengthReference, parentColor);
			var registerPengingComputedProperty = false;
			if (this.hasTransitionnableProperties == true) {
				if (programmaticChange == true && isInherited == false) {
					if (this.isTransitionnable(propertyIndex)) {
						if (this._transitioner == null) this.initTransitioner();
						var transition = this._transitionManager.getTransition(propertyIndex, this);
						if (transition != null) {
							registerPengingComputedProperty = true;
							switch (computedProperty[1]) {
								case 18:
									var value = computedProperty[2];
									var didRevert = this._transitioner.revertTransitionIfNeeded(transition, value, this);
									if (didRevert == true) registerPengingComputedProperty = false;
									break;
								default:
							}
						} else {
							this._transitioner.registerPendingTransition(propertyIndex, this.getTransitionablePropertyCurrentValue(propertyIndex));
							var htmlDocument = this.htmlElement.ownerDocument;
							htmlDocument.invalidationManager.invalidatePendingTransitions();
						}
					}
				}
			}
			if (specifiedProperty != null) {
				if (registerPengingComputedProperty == false) this.computedValues.setTypedProperty(propertyIndex, computedProperty, cascadedProperty.important); else {
					if (this._pendingComputedValues == null) this.initPendingComputedValues();
					var typedComputedProperty = new cocktail_core_css_TypedPropertyVO();
					typedComputedProperty.important = cascadedProperty.important;
					typedComputedProperty.index = propertyIndex;
					typedComputedProperty.typedValue = computedProperty;
					this._pendingComputedValues[propertyIndex] = typedComputedProperty;
				}
			} else if (registerPengingComputedProperty == false) this.computedValues.setTypedPropertyInitial(propertyIndex, computedProperty, cascadedProperty.important);
			this.htmlElement.invalidateStyle(propertyIndex);
			return true;
		}
		, getComputedProperty: function (propertyIndex, property, parentRelativeLengthReference, relativeLengthReference, parentColor) {
			switch (propertyIndex) {
				case 19: case 17: case 18: case 20: case 22: case 23: case 21: case 24: case 11: case 12: case 13: case 14: case 8: case 6: case 9: case 7: case 15: case 16:
					switch (property[1]) {
						case 7:
							var value = property[2];
							return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_css_CSSValueConverter.getPixelFromLength(value, relativeLengthReference));
						case 0:
							var value1 = property[2];
							return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(value1);
						default:
					}
					break;
				case 62: case 63: case 64: case 65: case 82:
					switch (property[1]) {
						case 7:
							var value2 = property[2];
							return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_css_CSSValueConverter.getPixelFromLength(value2, relativeLengthReference));
						case 0:
							var value3 = property[2];
							return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(value3);
						case 4:
							var value4 = property[2];
							switch (value4[1]) {
								case 73: case 61: case 74:
									return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_css_CSSValueConverter.getBorderWidthFromBorderWidthKeyword(value4));
								default:
							}
							break;
						default:
					}
					break;
				case 57:
					switch (property[1]) {
						case 4:
							var value5 = property[2];
							switch (value5[1]) {
								case 11:
									return cocktail_core_css_CSSPropertyValue.IDENTIFIER("left");
								case 12:
									return cocktail_core_css_CSSPropertyValue.IDENTIFIER("right");
								case 22:
									return cocktail_core_css_CSSPropertyValue.IDENTIFIER("top");
								case 25:
									return cocktail_core_css_CSSPropertyValue.IDENTIFIER("bottom");
								default:
							}
							break;
						case 15:
							var value6 = property[2];
							var length = value6.length;
							var _g = 0;
							while (_g < length) {
								var i = _g++;
								{
									var _g1 = value6[i];
									switch (_g1[1]) {
										case 4:
											var keyword = _g1[2];
											switch (keyword[1]) {
												case 11:
													value6[i] = cocktail_core_css_CSSPropertyValue.IDENTIFIER("left");
													break;
												case 12:
													value6[i] = cocktail_core_css_CSSPropertyValue.IDENTIFIER("right");
													break;
												case 22:
													value6[i] = cocktail_core_css_CSSPropertyValue.IDENTIFIER("top");
													break;
												case 25:
													value6[i] = cocktail_core_css_CSSPropertyValue.IDENTIFIER("bottom");
													break;
												default:
											}
											break;
										default:
									}
								}
							}
							break;
						default:
					}
					break;
				case 53:
					switch (property[1]) {
						case 1:
							var value7 = property[2];
							if (value7 > 1) return cocktail_core_css_CSSPropertyValue.NUMBER(1);
							if (value7 < 0) return cocktail_core_css_CSSPropertyValue.NUMBER(0);
							break;
						case 0:
							var value8 = property[2];
							if (value8 < 0) return cocktail_core_css_CSSPropertyValue.NUMBER(0);
							if (value8 > 1) return cocktail_core_css_CSSPropertyValue.NUMBER(1);
							return cocktail_core_css_CSSPropertyValue.NUMBER(value8);
						default:
					}
					break;
				case 34:
					switch (property[1]) {
						case 7:
							var value9 = property[2];
							return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_css_CSSValueConverter.getPixelFromLength(value9, parentRelativeLengthReference));
						case 2:
							var value10 = property[2];
							return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(parentRelativeLengthReference.em * (value10 * 0.01));
						case 4:
							var value11 = property[2];
							switch (value11[1]) {
								case 58: case 59: case 60: case 61: case 62: case 63: case 64:
									return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_css_CSSValueConverter.getFontSizeFromAbsoluteSizeValue(value11));
								case 65: case 66:
									return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_css_CSSValueConverter.getFontSizeFromRelativeSizeValue(value11, parentRelativeLengthReference.em));
								default:
							}
							break;
						default:
					}
					break;
				case 61:
					switch (property[1]) {
						case 4:
							var value12 = property[2];
							break;
						default:
					}
					break;
				case 35:
					switch (property[1]) {
						case 4:
							var value13 = property[2];
							break;
						default:
					}
					break;
				case 48:
					switch (property[1]) {
						case 0:
							var value14 = property[2];
							return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(0);
						case 7:
							var value15 = property[2];
							return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_css_CSSValueConverter.getPixelFromLength(value15, relativeLengthReference));
						default:
					}
					break;
				case 54:
					switch (property[1]) {
						case 5:
							var value16 = property[2];
							break;
						default:
					}
					break;
				case 41:
					switch (property[1]) {
						case 1:
							var value17 = property[2];
							return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(value17 * relativeLengthReference.em);
						case 0:
							var value18 = property[2];
							return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(value18 * relativeLengthReference.em);
						case 7:
							var value19 = property[2];
							return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_css_CSSValueConverter.getPixelFromLength(value19, relativeLengthReference));
						case 2:
							var value20 = property[2];
							return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(relativeLengthReference.em * (value20 * 0.01));
						default:
					}
					break;
				case 47:
					switch (property[1]) {
						case 7:
							var value21 = property[2];
							return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_css_CSSValueConverter.getPixelFromLength(value21, relativeLengthReference));
						case 0:
							var value22 = property[2];
							return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(value22);
						default:
					}
					break;
				case 43:
					switch (property[1]) {
						case 7:
							var value23 = property[2];
							return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_css_CSSValueConverter.getPixelFromLength(value23, relativeLengthReference));
						default:
					}
					break;
				case 44:
					switch (property[1]) {
						case 7:
							var value24 = property[2];
							return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_css_CSSValueConverter.getPixelFromLength(value24, relativeLengthReference));
						case 4:
							var value25 = property[2];
							return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(0);
						default:
					}
					break;
				case 40:
					switch (property[1]) {
						case 12:
							var value26 = property[2];
							return cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSValueConverter.getComputedCSSColorFromCSSColor(value26, parentColor));
						default:
					}
					break;
				case 25: case 67: case 68: case 69: case 70: case 84:
					switch (property[1]) {
						case 12:
							var value27 = property[2];
							return cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSValueConverter.getComputedCSSColorFromCSSColor(value27, this.getColor(this.getComputedOrInitialProperty(40))));
						default:
					}
					break;
				case 26:
					switch (property[1]) {
						case 4:
							var value28 = property[2];
							break;
						case 5:
							var value29 = property[2];
							break;
						default:
					}
					break;
				case 30:
					switch (property[1]) {
						case 4:
							var value30 = property[2];
							switch (value30[1]) {
								case 11: case 12:
									return cocktail_core_css_CSSPropertyValue.GROUP([cocktail_core_css_CSSPropertyValue.KEYWORD(value30), cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.CENTER)]);
								case 22: case 25:
									return cocktail_core_css_CSSPropertyValue.GROUP([cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.CENTER), cocktail_core_css_CSSPropertyValue.KEYWORD(value30)]);
								default:
									return cocktail_core_css_CSSPropertyValue.GROUP([cocktail_core_css_CSSPropertyValue.KEYWORD(value30), cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.CENTER)]);
							}
							break;
						case 0:
							var value31 = property[2];
							return cocktail_core_css_CSSPropertyValue.GROUP([cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(0), cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(0)]);
						case 7:
							var value32 = property[2];
							return cocktail_core_css_CSSPropertyValue.GROUP([cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_css_CSSValueConverter.getPixelFromLength(value32, relativeLengthReference)), cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.CENTER)]);
						case 2:
							var value33 = property[2];
							return cocktail_core_css_CSSPropertyValue.GROUP([cocktail_core_css_CSSPropertyValue.PERCENTAGE(value33), cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.CENTER)]);
						case 13:
							var value34 = property[2];
							var backgroundPositionX = null;
							var backgroundPositionY = null;
							var firstValueIsBackgroundPositionY = false;
							{
								var _g2 = value34[0];
								switch (_g2[1]) {
									case 7:
										var value35 = _g2[2];
										backgroundPositionX = cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_css_CSSValueConverter.getPixelFromLength(value35, relativeLengthReference));
										break;
									case 4:
										var keywordValue = _g2[2];
										switch (keywordValue[1]) {
											case 25: case 22:
												backgroundPositionY = value34[0];
												firstValueIsBackgroundPositionY = true;
												break;
											default:
												backgroundPositionX = value34[0];
										}
										break;
									default:
										backgroundPositionX = value34[0];
								}
							}
							{
								var _g3 = value34[1];
								switch (_g3[1]) {
									case 7:
										var value36 = _g3[2];
										if (firstValueIsBackgroundPositionY == false) backgroundPositionY = cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_css_CSSValueConverter.getPixelFromLength(value36, relativeLengthReference)); else backgroundPositionX = cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_css_CSSValueConverter.getPixelFromLength(value36, relativeLengthReference));
										break;
									default:
										if (firstValueIsBackgroundPositionY == false) backgroundPositionY = value34[1]; else backgroundPositionX = value34[1];
								}
							}
							return cocktail_core_css_CSSPropertyValue.GROUP([backgroundPositionX, backgroundPositionY]);
						default:
					}
					break;
				case 27:
					switch (property[1]) {
						case 4:
							var value37 = property[2];
							switch (value37[1]) {
								case 67:
									return cocktail_core_css_CSSPropertyValue.GROUP([cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.REPEAT), cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.REPEAT)]);
								case 72:
									return cocktail_core_css_CSSPropertyValue.GROUP([cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NO_REPEAT), cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NO_REPEAT)]);
								case 71:
									return cocktail_core_css_CSSPropertyValue.GROUP([cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.ROUND), cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.ROUND)]);
								case 70:
									return cocktail_core_css_CSSPropertyValue.GROUP([cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.SPACE), cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.SPACE)]);
								case 68:
									return cocktail_core_css_CSSPropertyValue.GROUP([cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.REPEAT), cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NO_REPEAT)]);
								case 69:
									return cocktail_core_css_CSSPropertyValue.GROUP([cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NO_REPEAT), cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.REPEAT)]);
								default:
							}
							break;
						case 13:
							var value38 = property[2];
							break;
						default:
					}
					break;
				case 29:
					switch (property[1]) {
						case 7:
							var value39 = property[2];
							return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_css_CSSValueConverter.getPixelFromLength(value39, relativeLengthReference));
						case 13:
							var value40 = property[2];
							var backgroundSizeX = null;
							var backgroundSizeY = null;
							{
								var _g4 = value40[0];
								switch (_g4[1]) {
									case 7:
										var value41 = _g4[2];
										backgroundSizeX = cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_css_CSSValueConverter.getPixelFromLength(value41, relativeLengthReference));
										break;
									default:
										backgroundSizeX = value40[0];
								}
							}
							{
								var _g5 = value40[1];
								switch (_g5[1]) {
									case 7:
										var value42 = _g5[2];
										backgroundSizeY = cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_css_CSSValueConverter.getPixelFromLength(value42, relativeLengthReference));
										break;
									default:
										backgroundSizeY = value40[1];
								}
							}
							return cocktail_core_css_CSSPropertyValue.GROUP([backgroundSizeX, backgroundSizeY]);
						default:
					}
					break;
				case 60:
					switch (property[1]) {
						case 7:
							var value43 = property[2];
							return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_css_CSSValueConverter.getPixelFromLength(value43, relativeLengthReference));
						case 0:
							var value44 = property[2];
							return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(value44);
						case 13:
							var value45 = property[2];
							var transformOriginX = value45[0];
							var transformOriginY = value45[1];
							{
								var _g6 = value45[0];
								switch (_g6[1]) {
									case 7:
										var value46 = _g6[2];
										transformOriginX = cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_css_CSSValueConverter.getPixelFromLength(value46, relativeLengthReference));
										break;
									case 0:
										var value47 = _g6[2];
										transformOriginX = cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(value47);
										break;
									default:
								}
							}
							{
								var _g7 = value45[1];
								switch (_g7[1]) {
									case 7:
										var value48 = _g7[2];
										transformOriginY = cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_css_CSSValueConverter.getPixelFromLength(value48, relativeLengthReference));
										break;
									case 0:
										var value49 = _g7[2];
										transformOriginY = cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(value49);
										break;
									default:
								}
							}
							return cocktail_core_css_CSSPropertyValue.GROUP([transformOriginX, transformOriginY]);
						default:
					}
					break;
			}
			return property;
		}
		, applyPositionFloatAndDisplayRelationship: function () {
			var _g = this.getKeyword(this.getComputedOrInitialProperty(1));
			switch (_g[1]) {
				case 34: case 35:
					var _g1 = this.getKeyword(this.getComputedOrInitialProperty(0));
					switch (_g1[1]) {
						case 30: case 29:
							this.computedValues.setTypedProperty(0, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.BLOCK), false);
							break;
						default:
					}
					var _g11 = this.getKeyword(this.getComputedOrInitialProperty(2));
					switch (_g11[1]) {
						case 11: case 12:
							this.computedValues.setTypedProperty(2, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE), false);
							break;
						default:
					}
					break;
				default:
					var _g12 = this.getKeyword(this.getComputedOrInitialProperty(2));
					switch (_g12[1]) {
						case 11: case 12:
							var _g2 = this.getKeyword(this.getComputedOrInitialProperty(0));
							switch (_g2[1]) {
								case 30: case 29:
									this.computedValues.setTypedProperty(0, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.BLOCK), false);
									break;
								default:
							}
							break;
						default:
					}
			}
		}
		, applyHiddenBordersWidth: function () {
			if (this.hasNoneOrHiddenBorderStyle(62) == true) this.computedValues.setTypedProperty(62, cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(0), false);
			if (this.hasNoneOrHiddenBorderStyle(63) == true) this.computedValues.setTypedProperty(63, cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(0), false);
			if (this.hasNoneOrHiddenBorderStyle(64) == true) this.computedValues.setTypedProperty(64, cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(0), false);
			if (this.hasNoneOrHiddenBorderStyle(65) == true) this.computedValues.setTypedProperty(65, cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(0), false);
		}
		, applyNoneOutlineWidth: function () {
			{
				var _g = this.getComputedOrInitialProperty(83);
				switch (_g[1]) {
					case 4:
						var value = _g[2];
						switch (value[1]) {
							case 18:
								this.computedValues.setTypedProperty(82, cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(0), false);
								break;
							default:
						}
						break;
					default:
				}
			}
		}
		, startPendingTransitions: function () {
			if (this._transitioner == null) return false;
			return this._transitioner.startPendingTransitions(this);
		}
		, endPendingTransitions: function () {
			if (this._pendingTransitionEndEvents == null) return;
			var length = this._pendingTransitionEndEvents.length;
			if (length == 0) return;
			var _g = 0;
			while (_g < length) {
				var i = _g++;
				if (this._pendingTransitionEndEvents[i] != null) {
					if (this._pendingTransitionEndEvents[i].dispatched == false) this.htmlElement.dispatchEvent(this._pendingTransitionEndEvents[i]);
				}
			}
			this._pendingTransitionEndEvents = [];
		}
		, onTransitionComplete: function (transition) {
			this.htmlElement.invalidateStyle(transition.propertyIndex);
			var htmlDocument = this.htmlElement.ownerDocument;
			htmlDocument.invalidationManager.invalidatePendingTransitions();
			var transitionEvent = new cocktail_core_event_TransitionEvent();
			transitionEvent.initTransitionEvent("transitionend", true, true, cocktail_core_css_CSSConstants.getPropertyNameFromIndex(transition.propertyIndex), transition.transitionDuration, "");
			if (this._pendingTransitionEndEvents == null) this._pendingTransitionEndEvents = [];
			this._pendingTransitionEndEvents.push(transitionEvent);
			if (this._pendingComputedValues != null) {
				if (this._pendingComputedValues[transition.propertyIndex] != null) {
					this._transitioner.registerPendingTransition(transition.propertyIndex, this.getTransitionablePropertyCurrentValue(transition.propertyIndex));
					htmlDocument.invalidationManager.invalidatePendingTransitions();
					var pendingComputedProperty = this._pendingComputedValues[transition.propertyIndex];
					this.computedValues.setTypedProperty(pendingComputedProperty.index, pendingComputedProperty.typedValue, pendingComputedProperty.important);
					this._pendingComputedValues[transition.propertyIndex] = null;
				}
			}
		}
		, onTransitionUpdate: function (transition) {
			this.htmlElement.invalidateStyle(transition.propertyIndex);
		}
		, getTransitionablePropertyValue: function (properyIndex) {
			if (this.hasTransitionnableProperties == false) return this.getComputedOrInitialProperty(properyIndex); else if (this._transitionManager.hasTransitionsInProgress == false) return this.getComputedOrInitialProperty(properyIndex); else {
				var transition = this._transitionManager.getTransition(properyIndex, this);
				if (transition != null) return cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(transition.get_currentValue()); else return this.getComputedOrInitialProperty(properyIndex);
			}
		}
		, getComputedOrInitialProperty: function (propertyIndex) {
			var typedProperty = this.computedValues.getTypedProperty(propertyIndex);
			if (typedProperty == null) return this._initialComputedStyleDeclaration.getTypedProperty(propertyIndex).typedValue; else return typedProperty.typedValue;
		}
		, getIDLName: function (propertyIndex) {
			switch (propertyIndex) {
				case 17:
					return "height";
				case 18:
					return "maxHeight";
				case 19:
					return "minWidth";
				case 20:
					return "maxWidth";
				default:
					return cocktail_core_css_CSSConstants.getPropertyNameFromIndex(propertyIndex);
			}
		}
		, isTransitionnable: function (propertyIndex) {
			switch (propertyIndex) {
				case 15: case 16: case 21: case 24: case 22: case 23: case 53:
					return true;
				default:
					return false;
			}
		}
		, getTransitionablePropertyCurrentValue: function (propertyIndex) {
			switch (propertyIndex) {
				case 53:
					{
						var _g = this.getTransitionablePropertyValue(53);
						switch (_g[1]) {
							case 1:
								var value = _g[2];
								return value;
							case 18:
								var value1 = _g[2];
								return value1;
							default:
								return 0;
						}
					}
					break;
				default:
					return Reflect.field(this.usedValues, this.getIDLName(propertyIndex));
			}
		}
		, isInherited: function (propertyIndex) {
			switch (propertyIndex) {
				case 40: case 54: case 37: case 34: case 36: case 38: case 35: case 43: case 41: case 46: case 47: case 42: case 49: case 45: case 44:
					return true;
				default:
					return false;
			}
		}
		, hasNoneOrHiddenBorderStyle: function (propertyIndex) {
			var borderStyle = null;
			if (propertyIndex == 62) borderStyle = this.getComputedOrInitialProperty(72); else if (propertyIndex == 63) borderStyle = this.getComputedOrInitialProperty(73); else if (propertyIndex == 64) borderStyle = this.getComputedOrInitialProperty(74); else if (propertyIndex == 65) borderStyle = this.getComputedOrInitialProperty(75); else throw new js__$Boot_HaxeError("not a border width style");
			switch (borderStyle[1]) {
				case 4:
					var value = borderStyle[2];
					switch (value[1]) {
						case 18: case 37:
							return true;
						default:
					}
					break;
				default:
			}
			return false;
		}
		, getKeyword: function (value) {
			switch (value[1]) {
				case 4:
					var value1 = value[2];
					return value1;
				default:
					throw new js__$Boot_HaxeError("not a keyword value");
			}
		}
		, getNumber: function (value) {
			switch (value[1]) {
				case 1:
					var value1 = value[2];
					return value1;
				default:
					throw new js__$Boot_HaxeError("not a number value");
			}
		}
		, getList: function (value) {
			switch (value[1]) {
				case 15:
					var value1 = value[2];
					return value1;
				default:
					throw new js__$Boot_HaxeError("not a list value");
			}
		}
		, getAbsoluteLength: function (value) {
			switch (value[1]) {
				case 18:
					var value1 = value[2];
					return value1;
				default:
					throw new js__$Boot_HaxeError("not an absolute length value");
			}
		}
		, getColor: function (value) {
			switch (value[1]) {
				case 12:
					var value1 = value[2];
					return value1;
				default:
					throw new js__$Boot_HaxeError("not a color value");
			}
		}
		, isAuto: function (property) {
			switch (property[1]) {
				case 4:
					var value = property[2];
					switch (value[1]) {
						case 27:
							return true;
						default:
							return false;
					}
					break;
				default:
					return false;
			}
		}
		, isNone: function (property) {
			switch (property[1]) {
				case 4:
					var value = property[2];
					switch (value[1]) {
						case 18:
							return true;
						default:
							return false;
					}
					break;
				default:
					return false;
			}
		}
		, get_opacity: function () {
			return this.getTransitionablePropertyValue(53);
		}
		, get_marginLeft: function () {
			return this.getTransitionablePropertyValue(6);
		}
		, get_marginRight: function () {
			return this.getTransitionablePropertyValue(7);
		}
		, get_marginTop: function () {
			return this.getTransitionablePropertyValue(8);
		}
		, get_marginBottom: function () {
			return this.getTransitionablePropertyValue(9);
		}
		, get_paddingLeft: function () {
			return this.getTransitionablePropertyValue(11);
		}
		, get_paddingRight: function () {
			return this.getTransitionablePropertyValue(12);
		}
		, get_paddingTop: function () {
			return this.getTransitionablePropertyValue(13);
		}
		, get_paddingBottom: function () {
			return this.getTransitionablePropertyValue(14);
		}
		, get_width: function () {
			return this.getTransitionablePropertyValue(15);
		}
		, get_height: function () {
			return this.getTransitionablePropertyValue(16);
		}
		, get_minHeight: function () {
			return this.getTransitionablePropertyValue(17);
		}
		, get_maxHeight: function () {
			return this.getTransitionablePropertyValue(18);
		}
		, get_minWidth: function () {
			return this.getTransitionablePropertyValue(19);
		}
		, get_maxWidth: function () {
			return this.getTransitionablePropertyValue(20);
		}
		, get_top: function () {
			return this.getTransitionablePropertyValue(21);
		}
		, get_left: function () {
			return this.getTransitionablePropertyValue(22);
		}
		, get_bottom: function () {
			return this.getTransitionablePropertyValue(24);
		}
		, get_right: function () {
			return this.getTransitionablePropertyValue(23);
		}
		, get_fontSize: function () {
			return this.getTransitionablePropertyValue(34);
		}
		, get_display: function () {
			return this.getComputedOrInitialProperty(0);
		}
		, get_position: function () {
			return this.getComputedOrInitialProperty(1);
		}
		, get_cssFloat: function () {
			return this.getComputedOrInitialProperty(2);
		}
		, get_clear: function () {
			return this.getComputedOrInitialProperty(3);
		}
		, get_zIndex: function () {
			return this.getComputedOrInitialProperty(4);
		}
		, get_backgroundColor: function () {
			return this.getComputedOrInitialProperty(25);
		}
		, get_backgroundImage: function () {
			return this.getComputedOrInitialProperty(26);
		}
		, get_backgroundOrigin: function () {
			return this.getComputedOrInitialProperty(28);
		}
		, get_backgroundClip: function () {
			return this.getComputedOrInitialProperty(31);
		}
		, get_backgroundAttachment: function () {
			return this.getComputedOrInitialProperty(32);
		}
		, get_backgroundRepeat: function () {
			return this.getComputedOrInitialProperty(27);
		}
		, get_backgroundSize: function () {
			return this.getComputedOrInitialProperty(29);
		}
		, get_backgroundPosition: function () {
			return this.getComputedOrInitialProperty(30);
		}
		, get_fontWeight: function () {
			return this.getComputedOrInitialProperty(35);
		}
		, get_fontStyle: function () {
			return this.getComputedOrInitialProperty(36);
		}
		, get_fontFamily: function () {
			return this.getComputedOrInitialProperty(37);
		}
		, get_fontVariant: function () {
			return this.getComputedOrInitialProperty(38);
		}
		, get_color: function () {
			return this.getComputedOrInitialProperty(40);
		}
		, get_lineHeight: function () {
			return this.getTransitionablePropertyValue(41);
		}
		, get_textTransform: function () {
			return this.getComputedOrInitialProperty(42);
		}
		, get_letterSpacing: function () {
			return this.getTransitionablePropertyValue(43);
		}
		, get_wordSpacing: function () {
			return this.getTransitionablePropertyValue(44);
		}
		, get_whiteSpace: function () {
			return this.getComputedOrInitialProperty(45);
		}
		, get_textAlign: function () {
			return this.getComputedOrInitialProperty(46);
		}
		, get_textIndent: function () {
			return this.getTransitionablePropertyValue(47);
		}
		, get_verticalAlign: function () {
			return this.getComputedOrInitialProperty(48);
		}
		, get_visibility: function () {
			return this.getComputedOrInitialProperty(49);
		}
		, get_overflowX: function () {
			return this.getComputedOrInitialProperty(51);
		}
		, get_overflowY: function () {
			return this.getComputedOrInitialProperty(52);
		}
		, get_transformOrigin: function () {
			return this.getComputedOrInitialProperty(60);
		}
		, get_transform: function () {
			return this.getComputedOrInitialProperty(61);
		}
		, get_cursor: function () {
			return this.getComputedOrInitialProperty(54);
		}
		, get_transitionProperty: function () {
			return this.getComputedOrInitialProperty(57);
		}
		, get_transitionDuration: function () {
			return this.getComputedOrInitialProperty(55);
		}
		, get_transitionTimingFunction: function () {
			return this.getComputedOrInitialProperty(58);
		}
		, get_transitionDelay: function () {
			return this.getComputedOrInitialProperty(56);
		}
		, get_borderTopWidth: function () {
			return this.getTransitionablePropertyValue(62);
		}
		, get_borderRightWidth: function () {
			return this.getTransitionablePropertyValue(63);
		}
		, get_borderBottomWidth: function () {
			return this.getTransitionablePropertyValue(64);
		}
		, get_borderLeftWidth: function () {
			return this.getTransitionablePropertyValue(65);
		}
		, get_borderTopColor: function () {
			return this.getTransitionablePropertyValue(67);
		}
		, get_borderRightColor: function () {
			return this.getTransitionablePropertyValue(68);
		}
		, get_borderBottomColor: function () {
			return this.getTransitionablePropertyValue(69);
		}
		, get_borderLeftColor: function () {
			return this.getTransitionablePropertyValue(70);
		}
		, get_borderTopStyle: function () {
			return this.getComputedOrInitialProperty(72);
		}
		, get_borderRightStyle: function () {
			return this.getComputedOrInitialProperty(73);
		}
		, get_borderBottomStyle: function () {
			return this.getComputedOrInitialProperty(74);
		}
		, get_borderLeftStyle: function () {
			return this.getComputedOrInitialProperty(75);
		}
		, get_outlineWidth: function () {
			return this.getComputedOrInitialProperty(82);
		}
		, get_outlineStyle: function () {
			return this.getComputedOrInitialProperty(83);
		}
		, get_outlineColor: function () {
			return this.getComputedOrInitialProperty(84);
		}
		, get_textDecoration: function () {
			return this.getComputedOrInitialProperty(86);
		}
		, __class__: cocktail_core_css_CoreStyle
		, __properties__: { get_transitionTimingFunction: "get_transitionTimingFunction", get_transitionDelay: "get_transitionDelay", get_transitionDuration: "get_transitionDuration", get_transitionProperty: "get_transitionProperty", get_outlineStyle: "get_outlineStyle", get_outlineColor: "get_outlineColor", get_outlineWidth: "get_outlineWidth", get_cursor: "get_cursor", get_transform: "get_transform", get_transformOrigin: "get_transformOrigin", get_overflowY: "get_overflowY", get_overflowX: "get_overflowX", get_visibility: "get_visibility", get_opacity: "get_opacity", get_textDecoration: "get_textDecoration", get_verticalAlign: "get_verticalAlign", get_textIndent: "get_textIndent", get_textAlign: "get_textAlign", get_whiteSpace: "get_whiteSpace", get_wordSpacing: "get_wordSpacing", get_letterSpacing: "get_letterSpacing", get_textTransform: "get_textTransform", get_lineHeight: "get_lineHeight", get_color: "get_color", get_fontVariant: "get_fontVariant", get_fontFamily: "get_fontFamily", get_fontStyle: "get_fontStyle", get_fontWeight: "get_fontWeight", get_fontSize: "get_fontSize", get_borderLeftStyle: "get_borderLeftStyle", get_borderBottomStyle: "get_borderBottomStyle", get_borderRightStyle: "get_borderRightStyle", get_borderTopStyle: "get_borderTopStyle", get_borderLeftColor: "get_borderLeftColor", get_borderBottomColor: "get_borderBottomColor", get_borderRightColor: "get_borderRightColor", get_borderTopColor: "get_borderTopColor", get_borderLeftWidth: "get_borderLeftWidth", get_borderBottomWidth: "get_borderBottomWidth", get_borderRightWidth: "get_borderRightWidth", get_borderTopWidth: "get_borderTopWidth", get_backgroundAttachment: "get_backgroundAttachment", get_backgroundClip: "get_backgroundClip", get_backgroundPosition: "get_backgroundPosition", get_backgroundSize: "get_backgroundSize", get_backgroundOrigin: "get_backgroundOrigin", get_backgroundRepeat: "get_backgroundRepeat", get_backgroundImage: "get_backgroundImage", get_backgroundColor: "get_backgroundColor", get_right: "get_right", get_bottom: "get_bottom", get_left: "get_left", get_top: "get_top", get_maxWidth: "get_maxWidth", get_minWidth: "get_minWidth", get_maxHeight: "get_maxHeight", get_minHeight: "get_minHeight", get_height: "get_height", get_width: "get_width", get_paddingBottom: "get_paddingBottom", get_paddingTop: "get_paddingTop", get_paddingRight: "get_paddingRight", get_paddingLeft: "get_paddingLeft", get_marginBottom: "get_marginBottom", get_marginTop: "get_marginTop", get_marginRight: "get_marginRight", get_marginLeft: "get_marginLeft", get_zIndex: "get_zIndex", get_clear: "get_clear", get_cssFloat: "get_cssFloat", get_position: "get_position", get_display: "get_display" }
	};
	var cocktail_core_css_DefaultCSSStyleSheet = function () {
		cocktail_core_css_CSSStyleSheet.call(this, this.getDefaultStyleSheet(), cocktail_core_css_PropertyOriginValue.USER_AGENT);
	};
	$hxClasses["cocktail.core.css.DefaultCSSStyleSheet"] = cocktail_core_css_DefaultCSSStyleSheet;
	cocktail_core_css_DefaultCSSStyleSheet.__name__ = ["cocktail", "core", "css", "DefaultCSSStyleSheet"];
	cocktail_core_css_DefaultCSSStyleSheet.__super__ = cocktail_core_css_CSSStyleSheet;
	cocktail_core_css_DefaultCSSStyleSheet.prototype = $extend(cocktail_core_css_CSSStyleSheet.prototype, {
		getDefaultStyleSheet: function () {
			return "\n\t\t\t\thtml, address,\n\t\t\t\tblockquote,\n\t\t\t\tbody, dd, div,\n\t\t\t\tdl, dt, fieldset, form,\n\t\t\t\tframe, frameset,\n\t\t\t\th1, h2, h3, h4,\n\t\t\t\th5, h6, noframes,\n\t\t\t\tol, p, ul, center,\n\t\t\t\tdir, hr, menu, pre, nav   { display: block; unicode-bidi: embed }\n\t\t\t\tli              { display: block }\n\t\t\t\thead            { display: none }\n\t\t\t\ttable           { display: table }\n\t\t\t\ttr              { display: table-row }\n\t\t\t\tthead           { display: table-header-group }\n\t\t\t\ttbody           { display: table-row-group }\n\t\t\t\ttfoot           { display: table-footer-group }\n\t\t\t\tcol             { display: table-column }\n\t\t\t\tcolgroup        { display: table-column-group }\n\t\t\t\ttd, th          { display: table-cell }\n\t\t\t\tcaption         { display: table-caption }\n\t\t\t\tth              { font-weight: bolder; text-align: center }\n\t\t\t\tcaption         { text-align: center }\n\t\t\t\tbody            { margin: 8px }\n\t\t\t\th1              { font-size: 2em; margin: .67em 0 }\n\t\t\t\th2              { font-size: 1.5em; margin: .75em 0 }\n\t\t\t\th3              { font-size: 1.17em; margin: .83em 0 }\n\t\t\t\th4, p,\n\t\t\t\tblockquote, ul,\n\t\t\t\tfieldset, form,\n\t\t\t\tol, dl, dir,\n\t\t\t\tmenu            { margin: 1em 0 }\n\t\t\t\th5              { font-size: .83em; margin: 1.5em 0 }\n\t\t\t\th6              { font-size: .75em; margin: 1.67em 0 }\n\t\t\t\th1, h2, h3, h4,\n\t\t\t\th5, h6, b,\n\t\t\t\tstrong          { font-weight: bolder }\n\t\t\t\tblockquote      { margin-left: 40px; margin-right: 40px }\n\t\t\t\ti, cite, em,\n\t\t\t\tvar, address    { font-style: italic }\n\t\t\t\tpre, tt, code,\n\t\t\t\tkbd, samp       { font-family: monospace }\n\t\t\t\tpre             { white-space: pre }\n\t\t\t\tbutton, textarea,\n\t\t\t\tinput, select   { display: inline-block }\n\t\t\t\tbig             { font-size: 1.17em }\n\t\t\t\tsmall, sub, sup { font-size: .83em }\n\t\t\t\tsub             { vertical-align: sub }\n\t\t\t\tsup             { vertical-align: super }\n\t\t\t\ttable           { border-spacing: 2px; }\n\t\t\t\tthead, tbody,\n\t\t\t\ttfoot           { vertical-align: middle }\n\t\t\t\ttd, th, tr      { vertical-align: inherit }\n\t\t\t\ts, strike, del  { text-decoration: line-through }\n\t\t\t\thr              { border: 1px inset }\n\t\t\t\tol, ul, dir,\n\t\t\t\tmenu, dd        { padding-left: 40px }\n\t\t\t\tol              { list-style-type: decimal }\n\t\t\t\tol ul, ul ol,\n\t\t\t\tul ul, ol ol    { margin-top: 0; margin-bottom: 0 }\n\t\t\t\tu, ins          { text-decoration: underline }\n\t\t\t\t\n\t\t\t\tcenter          { text-align: center }\n\t\t\t\t:link, :visited { text-decoration: underline; cursor:pointer; }\n\t\t\t\t:focus          { outline: thin dotted invert }\n\t\t\t\t\n\t\t\t\ta:link          { color: rgb(0, 0, 238) }\n\t\t\t\ta:active        { color: red }\n\t\t";
		}
		, __class__: cocktail_core_css_DefaultCSSStyleSheet
	});
	var cocktail_core_css_InitialStyleDeclaration = function () {
		cocktail_core_css_CSSStyleDeclaration.call(this);
		this.initSupportedCSSProperties();
		this.initLengthCSSProperties();
		this.initColorCSSProperties();
		this.initProperties();
		this.initComputedProperties();
	};
	$hxClasses["cocktail.core.css.InitialStyleDeclaration"] = cocktail_core_css_InitialStyleDeclaration;
	cocktail_core_css_InitialStyleDeclaration.__name__ = ["cocktail", "core", "css", "InitialStyleDeclaration"];
	cocktail_core_css_InitialStyleDeclaration._instance = null;
	cocktail_core_css_InitialStyleDeclaration.getInstance = function () {
		if (cocktail_core_css_InitialStyleDeclaration._instance == null) cocktail_core_css_InitialStyleDeclaration._instance = new cocktail_core_css_InitialStyleDeclaration();
		return cocktail_core_css_InitialStyleDeclaration._instance;
	};
	cocktail_core_css_InitialStyleDeclaration.__super__ = cocktail_core_css_CSSStyleDeclaration;
	cocktail_core_css_InitialStyleDeclaration.prototype = $extend(cocktail_core_css_CSSStyleDeclaration.prototype, {
		initLengthCSSProperties: function () {
			this.lengthCSSProperties = [15, 16, 21, 22, 24, 23, 17, 18, 19, 20, 48, 41, 6, 7, 8, 9, 11, 12, 13, 14, 22, 23, 21, 24, 43, 44, 47, 61, 60, 30, 29, 62, 63, 64, 65, 82];
		}
		, initColorCSSProperties: function () {
			this.colorCSSProperties = [25, 40, 67, 69, 68, 70, 84];
		}
		, initSupportedCSSProperties: function () {
			this.supportedCSSProperties = [0, 1, 2, 3, 4, 51, 52, 49, 53, 48, 41, 15, 16, 19, 17, 20, 18, 6, 8, 7, 9, 11, 13, 12, 14, 22, 23, 21, 24, 37, 34, 36, 38, 35, 43, 44, 47, 46, 45, 42, 40, 57, 55, 56, 58, 61, 60, 25, 26, 30, 29, 27, 32, 28, 31, 54, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 82, 83, 84, 86];
		}
		, initProperties: function () {
			this.pushProperty(15, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO));
			this.pushProperty(16, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO));
			this.pushProperty(0, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.INLINE));
			this.pushProperty(1, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.STATIC));
			this.pushProperty(2, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
			this.pushProperty(3, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
			this.pushProperty(4, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO));
			this.pushProperty(51, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.VISIBLE));
			this.pushProperty(52, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.VISIBLE));
			this.pushProperty(49, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.VISIBLE));
			this.pushProperty(53, cocktail_core_css_CSSPropertyValue.NUMBER(1.0));
			this.pushProperty(48, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.BASELINE));
			this.pushProperty(41, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NORMAL));
			this.pushProperty(20, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
			this.pushProperty(18, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
			this.pushProperty(19, cocktail_core_css_CSSPropertyValue.INTEGER(0));
			this.pushProperty(17, cocktail_core_css_CSSPropertyValue.INTEGER(0));
			this.pushProperty(6, cocktail_core_css_CSSPropertyValue.INTEGER(0));
			this.pushProperty(8, cocktail_core_css_CSSPropertyValue.INTEGER(0));
			this.pushProperty(7, cocktail_core_css_CSSPropertyValue.INTEGER(0));
			this.pushProperty(9, cocktail_core_css_CSSPropertyValue.INTEGER(0));
			this.pushProperty(11, cocktail_core_css_CSSPropertyValue.INTEGER(0));
			this.pushProperty(13, cocktail_core_css_CSSPropertyValue.INTEGER(0));
			this.pushProperty(12, cocktail_core_css_CSSPropertyValue.INTEGER(0));
			this.pushProperty(14, cocktail_core_css_CSSPropertyValue.INTEGER(0));
			this.pushProperty(62, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.MEDIUM));
			this.pushProperty(63, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.MEDIUM));
			this.pushProperty(64, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.MEDIUM));
			this.pushProperty(65, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.MEDIUM));
			this.pushProperty(67, cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.HEX(cocktail_core_config_Config.getInstance().defaultFontColor)));
			this.pushProperty(68, cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.HEX(cocktail_core_config_Config.getInstance().defaultFontColor)));
			this.pushProperty(69, cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.HEX(cocktail_core_config_Config.getInstance().defaultFontColor)));
			this.pushProperty(70, cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.HEX(cocktail_core_config_Config.getInstance().defaultFontColor)));
			this.pushProperty(72, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
			this.pushProperty(73, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
			this.pushProperty(74, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
			this.pushProperty(75, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
			this.pushProperty(82, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.MEDIUM));
			this.pushProperty(83, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
			this.pushProperty(84, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.INVERT));
			this.pushProperty(22, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO));
			this.pushProperty(23, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO));
			this.pushProperty(21, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO));
			this.pushProperty(24, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO));
			this.pushProperty(36, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NORMAL));
			this.pushProperty(38, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NORMAL));
			this.pushProperty(35, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NORMAL));
			this.pushProperty(34, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.MEDIUM));
			this.pushProperty(43, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NORMAL));
			this.pushProperty(44, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NORMAL));
			this.pushProperty(47, cocktail_core_css_CSSPropertyValue.INTEGER(0));
			this.pushProperty(46, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.LEFT));
			this.pushProperty(45, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NORMAL));
			this.pushProperty(42, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
			this.pushProperty(86, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
			this.pushProperty(57, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.ALL));
			this.pushProperty(55, cocktail_core_css_CSSPropertyValue.TIME(cocktail_core_css_CSSTimeValue.SECONDS(0)));
			this.pushProperty(56, cocktail_core_css_CSSPropertyValue.TIME(cocktail_core_css_CSSTimeValue.SECONDS(0)));
			this.pushProperty(58, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.EASE));
			this.pushProperty(61, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
			this.pushProperty(60, cocktail_core_css_CSSPropertyValue.GROUP([cocktail_core_css_CSSPropertyValue.PERCENTAGE(50), cocktail_core_css_CSSPropertyValue.PERCENTAGE(50)]));
			this.pushProperty(25, cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.TRANSPARENT));
			this.pushProperty(26, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
			this.pushProperty(30, cocktail_core_css_CSSPropertyValue.GROUP([cocktail_core_css_CSSPropertyValue.PERCENTAGE(0.0), cocktail_core_css_CSSPropertyValue.PERCENTAGE(0.0)]));
			this.pushProperty(29, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO));
			this.pushProperty(27, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.REPEAT));
			this.pushProperty(31, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.BORDER_BOX));
			this.pushProperty(28, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.PADDING_BOX));
			this.pushProperty(32, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.SCROLL));
			this.pushProperty(54, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO));
			this.pushProperty(37, cocktail_core_css_CSSPropertyValue.CSS_LIST([cocktail_core_css_CSSPropertyValue.STRING(cocktail_core_config_Config.getInstance().defaultFont)]));
			this.pushProperty(40, cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.HEX(cocktail_core_config_Config.getInstance().defaultFontColor)));
		}
		, pushProperty: function (index, typedValue) {
			this.setTypedPropertyInitial(index, typedValue, false);
		}
		, initComputedProperties: function () {
			this.initialComputedStyleDeclaration = new cocktail_core_css_CSSStyleDeclaration();
			this.pushComputedProperty(15, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO));
			this.pushComputedProperty(16, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO));
			this.pushComputedProperty(0, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.INLINE));
			this.pushComputedProperty(1, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.STATIC));
			this.pushComputedProperty(2, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
			this.pushComputedProperty(3, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
			this.pushComputedProperty(4, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO));
			this.pushComputedProperty(51, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.VISIBLE));
			this.pushComputedProperty(52, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.VISIBLE));
			this.pushComputedProperty(49, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.VISIBLE));
			this.pushComputedProperty(53, cocktail_core_css_CSSPropertyValue.NUMBER(1.0));
			this.pushComputedProperty(48, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.BASELINE));
			this.pushComputedProperty(41, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NORMAL));
			this.pushComputedProperty(20, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
			this.pushComputedProperty(18, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
			this.pushComputedProperty(19, cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(0));
			this.pushComputedProperty(17, cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(0));
			this.pushComputedProperty(6, cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(0));
			this.pushComputedProperty(8, cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(0));
			this.pushComputedProperty(7, cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(0));
			this.pushComputedProperty(9, cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(0));
			this.pushComputedProperty(11, cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(0));
			this.pushComputedProperty(13, cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(0));
			this.pushComputedProperty(12, cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(0));
			this.pushComputedProperty(14, cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(0));
			this.pushComputedProperty(62, cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_config_Config.getInstance().mediumBorderWidth));
			this.pushComputedProperty(63, cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_config_Config.getInstance().mediumBorderWidth));
			this.pushComputedProperty(64, cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_config_Config.getInstance().mediumBorderWidth));
			this.pushComputedProperty(65, cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_config_Config.getInstance().mediumBorderWidth));
			this.pushComputedProperty(67, cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.HEX(cocktail_core_config_Config.getInstance().defaultFontColor)));
			this.pushComputedProperty(68, cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.HEX(cocktail_core_config_Config.getInstance().defaultFontColor)));
			this.pushComputedProperty(69, cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.HEX(cocktail_core_config_Config.getInstance().defaultFontColor)));
			this.pushComputedProperty(70, cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.HEX(cocktail_core_config_Config.getInstance().defaultFontColor)));
			this.pushComputedProperty(72, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
			this.pushComputedProperty(73, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
			this.pushComputedProperty(74, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
			this.pushComputedProperty(75, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
			this.pushComputedProperty(82, cocktail_core_css_CSSPropertyValue.ABSOLUTE_LENGTH(cocktail_core_config_Config.getInstance().mediumBorderWidth));
			this.pushComputedProperty(83, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
			this.pushComputedProperty(84, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.INVERT));
			this.pushComputedProperty(22, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO));
			this.pushComputedProperty(23, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO));
			this.pushComputedProperty(21, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO));
			this.pushComputedProperty(24, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO));
			this.pushComputedProperty(36, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NORMAL));
			this.pushComputedProperty(38, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NORMAL));
			this.pushComputedProperty(35, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NORMAL));
			this.pushComputedProperty(34, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.MEDIUM));
			this.pushComputedProperty(43, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NORMAL));
			this.pushComputedProperty(44, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NORMAL));
			this.pushComputedProperty(47, cocktail_core_css_CSSPropertyValue.INTEGER(0));
			this.pushComputedProperty(46, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.LEFT));
			this.pushComputedProperty(45, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NORMAL));
			this.pushComputedProperty(42, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
			this.pushComputedProperty(86, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
			this.pushComputedProperty(57, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.ALL));
			this.pushComputedProperty(55, cocktail_core_css_CSSPropertyValue.TIME(cocktail_core_css_CSSTimeValue.SECONDS(0)));
			this.pushComputedProperty(56, cocktail_core_css_CSSPropertyValue.TIME(cocktail_core_css_CSSTimeValue.SECONDS(0)));
			this.pushComputedProperty(58, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.EASE));
			this.pushComputedProperty(61, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
			this.pushComputedProperty(60, cocktail_core_css_CSSPropertyValue.GROUP([cocktail_core_css_CSSPropertyValue.PERCENTAGE(50), cocktail_core_css_CSSPropertyValue.PERCENTAGE(50)]));
			this.pushComputedProperty(25, cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.TRANSPARENT));
			this.pushComputedProperty(26, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE));
			this.pushComputedProperty(30, cocktail_core_css_CSSPropertyValue.GROUP([cocktail_core_css_CSSPropertyValue.PERCENTAGE(0.0), cocktail_core_css_CSSPropertyValue.PERCENTAGE(0.0)]));
			this.pushComputedProperty(29, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO));
			this.pushComputedProperty(27, cocktail_core_css_CSSPropertyValue.GROUP([cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.REPEAT), cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.REPEAT)]));
			this.pushComputedProperty(31, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.BORDER_BOX));
			this.pushComputedProperty(28, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.PADDING_BOX));
			this.pushComputedProperty(32, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.SCROLL));
			this.pushComputedProperty(54, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO));
			this.pushProperty(37, cocktail_core_css_CSSPropertyValue.CSS_LIST([cocktail_core_css_CSSPropertyValue.STRING(cocktail_core_config_Config.getInstance().defaultFont)]));
			this.pushProperty(40, cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.HEX(cocktail_core_config_Config.getInstance().defaultFontColor)));
		}
		, pushComputedProperty: function (index, typedValue) {
			this.initialComputedStyleDeclaration.setTypedProperty(index, typedValue, false);
		}
		, __class__: cocktail_core_css_InitialStyleDeclaration
	});
	var cocktail_core_css_MediaList = function () {
	};
	$hxClasses["cocktail.core.css.MediaList"] = cocktail_core_css_MediaList;
	cocktail_core_css_MediaList.__name__ = ["cocktail", "core", "css", "MediaList"];
	cocktail_core_css_MediaList.prototype = {
		item: function (index) {
			return null;
		}
		, appendMedium: function (medium) {
		}
		, deleteMedium: function (medium) {
		}
		, __class__: cocktail_core_css_MediaList
	};
	var cocktail_core_css_SelectorManager = function () {
		this._selectorSpecificityVO = new cocktail_core_css_SelectorSpecificityVO();
	};
	$hxClasses["cocktail.core.css.SelectorManager"] = cocktail_core_css_SelectorManager;
	cocktail_core_css_SelectorManager.__name__ = ["cocktail", "core", "css", "SelectorManager"];
	cocktail_core_css_SelectorManager.prototype = {
		matchSelector: function (node, selector, matchedPseudoClasses) {
			var components = selector.components;
			var lastWasCombinator = false;
			var length = components.length;
			var _g = 0;
			while (_g < length) {
				var i = _g++;
				var component = components[i];
				var matched = false;
				switch (component[1]) {
					case 1:
						var value = component[2];
						matched = this.matchCombinator(node, value, components[i + 1], matchedPseudoClasses);
						lastWasCombinator = true;
						if (value == cocktail_core_css_CombinatorValue.CHILD) node = this.castToHTMLElement(node.parentNode);
						break;
					case 0:
						var value1 = component[2];
						if (lastWasCombinator == true) {
							matched = true;
							lastWasCombinator = false;
						} else matched = this.matchSimpleSelectorSequence(node, value1, matchedPseudoClasses);
						break;
				}
				if (matched == false) return false;
			}
			return true;
		}
		, matchCombinator: function (node, combinator, nextSelectorComponent, matchedPseudoClasses) {
			if (node.parentNode == null) return false;
			var nextSelectorSequence = null;
			switch (nextSelectorComponent[1]) {
				case 0:
					var value = nextSelectorComponent[2];
					nextSelectorSequence = value;
					break;
				case 1:
					var value1 = nextSelectorComponent[2];
					return false;
			}
			switch (combinator[1]) {
				case 2:
					return this.matchAdjacentSiblingCombinator(node, nextSelectorSequence, matchedPseudoClasses);
				case 3:
					return this.matchGeneralSiblingCombinator(node, nextSelectorSequence, matchedPseudoClasses);
				case 1:
					return this.matchChildCombinator(node, nextSelectorSequence, matchedPseudoClasses);
				case 0:
					return this.matchDescendantCombinator(node, nextSelectorSequence, matchedPseudoClasses);
			}
		}
		, matchGeneralSiblingCombinator: function (node, nextSelectorSequence, matchedPseudoClasses) {
			var previousElementSibling = node.get_previousElementSibling();
			while (previousElementSibling != null) {
				if (this.matchSimpleSelectorSequence(previousElementSibling, nextSelectorSequence, matchedPseudoClasses) == true) return true;
				previousElementSibling = previousElementSibling.get_previousElementSibling();
			}
			return false;
		}
		, matchAdjacentSiblingCombinator: function (node, nextSelectorSequence, matchedPseudoClasses) {
			var previousElementSibling = node.get_previousElementSibling();
			if (previousElementSibling == null) return false;
			return this.matchSimpleSelectorSequence(previousElementSibling, nextSelectorSequence, matchedPseudoClasses);
		}
		, matchDescendantCombinator: function (node, nextSelectorSequence, matchedPseudoClasses) {
			var parentNode = this.castToHTMLElement(node.parentNode);
			while (parentNode != null) {
				if (this.matchSimpleSelectorSequence(parentNode, nextSelectorSequence, matchedPseudoClasses) == true) return true;
				parentNode = this.castToHTMLElement(parentNode.parentNode);
			}
			return false;
		}
		, matchChildCombinator: function (node, nextSelectorSequence, matchedPseudoClasses) {
			return this.matchSimpleSelectorSequence(node.parentNode, nextSelectorSequence, matchedPseudoClasses);
		}
		, matchSimpleSelectorSequenceStart: function (node, simpleSelectorSequenceStart) {
			switch (simpleSelectorSequenceStart[1]) {
				case 1:
					var value = simpleSelectorSequenceStart[2];
					return node.tagName == value;
				case 0:
					return true;
			}
		}
		, matchSimpleSelectorSequenceItem: function (node, simpleSelectorSequenceItem, matchedPseudoClasses) {
			switch (simpleSelectorSequenceItem[1]) {
				case 2:
					var value = simpleSelectorSequenceItem[2];
					var classList = node.classList;
					if (classList == null) return false;
					var length = classList.length;
					var _g = 0;
					while (_g < length) {
						var i = _g++;
						if (value == classList[i]) return true;
					}
					return false;
				case 3:
					var value1 = simpleSelectorSequenceItem[2];
					return node.get_id() == value1;
				case 1:
					var value2 = simpleSelectorSequenceItem[2];
					return this.matchPseudoClassSelector(node, value2, matchedPseudoClasses);
				case 0:
					var value3 = simpleSelectorSequenceItem[2];
					return this.matchAttributeSelector(node, value3);
			}
		}
		, matchSimpleSelectorSequence: function (node, simpleSelectorSequence, matchedPseudoClasses) {
			if (this.matchSimpleSelectorSequenceStart(node, simpleSelectorSequence.startValue) == false) return false;
			var simpleSelectors = simpleSelectorSequence.simpleSelectors;
			var length = simpleSelectors.length;
			var _g = 0;
			while (_g < length) {
				var i = _g++;
				var simpleSelectorSequence1 = simpleSelectors[i];
				if (this.matchSimpleSelectorSequenceItem(node, simpleSelectorSequence1, matchedPseudoClasses) == false) return false;
			}
			return true;
		}
		, matchAttributeSelector: function (node, attributeSelector) {
			switch (attributeSelector[1]) {
				case 0:
					var value = attributeSelector[2];
					return node.getAttribute(value) != null;
				case 1:
					var value1 = attributeSelector[3];
					var name = attributeSelector[2];
					return node.getAttribute(name) == value1;
				case 2:
					var value2 = attributeSelector[3];
					var name1 = attributeSelector[2];
					return this.matchAttributeList(node, name1, value2);
				case 3:
					var value3 = attributeSelector[3];
					var name2 = attributeSelector[2];
					return this.matchAttributeBeginValue(node, name2, value3);
				case 5:
					var value4 = attributeSelector[3];
					var name3 = attributeSelector[2];
					return this.matchAttributeContainsValue(node, name3, value4);
				case 4:
					var value5 = attributeSelector[3];
					var name4 = attributeSelector[2];
					return this.matchAttributeEndValue(node, name4, value5);
				case 6:
					var value6 = attributeSelector[3];
					var name5 = attributeSelector[2];
					return this.matchAttributeBeginsHyphenList(node, name5, value6);
			}
			return true;
		}
		, matchAttributeBeginsHyphenList: function (node, name, value) {
			var attributeValue = node.getAttribute(name);
			if (attributeValue == null) return false;
			if (attributeValue == value) return true;
			var hyphenValue = value + "-";
			return HxOverrides.substr(attributeValue, 0, hyphenValue.length) == hyphenValue;
		}
		, matchAttributeEndValue: function (node, name, value) {
			var attributeValue = node.getAttribute(name);
			if (attributeValue == null) return false;
			return attributeValue.lastIndexOf(value) == attributeValue.length - value.length;
		}
		, matchAttributeContainsValue: function (node, name, value) {
			var attributeValue = node.getAttribute(name);
			if (attributeValue == null) return false;
			return attributeValue.indexOf(value) != -1;
		}
		, matchAttributeBeginValue: function (node, name, value) {
			var attributeValue = node.getAttribute(name);
			if (attributeValue == null) return false;
			return attributeValue.indexOf(value) == 0;
		}
		, matchAttributeList: function (node, name, value) {
			var attributeValue = node.getAttribute(name);
			if (attributeValue == null) return false;
			var attributeValueAsList = attributeValue.split(" ");
			var _g1 = 0;
			var _g = attributeValueAsList.length;
			while (_g1 < _g) {
				var i = _g1++;
				if (attributeValueAsList[i] == value) return true;
			}
			return false;
		}
		, matchPseudoClassSelector: function (node, pseudoClassSelector, matchedPseudoClasses) {
			switch (pseudoClassSelector[1]) {
				case 1:
					var value = pseudoClassSelector[2];
					return this.matchStructuralPseudoClassSelector(node, value);
				case 2:
					var value1 = pseudoClassSelector[2];
					return this.matchLinkPseudoClassSelector(node, value1, matchedPseudoClasses);
				case 6:
					var value2 = pseudoClassSelector[2];
					return this.matchUserActionPseudoClassSelector(node, value2, matchedPseudoClasses);
				case 3:
					return this.matchTargetPseudoClassSelector(node);
				case 8:
					var value3 = pseudoClassSelector[2];
					return this.matchNegationPseudoClassSelector(node, value3);
				case 5:
					var value4 = pseudoClassSelector[2];
					return this.matchLangPseudoClassSelector(node, value4);
				case 7:
					var value5 = pseudoClassSelector[2];
					return this.matchUIElementStatesSelector(node, value5, matchedPseudoClasses);
				case 4:
					return matchedPseudoClasses.fullscreen;
				case 0:
					return false;
			}
		}
		, matchUIElementStatesSelector: function (node, uiElementState, matchedPseudoClasses) {
			switch (uiElementState[1]) {
				case 2:
					return matchedPseudoClasses.checked;
				case 1:
					return matchedPseudoClasses.disabled;
				case 0:
					return matchedPseudoClasses.enabled;
			}
		}
		, matchNegationPseudoClassSelector: function (node, negationSimpleSelectorSequence) {
			return false;
		}
		, matchLangPseudoClassSelector: function (node, lang) {
			return false;
		}
		, matchStructuralPseudoClassSelector: function (node, structuralPseudoClassSelector) {
			switch (structuralPseudoClassSelector[1]) {
				case 7:
					return node.hasChildNodes();
				case 1:
					if (node.parentNode == null) return false;
					return node.get_previousElementSibling() == null;
				case 2:
					if (node.parentNode == null) return false;
					return node.get_nextElementSibling() == null;
				case 5:
					if (node.parentNode == null) return false;
					return node.parentNode.childNodes.length == 1;
				case 0:
					return node.tagName == "HTML" && node.parentNode == null;
				case 6:
					return this.matchOnlyOfType(node);
				case 3:
					return this.matchFirstOfType(node);
				case 4:
					return this.matchLastOfType(node);
				case 8:
					var value = structuralPseudoClassSelector[2];
					return this.matchNthChild(node, value);
				case 9:
					var value1 = structuralPseudoClassSelector[2];
					return this.matchNthLastChild(node, value1);
				case 11:
					var value2 = structuralPseudoClassSelector[2];
					return this.matchNthLastOfType(node, value2);
				case 10:
					var value3 = structuralPseudoClassSelector[2];
					return this.matchNthOfType(node, value3);
			}
		}
		, matchNthChild: function (node, value) {
			return false;
		}
		, matchNthLastChild: function (node, value) {
			return false;
		}
		, matchNthLastOfType: function (node, value) {
			return false;
		}
		, matchNthOfType: function (node, value) {
			return false;
		}
		, matchFirstOfType: function (node) {
			var type = node.tagName;
			var previousElementSibling = node.get_previousElementSibling();
			while (previousElementSibling != null) {
				if (previousElementSibling.tagName == type) return false;
				previousElementSibling = previousElementSibling.get_previousElementSibling();
			}
			return true;
		}
		, matchLastOfType: function (node) {
			var type = node.tagName;
			var nextElementSibling = node.get_nextElementSibling();
			while (nextElementSibling != null) {
				if (nextElementSibling.tagName == type) return false;
				nextElementSibling = nextElementSibling.get_nextElementSibling();
			}
			return true;
		}
		, matchOnlyOfType: function (node) {
			return this.matchLastOfType(node) == true && this.matchFirstOfType(node) == true;
		}
		, matchLinkPseudoClassSelector: function (node, linkPseudoClassSelector, matchedPseudoClass) {
			switch (linkPseudoClassSelector[1]) {
				case 0:
					return matchedPseudoClass.link;
				case 1:
					return false;
			}
		}
		, matchUserActionPseudoClassSelector: function (node, userActionPseudoClassSelector, matchedPseudoClass) {
			switch (userActionPseudoClassSelector[1]) {
				case 0:
					return matchedPseudoClass.active;
				case 1:
					return matchedPseudoClass.hover;
				case 2:
					return matchedPseudoClass.focus;
			}
		}
		, matchTargetPseudoClassSelector: function (node) {
			return false;
		}
		, getSelectorSpecifity: function (selector) {
			this._selectorSpecificityVO.classAttributesAndPseudoClassesNumber = 0;
			this._selectorSpecificityVO.idSelectorsNumber = 0;
			this._selectorSpecificityVO.typeAndPseudoElementsNumber = 0;
			var _g = selector.pseudoElement;
			switch (_g[1]) {
				case 2: case 1: case 4: case 3:
					this._selectorSpecificityVO.typeAndPseudoElementsNumber++;
					break;
				case 0:
					break;
			}
			var components = selector.components;
			var length = components.length;
			var _g1 = 0;
			while (_g1 < length) {
				var i = _g1++;
				var component = components[i];
				switch (component[1]) {
					case 1:
						var value = component[2];
						break;
					case 0:
						var value1 = component[2];
						this.getSimpleSelectorSequenceSpecificity(value1, this._selectorSpecificityVO);
						break;
				}
			}
			return this._selectorSpecificityVO.idSelectorsNumber * 100 + this._selectorSpecificityVO.classAttributesAndPseudoClassesNumber * 10 + this._selectorSpecificityVO.typeAndPseudoElementsNumber;
		}
		, getSimpleSelectorSequenceSpecificity: function (simpleSelectorSequence, selectorSpecificity) {
			this.getSimpleSelectorSequenceStartSpecificity(simpleSelectorSequence.startValue, selectorSpecificity);
			var simpleSelectors = simpleSelectorSequence.simpleSelectors;
			var length = simpleSelectors.length;
			var _g = 0;
			while (_g < length) {
				var i = _g++;
				var simpleSelectorSequenceItem = simpleSelectors[i];
				this.getSimpleSelectorSequenceItemSpecificity(simpleSelectorSequenceItem, selectorSpecificity);
			}
		}
		, getSimpleSelectorSequenceStartSpecificity: function (simpleSelectorSequenceStart, selectorSpecificity) {
			switch (simpleSelectorSequenceStart[1]) {
				case 1:
					var value = simpleSelectorSequenceStart[2];
					selectorSpecificity.typeAndPseudoElementsNumber++;
					break;
				case 0:
					break;
			}
		}
		, getSimpleSelectorSequenceItemSpecificity: function (simpleSelectorSequenceItem, selectorSpecificity) {
			switch (simpleSelectorSequenceItem[1]) {
				case 0:
					var value = simpleSelectorSequenceItem[2];
					selectorSpecificity.classAttributesAndPseudoClassesNumber++;
					break;
				case 1:
					var value1 = simpleSelectorSequenceItem[2];
					selectorSpecificity.classAttributesAndPseudoClassesNumber++;
					break;
				case 2:
					var value2 = simpleSelectorSequenceItem[2];
					selectorSpecificity.classAttributesAndPseudoClassesNumber++;
					break;
				case 3:
					var value3 = simpleSelectorSequenceItem[2];
					selectorSpecificity.idSelectorsNumber++;
					break;
			}
		}
		, castToHTMLElement: function (node) {
			var _g = node.get_nodeType();
			switch (_g) {
				case 1:
					return js_Boot.__cast(node, cocktail_core_html_HTMLElement);
				default:
					return null;
			}
		}
		, __class__: cocktail_core_css_SelectorManager
	};
	var cocktail_core_css_StyleManager = function (selectorManager) {
		this._styleSheets = [];
		this._matchingStyleDeclaration = [];
		this._mostSpecificMatchingProperties = [];
		this._matchingProperties = [];
		this._matchedProperties = [];
		this._userAgentDeclarations = [];
		this._authorNormalDeclarations = [];
		this._authorImportantDeclarations = [];
		this._selectorManager = selectorManager;
	};
	$hxClasses["cocktail.core.css.StyleManager"] = cocktail_core_css_StyleManager;
	cocktail_core_css_StyleManager.__name__ = ["cocktail", "core", "css", "StyleManager"];
	cocktail_core_css_StyleManager.prototype = {
		addStyleSheet: function (styleSheet) {
			this._styleSheets.push(styleSheet);
		}
		, removeStyleSheet: function (styleSheet) {
			HxOverrides.remove(this._styleSheets, styleSheet);
		}
		, getStyleDeclaration: function (node, matchedPseudoClasses) {
			var styleDeclaration = null;
			if (node.styleManagerCSSDeclaration != null) {
				styleDeclaration = node.styleManagerCSSDeclaration;
				styleDeclaration.reset();
			} else styleDeclaration = new cocktail_core_css_CSSStyleDeclaration();
			this.applyStyleSheets(node, styleDeclaration, this._styleSheets, matchedPseudoClasses);
			return styleDeclaration;
		}
		, applyStyleSheets: function (node, nodeStyleDeclaration, styleSheets, matchedPseudoClasses) {
			var matchingStyleDeclarations = this.getMatchingStyleDeclarations(node, styleSheets, matchedPseudoClasses);
			this._matchedProperties = [];
			var length = matchingStyleDeclarations.length;
			var _g = 0;
			while (_g < length) {
				var i = _g++;
				var cssStyleDeclaration = matchingStyleDeclarations[i].style;
				var styleLength = cssStyleDeclaration.length;
				var _g1 = 0;
				while (_g1 < styleLength) {
					var j = _g1++;
					var propertyIndex = cssStyleDeclaration.item(j);
					if (this.alreadyMatched(propertyIndex, this._matchedProperties) == false) {
						this.applyMatchingProperty(propertyIndex, matchingStyleDeclarations, nodeStyleDeclaration);
						this._matchedProperties.push(propertyIndex);
					}
				}
			}
		}
		, alreadyMatched: function (propertyIndex, matchedProperties) {
			var length = matchedProperties.length;
			var _g = 0;
			while (_g < length) {
				var i = _g++;
				if (matchedProperties[i] == propertyIndex) return true;
			}
			return false;
		}
		, getMatchingStyleDeclarations: function (node, styleSheets, matchedPseudoClasses) {
			this._matchingStyleDeclaration = [];
			var styleSheetsLength = styleSheets.length;
			var _g = 0;
			while (_g < styleSheetsLength) {
				var i = _g++;
				var styleSheet = styleSheets[i];
				var cssRules = styleSheet.cssRules;
				var cssRulesLength = cssRules.length;
				var _g1 = 0;
				while (_g1 < cssRulesLength) {
					var j = _g1++;
					var cssRule = cssRules[j];
					var _g2 = cssRule.type;
					switch (_g2) {
						case 1:
							var styleRule = cssRule;
							var selectors = styleRule.selectors;
							var selectorsLength = selectors.length;
							var _g3 = 0;
							while (_g3 < selectorsLength) {
								var k = _g3++;
								var selector = selectors[k];
								var match = false;
								if (selector.beginsWithClass == true) {
									if (matchedPseudoClasses.hasClasses == true) {
										var classListLength = matchedPseudoClasses.nodeClassList.length;
										var _g4 = 0;
										while (_g4 < classListLength) {
											var l = _g4++;
											if (matchedPseudoClasses.nodeClassList[l] == selector.firstClass) {
												if (selector.isSimpleClassSelector == true) {
													match = true;
													break;
												} else {
													match = this._selectorManager.matchSelector(node, selectors[k], matchedPseudoClasses) == true;
													break;
												}
											}
										}
									}
								} else if (selector.beginsWithId == true) {
									if (matchedPseudoClasses.hasId == true) {
										if (matchedPseudoClasses.nodeId == selector.firstId) {
											if (selector.isSimpleIdSelector == true) match = true; else match = this._selectorManager.matchSelector(node, selectors[k], matchedPseudoClasses) == true;
										}
									}
								} else if (selector.beginsWithType == true) {
									if (matchedPseudoClasses.nodeType == selector.firstType) {
										if (selector.isSimpleTypeSelector == true) match = true; else match = this._selectorManager.matchSelector(node, selectors[k], matchedPseudoClasses) == true;
									}
								} else match = this._selectorManager.matchSelector(node, selectors[k], matchedPseudoClasses) == true;
								if (match == true) {
									var matchingStyleDeclaration = new cocktail_core_css_StyleDeclarationVO();
									matchingStyleDeclaration.style = styleRule.style;
									matchingStyleDeclaration.selector = selectors[k];
									this._matchingStyleDeclaration.push(matchingStyleDeclaration);
									break;
								}
							}
							break;
						default:
					}
				}
			}
			return this._matchingStyleDeclaration;
		}
		, applyMatchingProperty: function (propertyIndex, matchingStyleDeclarations, nodeStyleDeclaration) {
			this._matchingProperties = [];
			var matchingStyleDeclarationsLength = matchingStyleDeclarations.length;
			var _g = 0;
			while (_g < matchingStyleDeclarationsLength) {
				var i = _g++;
				var styleDeclaration = matchingStyleDeclarations[i].style;
				var selector = matchingStyleDeclarations[i].selector;
				var typedProperty;
				if (styleDeclaration._indexedProperties == null) {
					styleDeclaration.resetIndexedProperties();
					styleDeclaration.resetPropertiesPositions();
				}
				typedProperty = styleDeclaration._indexedProperties[propertyIndex];
				if (typedProperty != null) {
					var matchingProperty1 = new cocktail_core_css_PropertyVO();
					matchingProperty1.selector = selector;
					matchingProperty1.typedValue = typedProperty.typedValue;
					matchingProperty1.origin = styleDeclaration.parentRule.parentStyleSheet.origin;
					matchingProperty1.important = typedProperty.important;
					this._matchingProperties.push(matchingProperty1);
				}
			}
			if (this._matchingProperties.length == 1) {
				var matchingProperty2 = this._matchingProperties[0];
				nodeStyleDeclaration.setTypedProperty(propertyIndex, matchingProperty2.typedValue, matchingProperty2.important);
				return;
			}
			var tempMatchingProperties = this.getSortedMatchingPropertiesByPriority(this._matchingProperties);
			if (tempMatchingProperties.length == 1) {
				var matchingProperty3 = tempMatchingProperties[0];
				nodeStyleDeclaration.setTypedProperty(propertyIndex, matchingProperty3.typedValue, matchingProperty3.important);
				return;
			}
			tempMatchingProperties = this.getSortedMatchingPropertiesBySpecificity(tempMatchingProperties);
			if (tempMatchingProperties.length == 1) {
				var matchingProperty4 = tempMatchingProperties[0];
				nodeStyleDeclaration.setTypedProperty(propertyIndex, matchingProperty4.typedValue, matchingProperty4.important);
				return;
			}
			var matchingProperty = tempMatchingProperties[tempMatchingProperties.length - 1];
			nodeStyleDeclaration.setTypedProperty(propertyIndex, matchingProperty.typedValue, matchingProperty.important);
		}
		, getSortedMatchingPropertiesByPriority: function (matchingProperties) {
			this._userAgentDeclarations = [];
			this._authorNormalDeclarations = [];
			this._authorImportantDeclarations = [];
			var length = matchingProperties.length;
			var _g = 0;
			while (_g < length) {
				var i = _g++;
				var matchingProperty = matchingProperties[i];
				var _g1 = matchingProperty.origin;
				switch (_g1[1]) {
					case 1:
						this._userAgentDeclarations.push(matchingProperty);
						break;
					case 0:
						if (matchingProperty.important == true) this._authorImportantDeclarations.push(matchingProperty); else this._authorNormalDeclarations.push(matchingProperty);
						break;
				}
			}
			if (this._authorImportantDeclarations.length > 0) return this._authorImportantDeclarations;
			if (this._authorNormalDeclarations.length > 0) return this._authorNormalDeclarations;
			return this._userAgentDeclarations;
		}
		, getSortedMatchingPropertiesBySpecificity: function (matchingProperties) {
			this._mostSpecificMatchingProperties = [];
			var currentHigherSpecificity = 0;
			var length = matchingProperties.length;
			var _g = 0;
			while (_g < length) {
				var i = _g++;
				var property = matchingProperties[i];
				var propertySpecificity = this._selectorManager.getSelectorSpecifity(property.selector);
				if (propertySpecificity > currentHigherSpecificity) {
					currentHigherSpecificity = propertySpecificity;
					this._mostSpecificMatchingProperties = [];
				}
				if (propertySpecificity == currentHigherSpecificity) this._mostSpecificMatchingProperties.push(property);
			}
			return this._mostSpecificMatchingProperties;
		}
		, __class__: cocktail_core_css_StyleManager
	};
	var cocktail_core_css_parsers_SelectorParserState = $hxClasses["cocktail.core.css.parsers.SelectorParserState"] = { __ename__: ["cocktail", "core", "css", "parsers", "SelectorParserState"], __constructs__: ["IGNORE_SPACES", "BEGIN_SIMPLE_SELECTOR", "END_SIMPLE_SELECTOR", "SIMPLE_SELECTOR", "END_TYPE_SELECTOR", "END_CLASS_SELECTOR", "END_ID_SELECTOR", "BEGIN_COMBINATOR", "COMBINATOR", "BEGIN_PSEUDO_SELECTOR", "END_UNIVERSAL_SELECTOR", "PSEUDO_ELEMENT_SELECTOR", "BEGIN_ATTRIBUTE_SELECTOR", "INVALID_SELECTOR"] };
	cocktail_core_css_parsers_SelectorParserState.IGNORE_SPACES = ["IGNORE_SPACES", 0];
	cocktail_core_css_parsers_SelectorParserState.IGNORE_SPACES.toString = $estr;
	cocktail_core_css_parsers_SelectorParserState.IGNORE_SPACES.__enum__ = cocktail_core_css_parsers_SelectorParserState;
	cocktail_core_css_parsers_SelectorParserState.BEGIN_SIMPLE_SELECTOR = ["BEGIN_SIMPLE_SELECTOR", 1];
	cocktail_core_css_parsers_SelectorParserState.BEGIN_SIMPLE_SELECTOR.toString = $estr;
	cocktail_core_css_parsers_SelectorParserState.BEGIN_SIMPLE_SELECTOR.__enum__ = cocktail_core_css_parsers_SelectorParserState;
	cocktail_core_css_parsers_SelectorParserState.END_SIMPLE_SELECTOR = ["END_SIMPLE_SELECTOR", 2];
	cocktail_core_css_parsers_SelectorParserState.END_SIMPLE_SELECTOR.toString = $estr;
	cocktail_core_css_parsers_SelectorParserState.END_SIMPLE_SELECTOR.__enum__ = cocktail_core_css_parsers_SelectorParserState;
	cocktail_core_css_parsers_SelectorParserState.SIMPLE_SELECTOR = ["SIMPLE_SELECTOR", 3];
	cocktail_core_css_parsers_SelectorParserState.SIMPLE_SELECTOR.toString = $estr;
	cocktail_core_css_parsers_SelectorParserState.SIMPLE_SELECTOR.__enum__ = cocktail_core_css_parsers_SelectorParserState;
	cocktail_core_css_parsers_SelectorParserState.END_TYPE_SELECTOR = ["END_TYPE_SELECTOR", 4];
	cocktail_core_css_parsers_SelectorParserState.END_TYPE_SELECTOR.toString = $estr;
	cocktail_core_css_parsers_SelectorParserState.END_TYPE_SELECTOR.__enum__ = cocktail_core_css_parsers_SelectorParserState;
	cocktail_core_css_parsers_SelectorParserState.END_CLASS_SELECTOR = ["END_CLASS_SELECTOR", 5];
	cocktail_core_css_parsers_SelectorParserState.END_CLASS_SELECTOR.toString = $estr;
	cocktail_core_css_parsers_SelectorParserState.END_CLASS_SELECTOR.__enum__ = cocktail_core_css_parsers_SelectorParserState;
	cocktail_core_css_parsers_SelectorParserState.END_ID_SELECTOR = ["END_ID_SELECTOR", 6];
	cocktail_core_css_parsers_SelectorParserState.END_ID_SELECTOR.toString = $estr;
	cocktail_core_css_parsers_SelectorParserState.END_ID_SELECTOR.__enum__ = cocktail_core_css_parsers_SelectorParserState;
	cocktail_core_css_parsers_SelectorParserState.BEGIN_COMBINATOR = ["BEGIN_COMBINATOR", 7];
	cocktail_core_css_parsers_SelectorParserState.BEGIN_COMBINATOR.toString = $estr;
	cocktail_core_css_parsers_SelectorParserState.BEGIN_COMBINATOR.__enum__ = cocktail_core_css_parsers_SelectorParserState;
	cocktail_core_css_parsers_SelectorParserState.COMBINATOR = ["COMBINATOR", 8];
	cocktail_core_css_parsers_SelectorParserState.COMBINATOR.toString = $estr;
	cocktail_core_css_parsers_SelectorParserState.COMBINATOR.__enum__ = cocktail_core_css_parsers_SelectorParserState;
	cocktail_core_css_parsers_SelectorParserState.BEGIN_PSEUDO_SELECTOR = ["BEGIN_PSEUDO_SELECTOR", 9];
	cocktail_core_css_parsers_SelectorParserState.BEGIN_PSEUDO_SELECTOR.toString = $estr;
	cocktail_core_css_parsers_SelectorParserState.BEGIN_PSEUDO_SELECTOR.__enum__ = cocktail_core_css_parsers_SelectorParserState;
	cocktail_core_css_parsers_SelectorParserState.END_UNIVERSAL_SELECTOR = ["END_UNIVERSAL_SELECTOR", 10];
	cocktail_core_css_parsers_SelectorParserState.END_UNIVERSAL_SELECTOR.toString = $estr;
	cocktail_core_css_parsers_SelectorParserState.END_UNIVERSAL_SELECTOR.__enum__ = cocktail_core_css_parsers_SelectorParserState;
	cocktail_core_css_parsers_SelectorParserState.PSEUDO_ELEMENT_SELECTOR = ["PSEUDO_ELEMENT_SELECTOR", 11];
	cocktail_core_css_parsers_SelectorParserState.PSEUDO_ELEMENT_SELECTOR.toString = $estr;
	cocktail_core_css_parsers_SelectorParserState.PSEUDO_ELEMENT_SELECTOR.__enum__ = cocktail_core_css_parsers_SelectorParserState;
	cocktail_core_css_parsers_SelectorParserState.BEGIN_ATTRIBUTE_SELECTOR = ["BEGIN_ATTRIBUTE_SELECTOR", 12];
	cocktail_core_css_parsers_SelectorParserState.BEGIN_ATTRIBUTE_SELECTOR.toString = $estr;
	cocktail_core_css_parsers_SelectorParserState.BEGIN_ATTRIBUTE_SELECTOR.__enum__ = cocktail_core_css_parsers_SelectorParserState;
	cocktail_core_css_parsers_SelectorParserState.INVALID_SELECTOR = ["INVALID_SELECTOR", 13];
	cocktail_core_css_parsers_SelectorParserState.INVALID_SELECTOR.toString = $estr;
	cocktail_core_css_parsers_SelectorParserState.INVALID_SELECTOR.__enum__ = cocktail_core_css_parsers_SelectorParserState;
	var cocktail_core_css_parsers_StyleDeclarationParserState = $hxClasses["cocktail.core.css.parsers.StyleDeclarationParserState"] = { __ename__: ["cocktail", "core", "css", "parsers", "StyleDeclarationParserState"], __constructs__: ["STYLE_NAME", "STYLE_VALUE", "IGNORE_SPACES", "INVALID_STYLE", "STYLE_SEPARATOR", "BEGIN", "COMMENT", "BEGIN_COMMENT", "END_COMMENT"] };
	cocktail_core_css_parsers_StyleDeclarationParserState.STYLE_NAME = ["STYLE_NAME", 0];
	cocktail_core_css_parsers_StyleDeclarationParserState.STYLE_NAME.toString = $estr;
	cocktail_core_css_parsers_StyleDeclarationParserState.STYLE_NAME.__enum__ = cocktail_core_css_parsers_StyleDeclarationParserState;
	cocktail_core_css_parsers_StyleDeclarationParserState.STYLE_VALUE = ["STYLE_VALUE", 1];
	cocktail_core_css_parsers_StyleDeclarationParserState.STYLE_VALUE.toString = $estr;
	cocktail_core_css_parsers_StyleDeclarationParserState.STYLE_VALUE.__enum__ = cocktail_core_css_parsers_StyleDeclarationParserState;
	cocktail_core_css_parsers_StyleDeclarationParserState.IGNORE_SPACES = ["IGNORE_SPACES", 2];
	cocktail_core_css_parsers_StyleDeclarationParserState.IGNORE_SPACES.toString = $estr;
	cocktail_core_css_parsers_StyleDeclarationParserState.IGNORE_SPACES.__enum__ = cocktail_core_css_parsers_StyleDeclarationParserState;
	cocktail_core_css_parsers_StyleDeclarationParserState.INVALID_STYLE = ["INVALID_STYLE", 3];
	cocktail_core_css_parsers_StyleDeclarationParserState.INVALID_STYLE.toString = $estr;
	cocktail_core_css_parsers_StyleDeclarationParserState.INVALID_STYLE.__enum__ = cocktail_core_css_parsers_StyleDeclarationParserState;
	cocktail_core_css_parsers_StyleDeclarationParserState.STYLE_SEPARATOR = ["STYLE_SEPARATOR", 4];
	cocktail_core_css_parsers_StyleDeclarationParserState.STYLE_SEPARATOR.toString = $estr;
	cocktail_core_css_parsers_StyleDeclarationParserState.STYLE_SEPARATOR.__enum__ = cocktail_core_css_parsers_StyleDeclarationParserState;
	cocktail_core_css_parsers_StyleDeclarationParserState.BEGIN = ["BEGIN", 5];
	cocktail_core_css_parsers_StyleDeclarationParserState.BEGIN.toString = $estr;
	cocktail_core_css_parsers_StyleDeclarationParserState.BEGIN.__enum__ = cocktail_core_css_parsers_StyleDeclarationParserState;
	cocktail_core_css_parsers_StyleDeclarationParserState.COMMENT = ["COMMENT", 6];
	cocktail_core_css_parsers_StyleDeclarationParserState.COMMENT.toString = $estr;
	cocktail_core_css_parsers_StyleDeclarationParserState.COMMENT.__enum__ = cocktail_core_css_parsers_StyleDeclarationParserState;
	cocktail_core_css_parsers_StyleDeclarationParserState.BEGIN_COMMENT = ["BEGIN_COMMENT", 7];
	cocktail_core_css_parsers_StyleDeclarationParserState.BEGIN_COMMENT.toString = $estr;
	cocktail_core_css_parsers_StyleDeclarationParserState.BEGIN_COMMENT.__enum__ = cocktail_core_css_parsers_StyleDeclarationParserState;
	cocktail_core_css_parsers_StyleDeclarationParserState.END_COMMENT = ["END_COMMENT", 8];
	cocktail_core_css_parsers_StyleDeclarationParserState.END_COMMENT.toString = $estr;
	cocktail_core_css_parsers_StyleDeclarationParserState.END_COMMENT.__enum__ = cocktail_core_css_parsers_StyleDeclarationParserState;
	var cocktail_core_css_parsers_StyleValueParserState = $hxClasses["cocktail.core.css.parsers.StyleValueParserState"] = { __ename__: ["cocktail", "core", "css", "parsers", "StyleValueParserState"], __constructs__: ["IGNORE_SPACES", "BEGIN_VALUE", "IDENT_FUNCTION", "NUMBER_INTEGER_DIMENSION_PERCENTAGE", "COMPONENT_OR_END", "INVALID_STYLE_VALUE", "IMPORTANT", "END", "HEX", "STRING"] };
	cocktail_core_css_parsers_StyleValueParserState.IGNORE_SPACES = ["IGNORE_SPACES", 0];
	cocktail_core_css_parsers_StyleValueParserState.IGNORE_SPACES.toString = $estr;
	cocktail_core_css_parsers_StyleValueParserState.IGNORE_SPACES.__enum__ = cocktail_core_css_parsers_StyleValueParserState;
	cocktail_core_css_parsers_StyleValueParserState.BEGIN_VALUE = ["BEGIN_VALUE", 1];
	cocktail_core_css_parsers_StyleValueParserState.BEGIN_VALUE.toString = $estr;
	cocktail_core_css_parsers_StyleValueParserState.BEGIN_VALUE.__enum__ = cocktail_core_css_parsers_StyleValueParserState;
	cocktail_core_css_parsers_StyleValueParserState.IDENT_FUNCTION = ["IDENT_FUNCTION", 2];
	cocktail_core_css_parsers_StyleValueParserState.IDENT_FUNCTION.toString = $estr;
	cocktail_core_css_parsers_StyleValueParserState.IDENT_FUNCTION.__enum__ = cocktail_core_css_parsers_StyleValueParserState;
	cocktail_core_css_parsers_StyleValueParserState.NUMBER_INTEGER_DIMENSION_PERCENTAGE = ["NUMBER_INTEGER_DIMENSION_PERCENTAGE", 3];
	cocktail_core_css_parsers_StyleValueParserState.NUMBER_INTEGER_DIMENSION_PERCENTAGE.toString = $estr;
	cocktail_core_css_parsers_StyleValueParserState.NUMBER_INTEGER_DIMENSION_PERCENTAGE.__enum__ = cocktail_core_css_parsers_StyleValueParserState;
	cocktail_core_css_parsers_StyleValueParserState.COMPONENT_OR_END = ["COMPONENT_OR_END", 4];
	cocktail_core_css_parsers_StyleValueParserState.COMPONENT_OR_END.toString = $estr;
	cocktail_core_css_parsers_StyleValueParserState.COMPONENT_OR_END.__enum__ = cocktail_core_css_parsers_StyleValueParserState;
	cocktail_core_css_parsers_StyleValueParserState.INVALID_STYLE_VALUE = ["INVALID_STYLE_VALUE", 5];
	cocktail_core_css_parsers_StyleValueParserState.INVALID_STYLE_VALUE.toString = $estr;
	cocktail_core_css_parsers_StyleValueParserState.INVALID_STYLE_VALUE.__enum__ = cocktail_core_css_parsers_StyleValueParserState;
	cocktail_core_css_parsers_StyleValueParserState.IMPORTANT = ["IMPORTANT", 6];
	cocktail_core_css_parsers_StyleValueParserState.IMPORTANT.toString = $estr;
	cocktail_core_css_parsers_StyleValueParserState.IMPORTANT.__enum__ = cocktail_core_css_parsers_StyleValueParserState;
	cocktail_core_css_parsers_StyleValueParserState.END = ["END", 7];
	cocktail_core_css_parsers_StyleValueParserState.END.toString = $estr;
	cocktail_core_css_parsers_StyleValueParserState.END.__enum__ = cocktail_core_css_parsers_StyleValueParserState;
	cocktail_core_css_parsers_StyleValueParserState.HEX = ["HEX", 8];
	cocktail_core_css_parsers_StyleValueParserState.HEX.toString = $estr;
	cocktail_core_css_parsers_StyleValueParserState.HEX.__enum__ = cocktail_core_css_parsers_StyleValueParserState;
	cocktail_core_css_parsers_StyleValueParserState.STRING = ["STRING", 9];
	cocktail_core_css_parsers_StyleValueParserState.STRING.toString = $estr;
	cocktail_core_css_parsers_StyleValueParserState.STRING.__enum__ = cocktail_core_css_parsers_StyleValueParserState;
	var cocktail_core_css_parsers_AttributeSelectorParserState = $hxClasses["cocktail.core.css.parsers.AttributeSelectorParserState"] = { __ename__: ["cocktail", "core", "css", "parsers", "AttributeSelectorParserState"], __constructs__: ["IGNORE_SPACES", "END_OPERATOR", "ATTRIBUTE", "BEGIN_OPERATOR", "OPERATOR", "IDENTIFIER_VALUE", "STRING_VALUE", "END_SELECTOR", "INVALID_SELECTOR"] };
	cocktail_core_css_parsers_AttributeSelectorParserState.IGNORE_SPACES = ["IGNORE_SPACES", 0];
	cocktail_core_css_parsers_AttributeSelectorParserState.IGNORE_SPACES.toString = $estr;
	cocktail_core_css_parsers_AttributeSelectorParserState.IGNORE_SPACES.__enum__ = cocktail_core_css_parsers_AttributeSelectorParserState;
	cocktail_core_css_parsers_AttributeSelectorParserState.END_OPERATOR = ["END_OPERATOR", 1];
	cocktail_core_css_parsers_AttributeSelectorParserState.END_OPERATOR.toString = $estr;
	cocktail_core_css_parsers_AttributeSelectorParserState.END_OPERATOR.__enum__ = cocktail_core_css_parsers_AttributeSelectorParserState;
	cocktail_core_css_parsers_AttributeSelectorParserState.ATTRIBUTE = ["ATTRIBUTE", 2];
	cocktail_core_css_parsers_AttributeSelectorParserState.ATTRIBUTE.toString = $estr;
	cocktail_core_css_parsers_AttributeSelectorParserState.ATTRIBUTE.__enum__ = cocktail_core_css_parsers_AttributeSelectorParserState;
	cocktail_core_css_parsers_AttributeSelectorParserState.BEGIN_OPERATOR = ["BEGIN_OPERATOR", 3];
	cocktail_core_css_parsers_AttributeSelectorParserState.BEGIN_OPERATOR.toString = $estr;
	cocktail_core_css_parsers_AttributeSelectorParserState.BEGIN_OPERATOR.__enum__ = cocktail_core_css_parsers_AttributeSelectorParserState;
	cocktail_core_css_parsers_AttributeSelectorParserState.OPERATOR = ["OPERATOR", 4];
	cocktail_core_css_parsers_AttributeSelectorParserState.OPERATOR.toString = $estr;
	cocktail_core_css_parsers_AttributeSelectorParserState.OPERATOR.__enum__ = cocktail_core_css_parsers_AttributeSelectorParserState;
	cocktail_core_css_parsers_AttributeSelectorParserState.IDENTIFIER_VALUE = ["IDENTIFIER_VALUE", 5];
	cocktail_core_css_parsers_AttributeSelectorParserState.IDENTIFIER_VALUE.toString = $estr;
	cocktail_core_css_parsers_AttributeSelectorParserState.IDENTIFIER_VALUE.__enum__ = cocktail_core_css_parsers_AttributeSelectorParserState;
	cocktail_core_css_parsers_AttributeSelectorParserState.STRING_VALUE = ["STRING_VALUE", 6];
	cocktail_core_css_parsers_AttributeSelectorParserState.STRING_VALUE.toString = $estr;
	cocktail_core_css_parsers_AttributeSelectorParserState.STRING_VALUE.__enum__ = cocktail_core_css_parsers_AttributeSelectorParserState;
	cocktail_core_css_parsers_AttributeSelectorParserState.END_SELECTOR = ["END_SELECTOR", 7];
	cocktail_core_css_parsers_AttributeSelectorParserState.END_SELECTOR.toString = $estr;
	cocktail_core_css_parsers_AttributeSelectorParserState.END_SELECTOR.__enum__ = cocktail_core_css_parsers_AttributeSelectorParserState;
	cocktail_core_css_parsers_AttributeSelectorParserState.INVALID_SELECTOR = ["INVALID_SELECTOR", 8];
	cocktail_core_css_parsers_AttributeSelectorParserState.INVALID_SELECTOR.toString = $estr;
	cocktail_core_css_parsers_AttributeSelectorParserState.INVALID_SELECTOR.__enum__ = cocktail_core_css_parsers_AttributeSelectorParserState;
	var cocktail_core_css_parsers_StyleRuleParserState = $hxClasses["cocktail.core.css.parsers.StyleRuleParserState"] = { __ename__: ["cocktail", "core", "css", "parsers", "StyleRuleParserState"], __constructs__: ["IGNORE_SPACES", "BEGIN_SELECTOR", "END_SELECTOR", "SELECTOR", "BEGIN_STYLES", "STYLES", "END_STYLES"] };
	cocktail_core_css_parsers_StyleRuleParserState.IGNORE_SPACES = ["IGNORE_SPACES", 0];
	cocktail_core_css_parsers_StyleRuleParserState.IGNORE_SPACES.toString = $estr;
	cocktail_core_css_parsers_StyleRuleParserState.IGNORE_SPACES.__enum__ = cocktail_core_css_parsers_StyleRuleParserState;
	cocktail_core_css_parsers_StyleRuleParserState.BEGIN_SELECTOR = ["BEGIN_SELECTOR", 1];
	cocktail_core_css_parsers_StyleRuleParserState.BEGIN_SELECTOR.toString = $estr;
	cocktail_core_css_parsers_StyleRuleParserState.BEGIN_SELECTOR.__enum__ = cocktail_core_css_parsers_StyleRuleParserState;
	cocktail_core_css_parsers_StyleRuleParserState.END_SELECTOR = ["END_SELECTOR", 2];
	cocktail_core_css_parsers_StyleRuleParserState.END_SELECTOR.toString = $estr;
	cocktail_core_css_parsers_StyleRuleParserState.END_SELECTOR.__enum__ = cocktail_core_css_parsers_StyleRuleParserState;
	cocktail_core_css_parsers_StyleRuleParserState.SELECTOR = ["SELECTOR", 3];
	cocktail_core_css_parsers_StyleRuleParserState.SELECTOR.toString = $estr;
	cocktail_core_css_parsers_StyleRuleParserState.SELECTOR.__enum__ = cocktail_core_css_parsers_StyleRuleParserState;
	cocktail_core_css_parsers_StyleRuleParserState.BEGIN_STYLES = ["BEGIN_STYLES", 4];
	cocktail_core_css_parsers_StyleRuleParserState.BEGIN_STYLES.toString = $estr;
	cocktail_core_css_parsers_StyleRuleParserState.BEGIN_STYLES.__enum__ = cocktail_core_css_parsers_StyleRuleParserState;
	cocktail_core_css_parsers_StyleRuleParserState.STYLES = ["STYLES", 5];
	cocktail_core_css_parsers_StyleRuleParserState.STYLES.toString = $estr;
	cocktail_core_css_parsers_StyleRuleParserState.STYLES.__enum__ = cocktail_core_css_parsers_StyleRuleParserState;
	cocktail_core_css_parsers_StyleRuleParserState.END_STYLES = ["END_STYLES", 6];
	cocktail_core_css_parsers_StyleRuleParserState.END_STYLES.toString = $estr;
	cocktail_core_css_parsers_StyleRuleParserState.END_STYLES.__enum__ = cocktail_core_css_parsers_StyleRuleParserState;
	var cocktail_core_css_parsers_StyleSheetRulesParserState = $hxClasses["cocktail.core.css.parsers.StyleSheetRulesParserState"] = { __ename__: ["cocktail", "core", "css", "parsers", "StyleSheetRulesParserState"], __constructs__: ["IGNORE_SPACES", "BEGIN", "BEGIN_RULE", "RULE", "END_RULE", "COMMENT", "BEGIN_COMMENT", "END_COMMENT"] };
	cocktail_core_css_parsers_StyleSheetRulesParserState.IGNORE_SPACES = ["IGNORE_SPACES", 0];
	cocktail_core_css_parsers_StyleSheetRulesParserState.IGNORE_SPACES.toString = $estr;
	cocktail_core_css_parsers_StyleSheetRulesParserState.IGNORE_SPACES.__enum__ = cocktail_core_css_parsers_StyleSheetRulesParserState;
	cocktail_core_css_parsers_StyleSheetRulesParserState.BEGIN = ["BEGIN", 1];
	cocktail_core_css_parsers_StyleSheetRulesParserState.BEGIN.toString = $estr;
	cocktail_core_css_parsers_StyleSheetRulesParserState.BEGIN.__enum__ = cocktail_core_css_parsers_StyleSheetRulesParserState;
	cocktail_core_css_parsers_StyleSheetRulesParserState.BEGIN_RULE = ["BEGIN_RULE", 2];
	cocktail_core_css_parsers_StyleSheetRulesParserState.BEGIN_RULE.toString = $estr;
	cocktail_core_css_parsers_StyleSheetRulesParserState.BEGIN_RULE.__enum__ = cocktail_core_css_parsers_StyleSheetRulesParserState;
	cocktail_core_css_parsers_StyleSheetRulesParserState.RULE = ["RULE", 3];
	cocktail_core_css_parsers_StyleSheetRulesParserState.RULE.toString = $estr;
	cocktail_core_css_parsers_StyleSheetRulesParserState.RULE.__enum__ = cocktail_core_css_parsers_StyleSheetRulesParserState;
	cocktail_core_css_parsers_StyleSheetRulesParserState.END_RULE = ["END_RULE", 4];
	cocktail_core_css_parsers_StyleSheetRulesParserState.END_RULE.toString = $estr;
	cocktail_core_css_parsers_StyleSheetRulesParserState.END_RULE.__enum__ = cocktail_core_css_parsers_StyleSheetRulesParserState;
	cocktail_core_css_parsers_StyleSheetRulesParserState.COMMENT = ["COMMENT", 5];
	cocktail_core_css_parsers_StyleSheetRulesParserState.COMMENT.toString = $estr;
	cocktail_core_css_parsers_StyleSheetRulesParserState.COMMENT.__enum__ = cocktail_core_css_parsers_StyleSheetRulesParserState;
	cocktail_core_css_parsers_StyleSheetRulesParserState.BEGIN_COMMENT = ["BEGIN_COMMENT", 6];
	cocktail_core_css_parsers_StyleSheetRulesParserState.BEGIN_COMMENT.toString = $estr;
	cocktail_core_css_parsers_StyleSheetRulesParserState.BEGIN_COMMENT.__enum__ = cocktail_core_css_parsers_StyleSheetRulesParserState;
	cocktail_core_css_parsers_StyleSheetRulesParserState.END_COMMENT = ["END_COMMENT", 7];
	cocktail_core_css_parsers_StyleSheetRulesParserState.END_COMMENT.toString = $estr;
	cocktail_core_css_parsers_StyleSheetRulesParserState.END_COMMENT.__enum__ = cocktail_core_css_parsers_StyleSheetRulesParserState;
	var cocktail_core_css_parsers_StyleSheetRuleParserState = $hxClasses["cocktail.core.css.parsers.StyleSheetRuleParserState"] = { __ename__: ["cocktail", "core", "css", "parsers", "StyleSheetRuleParserState"], __constructs__: ["IGNORE_SPACES", "BEGIN_RULE", "BEGIN_AT_RULE", "END_MEDIA_RULE", "RULE", "END_STYLE_RULE"] };
	cocktail_core_css_parsers_StyleSheetRuleParserState.IGNORE_SPACES = ["IGNORE_SPACES", 0];
	cocktail_core_css_parsers_StyleSheetRuleParserState.IGNORE_SPACES.toString = $estr;
	cocktail_core_css_parsers_StyleSheetRuleParserState.IGNORE_SPACES.__enum__ = cocktail_core_css_parsers_StyleSheetRuleParserState;
	cocktail_core_css_parsers_StyleSheetRuleParserState.BEGIN_RULE = ["BEGIN_RULE", 1];
	cocktail_core_css_parsers_StyleSheetRuleParserState.BEGIN_RULE.toString = $estr;
	cocktail_core_css_parsers_StyleSheetRuleParserState.BEGIN_RULE.__enum__ = cocktail_core_css_parsers_StyleSheetRuleParserState;
	cocktail_core_css_parsers_StyleSheetRuleParserState.BEGIN_AT_RULE = ["BEGIN_AT_RULE", 2];
	cocktail_core_css_parsers_StyleSheetRuleParserState.BEGIN_AT_RULE.toString = $estr;
	cocktail_core_css_parsers_StyleSheetRuleParserState.BEGIN_AT_RULE.__enum__ = cocktail_core_css_parsers_StyleSheetRuleParserState;
	cocktail_core_css_parsers_StyleSheetRuleParserState.END_MEDIA_RULE = ["END_MEDIA_RULE", 3];
	cocktail_core_css_parsers_StyleSheetRuleParserState.END_MEDIA_RULE.toString = $estr;
	cocktail_core_css_parsers_StyleSheetRuleParserState.END_MEDIA_RULE.__enum__ = cocktail_core_css_parsers_StyleSheetRuleParserState;
	cocktail_core_css_parsers_StyleSheetRuleParserState.RULE = ["RULE", 4];
	cocktail_core_css_parsers_StyleSheetRuleParserState.RULE.toString = $estr;
	cocktail_core_css_parsers_StyleSheetRuleParserState.RULE.__enum__ = cocktail_core_css_parsers_StyleSheetRuleParserState;
	cocktail_core_css_parsers_StyleSheetRuleParserState.END_STYLE_RULE = ["END_STYLE_RULE", 5];
	cocktail_core_css_parsers_StyleSheetRuleParserState.END_STYLE_RULE.toString = $estr;
	cocktail_core_css_parsers_StyleSheetRuleParserState.END_STYLE_RULE.__enum__ = cocktail_core_css_parsers_StyleSheetRuleParserState;
	var cocktail_core_css_parsers_CSSRulesParser = function () {
	};
	$hxClasses["cocktail.core.css.parsers.CSSRulesParser"] = cocktail_core_css_parsers_CSSRulesParser;
	cocktail_core_css_parsers_CSSRulesParser.__name__ = ["cocktail", "core", "css", "parsers", "CSSRulesParser"];
	cocktail_core_css_parsers_CSSRulesParser.isValidChar = function (c) {
		return c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45;
	};
	cocktail_core_css_parsers_CSSRulesParser.prototype = {
		parseRules: function (css) {
			var state = cocktail_core_css_parsers_StyleSheetRulesParserState.IGNORE_SPACES;
			var next = cocktail_core_css_parsers_StyleSheetRulesParserState.BEGIN;
			var start = 0;
			var position = 0;
			var c = css.charCodeAt(position);
			var ruleStarted = false;
			var rules = [];
			while (!(c != c)) {
				switch (state[1]) {
					case 0:
						switch (c) {
							case 10: case 13: case 9: case 32:
								break;
							default:
								state = next;
								continue;
						}
						break;
					case 1:
						switch (c) {
							case 47:
								state = cocktail_core_css_parsers_StyleSheetRulesParserState.BEGIN_COMMENT;
								break;
							default:
								start = position;
								state = cocktail_core_css_parsers_StyleSheetRulesParserState.BEGIN_RULE;
								continue;
						}
						break;
					case 2:
						start = position;
						state = cocktail_core_css_parsers_StyleSheetRulesParserState.RULE;
						ruleStarted = true;
						continue;
						break;
					case 3:
						switch (c) {
							case 125:
								state = cocktail_core_css_parsers_StyleSheetRulesParserState.END_RULE;
								break;
						}
						break;
					case 4:
						var rule = HxOverrides.substr(css, start, position - start);
						rules.push(rule);
						state = cocktail_core_css_parsers_StyleSheetRulesParserState.IGNORE_SPACES;
						next = cocktail_core_css_parsers_StyleSheetRulesParserState.BEGIN;
						ruleStarted = false;
						continue;
						break;
					case 6:
						if (c != 42) return rules; else state = cocktail_core_css_parsers_StyleSheetRulesParserState.COMMENT;
						break;
					case 5:
						if (c == 42) state = cocktail_core_css_parsers_StyleSheetRulesParserState.END_COMMENT;
						break;
					case 7:
						if (c == 47) {
							state = cocktail_core_css_parsers_StyleSheetRulesParserState.IGNORE_SPACES;
							next = cocktail_core_css_parsers_StyleSheetRulesParserState.BEGIN;
						} else state = cocktail_core_css_parsers_StyleSheetRulesParserState.COMMENT;
						break;
				}
				c = StringTools.fastCodeAt(css, ++position);
			}
			if (ruleStarted == true) {
				var rule1 = HxOverrides.substr(css, start, position - start);
				rules.push(rule1);
			}
			return rules;
		}
		, parseRule: function (rule, parentSyleSheet) {
			var state = cocktail_core_css_parsers_StyleSheetRuleParserState.IGNORE_SPACES;
			var next = cocktail_core_css_parsers_StyleSheetRuleParserState.BEGIN_RULE;
			var start = 0;
			var position = 0;
			var c = rule.charCodeAt(position);
			var cssRule = null;
			while (!(c != c)) {
				switch (state[1]) {
					case 0:
						switch (c) {
							case 10: case 13: case 9: case 32:
								break;
							default:
								state = next;
								continue;
						}
						break;
					case 1:
						switch (c) {
							case 64:
								state = cocktail_core_css_parsers_StyleSheetRuleParserState.BEGIN_AT_RULE;
								start = position;
								break;
							default:
								state = cocktail_core_css_parsers_StyleSheetRuleParserState.RULE;
								next = cocktail_core_css_parsers_StyleSheetRuleParserState.END_STYLE_RULE;
								start = position;
								continue;
						}
						break;
					case 2:
						if (!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
							var atRule = HxOverrides.substr(rule, start, position - start);
							switch (atRule) {
								case "@media":
									state = cocktail_core_css_parsers_StyleSheetRuleParserState.RULE;
									next = cocktail_core_css_parsers_StyleSheetRuleParserState.END_MEDIA_RULE;
									continue;
									break;
								default:
									state = cocktail_core_css_parsers_StyleSheetRuleParserState.IGNORE_SPACES;
									next = cocktail_core_css_parsers_StyleSheetRuleParserState.BEGIN_RULE;
							}
						}
						break;
					case 4:
						switch (c) {
							case 125:
								state = next;
								continue;
								break;
						}
						break;
					case 3:
						var rule1 = HxOverrides.substr(rule, start, position - start + 1);
						var cssMediaRule = new cocktail_core_css_CSSMediaRule(parentSyleSheet);
						cssMediaRule.set_cssText(rule1);
						return cssMediaRule;
					case 5:
						var rule2 = HxOverrides.substr(rule, start, position - start + 1);
						var cssStyleRule = new cocktail_core_css_CSSStyleRule(parentSyleSheet);
						cssStyleRule.set_cssText(rule2);
						return cssStyleRule;
				}
				c = StringTools.fastCodeAt(rule, ++position);
			}
			return cssRule;
		}
		, __class__: cocktail_core_css_parsers_CSSRulesParser
	};
	var cocktail_core_css_parsers_CSSSelectorParser = function () {
	};
	$hxClasses["cocktail.core.css.parsers.CSSSelectorParser"] = cocktail_core_css_parsers_CSSSelectorParser;
	cocktail_core_css_parsers_CSSSelectorParser.__name__ = ["cocktail", "core", "css", "parsers", "CSSSelectorParser"];
	cocktail_core_css_parsers_CSSSelectorParser.isOperatorChar = function (c) {
		return c == 61 || c == 126 || c == 94 || c == 36 || c == 42 || c == 124;
	};
	cocktail_core_css_parsers_CSSSelectorParser.isAsciiChar = function (c) {
		return c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57;
	};
	cocktail_core_css_parsers_CSSSelectorParser.isSelectorChar = function (c) {
		return c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 45 || c == 95;
	};
	cocktail_core_css_parsers_CSSSelectorParser.isPseudoClassChar = function (c) {
		return c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 45;
	};
	cocktail_core_css_parsers_CSSSelectorParser.prototype = {
		parseSelector: function (selector, typedSelectors) {
			var state = cocktail_core_css_parsers_SelectorParserState.IGNORE_SPACES;
			var next = cocktail_core_css_parsers_SelectorParserState.BEGIN_SIMPLE_SELECTOR;
			var start = 0;
			var position = 0;
			var c = selector.charCodeAt(position);
			var simpleSelectorSequenceStartValue = null;
			var simpleSelectorSequenceItemValues = [];
			var components = [];
			var selectorData = new cocktail_core_css_SelectorVO(components, cocktail_core_css_PseudoElementSelectorValue.NONE, false, null, false, null, false, null, false, false, false);
			while (!(c != c)) {
				switch (state[1]) {
					case 0:
						switch (c) {
							case 10: case 13: case 9: case 32:
								break;
							default:
								state = next;
								continue;
						}
						break;
					case 1:
						if (c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 45 || c == 95) {
							state = cocktail_core_css_parsers_SelectorParserState.SIMPLE_SELECTOR;
							next = cocktail_core_css_parsers_SelectorParserState.END_TYPE_SELECTOR;
							start = position;
						} else switch (c) {
							case 46:
								state = cocktail_core_css_parsers_SelectorParserState.SIMPLE_SELECTOR;
								next = cocktail_core_css_parsers_SelectorParserState.END_CLASS_SELECTOR;
								start = position + 1;
								break;
							case 35:
								state = cocktail_core_css_parsers_SelectorParserState.SIMPLE_SELECTOR;
								next = cocktail_core_css_parsers_SelectorParserState.END_ID_SELECTOR;
								start = position + 1;
								break;
							case 42:
								state = cocktail_core_css_parsers_SelectorParserState.SIMPLE_SELECTOR;
								next = cocktail_core_css_parsers_SelectorParserState.END_UNIVERSAL_SELECTOR;
								start = position;
								break;
							case 58:
								state = cocktail_core_css_parsers_SelectorParserState.BEGIN_PSEUDO_SELECTOR;
								start = position;
								break;
							case 91:
								state = cocktail_core_css_parsers_SelectorParserState.BEGIN_ATTRIBUTE_SELECTOR;
								start = position;
								break;
							default:
								state = cocktail_core_css_parsers_SelectorParserState.INVALID_SELECTOR;
								continue;
						}
						break;
					case 12:
						position = this.parseAttributeSelector(selector, position, simpleSelectorSequenceItemValues);
						state = cocktail_core_css_parsers_SelectorParserState.END_SIMPLE_SELECTOR;
						next = cocktail_core_css_parsers_SelectorParserState.IGNORE_SPACES;
						break;
					case 9:
						if (c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 45 || c == 95) {
							position = this.parsePseudoClass(selector, position, simpleSelectorSequenceItemValues);
							state = cocktail_core_css_parsers_SelectorParserState.END_SIMPLE_SELECTOR;
							next = cocktail_core_css_parsers_SelectorParserState.IGNORE_SPACES;
						} else switch (c) {
							case 58:
								state = cocktail_core_css_parsers_SelectorParserState.PSEUDO_ELEMENT_SELECTOR;
								break;
							default:
								state = cocktail_core_css_parsers_SelectorParserState.INVALID_SELECTOR;
								continue;
						}
						break;
					case 11:
						position = this.parsePseudoElement(selector, position, selectorData);
						state = cocktail_core_css_parsers_SelectorParserState.IGNORE_SPACES;
						next = cocktail_core_css_parsers_SelectorParserState.INVALID_SELECTOR;
						break;
					case 2:
						switch (c) {
							case 32: case 10: case 13: case 62:
								state = cocktail_core_css_parsers_SelectorParserState.BEGIN_COMBINATOR;
								continue;
								break;
							case 58: case 35: case 46: case 91:
								state = cocktail_core_css_parsers_SelectorParserState.BEGIN_SIMPLE_SELECTOR;
								continue;
								break;
							default:
								state = cocktail_core_css_parsers_SelectorParserState.INVALID_SELECTOR;
								continue;
						}
						break;
					case 3:
						if (!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 45 || c == 95)) switch (c) {
							case 32: case 10: case 13: case 62: case 58: case 35: case 46: case 91:
								state = next;
								continue;
								break;
							default:
								state = cocktail_core_css_parsers_SelectorParserState.INVALID_SELECTOR;
								continue;
						}
						break;
					case 4:
						var type = HxOverrides.substr(selector, start, position - start);
						simpleSelectorSequenceStartValue = cocktail_core_css_SimpleSelectorSequenceStartValue.TYPE(type.toUpperCase());
						state = cocktail_core_css_parsers_SelectorParserState.END_SIMPLE_SELECTOR;
						continue;
						break;
					case 5:
						var className = HxOverrides.substr(selector, start, position - start);
						simpleSelectorSequenceItemValues.push(cocktail_core_css_SimpleSelectorSequenceItemValue.CSS_CLASS(className));
						state = cocktail_core_css_parsers_SelectorParserState.END_SIMPLE_SELECTOR;
						continue;
						break;
					case 6:
						var id = HxOverrides.substr(selector, start, position - start);
						simpleSelectorSequenceItemValues.push(cocktail_core_css_SimpleSelectorSequenceItemValue.ID(id));
						state = cocktail_core_css_parsers_SelectorParserState.END_SIMPLE_SELECTOR;
						continue;
						break;
					case 10:
						simpleSelectorSequenceStartValue = cocktail_core_css_SimpleSelectorSequenceStartValue.UNIVERSAL;
						state = cocktail_core_css_parsers_SelectorParserState.END_SIMPLE_SELECTOR;
						continue;
						break;
					case 7:
						this.flushSelectors(simpleSelectorSequenceStartValue, simpleSelectorSequenceItemValues, components);
						simpleSelectorSequenceStartValue = null;
						simpleSelectorSequenceItemValues = [];
						state = cocktail_core_css_parsers_SelectorParserState.IGNORE_SPACES;
						next = cocktail_core_css_parsers_SelectorParserState.COMBINATOR;
						continue;
						break;
					case 8:
						if (c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 45 || c == 95) {
							state = cocktail_core_css_parsers_SelectorParserState.BEGIN_SIMPLE_SELECTOR;
							components.push(cocktail_core_css_SelectorComponentValue.COMBINATOR(cocktail_core_css_CombinatorValue.DESCENDANT));
							continue;
						} else switch (c) {
							case 62:
								state = cocktail_core_css_parsers_SelectorParserState.IGNORE_SPACES;
								next = cocktail_core_css_parsers_SelectorParserState.BEGIN_SIMPLE_SELECTOR;
								components.push(cocktail_core_css_SelectorComponentValue.COMBINATOR(cocktail_core_css_CombinatorValue.CHILD));
								break;
							case 43:
								state = cocktail_core_css_parsers_SelectorParserState.IGNORE_SPACES;
								next = cocktail_core_css_parsers_SelectorParserState.BEGIN_SIMPLE_SELECTOR;
								components.push(cocktail_core_css_SelectorComponentValue.COMBINATOR(cocktail_core_css_CombinatorValue.ADJACENT_SIBLING));
								break;
							case 126:
								state = cocktail_core_css_parsers_SelectorParserState.IGNORE_SPACES;
								next = cocktail_core_css_parsers_SelectorParserState.BEGIN_SIMPLE_SELECTOR;
								components.push(cocktail_core_css_SelectorComponentValue.COMBINATOR(cocktail_core_css_CombinatorValue.GENERAL_SIBLING));
								break;
							case 58: case 35: case 46: case 91: case 42:
								state = cocktail_core_css_parsers_SelectorParserState.BEGIN_SIMPLE_SELECTOR;
								components.push(cocktail_core_css_SelectorComponentValue.COMBINATOR(cocktail_core_css_CombinatorValue.DESCENDANT));
								continue;
								break;
						}
						break;
					case 13:
						return false;
				}
				c = StringTools.fastCodeAt(selector, ++position);
			}
			switch (next[1]) {
				case 4:
					var type1 = HxOverrides.substr(selector, start, position - start);
					simpleSelectorSequenceStartValue = cocktail_core_css_SimpleSelectorSequenceStartValue.TYPE(type1.toUpperCase());
					break;
				case 10:
					simpleSelectorSequenceStartValue = cocktail_core_css_SimpleSelectorSequenceStartValue.UNIVERSAL;
					break;
				case 5:
					var className1 = HxOverrides.substr(selector, start, position - start);
					simpleSelectorSequenceItemValues.push(cocktail_core_css_SimpleSelectorSequenceItemValue.CSS_CLASS(className1));
					state = cocktail_core_css_parsers_SelectorParserState.END_SIMPLE_SELECTOR;
					break;
				case 6:
					var id1 = HxOverrides.substr(selector, start, position - start);
					simpleSelectorSequenceItemValues.push(cocktail_core_css_SimpleSelectorSequenceItemValue.ID(id1));
					break;
				default:
			}
			this.flushSelectors(simpleSelectorSequenceStartValue, simpleSelectorSequenceItemValues, components);
			if (selectorData.components.length == 0) return false;
			selectorData.components.reverse();
			var firstClass = this.getFirstClass(selectorData.components);
			var isSimpleClassSelector = false;
			if (firstClass != null) isSimpleClassSelector = this.getIsSimpleClassSelector(selectorData.components);
			var firstId = this.getFirstId(selectorData.components);
			var isSimpleIdSelector = false;
			if (firstId != null) isSimpleIdSelector = this.getIsSimpleIdSelector(selectorData.components);
			var firstType = this.getFirstType(selectorData.components);
			var isSimpleTypeSelector = false;
			if (firstType != null) isSimpleTypeSelector = this.getIsSimpleTypeSelector(selectorData.components);
			var typedSelector = new cocktail_core_css_SelectorVO(selectorData.components, selectorData.pseudoElement, firstClass != null, firstClass, firstId != null, firstId, firstType != null, firstType, isSimpleClassSelector, isSimpleIdSelector, isSimpleTypeSelector);
			typedSelectors.push(typedSelector);
			return true;
		}
		, flushSelectors: function (simpleSelectorSequenceStartValue, simpleSelectorSequenceItemValues, components) {
			if (simpleSelectorSequenceStartValue == null && simpleSelectorSequenceItemValues.length == 0) return;
			if (simpleSelectorSequenceStartValue == null) simpleSelectorSequenceStartValue = cocktail_core_css_SimpleSelectorSequenceStartValue.UNIVERSAL;
			var simpleSelectorSequence = new cocktail_core_css_SimpleSelectorSequenceVO(simpleSelectorSequenceStartValue, simpleSelectorSequenceItemValues);
			components.push(cocktail_core_css_SelectorComponentValue.SIMPLE_SELECTOR_SEQUENCE(simpleSelectorSequence));
		}
		, parsePseudoClass: function (selector, position, simpleSelectorSequenceItemValues) {
			var c = selector.charCodeAt(position);
			var start = position;
			while (true) {
				if (!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 45)) break;
				c = StringTools.fastCodeAt(selector, ++position);
			}
			var pseudoClass = HxOverrides.substr(selector, start, position - start);
			var typedPseudoClass = cocktail_core_css_PseudoClassSelectorValue.UNKNOWN;
			switch (pseudoClass) {
				case "first-child":
					typedPseudoClass = cocktail_core_css_PseudoClassSelectorValue.STRUCTURAL(cocktail_core_css_StructuralPseudoClassSelectorValue.FIRST_CHILD);
					break;
				case "last-child":
					typedPseudoClass = cocktail_core_css_PseudoClassSelectorValue.STRUCTURAL(cocktail_core_css_StructuralPseudoClassSelectorValue.LAST_CHILD);
					break;
				case "empty":
					typedPseudoClass = cocktail_core_css_PseudoClassSelectorValue.STRUCTURAL(cocktail_core_css_StructuralPseudoClassSelectorValue.EMPTY);
					break;
				case "root":
					typedPseudoClass = cocktail_core_css_PseudoClassSelectorValue.STRUCTURAL(cocktail_core_css_StructuralPseudoClassSelectorValue.ROOT);
					break;
				case "first-of-type":
					typedPseudoClass = cocktail_core_css_PseudoClassSelectorValue.STRUCTURAL(cocktail_core_css_StructuralPseudoClassSelectorValue.FIRST_OF_TYPE);
					break;
				case "last-of-type":
					typedPseudoClass = cocktail_core_css_PseudoClassSelectorValue.STRUCTURAL(cocktail_core_css_StructuralPseudoClassSelectorValue.LAST_OF_TYPE);
					break;
				case "only-of-type":
					typedPseudoClass = cocktail_core_css_PseudoClassSelectorValue.STRUCTURAL(cocktail_core_css_StructuralPseudoClassSelectorValue.ONLY_OF_TYPE);
					break;
				case "only-child":
					typedPseudoClass = cocktail_core_css_PseudoClassSelectorValue.STRUCTURAL(cocktail_core_css_StructuralPseudoClassSelectorValue.ONLY_CHILD);
					break;
				case "link":
					typedPseudoClass = cocktail_core_css_PseudoClassSelectorValue.LINK(cocktail_core_css_LinkPseudoClassValue.LINK);
					break;
				case "visited":
					typedPseudoClass = cocktail_core_css_PseudoClassSelectorValue.LINK(cocktail_core_css_LinkPseudoClassValue.VISITED);
					break;
				case "active":
					typedPseudoClass = cocktail_core_css_PseudoClassSelectorValue.USER_ACTION(cocktail_core_css_UserActionPseudoClassValue.ACTIVE);
					break;
				case "hover":
					typedPseudoClass = cocktail_core_css_PseudoClassSelectorValue.USER_ACTION(cocktail_core_css_UserActionPseudoClassValue.HOVER);
					break;
				case "focus":
					typedPseudoClass = cocktail_core_css_PseudoClassSelectorValue.USER_ACTION(cocktail_core_css_UserActionPseudoClassValue.FOCUS);
					break;
				case "target":
					typedPseudoClass = cocktail_core_css_PseudoClassSelectorValue.TARGET;
					break;
				case "fullscreen":
					typedPseudoClass = cocktail_core_css_PseudoClassSelectorValue.FULLSCREEN;
					break;
				case "nth-child":
					break;
				case "nth-last-child":
					break;
				case "nth-of-type":
					break;
				case "nth-last-of-type":
					break;
				case "not":
					break;
				case "lang":
					break;
				case "enabled":
					typedPseudoClass = cocktail_core_css_PseudoClassSelectorValue.UI_ELEMENT_STATES(cocktail_core_css_UIElementStatesValue.ENABLED);
					break;
				case "disabled":
					typedPseudoClass = cocktail_core_css_PseudoClassSelectorValue.UI_ELEMENT_STATES(cocktail_core_css_UIElementStatesValue.DISABLED);
					break;
				case "checked":
					typedPseudoClass = cocktail_core_css_PseudoClassSelectorValue.UI_ELEMENT_STATES(cocktail_core_css_UIElementStatesValue.CHECKED);
					break;
			}
			simpleSelectorSequenceItemValues.push(cocktail_core_css_SimpleSelectorSequenceItemValue.PSEUDO_CLASS(typedPseudoClass));
			return --position;
		}
		, parsePseudoElement: function (selector, position, selectorData) {
			var c = selector.charCodeAt(position);
			var start = position;
			while (true) {
				if (!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 45)) break;
				c = StringTools.fastCodeAt(selector, ++position);
			}
			var pseudoElement = HxOverrides.substr(selector, start, position - start);
			var typedPseudoElement = null;
			switch (pseudoElement) {
				case "first-line":
					typedPseudoElement = cocktail_core_css_PseudoElementSelectorValue.FIRST_LINE;
					break;
				case "first-letter":
					typedPseudoElement = cocktail_core_css_PseudoElementSelectorValue.FIRST_LETTER;
					break;
				case "before":
					typedPseudoElement = cocktail_core_css_PseudoElementSelectorValue.BEFORE;
					break;
				case "after":
					typedPseudoElement = cocktail_core_css_PseudoElementSelectorValue.AFTER;
					break;
				default:
					typedPseudoElement = cocktail_core_css_PseudoElementSelectorValue.NONE;
			}
			selectorData.pseudoElement = typedPseudoElement;
			return --position;
		}
		, parseAttributeSelector: function (selector, position, simpleSelectorSequenceItemValues) {
			var c = selector.charCodeAt(position);
			var start = position;
			var attribute = null;
			var operator = null;
			var value = null;
			var state = cocktail_core_css_parsers_AttributeSelectorParserState.IGNORE_SPACES;
			var next = cocktail_core_css_parsers_AttributeSelectorParserState.ATTRIBUTE;
			try {
				while (true) {
					switch (state[1]) {
						case 0:
							switch (c) {
								case 10: case 13: case 9: case 32:
									break;
								default:
									state = next;
									continue;
							}
							break;
						case 2:
							if (!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 45 || c == 95)) {
								attribute = HxOverrides.substr(selector, start, position - start);
								if (c == 93) {
									state = cocktail_core_css_parsers_AttributeSelectorParserState.END_SELECTOR;
									continue;
								} else {
									state = cocktail_core_css_parsers_AttributeSelectorParserState.IGNORE_SPACES;
									next = cocktail_core_css_parsers_AttributeSelectorParserState.BEGIN_OPERATOR;
									continue;
								}
							}
							break;
						case 3:
							start = position;
							state = cocktail_core_css_parsers_AttributeSelectorParserState.OPERATOR;
							break;
						case 4:
							if (!(c == 61 || c == 126 || c == 94 || c == 36 || c == 42 || c == 124)) {
								operator = HxOverrides.substr(selector, start, position - start);
								state = cocktail_core_css_parsers_AttributeSelectorParserState.IGNORE_SPACES;
								next = cocktail_core_css_parsers_AttributeSelectorParserState.END_OPERATOR;
								continue;
							}
							break;
						case 1:
							switch (c) {
								case 34: case 39:
									position++;
									start = position;
									state = cocktail_core_css_parsers_AttributeSelectorParserState.STRING_VALUE;
									break;
								case 93:
									state = cocktail_core_css_parsers_AttributeSelectorParserState.END_SELECTOR;
									continue;
									break;
								default:
									if ((c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 45 || c == 95) == true) {
										start = position;
										state = cocktail_core_css_parsers_AttributeSelectorParserState.IDENTIFIER_VALUE;
									} else state = cocktail_core_css_parsers_AttributeSelectorParserState.INVALID_SELECTOR;
							}
							break;
						case 6:
							if (!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 45 || c == 95)) switch (c) {
								case 34: case 39:
									value = HxOverrides.substr(selector, start, position - start);
									state = cocktail_core_css_parsers_AttributeSelectorParserState.END_SELECTOR;
									break;
								case 93:
									state = cocktail_core_css_parsers_AttributeSelectorParserState.INVALID_SELECTOR;
									break;
								default:
									state = cocktail_core_css_parsers_AttributeSelectorParserState.INVALID_SELECTOR;
							}
							break;
						case 5:
							if (!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 45 || c == 95)) switch (c) {
								case 93:
									value = HxOverrides.substr(selector, start, position - start);
									state = cocktail_core_css_parsers_AttributeSelectorParserState.END_SELECTOR;
									continue;
									break;
								default:
									state = cocktail_core_css_parsers_AttributeSelectorParserState.INVALID_SELECTOR;
							}
							break;
						case 8:
							throw "__break__";
							break;
						case 7:
							throw "__break__";
							break;
					}
					c = StringTools.fastCodeAt(selector, ++position);
				}
			} catch (e) { if (e != "__break__") throw e; }
			if (attribute != null) {
				if (operator != null) switch (operator) {
					case "=":
						simpleSelectorSequenceItemValues.push(cocktail_core_css_SimpleSelectorSequenceItemValue.ATTRIBUTE(cocktail_core_css_AttributeSelectorValue.ATTRIBUTE_VALUE(attribute, value)));
						break;
					case "^=":
						simpleSelectorSequenceItemValues.push(cocktail_core_css_SimpleSelectorSequenceItemValue.ATTRIBUTE(cocktail_core_css_AttributeSelectorValue.ATTRIBUTE_VALUE_BEGINS(attribute, value)));
						break;
					case "~=":
						simpleSelectorSequenceItemValues.push(cocktail_core_css_SimpleSelectorSequenceItemValue.ATTRIBUTE(cocktail_core_css_AttributeSelectorValue.ATTRIBUTE_LIST(attribute, value)));
						break;
					case "$=":
						simpleSelectorSequenceItemValues.push(cocktail_core_css_SimpleSelectorSequenceItemValue.ATTRIBUTE(cocktail_core_css_AttributeSelectorValue.ATTRIBUTE_VALUE_ENDS(attribute, value)));
						break;
					case "*=":
						simpleSelectorSequenceItemValues.push(cocktail_core_css_SimpleSelectorSequenceItemValue.ATTRIBUTE(cocktail_core_css_AttributeSelectorValue.ATTRIBUTE_VALUE_CONTAINS(attribute, value)));
						break;
					case "|=":
						simpleSelectorSequenceItemValues.push(cocktail_core_css_SimpleSelectorSequenceItemValue.ATTRIBUTE(cocktail_core_css_AttributeSelectorValue.ATTRIBUTE_VALUE_BEGINS_HYPHEN_LIST(attribute, value)));
						break;
				} else simpleSelectorSequenceItemValues.push(cocktail_core_css_SimpleSelectorSequenceItemValue.ATTRIBUTE(cocktail_core_css_AttributeSelectorValue.ATTRIBUTE(attribute)));
			}
			return position;
		}
		, getFirstClass: function (components) {
			{
				var _g = components[0];
				switch (_g[1]) {
					case 0:
						var value = _g[2];
						if (value.startValue == cocktail_core_css_SimpleSelectorSequenceStartValue.UNIVERSAL) {
							if (value.simpleSelectors.length != 0) {
								var _g1 = value.simpleSelectors[0];
								switch (_g1[1]) {
									case 2:
										var value1 = _g1[2];
										return value1;
									default:
								}
							}
						}
						break;
					case 1:
						var value2 = _g[2];
						break;
				}
			}
			return null;
		}
		, getIsSimpleClassSelector: function (components) {
			if (components.length > 1) return false;
			{
				var _g = components[0];
				switch (_g[1]) {
					case 0:
						var value = _g[2];
						if (value.startValue == cocktail_core_css_SimpleSelectorSequenceStartValue.UNIVERSAL) {
							if (value.simpleSelectors.length == 1) {
								var _g1 = value.simpleSelectors[0];
								switch (_g1[1]) {
									case 2:
										var value1 = _g1[2];
										return true;
									default:
								}
							}
						}
						break;
					case 1:
						var value2 = _g[2];
						break;
				}
			}
			return false;
		}
		, getIsSimpleIdSelector: function (components) {
			if (components.length > 1) return false;
			{
				var _g = components[0];
				switch (_g[1]) {
					case 0:
						var value = _g[2];
						if (value.startValue == cocktail_core_css_SimpleSelectorSequenceStartValue.UNIVERSAL) {
							if (value.simpleSelectors.length == 1) {
								var _g1 = value.simpleSelectors[0];
								switch (_g1[1]) {
									case 3:
										var value1 = _g1[2];
										return true;
									default:
								}
							}
						}
						break;
					case 1:
						var value2 = _g[2];
						break;
				}
			}
			return false;
		}
		, getIsSimpleTypeSelector: function (components) {
			if (components.length > 1) return false;
			{
				var _g = components[0];
				switch (_g[1]) {
					case 0:
						var value = _g[2];
						{
							var _g1 = value.startValue;
							switch (_g1[1]) {
								case 1:
									var typeValue = _g1[2];
									if (value.simpleSelectors.length == 0) return true;
									break;
								default:
							}
						}
						break;
					case 1:
						var value1 = _g[2];
						break;
				}
			}
			return false;
		}
		, getFirstId: function (components) {
			{
				var _g = components[0];
				switch (_g[1]) {
					case 0:
						var value = _g[2];
						if (value.startValue == cocktail_core_css_SimpleSelectorSequenceStartValue.UNIVERSAL) {
							if (value.simpleSelectors.length != 0) {
								var _g1 = value.simpleSelectors[0];
								switch (_g1[1]) {
									case 3:
										var value1 = _g1[2];
										return value1;
									default:
								}
							}
						}
						break;
					case 1:
						var value2 = _g[2];
						break;
				}
			}
			return null;
		}
		, getFirstType: function (components) {
			{
				var _g = components[0];
				switch (_g[1]) {
					case 0:
						var value = _g[2];
						{
							var _g1 = value.startValue;
							switch (_g1[1]) {
								case 1:
									var value1 = _g1[2];
									return value1;
								default:
							}
						}
						break;
					case 1:
						var value2 = _g[2];
						break;
				}
			}
			return null;
		}
		, __class__: cocktail_core_css_parsers_CSSSelectorParser
	};
	var cocktail_core_css_parsers_CSSStyleParser = function () {
	};
	$hxClasses["cocktail.core.css.parsers.CSSStyleParser"] = cocktail_core_css_parsers_CSSStyleParser;
	cocktail_core_css_parsers_CSSStyleParser.__name__ = ["cocktail", "core", "css", "parsers", "CSSStyleParser"];
	cocktail_core_css_parsers_CSSStyleParser._typedProperties = null;
	cocktail_core_css_parsers_CSSStyleParser.parseStyle = function (styles, baseURL) {
		cocktail_core_css_parsers_CSSStyleParser._position = 0;
		var state = cocktail_core_css_parsers_StyleDeclarationParserState.IGNORE_SPACES;
		var next = cocktail_core_css_parsers_StyleDeclarationParserState.BEGIN;
		if (cocktail_core_css_parsers_CSSStyleParser._typedProperties == null) cocktail_core_css_parsers_CSSStyleParser._typedProperties = [];
		cocktail_core_css_parsers_CSSStyleParser._typedProperties = [];
		var typedProperties = cocktail_core_css_parsers_CSSStyleParser._typedProperties;
		var position = 0;
		var start = position;
		var c = styles.charCodeAt(position);
		var styleName = null;
		while (!(c != c)) {
			switch (state[1]) {
				case 2:
					switch (c) {
						case 10: case 13: case 9: case 32:
							break;
						default:
							state = next;
							continue;
					}
					break;
				case 5:
					switch (c) {
						case 47:
							state = cocktail_core_css_parsers_StyleDeclarationParserState.BEGIN_COMMENT;
							break;
						default:
							start = position;
							state = cocktail_core_css_parsers_StyleDeclarationParserState.STYLE_NAME;
							continue;
					}
					break;
				case 7:
					if (c != 42) state = cocktail_core_css_parsers_StyleDeclarationParserState.INVALID_STYLE; else state = cocktail_core_css_parsers_StyleDeclarationParserState.COMMENT;
					break;
				case 6:
					if (c == 42) state = cocktail_core_css_parsers_StyleDeclarationParserState.END_COMMENT;
					break;
				case 8:
					if (c == 47) {
						state = cocktail_core_css_parsers_StyleDeclarationParserState.IGNORE_SPACES;
						next = cocktail_core_css_parsers_StyleDeclarationParserState.BEGIN;
					} else state = cocktail_core_css_parsers_StyleDeclarationParserState.INVALID_STYLE;
					break;
				case 0:
					if (!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c == 45)) switch (c) {
						case 58:
							styleName = HxOverrides.substr(styles, start, position - start);
							state = cocktail_core_css_parsers_StyleDeclarationParserState.IGNORE_SPACES;
							next = cocktail_core_css_parsers_StyleDeclarationParserState.STYLE_VALUE;
							continue;
							break;
						case 32:
							styleName = HxOverrides.substr(styles, start, position - start);
							state = cocktail_core_css_parsers_StyleDeclarationParserState.IGNORE_SPACES;
							next = cocktail_core_css_parsers_StyleDeclarationParserState.STYLE_SEPARATOR;
							continue;
							break;
						default:
							state = cocktail_core_css_parsers_StyleDeclarationParserState.INVALID_STYLE;
							continue;
					}
					break;
				case 4:
					if (c == 58) state = cocktail_core_css_parsers_StyleDeclarationParserState.STYLE_VALUE; else {
						state = cocktail_core_css_parsers_StyleDeclarationParserState.INVALID_STYLE;
						continue;
					}
					break;
				case 1:
					var typedProperty = cocktail_core_css_parsers_CSSStyleParser.parseStyleValue(styleName, styles, position, baseURL);
					position = cocktail_core_css_parsers_CSSStyleParser._position;
					if (typedProperty != null) typedProperties.push(typedProperty);
					state = cocktail_core_css_parsers_StyleDeclarationParserState.IGNORE_SPACES;
					next = cocktail_core_css_parsers_StyleDeclarationParserState.BEGIN;
					break;
				case 3:
					return [];
			}
			c = StringTools.fastCodeAt(styles, ++position);
		}
		return typedProperties;
	};
	cocktail_core_css_parsers_CSSStyleParser.parseStyleValue = function (propertyName, styles, position, baseURL) {
		var c = styles.charCodeAt(position);
		if (c == 58) {
			++position;
			c = styles.charCodeAt(position);
		}
		var state = cocktail_core_css_parsers_StyleValueParserState.IGNORE_SPACES;
		var next = cocktail_core_css_parsers_StyleValueParserState.BEGIN_VALUE;
		var start = position;
		var important = false;
		var styleValues = [];
		var styleValuesLists = [];
		var fontNotations = [];
		try {
			while (!(c != c)) {
				switch (state[1]) {
					case 0:
						switch (c) {
							case 10: case 13: case 9: case 32:
								break;
							default:
								state = next;
								continue;
						}
						break;
					case 4:
						if (c != c) {
							state = cocktail_core_css_parsers_StyleValueParserState.END;
							continue;
						} else if (c == 47 && fontNotations.length > 0) {
							state = cocktail_core_css_parsers_StyleValueParserState.INVALID_STYLE_VALUE;
							continue;
						} else {
							if (fontNotations.length == 1) {
								fontNotations.push(styleValues.pop());
								styleValues.push(cocktail_core_css_CSSPropertyValue.FONT_SIZE_LINE_HEIGHT_GROUP(fontNotations[0], fontNotations[1]));
								fontNotations = [];
							}
							switch (c) {
								case 32:
									state = cocktail_core_css_parsers_StyleValueParserState.IGNORE_SPACES;
									next = cocktail_core_css_parsers_StyleValueParserState.BEGIN_VALUE;
									break;
								case 44:
									styleValuesLists.push(styleValues);
									styleValues = [];
									state = cocktail_core_css_parsers_StyleValueParserState.IGNORE_SPACES;
									next = cocktail_core_css_parsers_StyleValueParserState.BEGIN_VALUE;
									break;
								case 47:
									if (propertyName == "font") {
										fontNotations.push(styleValues.pop());
										state = cocktail_core_css_parsers_StyleValueParserState.IGNORE_SPACES;
										next = cocktail_core_css_parsers_StyleValueParserState.BEGIN_VALUE;
									} else {
										state = cocktail_core_css_parsers_StyleValueParserState.INVALID_STYLE_VALUE;
										continue;
									}
									break;
								case 59:
									state = cocktail_core_css_parsers_StyleValueParserState.END;
									continue;
									break;
								default:
									state = cocktail_core_css_parsers_StyleValueParserState.INVALID_STYLE_VALUE;
									continue;
							}
						}
						break;
					case 1:
						switch (c) {
							case 44:
								styleValuesLists.push(styleValues);
								styleValues = [];
								state = cocktail_core_css_parsers_StyleValueParserState.IGNORE_SPACES;
								next = cocktail_core_css_parsers_StyleValueParserState.BEGIN_VALUE;
								c = StringTools.fastCodeAt(styles, ++position);
								continue;
								break;
							case 59:
								state = cocktail_core_css_parsers_StyleValueParserState.END;
								continue;
								break;
							case 45: case 43: case 46:
								state = cocktail_core_css_parsers_StyleValueParserState.NUMBER_INTEGER_DIMENSION_PERCENTAGE;
								start = position;
								continue;
								break;
							case 35:
								state = cocktail_core_css_parsers_StyleValueParserState.HEX;
								start = position;
								continue;
								break;
							case 33:
								state = cocktail_core_css_parsers_StyleValueParserState.IMPORTANT;
								start = position;
								continue;
								break;
							case 34: case 39:
								state = cocktail_core_css_parsers_StyleValueParserState.STRING;
								start = position;
								continue;
								break;
						}
						if (c >= 97 && c <= 122 || c >= 65 && c <= 90 || c == 45) {
							state = cocktail_core_css_parsers_StyleValueParserState.IDENT_FUNCTION;
							start = position;
							continue;
						}
						if (c >= 48 && c <= 57) {
							state = cocktail_core_css_parsers_StyleValueParserState.NUMBER_INTEGER_DIMENSION_PERCENTAGE;
							start = position;
							continue;
						}
						state = cocktail_core_css_parsers_StyleValueParserState.INVALID_STYLE_VALUE;
						continue;
						break;
					case 7:
						if (c != c) throw "__break__"; else if (c != 59) {
							state = cocktail_core_css_parsers_StyleValueParserState.INVALID_STYLE_VALUE;
							continue;
						} else throw "__break__";
						break;
					case 6:
						var endPosition = cocktail_core_css_parsers_CSSStyleParser.parseImportant(styles, ++position);
						if (endPosition != -1) {
							position = endPosition;
							c = styles.charCodeAt(position);
							important = true;
							state = cocktail_core_css_parsers_StyleValueParserState.IGNORE_SPACES;
							next = cocktail_core_css_parsers_StyleValueParserState.END;
							continue;
						} else {
							state = cocktail_core_css_parsers_StyleValueParserState.INVALID_STYLE_VALUE;
							continue;
						}
						break;
					case 8:
						var endPosition1 = cocktail_core_css_parsers_CSSStyleParser.parseHexaColor(styles, ++position, styleValues);
						if (endPosition1 != -1) {
							position = endPosition1;
							state = cocktail_core_css_parsers_StyleValueParserState.COMPONENT_OR_END;
						} else {
							state = cocktail_core_css_parsers_StyleValueParserState.INVALID_STYLE_VALUE;
							continue;
						}
						break;
					case 9:
						var endPosition2 = cocktail_core_css_parsers_CSSStyleParser.parseString(styles, position, styleValues);
						if (endPosition2 != -1) {
							position = endPosition2;
							c = styles.charCodeAt(position);
							state = cocktail_core_css_parsers_StyleValueParserState.COMPONENT_OR_END;
							continue;
						} else {
							state = cocktail_core_css_parsers_StyleValueParserState.INVALID_STYLE_VALUE;
							continue;
						}
						break;
					case 2:
						var endPosition3 = cocktail_core_css_parsers_CSSStyleParser.parseIdentOrFunctionnalNotation(styles, position, styleValues, baseURL);
						if (endPosition3 != -1) {
							position = endPosition3;
							c = styles.charCodeAt(position);
							state = cocktail_core_css_parsers_StyleValueParserState.COMPONENT_OR_END;
							continue;
						} else {
							state = cocktail_core_css_parsers_StyleValueParserState.INVALID_STYLE_VALUE;
							continue;
						}
						break;
					case 3:
						var endPosition4 = cocktail_core_css_parsers_CSSStyleParser.parseIntegerNumberDimensionOrPercentage(styles, position, styleValues);
						if (endPosition4 != -1) {
							position = endPosition4;
							c = styles.charCodeAt(position);
							state = cocktail_core_css_parsers_StyleValueParserState.COMPONENT_OR_END;
							continue;
						} else {
							state = cocktail_core_css_parsers_StyleValueParserState.INVALID_STYLE_VALUE;
							continue;
						}
						break;
					case 5:
						if (c == 59) {
							cocktail_core_css_parsers_CSSStyleParser._position = ++position;
							return null;
						}
						break;
				}
				c = StringTools.fastCodeAt(styles, ++position);
			}
		} catch (e) { if (e != "__break__") throw e; }
		cocktail_core_css_parsers_CSSStyleParser._position = position;
		if (fontNotations.length == 1) {
			fontNotations.push(styleValues.pop());
			styleValues.push(cocktail_core_css_CSSPropertyValue.FONT_SIZE_LINE_HEIGHT_GROUP(fontNotations[0], fontNotations[1]));
			fontNotations = [];
		}
		if (styleValuesLists.length == 0) {
			if (styleValues.length == 1) {
				var typedProperty = new cocktail_core_css_TypedPropertyVO();
				typedProperty.important = important;
				typedProperty.index = cocktail_core_css_CSSConstants.getPropertyIndexFromName(propertyName);
				typedProperty.typedValue = styleValues[0];
				return typedProperty;
			} else {
				var typedProperty1 = new cocktail_core_css_TypedPropertyVO();
				typedProperty1.important = important;
				typedProperty1.index = cocktail_core_css_CSSConstants.getPropertyIndexFromName(propertyName);
				typedProperty1.typedValue = cocktail_core_css_CSSPropertyValue.GROUP(styleValues);
				return typedProperty1;
			}
		} else {
			var styleListProperty = [];
			if (styleValues.length > 0) styleValuesLists.push(styleValues);
			var _g1 = 0;
			var _g = styleValuesLists.length;
			while (_g1 < _g) {
				var i = _g1++;
				if (styleValuesLists[i].length == 1) styleListProperty.push(styleValuesLists[i][0]); else styleListProperty.push(cocktail_core_css_CSSPropertyValue.GROUP(styleValuesLists[i]));
			}
			var typedProperty2 = new cocktail_core_css_TypedPropertyVO();
			typedProperty2.important = important;
			typedProperty2.index = cocktail_core_css_CSSConstants.getPropertyIndexFromName(propertyName);
			typedProperty2.typedValue = cocktail_core_css_CSSPropertyValue.CSS_LIST(styleListProperty);
			return typedProperty2;
		}
	};
	cocktail_core_css_parsers_CSSStyleParser.parseImportant = function (styles, position) {
		var c = styles.charCodeAt(position);
		while (c == 32) c = StringTools.fastCodeAt(styles, ++position);
		var start = position;
		while (c >= 97 && c <= 122 || c >= 65 && c <= 90 || c == 45) c = StringTools.fastCodeAt(styles, ++position);
		var ident = HxOverrides.substr(styles, start, position - start);
		if (ident == "important") return position;
		return -1;
	};
	cocktail_core_css_parsers_CSSStyleParser.parseIntegerNumberDimensionOrPercentage = function (styles, position, styleValues) {
		var c = styles.charCodeAt(position);
		var start = position;
		if (c == 45 || c == 43) c = StringTools.fastCodeAt(styles, ++position);
		var isNumber = c == 46;
		while (c >= 48 && c <= 57) c = StringTools.fastCodeAt(styles, ++position);
		if (c != c && isNumber == false) {
			var integer = Std.parseInt(HxOverrides.substr(styles, start, position - start));
			styleValues.push(cocktail_core_css_CSSPropertyValue.INTEGER(integer));
			return position;
		}
		if (c == 46) {
			c = StringTools.fastCodeAt(styles, ++position);
			isNumber = true;
			while (c >= 48 && c <= 57) c = StringTools.fastCodeAt(styles, ++position);
		}
		if (c != c) {
			var number = Std.parseFloat(HxOverrides.substr(styles, start, position - start));
			styleValues.push(cocktail_core_css_CSSPropertyValue.NUMBER(number));
			return position;
		}
		if (c >= 97 && c <= 122 || c >= 65 && c <= 90 || c == 45) {
			var numberOrInteger = Std.parseFloat(HxOverrides.substr(styles, start, position - start));
			position = cocktail_core_css_parsers_CSSStyleParser.parseDimension(numberOrInteger, styles, position, styleValues);
		} else switch (c) {
			case 37:
				var numberOrInteger1 = Std.parseFloat(HxOverrides.substr(styles, start, position - start));
				styleValues.push(cocktail_core_css_CSSPropertyValue.PERCENTAGE(numberOrInteger1));
				++position;
				break;
			default:
				if (isNumber) {
					var number1 = Std.parseFloat(HxOverrides.substr(styles, start, position - start));
					styleValues.push(cocktail_core_css_CSSPropertyValue.NUMBER(number1));
				} else {
					var integer1 = Std.parseInt(HxOverrides.substr(styles, start, position - start));
					styleValues.push(cocktail_core_css_CSSPropertyValue.INTEGER(integer1));
				}
		}
		return position;
	};
	cocktail_core_css_parsers_CSSStyleParser.parseDimension = function (numberOrInteger, styles, position, styleValues) {
		var c = styles.charCodeAt(position);
		var start = position;
		while (c >= 97 && c <= 122 || c >= 65 && c <= 90 || c == 45) c = StringTools.fastCodeAt(styles, ++position);
		var ident = HxOverrides.substr(styles, start, position - start);
		switch (ident) {
			case "px":
				styleValues.push(cocktail_core_css_CSSPropertyValue.LENGTH(cocktail_core_css_CSSLengthValue.PX(numberOrInteger)));
				break;
			case "em":
				styleValues.push(cocktail_core_css_CSSPropertyValue.LENGTH(cocktail_core_css_CSSLengthValue.EM(numberOrInteger)));
				break;
			case "ex":
				styleValues.push(cocktail_core_css_CSSPropertyValue.LENGTH(cocktail_core_css_CSSLengthValue.EX(numberOrInteger)));
				break;
			case "mm":
				styleValues.push(cocktail_core_css_CSSPropertyValue.LENGTH(cocktail_core_css_CSSLengthValue.MM(numberOrInteger)));
				break;
			case "in":
				styleValues.push(cocktail_core_css_CSSPropertyValue.LENGTH(cocktail_core_css_CSSLengthValue.IN(numberOrInteger)));
				break;
			case "cm":
				styleValues.push(cocktail_core_css_CSSPropertyValue.LENGTH(cocktail_core_css_CSSLengthValue.CM(numberOrInteger)));
				break;
			case "pc":
				styleValues.push(cocktail_core_css_CSSPropertyValue.LENGTH(cocktail_core_css_CSSLengthValue.PC(numberOrInteger)));
				break;
			case "pt":
				styleValues.push(cocktail_core_css_CSSPropertyValue.LENGTH(cocktail_core_css_CSSLengthValue.PT(numberOrInteger)));
				break;
			case "ch":
				styleValues.push(cocktail_core_css_CSSPropertyValue.LENGTH(cocktail_core_css_CSSLengthValue.CH(numberOrInteger)));
				break;
			case "rem":
				styleValues.push(cocktail_core_css_CSSPropertyValue.LENGTH(cocktail_core_css_CSSLengthValue.REM(numberOrInteger)));
				break;
			case "vh":
				styleValues.push(cocktail_core_css_CSSPropertyValue.LENGTH(cocktail_core_css_CSSLengthValue.VH(numberOrInteger)));
				break;
			case "vw":
				styleValues.push(cocktail_core_css_CSSPropertyValue.LENGTH(cocktail_core_css_CSSLengthValue.VW(numberOrInteger)));
				break;
			case "vmin":
				styleValues.push(cocktail_core_css_CSSPropertyValue.LENGTH(cocktail_core_css_CSSLengthValue.VMIN(numberOrInteger)));
				break;
			case "vmax":
				styleValues.push(cocktail_core_css_CSSPropertyValue.LENGTH(cocktail_core_css_CSSLengthValue.VMAX(numberOrInteger)));
				break;
			case "deg":
				styleValues.push(cocktail_core_css_CSSPropertyValue.ANGLE(cocktail_core_css_CSSAngleValue.DEG(numberOrInteger)));
				break;
			case "rad":
				styleValues.push(cocktail_core_css_CSSPropertyValue.ANGLE(cocktail_core_css_CSSAngleValue.RAD(numberOrInteger)));
				break;
			case "grad":
				styleValues.push(cocktail_core_css_CSSPropertyValue.ANGLE(cocktail_core_css_CSSAngleValue.GRAD(numberOrInteger)));
				break;
			case "turn":
				styleValues.push(cocktail_core_css_CSSPropertyValue.ANGLE(cocktail_core_css_CSSAngleValue.TURN(numberOrInteger)));
				break;
			case "s":
				styleValues.push(cocktail_core_css_CSSPropertyValue.TIME(cocktail_core_css_CSSTimeValue.SECONDS(numberOrInteger)));
				break;
			case "ms":
				styleValues.push(cocktail_core_css_CSSPropertyValue.TIME(cocktail_core_css_CSSTimeValue.MILLISECONDS(numberOrInteger)));
				break;
			case "Hz":
				styleValues.push(cocktail_core_css_CSSPropertyValue.FREQUENCY(cocktail_core_css_CSSFrequencyValue.HERTZ(numberOrInteger)));
				break;
			case "kHz":
				styleValues.push(cocktail_core_css_CSSPropertyValue.FREQUENCY(cocktail_core_css_CSSFrequencyValue.KILO_HERTZ(numberOrInteger)));
				break;
			case "dpi":
				styleValues.push(cocktail_core_css_CSSPropertyValue.RESOLUTION(cocktail_core_css_CSSResolutionValue.DPI(numberOrInteger)));
				break;
			case "dpcm":
				styleValues.push(cocktail_core_css_CSSPropertyValue.RESOLUTION(cocktail_core_css_CSSResolutionValue.DPCM(numberOrInteger)));
				break;
			case "dppx":
				styleValues.push(cocktail_core_css_CSSPropertyValue.RESOLUTION(cocktail_core_css_CSSResolutionValue.DPPX(numberOrInteger)));
				break;
			default:
				return -1;
		}
		return position;
	};
	cocktail_core_css_parsers_CSSStyleParser.parseString = function (styles, position, styleValues) {
		var quote = styles.charCodeAt(position);
		var start = ++position;
		var c = styles.charCodeAt(position);
		while (c != quote) {
			if (c != c) return -1;
			c = StringTools.fastCodeAt(styles, ++position);
		}
		var stringValue = HxOverrides.substr(styles, start, position - start);
		styleValues.push(cocktail_core_css_CSSPropertyValue.STRING(stringValue));
		return ++position;
	};
	cocktail_core_css_parsers_CSSStyleParser.parseIdentOrFunctionnalNotation = function (styles, position, styleValues, baseURL) {
		var c = styles.charCodeAt(position);
		var start = position;
		while (c >= 97 && c <= 122 || c >= 65 && c <= 90 || c == 45) c = StringTools.fastCodeAt(styles, ++position);
		var ident = HxOverrides.substr(styles, start, position - start);
		switch (c) {
			case 40:
				position = cocktail_core_css_parsers_CSSStyleParser.parseFunctionnalNotation(ident, styles, ++position, styleValues, baseURL);
				break;
			default:
				cocktail_core_css_parsers_CSSStyleParser.parseIdent(ident, styleValues);
		}
		return position;
	};
	cocktail_core_css_parsers_CSSStyleParser.parseHexaColor = function (styles, position, styleValues) {
		var c = styles.charCodeAt(position);
		var start = position;
		while (c >= 97 && c <= 102 || c >= 65 && c <= 70 || c >= 48 && c <= 57) c = StringTools.fastCodeAt(styles, ++position);
		var hexa = HxOverrides.substr(styles, start, position - start);
		if (hexa.length == 3 || hexa.length == 6) {
			styleValues.push(cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.HEX(hexa)));
			return --position;
		}
		return -1;
	};
	cocktail_core_css_parsers_CSSStyleParser.parseFunctionnalNotation = function (ident, styles, position, styleValues, baseURL) {
		var c = styles.charCodeAt(position);
		var start = position;
		while (c != 41) {
			if (c != c) return -1;
			c = StringTools.fastCodeAt(styles, ++position);
		}
		var cssFunction = HxOverrides.substr(styles, start, position - start);
		if (ident == "url") {
			if (cssFunction.charAt(0) != "'" && cssFunction.charAt(0) != "\"") cssFunction = "'" + cssFunction + "'";
		}
		var functionValues = cocktail_core_css_parsers_CSSStyleParser.parseStyleValue("", cssFunction, 0, baseURL);
		var functionValue = cocktail_core_css_parsers_CSSStyleParser.getFunctionalNotation(ident, functionValues.typedValue, baseURL);
		if (functionValue == null) return -1; else {
			styleValues.push(functionValue);
			return ++position;
		}
	};
	cocktail_core_css_parsers_CSSStyleParser.getFunctionalNotation = function (name, value, baseURL) {
		switch (name) {
			case "rgb":
				return cocktail_core_css_parsers_CSSStyleParser.parseRGBOrRGBA(value, false);
			case "rgba":
				return cocktail_core_css_parsers_CSSStyleParser.parseRGBOrRGBA(value, true);
			case "url":
				switch (value[1]) {
					case 3:
						var value1 = value[2];
						return cocktail_core_css_CSSPropertyValue.URL(cocktail_core_css_parsers_CSSStyleParser.getURLRelativeToDocument(value1, baseURL));
					case 6:
						var value2 = value[2];
						return cocktail_core_css_CSSPropertyValue.URL(cocktail_core_css_parsers_CSSStyleParser.getURLRelativeToDocument(value2, baseURL));
					default:
						return null;
				}
				break;
			case "matrix":
				switch (value[1]) {
					case 15:
						var value3 = value[2];
						if (value3.length == 6) {
							var matrixNumbers = [];
							var _g1 = 0;
							var _g = value3.length;
							while (_g1 < _g) {
								var i = _g1++;
								{
									var _g2 = value3[i];
									switch (_g2[1]) {
										case 1:
											var value4 = _g2[2];
											matrixNumbers.push(value4);
											break;
										case 0:
											var value5 = _g2[2];
											matrixNumbers.push(value5);
											break;
										default:
											return null;
									}
								}
							}
							return cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION(cocktail_core_css_CSSTransformFunctionValue.MATRIX(matrixNumbers[0], matrixNumbers[1], matrixNumbers[2], matrixNumbers[3], matrixNumbers[4], matrixNumbers[5]));
						}
						break;
					default:
				}
				break;
			case "rotate":
				switch (value[1]) {
					case 8:
						var value6 = value[2];
						return cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION(cocktail_core_css_CSSTransformFunctionValue.ROTATE(value6));
					default:
				}
				break;
			case "scaleX":
				switch (value[1]) {
					case 1:
						var value7 = value[2];
						return cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION(cocktail_core_css_CSSTransformFunctionValue.SCALE_X(value7));
					case 0:
						var value8 = value[2];
						return cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION(cocktail_core_css_CSSTransformFunctionValue.SCALE_X(value8));
					default:
				}
				break;
			case "scaleY":
				switch (value[1]) {
					case 1:
						var value9 = value[2];
						return cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION(cocktail_core_css_CSSTransformFunctionValue.SCALE_Y(value9));
					case 0:
						var value10 = value[2];
						return cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION(cocktail_core_css_CSSTransformFunctionValue.SCALE_Y(value10));
					default:
				}
				break;
			case "scale":
				switch (value[1]) {
					case 1:
						var value11 = value[2];
						return cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION(cocktail_core_css_CSSTransformFunctionValue.SCALE(value11, value11));
					case 0:
						var value12 = value[2];
						return cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION(cocktail_core_css_CSSTransformFunctionValue.SCALE(value12, value12));
					case 15:
						var value13 = value[2];
						if (value13.length == 2) {
							var scaleX = 0.0;
							var scaleY = 0.0;
							{
								var _g3 = value13[0];
								switch (_g3[1]) {
									case 1:
										var value14 = _g3[2];
										scaleX = value14;
										break;
									case 0:
										var value15 = _g3[2];
										scaleX = value15;
										break;
									default:
										return null;
								}
							}
							{
								var _g4 = value13[1];
								switch (_g4[1]) {
									case 1:
										var value16 = _g4[2];
										scaleY = value16;
										break;
									case 0:
										var value17 = _g4[2];
										scaleY = value17;
										break;
									default:
										return null;
								}
							}
							return cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION(cocktail_core_css_CSSTransformFunctionValue.SCALE(scaleX, scaleY));
						}
						break;
					default:
				}
				break;
			case "skew":
				switch (value[1]) {
					case 8:
						var value18 = value[2];
						return cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION(cocktail_core_css_CSSTransformFunctionValue.SKEW(value18, value18));
					case 15:
						var value19 = value[2];
						if (value19.length == 2) {
							var skewX = null;
							var skewY = null;
							{
								var _g5 = value19[0];
								switch (_g5[1]) {
									case 8:
										var value20 = _g5[2];
										skewX = value20;
										break;
									default:
										return null;
								}
							}
							{
								var _g6 = value19[1];
								switch (_g6[1]) {
									case 8:
										var value21 = _g6[2];
										skewY = value21;
										break;
									default:
										return null;
								}
							}
							return cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION(cocktail_core_css_CSSTransformFunctionValue.SKEW(skewX, skewY));
						}
						break;
					default:
				}
				break;
			case "skewX":
				switch (value[1]) {
					case 8:
						var value22 = value[2];
						return cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION(cocktail_core_css_CSSTransformFunctionValue.SKEW_X(value22));
					default:
				}
				break;
			case "skewY":
				switch (value[1]) {
					case 8:
						var value23 = value[2];
						return cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION(cocktail_core_css_CSSTransformFunctionValue.SKEW_Y(value23));
					default:
				}
				break;
			case "translateX":
				switch (value[1]) {
					case 18:
						var value24 = value[2];
						return cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION(cocktail_core_css_CSSTransformFunctionValue.TRANSLATE_X(cocktail_core_css_CSSTranslationValue.ABSOLUTE_LENGTH(value24)));
					case 2:
						var value25 = value[2];
						return cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION(cocktail_core_css_CSSTransformFunctionValue.TRANSLATE_X(cocktail_core_css_CSSTranslationValue.PERCENTAGE(value25)));
					case 7:
						var value26 = value[2];
						return cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION(cocktail_core_css_CSSTransformFunctionValue.TRANSLATE_X(cocktail_core_css_CSSTranslationValue.LENGTH(value26)));
					default:
				}
				break;
			case "translateY":
				switch (value[1]) {
					case 18:
						var value27 = value[2];
						return cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION(cocktail_core_css_CSSTransformFunctionValue.TRANSLATE_Y(cocktail_core_css_CSSTranslationValue.ABSOLUTE_LENGTH(value27)));
					case 2:
						var value28 = value[2];
						return cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION(cocktail_core_css_CSSTransformFunctionValue.TRANSLATE_Y(cocktail_core_css_CSSTranslationValue.PERCENTAGE(value28)));
					case 7:
						var value29 = value[2];
						return cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION(cocktail_core_css_CSSTransformFunctionValue.TRANSLATE_Y(cocktail_core_css_CSSTranslationValue.LENGTH(value29)));
					default:
				}
				break;
			case "translate":
				switch (value[1]) {
					case 18:
						var value30 = value[2];
						return cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION(cocktail_core_css_CSSTransformFunctionValue.TRANSLATE(cocktail_core_css_CSSTranslationValue.ABSOLUTE_LENGTH(value30), cocktail_core_css_CSSTranslationValue.ABSOLUTE_LENGTH(value30)));
					case 2:
						var value31 = value[2];
						return cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION(cocktail_core_css_CSSTransformFunctionValue.TRANSLATE(cocktail_core_css_CSSTranslationValue.PERCENTAGE(value31), cocktail_core_css_CSSTranslationValue.PERCENTAGE(value31)));
					case 7:
						var value32 = value[2];
						return cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION(cocktail_core_css_CSSTransformFunctionValue.TRANSLATE(cocktail_core_css_CSSTranslationValue.LENGTH(value32), cocktail_core_css_CSSTranslationValue.LENGTH(value32)));
					case 15:
						var value33 = value[2];
						var translateX = null;
						var translateY = null;
						if (value33.length == 2) {
							{
								var _g7 = value33[0];
								switch (_g7[1]) {
									case 18:
										var value34 = _g7[2];
										translateX = cocktail_core_css_CSSTranslationValue.ABSOLUTE_LENGTH(value34);
										break;
									case 2:
										var value35 = _g7[2];
										translateX = cocktail_core_css_CSSTranslationValue.PERCENTAGE(value35);
										break;
									case 7:
										var value36 = _g7[2];
										translateX = cocktail_core_css_CSSTranslationValue.LENGTH(value36);
										break;
									default:
										return null;
								}
							}
							{
								var _g8 = value33[1];
								switch (_g8[1]) {
									case 18:
										var value37 = _g8[2];
										translateY = cocktail_core_css_CSSTranslationValue.ABSOLUTE_LENGTH(value37);
										break;
									case 2:
										var value38 = _g8[2];
										translateY = cocktail_core_css_CSSTranslationValue.PERCENTAGE(value38);
										break;
									case 7:
										var value39 = _g8[2];
										translateY = cocktail_core_css_CSSTranslationValue.LENGTH(value39);
										break;
									default:
										return null;
								}
							}
							return cocktail_core_css_CSSPropertyValue.TRANSFORM_FUNCTION(cocktail_core_css_CSSTransformFunctionValue.TRANSLATE(translateX, translateY));
						}
						break;
					default:
				}
				break;
			default:
		}
		return null;
	};
	cocktail_core_css_parsers_CSSStyleParser.parseRGBOrRGBA = function (property, isRGBA) {
		switch (property[1]) {
			case 15:
				var value = property[2];
				if (isRGBA == true) {
					if (value.length != 4) return null;
				} else if (value.length != 3) return null;
				var isPercentRGB = false;
				var red = 0;
				var green = 0;
				var blue = 0;
				var percentRed = 0.0;
				var percentGreen = 0.0;
				var percentBlue = 0.0;
				{
					var _g = value[0];
					switch (_g[1]) {
						case 0:
							var value1 = _g[2];
							red = value1;
							break;
						case 2:
							var value2 = _g[2];
							percentRed = value2;
							isPercentRGB = true;
							break;
						default:
							return null;
					}
				}
				{
					var _g1 = value[1];
					switch (_g1[1]) {
						case 0:
							var value3 = _g1[2];
							green = value3;
							if (isPercentRGB == true) return null;
							break;
						case 2:
							var value4 = _g1[2];
							percentGreen = value4;
							if (isPercentRGB == false) return null;
							break;
						default:
							return null;
					}
				}
				{
					var _g2 = value[2];
					switch (_g2[1]) {
						case 0:
							var value5 = _g2[2];
							blue = value5;
							if (isPercentRGB == true) return null;
							break;
						case 2:
							var value6 = _g2[2];
							percentBlue = value6;
							if (isPercentRGB == false) return null;
							break;
						default:
							return null;
					}
				}
				if (isRGBA == false) {
					if (isPercentRGB == true) return cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.RGB_PERCENTAGE(percentRed, percentGreen, percentBlue)); else return cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.RGB(red, green, blue));
				} else {
					var alpha = 0.0;
					{
						var _g3 = value[3];
						switch (_g3[1]) {
							case 1:
								var value7 = _g3[2];
								alpha = value7;
								break;
							case 0:
								var value8 = _g3[2];
								alpha = value8;
								break;
							default:
								return null;
						}
					}
					if (isPercentRGB == true) return cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.RGBA_PERCENTAGE(percentRed, percentGreen, percentBlue, alpha)); else return cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.RGBA(red, green, blue, alpha));
				}
				return null;
			default:
				return null;
		}
	};
	cocktail_core_css_parsers_CSSStyleParser.parseIdent = function (ident, styleValues) {
		ident = ident.toLowerCase();
		switch (ident) {
			case "inherit":
				styleValues.push(cocktail_core_css_CSSPropertyValue.INHERIT);
				break;
			case "initial":
				styleValues.push(cocktail_core_css_CSSPropertyValue.INITIAL);
				break;
			default:
				cocktail_core_css_parsers_CSSStyleParser.parseKeyword(ident, styleValues);
		}
	};
	cocktail_core_css_parsers_CSSStyleParser.parseKeyword = function (ident, styleValues) {
		var cssPropertyValue = cocktail_core_css_CSSPropertyValue.IDENTIFIER(ident);
		switch (ident) {
			case "normal":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NORMAL);
				break;
			case "bold":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.BOLD);
				break;
			case "bolder":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.BOLDER);
				break;
			case "lighter":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.LIGHTER);
				break;
			case "oblique":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.OBLIQUE);
				break;
			case "italic":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.ITALIC);
				break;
			case "small-caps":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.SMALL_CAPS);
				break;
			case "pre":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.PRE);
				break;
			case "nowrap":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NO_WRAP);
				break;
			case "pre-wrap":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.PRE_WRAP);
				break;
			case "pre-line":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.PRE_LINE);
				break;
			case "left":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.LEFT);
				break;
			case "right":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.RIGHT);
				break;
			case "center":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.CENTER);
				break;
			case "justify":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.JUSTIFY);
				break;
			case "capitalize":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.CAPITALIZE);
				break;
			case "uppercase":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.UPPERCASE);
				break;
			case "lowercase":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.LOWERCASE);
				break;
			case "none":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NONE);
				break;
			case "baseline":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.BASELINE);
				break;
			case "sub":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.SUB);
				break;
			case "super":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.SUPER);
				break;
			case "top":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.TOP);
				break;
			case "text-top":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.TEXT_TOP);
				break;
			case "middle":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.MIDDLE);
				break;
			case "bottom":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.BOTTOM);
				break;
			case "text-bottom":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.TEXT_BOTTOM);
				break;
			case "auto":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO);
				break;
			case "block":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.BLOCK);
				break;
			case "inline-block":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.INLINE_BLOCK);
				break;
			case "inline":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.INLINE);
				break;
			case "both":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.BOTH);
				break;
			case "static":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.STATIC);
				break;
			case "relative":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.RELATIVE);
				break;
			case "absolute":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.ABSOLUTE);
				break;
			case "fixed":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.FIXED);
				break;
			case "visible":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.VISIBLE);
				break;
			case "hidden":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.HIDDEN);
				break;
			case "scroll":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.SCROLL);
				break;
			case "border-box":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.BORDER_BOX);
				break;
			case "padding-box":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.PADDING_BOX);
				break;
			case "content-box":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.CONTENT_BOX);
				break;
			case "contain":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.CONTAIN);
				break;
			case "cover":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.COVER);
				break;
			case "crosshair":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.CROSSHAIR);
				break;
			case "default":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.DEFAULT);
				break;
			case "pointer":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.POINTER);
				break;
			case "text":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.TEXT);
				break;
			case "all":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.ALL);
				break;
			case "ease":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.EASE);
				break;
			case "linear":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.LINEAR);
				break;
			case "ease-in":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.EASE_IN);
				break;
			case "ease-out":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.EASE_OUT);
				break;
			case "ease-in-out":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.EASE_IN_OUT);
				break;
			case "step-start":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.STEP_START);
				break;
			case "step-end":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.STEP_END);
				break;
			case "start":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.START);
				break;
			case "end":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.END);
				break;
			case "x-small":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.X_SMALL);
				break;
			case "xx-small":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.XX_SMALL);
				break;
			case "x-large":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.X_LARGE);
				break;
			case "xx-large":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.XX_LARGE);
				break;
			case "medium":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.MEDIUM);
				break;
			case "smaller":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.SMALLER);
				break;
			case "larger":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.LARGER);
				break;
			case "space":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.SPACE);
				break;
			case "round":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.ROUND);
				break;
			case "large":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.LARGE);
				break;
			case "small":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.SMALL);
				break;
			case "repeat-x":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.REPEAT_X);
				break;
			case "repeat-y":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.REPEAT_Y);
				break;
			case "no-repeat":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.NO_REPEAT);
				break;
			case "repeat":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.REPEAT);
				break;
			case "thin":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.THIN);
				break;
			case "thick":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.THICK);
				break;
			case "dotted":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.DOTTED);
				break;
			case "dashed":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.DASHED);
				break;
			case "solid":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.SOLID);
				break;
			case "double":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.DOUBLE);
				break;
			case "groove":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.GROOVE);
				break;
			case "ridge":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.RIDGE);
				break;
			case "inset":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.INSET);
				break;
			case "outset":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.OUTSET);
				break;
			case "invert":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.INVERT);
				break;
			case "underline":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.UNDERLINE);
				break;
			case "overline":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.OVERLINE);
				break;
			case "line-through":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.LINE_THROUGH);
				break;
			case "blink":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.BLINK);
				break;
			case "transparent":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.TRANSPARENT);
				break;
			case "currentcolor":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.CURRENT_COLOR);
				break;
			default:
				cssPropertyValue = cocktail_core_css_parsers_CSSStyleParser.parseColorKeyword(ident);
		}
		if (cssPropertyValue == null) cssPropertyValue = cocktail_core_css_CSSPropertyValue.IDENTIFIER(ident);
		styleValues.push(cssPropertyValue);
	};
	cocktail_core_css_parsers_CSSStyleParser.parseColorKeyword = function (ident) {
		var cssPropertyValue = null;
		switch (ident) {
			case "aliceblue":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.ALICE_BLUE));
				break;
			case "antiquewhite":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.ANTIQUE_WHITE));
				break;
			case "aqua":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.AQUA));
				break;
			case "aquamarine":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.AQUAMARINE));
				break;
			case "azure":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.AZURE));
				break;
			case "beige":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.BEIGE));
				break;
			case "bisque":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.BISQUE));
				break;
			case "dimgray":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.DIM_GRAY));
				break;
			case "dimgrey":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.DIM_GREY));
				break;
			case "blue":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.BLUE));
				break;
			case "black":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.BLACK));
				break;
			case "blanchedalmond":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.BLANCHE_DALMOND));
				break;
			case "blueviolet":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.BLUE_VIOLET));
				break;
			case "brown":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.BROWN));
				break;
			case "burlywood":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.ALICE_BLUE));
				break;
			case "cadetblue":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.CADET_BLUE));
				break;
			case "chartreuse":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.CHARTREUSE));
				break;
			case "chocolate":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.CHOCOLATE));
				break;
			case "coral":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.CORAL));
				break;
			case "cornflowerblue":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.CORNFLOWER_BLUE));
				break;
			case "cornsilk":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.CORNSILK));
				break;
			case "crimson":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.CRIMSON));
				break;
			case "cyan":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.CYAN));
				break;
			case "darkblue":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.DARK_BLUE));
				break;
			case "darkgoldenrod":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.DARK_GOLDEN_ROD));
				break;
			case "darkgray":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.DARK_GRAY));
				break;
			case "darkgreen":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.DARK_GREEN));
				break;
			case "darkgrey":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.DARK_GREY));
				break;
			case "darkkhaki":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.DARK_KHAKI));
				break;
			case "darkmagenta":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.DARK_MAGENTA));
				break;
			case "darkolivegreen":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.DARK_OLIVE_GREEN));
				break;
			case "darkorange":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.DARK_ORANGE));
				break;
			case "darkorchid":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.DARK_ORCHID));
				break;
			case "darkred":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.DARK_RED));
				break;
			case "darksalmon":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.DARK_SALMON));
				break;
			case "darkseagreen":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.DARK_SEA_GREEN));
				break;
			case "darkslateblue":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.DARK_SLATE_BLUE));
				break;
			case "darkslategray":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.DARK_SLATE_GRAY));
				break;
			case "darkslategrey":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.DARK_SLATE_GREY));
				break;
			case "darkturquoise":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.DARK_TURQUOISE));
				break;
			case "darkviolet":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.DARK_VIOLET));
				break;
			case "deeppink":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.DEEP_PINK));
				break;
			case "deepskyblue":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.DEEP_SKY_BLUE));
				break;
			case "dodgerblue":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.DODGER_BLUE));
				break;
			case "firebrick":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.FIRE_BRICK));
				break;
			case "floralwhite":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.FLORAL_WHITE));
				break;
			case "forestgreen":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.FOREST_GREEN));
				break;
			case "gainsboro":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.GAINSBORO));
				break;
			case "ghostwhite":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.GHOST_WHITE));
				break;
			case "gold":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.GOLD));
				break;
			case "goldenrod":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.GOLDEN_ROD));
				break;
			case "greenyellow":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.GREEN_YELLOW));
				break;
			case "honeydew":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.HONEY_DEW));
				break;
			case "hotpink":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.HOT_PINK));
				break;
			case "indianred":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.INDIAN_RED));
				break;
			case "indigo":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.INDIGO));
				break;
			case "ivory":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.IVORY));
				break;
			case "khaki":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.KHAKI));
				break;
			case "lavender":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.LAVENDER));
				break;
			case "lavenderblush":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.LAVENDER_BLUSH));
				break;
			case "lawngreen":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.LAWN_GREEN));
				break;
			case "lemonchiffon":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.LEMON_CHIFFON));
				break;
			case "lightblue":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.LIGHT_BLUE));
				break;
			case "lightcoral":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.LIGHT_CORAL));
				break;
			case "lightcyan":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.LIGHT_CYAN));
				break;
			case "lightgoldenrodyellow":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.LIGHT_GOLDENROD_YELLOW));
				break;
			case "lightgray":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.LIGHT_GRAY));
				break;
			case "lightgrey":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.LIGHT_GREY));
				break;
			case "lightgreen":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.LIGHT_GREEN));
				break;
			case "lightpink":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.LIGHT_PINK));
				break;
			case "lightsalmon":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.LIGHT_SALMON));
				break;
			case "lightseagreen":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.LIGHT_SEA_GREEN));
				break;
			case "lightskyblue":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.LIGHT_SKY_BLUE));
				break;
			case "lightslategray":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.LIGHT_SLATE_GRAY));
				break;
			case "lightslategrey":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.LIGHT_SLATE_GREY));
				break;
			case "lightsteelblue":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.LIGHT_STEEL_BLUE));
				break;
			default:
				cssPropertyValue = cocktail_core_css_parsers_CSSStyleParser.parseColorKeyword2(ident);
		}
		return cssPropertyValue;
	};
	cocktail_core_css_parsers_CSSStyleParser.parseColorKeyword2 = function (ident) {
		var cssPropertyValue = null;
		switch (ident) {
			case "lightyellow":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.LIGHT_YELLOW));
				break;
			case "limegreen":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.LIME_GREEN));
				break;
			case "linen":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.LINEN));
				break;
			case "magenta":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.MAGENTA));
				break;
			case "marron":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.MAROON));
				break;
			case "mediumaquamarine":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.MEDIUM_AQUAMARINE));
				break;
			case "mediumblue":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.MEDIUM_BLUE));
				break;
			case "mediumorchid":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.MEDIUM_ORCHID));
				break;
			case "mediumpurple":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.MEDIUM_PURPLE));
				break;
			case "mediumseagreen":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.MEDIUM_SEA_GREEN));
				break;
			case "mediumslateblue":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.MEDIUM_SLATE_BLUE));
				break;
			case "mediumspringgreen":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.MEDIUM_SPRING_GREEN));
				break;
			case "mintcream":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.MINT_CREAM));
				break;
			case "mistyrose":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.MISTY_ROSE));
				break;
			case "moccasin":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.MOCCASIN));
				break;
			case "navajowhite":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.NAVAJO_WHITE));
				break;
			case "oldlace":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.OLD_LACE));
				break;
			case "olivedrab":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.OLIVE_DRAB));
				break;
			case "orangered":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.ORANGE_RED));
				break;
			case "orchid":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.ORCHID));
				break;
			case "palegoldenrod":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.PALE_GOLDEN_ROD));
				break;
			case "palegreen":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.PALE_GREEN));
				break;
			case "paleturquoise":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.PALE_TURQUOISE));
				break;
			case "palevioletred":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.PALE_VIOLET_RED));
				break;
			case "papayawhip":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.PAPAYA_WHIP));
				break;
			case "peachpuff":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.PEACH_PUFF));
				break;
			case "peru":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.PERU));
				break;
			case "pink":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.PINK));
				break;
			case "plum":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.PLUM));
				break;
			case "powderblue":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.POWDER_BLUE));
				break;
			case "rosybrown":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.ROSY_BROWN));
				break;
			case "royalblue":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.ROYAL_BLUE));
				break;
			case "saddlebrown":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.SADDLE_BROWN));
				break;
			case "salmon":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.SALMON));
				break;
			case "sandybrown":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.SANDY_BROWN));
				break;
			case "seagreen":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.SEA_GREEN));
				break;
			case "sienna":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.SIENNA));
				break;
			case "skyblue":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.SKY_BLUE));
				break;
			case "slateblue":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.SLATE_BLUE));
				break;
			case "slategray":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.SLATE_GRAY));
				break;
			case "slategrey":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.SLATE_GREY));
				break;
			case "snow":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.SNOW));
				break;
			case "springgreen":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.SPRING_GREEN));
				break;
			case "steelblue":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.STEEL_BLUE));
				break;
			case "tan":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.TAN));
				break;
			case "thisle":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.THISLE));
				break;
			case "tomato":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.TOMATO));
				break;
			case "turquoise":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.TURQUOISE));
				break;
			case "violet":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.VIOLET));
				break;
			case "wheat":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.WHEAT));
				break;
			case "whitesmoke":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.WHITE_SMOKE));
				break;
			case "yellowgreen":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.YELLOW_GREEN));
				break;
			case "silver":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.SILVER));
				break;
			case "gray":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.GRAY));
				break;
			case "grey":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.GREY));
				break;
			case "white":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.WHITE));
				break;
			case "maroon":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.MAROON));
				break;
			case "red":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.RED));
				break;
			case "purple":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.PURPLE));
				break;
			case "fuchsia":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.FUCHSIA));
				break;
			case "green":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.GREEN));
				break;
			case "lime":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.LIME));
				break;
			case "olive":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.OLIVE));
				break;
			case "yellow":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.YELLOW));
				break;
			case "navy":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.NAVY));
				break;
			case "orange":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.ORANGE));
				break;
			case "teal":
				cssPropertyValue = cocktail_core_css_CSSPropertyValue.COLOR(cocktail_core_css_CSSColorValue.KEYWORD(cocktail_core_css_CSSColorKeyword.TEAL));
				break;
		}
		return cssPropertyValue;
	};
	cocktail_core_css_parsers_CSSStyleParser.getURLRelativeToDocument = function (value, baseURL) {
		if (baseURL == null) return value;
		var url = cocktail_core_url_URL.fromString(value);
		if (cocktail_core_url_URL.isRelative(url) == false) return value;
		var typedBaseURL = cocktail_core_url_URL.fromString(baseURL);
		return cocktail_core_url_URL.toString(cocktail_core_url_URL.appendURL(typedBaseURL, url));
	};
	cocktail_core_css_parsers_CSSStyleParser.isHexaChar = function (c) {
		return c >= 97 && c <= 102 || c >= 65 && c <= 70 || c >= 48 && c <= 57;
	};
	cocktail_core_css_parsers_CSSStyleParser.isIdentChar = function (c) {
		return c >= 97 && c <= 122 || c >= 65 && c <= 90 || c == 45;
	};
	cocktail_core_css_parsers_CSSStyleParser.isNumChar = function (c) {
		return c >= 48 && c <= 57;
	};
	cocktail_core_css_parsers_CSSStyleParser.prototype = {
		__class__: cocktail_core_css_parsers_CSSStyleParser
	};
	var cocktail_core_css_parsers_CSSStyleSerializer = function () {
	};
	$hxClasses["cocktail.core.css.parsers.CSSStyleSerializer"] = cocktail_core_css_parsers_CSSStyleSerializer;
	cocktail_core_css_parsers_CSSStyleSerializer.__name__ = ["cocktail", "core", "css", "parsers", "CSSStyleSerializer"];
	cocktail_core_css_parsers_CSSStyleSerializer.serialize = function (property) {
		switch (property[1]) {
			case 4:
				var value = property[2];
				return cocktail_core_css_parsers_CSSStyleSerializer.serializeKeyword(value);
			case 3:
				var value1 = property[2];
				return value1;
			case 6:
				var value2 = property[2];
				return "\"" + value2 + "\"";
			case 5:
				var value3 = property[2];
				return "url(" + value3 + ")";
			case 16:
				return "inherit";
			case 17:
				return "initial";
			case 9:
				var value4 = property[2];
				return cocktail_core_css_parsers_CSSStyleSerializer.serializeTime(value4);
			case 2:
				var value5 = property[2];
				return value5 + "%";
			case 8:
				var value6 = property[2];
				return cocktail_core_css_parsers_CSSStyleSerializer.serializeAngle(value6);
			case 0:
				var value7 = property[2];
				if (value7 == null) return "null"; else return "" + value7;
				break;
			case 1:
				var value8 = property[2];
				if (value8 == null) return "null"; else return "" + value8;
				break;
			case 18:
				var value9 = property[2];
				if (value9 == null) return "null"; else return "" + value9;
				break;
			case 19:
				var intervalChange = property[3];
				var intervalNumber = property[2];
				return "steps(" + (intervalNumber == null ? "null" : "" + intervalNumber) + "," + cocktail_core_css_parsers_CSSStyleSerializer.serializeKeyword(intervalChange) + ")";
			case 20:
				var y2 = property[5];
				var x2 = property[4];
				var y1 = property[3];
				var x1 = property[2];
				return "cubic-bezier(" + (x1 == null ? "null" : "" + x1) + "," + (y1 == null ? "null" : "" + y1) + "," + (x2 == null ? "null" : "" + x2) + "," + (y2 == null ? "null" : "" + y2) + ")";
			case 10:
				var value10 = property[2];
				return cocktail_core_css_parsers_CSSStyleSerializer.serializeFrequency(value10);
			case 7:
				var value11 = property[2];
				return cocktail_core_css_parsers_CSSStyleSerializer.serializeLength(value11);
			case 11:
				var value12 = property[2];
				return cocktail_core_css_parsers_CSSStyleSerializer.serializeResolution(value12);
			case 12:
				var value13 = property[2];
				return cocktail_core_css_parsers_CSSStyleSerializer.serializeColor(value13);
			case 21:
				var value14 = property[2];
				return cocktail_core_css_parsers_CSSStyleSerializer.serializeTransformFunction(value14);
			case 13:
				var value15 = property[2];
				return cocktail_core_css_parsers_CSSStyleSerializer.serializeGroup(value15);
			case 14:
				var lineHeight = property[3];
				var fontSize = property[2];
				return cocktail_core_css_parsers_CSSStyleSerializer.serialize(fontSize) + "/" + cocktail_core_css_parsers_CSSStyleSerializer.serialize(lineHeight);
			case 15:
				var value16 = property[2];
				return cocktail_core_css_parsers_CSSStyleSerializer.serializeList(value16);
		}
	};
	cocktail_core_css_parsers_CSSStyleSerializer.serializeList = function (list) {
		var serializedList = "";
		var _g1 = 0;
		var _g = list.length;
		while (_g1 < _g) {
			var i = _g1++;
			serializedList += cocktail_core_css_parsers_CSSStyleSerializer.serialize(list[i]);
			if (i < list.length) serializedList += ",";
		}
		return serializedList;
	};
	cocktail_core_css_parsers_CSSStyleSerializer.serializeGroup = function (group) {
		var serializedGroup = "";
		var _g1 = 0;
		var _g = group.length;
		while (_g1 < _g) {
			var i = _g1++;
			serializedGroup += cocktail_core_css_parsers_CSSStyleSerializer.serialize(group[i]);
			if (i < group.length) serializedGroup += " ";
		}
		return serializedGroup;
	};
	cocktail_core_css_parsers_CSSStyleSerializer.serializeTransformFunction = function (transformFunction) {
		switch (transformFunction[1]) {
			case 0:
				var f = transformFunction[7];
				var e = transformFunction[6];
				var d = transformFunction[5];
				var c = transformFunction[4];
				var b = transformFunction[3];
				var a = transformFunction[2];
				return "matrix(" + (a == null ? "null" : "" + a) + "," + (b == null ? "null" : "" + b) + "," + (c == null ? "null" : "" + c) + "," + (d == null ? "null" : "" + d) + "," + (e == null ? "null" : "" + e) + "," + (f == null ? "null" : "" + f) + ")";
			case 1:
				var ty = transformFunction[3];
				var tx = transformFunction[2];
				return "translate(" + cocktail_core_css_parsers_CSSStyleSerializer.serializeTranslation(tx) + "," + cocktail_core_css_parsers_CSSStyleSerializer.serializeTranslation(ty) + ")";
			case 2:
				var tx1 = transformFunction[2];
				return "translateX(" + cocktail_core_css_parsers_CSSStyleSerializer.serializeTranslation(tx1) + ")";
			case 3:
				var ty1 = transformFunction[2];
				return "translateY(" + cocktail_core_css_parsers_CSSStyleSerializer.serializeTranslation(ty1) + ")";
			case 10:
				var angleY = transformFunction[3];
				var angleX = transformFunction[2];
				return "skew(" + cocktail_core_css_parsers_CSSStyleSerializer.serializeAngle(angleX) + "," + cocktail_core_css_parsers_CSSStyleSerializer.serializeAngle(angleY) + ")";
			case 8:
				var angleX1 = transformFunction[2];
				return "skewX(" + cocktail_core_css_parsers_CSSStyleSerializer.serializeAngle(angleX1) + ")";
			case 9:
				var angleY1 = transformFunction[2];
				return "skewY(" + cocktail_core_css_parsers_CSSStyleSerializer.serializeAngle(angleY1) + ")";
			case 7:
				var angle = transformFunction[2];
				return "rotate(" + cocktail_core_css_parsers_CSSStyleSerializer.serializeAngle(angle) + ")";
			case 4:
				var sy = transformFunction[3];
				var sx = transformFunction[2];
				return "scale(" + (sx == null ? "null" : "" + sx) + "," + (sy == null ? "null" : "" + sy) + ")";
			case 5:
				var sx1 = transformFunction[2];
				return "scaleX(" + (sx1 == null ? "null" : "" + sx1) + ")";
			case 6:
				var sy1 = transformFunction[2];
				return "scaleY(" + (sy1 == null ? "null" : "" + sy1) + ")";
		}
	};
	cocktail_core_css_parsers_CSSStyleSerializer.serializeTranslation = function (translation) {
		switch (translation[1]) {
			case 1:
				var value = translation[2];
				return cocktail_core_css_parsers_CSSStyleSerializer.serializeLength(value);
			case 2:
				var value1 = translation[2];
				return value1 + "%";
			case 0:
				var value2 = translation[2];
				if (value2 == null) return "null"; else return "" + value2;
				break;
		}
	};
	cocktail_core_css_parsers_CSSStyleSerializer.serializeColor = function (color) {
		switch (color[1]) {
			case 7:
				var value = color[2];
				return cocktail_core_css_parsers_CSSStyleSerializer.serializeColorKeyword(value);
			case 0:
				var blue = color[4];
				var green = color[3];
				var red = color[2];
				return "rgb(" + (red == null ? "null" : "" + red) + "," + (green == null ? "null" : "" + green) + "," + (blue == null ? "null" : "" + blue) + ")";
			case 1:
				var blue1 = color[4];
				var green1 = color[3];
				var red1 = color[2];
				return "rgb(" + (red1 == null ? "null" : "" + red1) + "%," + (green1 == null ? "null" : "" + green1) + "%," + (blue1 == null ? "null" : "" + blue1) + "%)";
			case 2:
				var alpha = color[5];
				var blue2 = color[4];
				var green2 = color[3];
				var red2 = color[2];
				return "rgba(" + (red2 == null ? "null" : "" + red2) + "," + (green2 == null ? "null" : "" + green2) + "," + (blue2 == null ? "null" : "" + blue2) + "," + (alpha == null ? "null" : "" + alpha) + ")";
			case 3:
				var alpha1 = color[5];
				var blue3 = color[4];
				var green3 = color[3];
				var red3 = color[2];
				return "rgba(" + (red3 == null ? "null" : "" + red3) + "%," + (green3 == null ? "null" : "" + green3) + "%," + (blue3 == null ? "null" : "" + blue3) + "%," + (alpha1 == null ? "null" : "" + alpha1) + "%)";
			case 8:
				return "transparent";
			case 5:
				var lightness = color[4];
				var saturation = color[3];
				var hue = color[2];
				return "hsl(" + (hue == null ? "null" : "" + hue) + "," + (saturation == null ? "null" : "" + saturation) + "," + (lightness == null ? "null" : "" + lightness) + ")";
			case 6:
				var alpha2 = color[5];
				var lightness1 = color[4];
				var saturation1 = color[3];
				var hue1 = color[2];
				return "hsl(" + (hue1 == null ? "null" : "" + hue1) + "," + (saturation1 == null ? "null" : "" + saturation1) + "," + (lightness1 == null ? "null" : "" + lightness1) + "," + (alpha2 == null ? "null" : "" + alpha2) + ")";
			case 4:
				var value1 = color[2];
				return "#" + value1;
			case 9:
				return "currentColor";
		}
	};
	cocktail_core_css_parsers_CSSStyleSerializer.serializeColorKeyword = function (keyword) {
		switch (keyword[1]) {
			case 0:
				return "aliceblue";
			case 1:
				return "antiquewhite";
			case 2:
				return "aqua";
			case 3:
				return "aquamarine";
			case 4:
				return "azure";
			case 5:
				return "beige";
			case 6:
				return "bisque";
			case 9:
				return "blue";
			case 7:
				return "black";
			case 8:
				return "blanchedalmond";
			case 10:
				return "blueviolet";
			case 11:
				return "brown";
			case 12:
				return "burlywood";
			case 13:
				return "cadetblue";
			case 14:
				return "chartreuse";
			case 15:
				return "chocolate";
			case 16:
				return "coral";
			case 17:
				return "cornflowerblue";
			case 18:
				return "cornsilk";
			case 19:
				return "crimson";
			case 20:
				return "cyan";
			case 21:
				return "darkblue";
			case 22:
				return "darkcyan";
			case 23:
				return "darkgoldenrod";
			case 24:
				return "darkgray";
			case 25:
				return "darkgreen";
			case 26:
				return "darkgrey";
			case 27:
				return "darkkhaki";
			case 28:
				return "darkmagenta";
			case 29:
				return "darkolivegreen";
			case 30:
				return "darkorange";
			case 31:
				return "darkorchid";
			case 32:
				return "darkred";
			case 33:
				return "darksalmon";
			case 34:
				return "darkseagreen";
			case 35:
				return "darkslateblue";
			case 36:
				return "darkslategray";
			case 37:
				return "darkslategrey";
			case 38:
				return "darkturquoise";
			case 39:
				return "darkviolet";
			case 40:
				return "deeppink";
			case 41:
				return "deepskyblue";
			case 42:
				return "dimgray";
			case 43:
				return "dimgrey";
			case 44:
				return "dodgerblue";
			case 45:
				return "firebrick";
			case 46:
				return "floralwhite";
			case 47:
				return "forestgreen";
			case 48:
				return "fuchsia";
			case 49:
				return "gainsboro";
			case 50:
				return "ghostwhite";
			case 51:
				return "gold";
			case 52:
				return "goldenrod";
			case 53:
				return "gray";
			case 56:
				return "grey";
			case 55:
				return "greenyellow";
			case 57:
				return "honeydew";
			case 58:
				return "hotpink";
			case 60:
				return "indigo";
			case 61:
				return "ivory";
			case 59:
				return "indianred";
			case 62:
				return "khaki";
			case 63:
				return "lavender";
			case 64:
				return "lavenderblush";
			case 65:
				return "lawngreen";
			case 66:
				return "lemonchiffon";
			case 67:
				return "lightblue";
			case 68:
				return "lightcoral";
			case 69:
				return "lightcyan";
			case 70:
				return "lightgoldenrodyellow";
			case 71:
				return "lightgray";
			case 72:
				return "lightgreen";
			case 73:
				return "lightgrey";
			case 74:
				return "lightpink";
			case 75:
				return "lightsalmon";
			case 76:
				return "lightseagreen";
			case 77:
				return "lightskyblue";
			case 78:
				return "lightslategray";
			case 79:
				return "lightslategrey";
			case 80:
				return "lightsteelblue";
			case 81:
				return "lightyellow";
			case 82:
				return "lime";
			case 83:
				return "limegreen";
			case 84:
				return "linen";
			case 85:
				return "magenta";
			case 86:
				return "marron";
			case 87:
				return "mediumaquamarine";
			case 88:
				return "mediumblue";
			case 89:
				return "mediumorchid";
			case 90:
				return "mediumpurple";
			case 91:
				return "mediumseagreen";
			case 92:
				return "mediumslateblue";
			case 93:
				return "mediumspringgreen";
			case 94:
				return "mediumturquoise";
			case 95:
				return "mediumvioletred";
			case 96:
				return "midnightblue";
			case 97:
				return "mintcream";
			case 98:
				return "mistyrose";
			case 99:
				return "moccasin";
			case 100:
				return "navajowhite";
			case 102:
				return "oldlace";
			case 104:
				return "olivedrab";
			case 106:
				return "orangered";
			case 107:
				return "orchid";
			case 108:
				return "palegoldenrod";
			case 109:
				return "palegreen";
			case 110:
				return "paleturquoise";
			case 111:
				return "palevioletred";
			case 112:
				return "papayawhip";
			case 113:
				return "peachpuff";
			case 114:
				return "peru";
			case 115:
				return "pink";
			case 116:
				return "plum";
			case 117:
				return "powderblue";
			case 120:
				return "rosybrown";
			case 121:
				return "royalblue";
			case 122:
				return "saddlebrown";
			case 123:
				return "salmon";
			case 124:
				return "sandybrown";
			case 125:
				return "seagreen";
			case 126:
				return "seashell";
			case 127:
				return "sienna";
			case 128:
				return "silver";
			case 129:
				return "skyblue";
			case 130:
				return "slateblue";
			case 131:
				return "slategray";
			case 132:
				return "slategrey";
			case 133:
				return "snow";
			case 134:
				return "springgreen";
			case 135:
				return "steelblue";
			case 136:
				return "tan";
			case 138:
				return "thisle";
			case 139:
				return "tomato";
			case 140:
				return "turquoise";
			case 141:
				return "violet";
			case 142:
				return "wheat";
			case 143:
				return "white";
			case 144:
				return "whitesmoke";
			case 146:
				return "yellowgreen";
			case 119:
				return "red";
			case 118:
				return "purple";
			case 54:
				return "green";
			case 103:
				return "olive";
			case 145:
				return "yellow";
			case 101:
				return "navy";
			case 105:
				return "orange";
			case 137:
				return "teal";
		}
	};
	cocktail_core_css_parsers_CSSStyleSerializer.serializeResolution = function (resolution) {
		switch (resolution[1]) {
			case 1:
				var value = resolution[2];
				return value + "dcpm";
			case 0:
				var value1 = resolution[2];
				return value1 + "dpi";
			case 2:
				var value2 = resolution[2];
				return value2 + "dppx";
		}
	};
	cocktail_core_css_parsers_CSSStyleSerializer.serializeLength = function (length) {
		switch (length[1]) {
			case 0:
				var value = length[2];
				return value + "px";
			case 6:
				var value1 = length[2];
				return value1 + "em";
			case 5:
				var value2 = length[2];
				return value2 + "in";
			case 4:
				var value3 = length[2];
				return value3 + "pc";
			case 8:
				var value4 = length[2];
				return value4 + "ex";
			case 3:
				var value5 = length[2];
				return value5 + "pt";
			case 2:
				var value6 = length[2];
				return value6 + "mm";
			case 1:
				var value7 = length[2];
				return value7 + "cm";
			case 9:
				var value8 = length[2];
				return value8 + "ch";
			case 7:
				var value9 = length[2];
				return value9 + "rem";
			case 13:
				var value10 = length[2];
				return value10 + "vmax";
			case 12:
				var value11 = length[2];
				return value11 + "vmin";
			case 10:
				var value12 = length[2];
				return value12 + "vw";
			case 11:
				var value13 = length[2];
				return value13 + "vh";
		}
	};
	cocktail_core_css_parsers_CSSStyleSerializer.serializeFrequency = function (frequency) {
		switch (frequency[1]) {
			case 0:
				var value = frequency[2];
				return value + "hz";
			case 1:
				var value1 = frequency[2];
				return value1 + "khz";
		}
	};
	cocktail_core_css_parsers_CSSStyleSerializer.serializeAngle = function (angle) {
		switch (angle[1]) {
			case 0:
				var value = angle[2];
				return value + "deg";
			case 2:
				var value1 = angle[2];
				return value1 + "rad";
			case 3:
				var value2 = angle[2];
				return value2 + "turn";
			case 1:
				var value3 = angle[2];
				return value3 + "grad";
		}
	};
	cocktail_core_css_parsers_CSSStyleSerializer.serializeTime = function (time) {
		switch (time[1]) {
			case 0:
				var value = time[2];
				return value + "s";
			case 1:
				var value1 = time[2];
				return value1 + "ms";
		}
	};
	cocktail_core_css_parsers_CSSStyleSerializer.serializeKeyword = function (keyword) {
		switch (keyword[1]) {
			case 0:
				return "normal";
			case 1:
				return "bold";
			case 2:
				return "bolder";
			case 3:
				return "lighter";
			case 5:
				return "oblique";
			case 4:
				return "italic";
			case 6:
				return "small-caps";
			case 7:
				return "pre";
			case 8:
				return "no-wrap";
			case 9:
				return "pre-wrap";
			case 10:
				return "pre-line";
			case 11:
				return "left";
			case 12:
				return "right";
			case 13:
				return "center";
			case 14:
				return "justify";
			case 15:
				return "capitalize";
			case 16:
				return "uppercase";
			case 17:
				return "lowercase";
			case 18:
				return "none";
			case 19:
				return "baseline";
			case 20:
				return "sub";
			case 21:
				return "super";
			case 22:
				return "top";
			case 23:
				return "text-top";
			case 24:
				return "middle";
			case 25:
				return "bottom";
			case 26:
				return "text-bottom";
			case 27:
				return "auto";
			case 28:
				return "block";
			case 29:
				return "inline-block";
			case 30:
				return "inline";
			case 31:
				return "both";
			case 32:
				return "static";
			case 33:
				return "relative";
			case 34:
				return "absolute";
			case 35:
				return "fixed";
			case 36:
				return "visible";
			case 37:
				return "hidden";
			case 38:
				return "scroll";
			case 39:
				return "border-box";
			case 40:
				return "padding-box";
			case 41:
				return "content-box";
			case 42:
				return "contain";
			case 43:
				return "cover";
			case 44:
				return "crosshair";
			case 45:
				return "default";
			case 46:
				return "pointer";
			case 47:
				return "text";
			case 48:
				return "all";
			case 49:
				return "ease";
			case 50:
				return "linear";
			case 51:
				return "ease-in";
			case 52:
				return "ease-out";
			case 53:
				return "ease-in-out";
			case 54:
				return "step-start";
			case 55:
				return "step-end";
			case 56:
				return "start";
			case 57:
				return "end";
			case 58:
				return "xx-small";
			case 59:
				return "x-small";
			case 60:
				return "small";
			case 64:
				return "xx-large";
			case 63:
				return "x-large";
			case 62:
				return "large";
			case 61:
				return "medium";
			case 65:
				return "larger";
			case 66:
				return "smaller";
			case 70:
				return "space";
			case 71:
				return "round";
			case 69:
				return "repeat-y";
			case 68:
				return "repeat-x";
			case 72:
				return "no-repeat";
			case 67:
				return "repeat";
			case 73:
				return "thin";
			case 74:
				return "thick";
			case 75:
				return "dotted";
			case 76:
				return "dashed";
			case 77:
				return "solid";
			case 78:
				return "double";
			case 79:
				return "groove";
			case 80:
				return "ridge";
			case 81:
				return "inset";
			case 82:
				return "outset";
			case 83:
				return "invert";
			case 84:
				return "underline";
			case 85:
				return "overline";
			case 86:
				return "line-through";
			case 87:
				return "blink";
		}
	};
	cocktail_core_css_parsers_CSSStyleSerializer.prototype = {
		__class__: cocktail_core_css_parsers_CSSStyleSerializer
	};
	var cocktail_core_css_parsers_SelectorSerializer = function () {
	};
	$hxClasses["cocktail.core.css.parsers.SelectorSerializer"] = cocktail_core_css_parsers_SelectorSerializer;
	cocktail_core_css_parsers_SelectorSerializer.__name__ = ["cocktail", "core", "css", "parsers", "SelectorSerializer"];
	cocktail_core_css_parsers_SelectorSerializer.serialize = function (selector) {
		var serializedSelector = "";
		var _g1 = 0;
		var _g = selector.components.length;
		while (_g1 < _g) {
			var i = _g1++;
			var component = selector.components[i];
			switch (component[1]) {
				case 0:
					var value = component[2];
					serializedSelector += cocktail_core_css_parsers_SelectorSerializer.serializeSimpleSelectorSequence(value);
					break;
				case 1:
					var value1 = component[2];
					serializedSelector += cocktail_core_css_parsers_SelectorSerializer.serializeCombinator(value1);
					break;
			}
		}
		serializedSelector += cocktail_core_css_parsers_SelectorSerializer.serializePseudoElement(selector.pseudoElement);
		return serializedSelector;
	};
	cocktail_core_css_parsers_SelectorSerializer.serializePseudoElement = function (pseudoElement) {
		switch (pseudoElement[1]) {
			case 0:
				return "";
			case 2:
				return "::first-letter";
			case 1:
				return "::first-line";
			case 3:
				return "::before";
			case 4:
				return "::after";
		}
	};
	cocktail_core_css_parsers_SelectorSerializer.serializeSimpleSelectorSequence = function (simpleSelectorSequence) {
		var serializedSimpleSelectorSequence = "";
		serializedSimpleSelectorSequence += cocktail_core_css_parsers_SelectorSerializer.serializeStartValue(simpleSelectorSequence.startValue);
		var _g1 = 0;
		var _g = simpleSelectorSequence.simpleSelectors.length;
		while (_g1 < _g) {
			var i = _g1++;
			var simpleSelector = simpleSelectorSequence.simpleSelectors[i];
			serializedSimpleSelectorSequence += cocktail_core_css_parsers_SelectorSerializer.serializeSimpleSelector(simpleSelector);
		}
		return serializedSimpleSelectorSequence;
	};
	cocktail_core_css_parsers_SelectorSerializer.serializeCombinator = function (combinator) {
		switch (combinator[1]) {
			case 0:
				return " ";
			case 1:
				return " > ";
			case 2:
				return " + ";
			case 3:
				return " ~ ";
		}
	};
	cocktail_core_css_parsers_SelectorSerializer.serializeStartValue = function (selectorStartValue) {
		switch (selectorStartValue[1]) {
			case 0:
				return "*";
			case 1:
				var value = selectorStartValue[2];
				return value;
		}
	};
	cocktail_core_css_parsers_SelectorSerializer.serializeSimpleSelector = function (simpleSelector) {
		switch (simpleSelector[1]) {
			case 3:
				var value = simpleSelector[2];
				return "#" + value;
			case 2:
				var value1 = simpleSelector[2];
				return "." + value1;
			case 0:
				var value2 = simpleSelector[2];
				return cocktail_core_css_parsers_SelectorSerializer.serializeAttributeSelector(value2);
			case 1:
				var value3 = simpleSelector[2];
				return cocktail_core_css_parsers_SelectorSerializer.serializePseudoClassSelector(value3);
		}
	};
	cocktail_core_css_parsers_SelectorSerializer.serializeAttributeSelector = function (attributeSelector) {
		switch (attributeSelector[1]) {
			case 0:
				var value = attributeSelector[2];
				return "[" + value + "]";
			case 1:
				var value1 = attributeSelector[3];
				var name = attributeSelector[2];
				return "[" + name + "=\"" + value1 + "\"]";
			case 2:
				var value2 = attributeSelector[3];
				var name1 = attributeSelector[2];
				return "[" + name1 + "~=\"" + value2 + "\"]";
			case 3:
				var value3 = attributeSelector[3];
				var name2 = attributeSelector[2];
				return "[" + name2 + "^=\"" + value3 + "\"]";
			case 4:
				var value4 = attributeSelector[3];
				var name3 = attributeSelector[2];
				return "[" + name3 + "$=\"" + value4 + "\"]";
			case 5:
				var value5 = attributeSelector[3];
				var name4 = attributeSelector[2];
				return "[" + name4 + "*=\"" + value5 + "\"]";
			case 6:
				var value6 = attributeSelector[3];
				var name5 = attributeSelector[2];
				return "[" + name5 + "|=\"" + value6 + "\"]";
		}
	};
	cocktail_core_css_parsers_SelectorSerializer.serializePseudoClassSelector = function (pseudoClassSelector) {
		switch (pseudoClassSelector[1]) {
			case 1:
				var value = pseudoClassSelector[2];
				return cocktail_core_css_parsers_SelectorSerializer.serializeStructuralPseudoClassSelector(value);
			case 2:
				var value1 = pseudoClassSelector[2];
				return cocktail_core_css_parsers_SelectorSerializer.serializeLinkPseudoClassSelector(value1);
			case 3:
				return ":target";
			case 4:
				return ":fullscreen";
			case 5:
				var value2 = pseudoClassSelector[2];
				return cocktail_core_css_parsers_SelectorSerializer.serializeLangPseudoClassSelector(value2);
			case 6:
				var value3 = pseudoClassSelector[2];
				return cocktail_core_css_parsers_SelectorSerializer.serializeUserActionPseudoClassSelector(value3);
			case 7:
				var value4 = pseudoClassSelector[2];
				return cocktail_core_css_parsers_SelectorSerializer.serializeUIElementStatePseudoClass(value4);
			case 8:
				var value5 = pseudoClassSelector[2];
				return ":not(" + cocktail_core_css_parsers_SelectorSerializer.serializeSimpleSelectorSequence(value5) + ")";
			case 0:
				return "";
		}
	};
	cocktail_core_css_parsers_SelectorSerializer.serializeUIElementStatePseudoClass = function (uiElementStateSelector) {
		switch (uiElementStateSelector[1]) {
			case 0:
				return ":enabled";
			case 1:
				return ":disabled";
			case 2:
				return ":checked";
		}
	};
	cocktail_core_css_parsers_SelectorSerializer.serializeLangPseudoClassSelector = function (langs) {
		var serializedLangSelector = ":lang(";
		var _g1 = 0;
		var _g = langs.length;
		while (_g1 < _g) {
			var i = _g1++;
			serializedLangSelector += langs[i];
			if (i < langs.length) serializedLangSelector += "-";
		}
		serializedLangSelector += ")";
		return serializedLangSelector;
	};
	cocktail_core_css_parsers_SelectorSerializer.serializeLinkPseudoClassSelector = function (linkPseudoClassSelector) {
		switch (linkPseudoClassSelector[1]) {
			case 1:
				return ":visited";
			case 0:
				return ":link";
		}
	};
	cocktail_core_css_parsers_SelectorSerializer.serializeUserActionPseudoClassSelector = function (userActionPseudoClassSelector) {
		switch (userActionPseudoClassSelector[1]) {
			case 0:
				return ":active";
			case 1:
				return ":hover";
			case 2:
				return ":focus";
		}
	};
	cocktail_core_css_parsers_SelectorSerializer.serializeStructuralPseudoClassSelector = function (structuralpseudoClassSelector) {
		switch (structuralpseudoClassSelector[1]) {
			case 0:
				return ":root";
			case 1:
				return ":first-child";
			case 2:
				return ":last-child";
			case 3:
				return ":first-of-type";
			case 4:
				return ":last-of-type";
			case 5:
				return ":only-child";
			case 6:
				return ":only-of-type";
			case 7:
				return ":empty";
			default:
				return "";
		}
	};
	cocktail_core_css_parsers_SelectorSerializer.prototype = {
		__class__: cocktail_core_css_parsers_SelectorSerializer
	};
	var cocktail_core_event_EventCallback = function () {
		cocktail_core_event_EventTarget.call(this);
	};
	$hxClasses["cocktail.core.event.EventCallback"] = cocktail_core_event_EventCallback;
	cocktail_core_event_EventCallback.__name__ = ["cocktail", "core", "event", "EventCallback"];
	cocktail_core_event_EventCallback.__super__ = cocktail_core_event_EventTarget;
	cocktail_core_event_EventCallback.prototype = $extend(cocktail_core_event_EventTarget.prototype, {
		updateCallbackListener: function (eventType, newListener, oldListener) {
			if (oldListener != null) this.removeEventListener(eventType, oldListener);
			if (newListener != null) this.addEventListener(eventType, newListener);
		}
		, set_onclick: function (value) {
			this.updateCallbackListener("click", value, this.onclick);
			return this.onclick = value;
		}
		, set_ondblclick: function (value) {
			this.updateCallbackListener("dblclick", value, this.ondblclick);
			return this.ondblclick = value;
		}
		, set_onmousedown: function (value) {
			this.updateCallbackListener("mousedown", value, this.onmousedown);
			return this.onmousedown = value;
		}
		, set_onmouseup: function (value) {
			this.updateCallbackListener("mouseup", value, this.onmouseup);
			return this.onmouseup = value;
		}
		, set_onmouseover: function (value) {
			this.updateCallbackListener("mouseover", value, this.onmouseover);
			return this.onmouseover = value;
		}
		, set_onmouseout: function (value) {
			this.updateCallbackListener("mouseout", value, this.onmouseout);
			return this.onmouseout = value;
		}
		, set_onmousemove: function (value) {
			this.updateCallbackListener("mousemove", value, this.onmousemove);
			return this.onmousemove = value;
		}
		, set_onmousewheel: function (value) {
			this.updateCallbackListener("wheel", value, this.onmousewheel);
			return this.onmousewheel = value;
		}
		, set_onkeydown: function (value) {
			this.updateCallbackListener("keydown", value, this.onkeydown);
			return this.onkeydown = value;
		}
		, set_onkeyup: function (value) {
			this.updateCallbackListener("keyup", value, this.onkeyup);
			return this.onkeyup = value;
		}
		, set_onfocus: function (value) {
			this.updateCallbackListener("focus", value, this.onfocus);
			return this.onfocus = value;
		}
		, set_onblur: function (value) {
			this.updateCallbackListener("blur", value, this.onblur);
			return this.onblur = value;
		}
		, set_onresize: function (value) {
			this.updateCallbackListener("resize", value, this.onresize);
			return this.onresize = value;
		}
		, set_onfullscreenchange: function (value) {
			this.updateCallbackListener("fullscreenchange", value, this.onfullscreenchange);
			return this.onfullscreenchange = value;
		}
		, set_onscroll: function (value) {
			this.updateCallbackListener("scroll", value, this.onscroll);
			return this.onscroll = value;
		}
		, set_onload: function (value) {
			this.updateCallbackListener("load", value, this.onload);
			return this.onload = value;
		}
		, set_onerror: function (value) {
			this.updateCallbackListener("error", value, this.onerror);
			return this.onerror = value;
		}
		, set_onchange: function (value) {
			this.updateCallbackListener("change", value, this.onchange);
			return this.onchange = value;
		}
		, set_oninput: function (value) {
			this.updateCallbackListener("input", value, this.oninput);
			return this.oninput = value;
		}
		, set_onreset: function (value) {
			this.updateCallbackListener("reset", value, this.onreset);
			return this.onreset = value;
		}
		, set_onsubmit: function (value) {
			this.updateCallbackListener("submit", value, this.onsubmit);
			return this.onsubmit = value;
		}
		, set_onloadstart: function (value) {
			this.updateCallbackListener("loadstart", value, this.onloadstart);
			return this.onloadstart = value;
		}
		, set_onprogress: function (value) {
			this.updateCallbackListener("progress", value, this.onprogress);
			return this.onprogress = value;
		}
		, set_onsuspend: function (value) {
			this.updateCallbackListener("suspend", value, this.onsuspend);
			return this.onsuspend = value;
		}
		, set_onemptied: function (value) {
			this.updateCallbackListener("emptied", value, this.onemptied);
			return this.onemptied = value;
		}
		, set_onstalled: function (value) {
			this.updateCallbackListener("stalled", value, this.onstalled);
			return this.onstalled = value;
		}
		, set_onloadedmetadata: function (value) {
			this.updateCallbackListener("loadedmetadata", value, this.onloadedmetadata);
			return this.onloadedmetadata = value;
		}
		, set_onloadeddata: function (value) {
			this.updateCallbackListener("loadeddata", value, this.onloadeddata);
			return this.onloadeddata = value;
		}
		, set_oncanplay: function (value) {
			this.updateCallbackListener("canplay", value, this.oncanplay);
			return this.oncanplay = value;
		}
		, set_oncanplaythrough: function (value) {
			this.updateCallbackListener("canplaythrough", value, this.oncanplaythrough);
			return this.oncanplaythrough = value;
		}
		, set_onplaying: function (value) {
			this.updateCallbackListener("playing", value, this.onplaying);
			return this.onplaying = value;
		}
		, set_onwaiting: function (value) {
			this.updateCallbackListener("waiting", value, this.onwaiting);
			return this.onwaiting = value;
		}
		, set_onseeking: function (value) {
			this.updateCallbackListener("seeking", value, this.onseeking);
			return this.set_onwaiting(value);
		}
		, set_onseeked: function (value) {
			this.updateCallbackListener("seeked", value, this.onseeked);
			return this.onseeked = value;
		}
		, set_onended: function (value) {
			this.updateCallbackListener("ended", value, this.onended);
			return this.onended = value;
		}
		, set_ondurationchange: function (value) {
			this.updateCallbackListener("durationchange", value, this.ondurationchange);
			return this.ondurationchange = value;
		}
		, set_ontimeupdate: function (value) {
			this.updateCallbackListener("timeupdate", value, this.ontimeupdate);
			return this.ontimeupdate = value;
		}
		, set_onplay: function (value) {
			this.updateCallbackListener("play", value, this.onplay);
			return this.onplay = value;
		}
		, set_onpause: function (value) {
			this.updateCallbackListener("pause", value, this.onpause);
			return this.onpause = value;
		}
		, set_onvolumechange: function (value) {
			this.updateCallbackListener("volumechange", value, this.onvolumechange);
			return this.onvolumechange = value;
		}
		, set_ontransitionend: function (value) {
			this.updateCallbackListener("transitionend", value, this.ontransitionend);
			return this.ontransitionend = value;
		}
		, set_onpopstate: function (value) {
			this.updateCallbackListener("popstate", value, this.onpopstate);
			return this.onpopstate = value;
		}
		, __class__: cocktail_core_event_EventCallback
		, __properties__: { set_onpopstate: "set_onpopstate", set_ontransitionend: "set_ontransitionend", set_onvolumechange: "set_onvolumechange", set_onpause: "set_onpause", set_onplay: "set_onplay", set_ontimeupdate: "set_ontimeupdate", set_ondurationchange: "set_ondurationchange", set_onended: "set_onended", set_onseeked: "set_onseeked", set_onseeking: "set_onseeking", set_onwaiting: "set_onwaiting", set_onplaying: "set_onplaying", set_oncanplaythrough: "set_oncanplaythrough", set_oncanplay: "set_oncanplay", set_onloadeddata: "set_onloadeddata", set_onloadedmetadata: "set_onloadedmetadata", set_onstalled: "set_onstalled", set_onemptied: "set_onemptied", set_onsuspend: "set_onsuspend", set_onprogress: "set_onprogress", set_onloadstart: "set_onloadstart", set_onsubmit: "set_onsubmit", set_onreset: "set_onreset", set_oninput: "set_oninput", set_onchange: "set_onchange", set_onerror: "set_onerror", set_onload: "set_onload", set_onscroll: "set_onscroll", set_onfullscreenchange: "set_onfullscreenchange", set_onresize: "set_onresize", set_onblur: "set_onblur", set_onfocus: "set_onfocus", set_onkeyup: "set_onkeyup", set_onkeydown: "set_onkeydown", set_onmousewheel: "set_onmousewheel", set_onmousemove: "set_onmousemove", set_onmouseout: "set_onmouseout", set_onmouseover: "set_onmouseover", set_onmouseup: "set_onmouseup", set_onmousedown: "set_onmousedown", set_ondblclick: "set_ondblclick", set_onclick: "set_onclick" }
	});
	var cocktail_core_dom_Node = function () {
		cocktail_core_event_EventCallback.call(this);
		this.initChildNodes();
	};
	$hxClasses["cocktail.core.dom.Node"] = cocktail_core_dom_Node;
	cocktail_core_dom_Node.__name__ = ["cocktail", "core", "dom", "Node"];
	cocktail_core_dom_Node.__super__ = cocktail_core_event_EventCallback;
	cocktail_core_dom_Node.prototype = $extend(cocktail_core_event_EventCallback.prototype, {
		initChildNodes: function () {
			this.childNodes = [];
		}
		, removeChild: function (oldChild) {
			oldChild.parentNode = null;
			HxOverrides.remove(this.childNodes, oldChild);
			return oldChild;
		}
		, appendChild: function (newChild) {
			this.removeFromParentIfNecessary(newChild);
			newChild.parentNode = this;
			this.childNodes.push(newChild);
			return newChild;
		}
		, insertBefore: function (newChild, refChild) {
			if (refChild == null) this.appendChild(newChild); else {
				var length = this.childNodes.length;
				var _g = 0;
				while (_g < length) {
					var i = _g++;
					if (this.childNodes[i] == refChild) {
						this.childNodes.splice(i, 0, newChild);
						this.removeFromParentIfNecessary(newChild);
						newChild.parentNode = this;
						return newChild;
					}
				}
				throw new js__$Boot_HaxeError(8);
			}
			return newChild;
		}
		, isSameNode: function (other) {
			return other == this;
		}
		, replaceChild: function (newChild, oldChild) {
			var length = this.childNodes.length;
			var _g = 0;
			while (_g < length) {
				var i = _g++;
				if (this.childNodes[i] == oldChild) {
					this.removeChild(oldChild);
					this.appendChild(newChild);
				}
			}
			return oldChild;
		}
		, hasChildNodes: function () {
			return this.childNodes.length > 0;
		}
		, cloneNode: function (deep) {
			var clonedNode = this.doCloneNode();
			if (deep == true) {
				var childLength = this.childNodes.length;
				var _g = 0;
				while (_g < childLength) {
					var i = _g++;
					clonedNode.appendChild(this.childNodes[i].cloneNode(deep));
				}
			}
			return clonedNode;
		}
		, hasAttributes: function () {
			return false;
		}
		, getTargetAncestors: function () {
			var parent = this.parentNode;
			var targetAncestors = cocktail_core_event_EventCallback.prototype.getTargetAncestors.call(this);
			while (parent != null) {
				targetAncestors.push(parent);
				parent = parent.parentNode;
			}
			return targetAncestors;
		}
		, doCloneNode: function () {
			return new cocktail_core_dom_Node();
		}
		, removeFromParentIfNecessary: function (newChild) {
			if (newChild.parentNode != null) {
				var parentNode = newChild.parentNode;
				parentNode.removeChild(newChild);
			}
		}
		, get_firstChild: function () {
			if (this.hasChildNodes() == true) return this.childNodes[0]; else return null;
		}
		, get_lastChild: function () {
			if (this.hasChildNodes() == true) return this.childNodes[this.childNodes.length - 1]; else return null;
		}
		, get_nextSibling: function () {
			if (this.parentNode == null) return null;
			if (this.parentNode.get_lastChild() != this) {
				var parentChildNodes = this.parentNode.childNodes;
				var length = parentChildNodes.length;
				var _g = 0;
				while (_g < length) {
					var i = _g++;
					if (parentChildNodes[i] == this) return parentChildNodes[i + 1];
				}
			}
			return null;
		}
		, get_previousSibling: function () {
			if (this.parentNode == null) return null;
			if (this.parentNode.get_firstChild() != this) {
				var length = this.parentNode.childNodes.length;
				var _g = 0;
				while (_g < length) {
					var i = _g++;
					if (this.parentNode.childNodes[i] == this) return this.parentNode.childNodes[i - 1];
				}
			}
			return null;
		}
		, get_nodeType: function () {
			return -1;
		}
		, get_nodeValue: function () {
			return null;
		}
		, set_nodeValue: function (value) {
			if (value != null) throw new js__$Boot_HaxeError(7);
			return value;
		}
		, set_ownerDocument: function (value) {
			return this.ownerDocument = value;
		}
		, get_nodeName: function () {
			return null;
		}
		, get_textContent: function () {
			return null;
		}
		, __class__: cocktail_core_dom_Node
		, __properties__: $extend(cocktail_core_event_EventCallback.prototype.__properties__, { get_textContent: "get_textContent", set_ownerDocument: "set_ownerDocument", get_nodeName: "get_nodeName", set_nodeValue: "set_nodeValue", get_nodeValue: "get_nodeValue", get_nodeType: "get_nodeType", get_previousSibling: "get_previousSibling", get_nextSibling: "get_nextSibling", get_lastChild: "get_lastChild", get_firstChild: "get_firstChild" })
	});
	var cocktail_core_dom_Attr = function (name) {
		this.name = name;
		this.specified = false;
		cocktail_core_dom_Node.call(this);
	};
	$hxClasses["cocktail.core.dom.Attr"] = cocktail_core_dom_Attr;
	cocktail_core_dom_Attr.__name__ = ["cocktail", "core", "dom", "Attr"];
	cocktail_core_dom_Attr.__super__ = cocktail_core_dom_Node;
	cocktail_core_dom_Attr.prototype = $extend(cocktail_core_dom_Node.prototype, {
		initChildNodes: function () {
		}
		, doCloneNode: function () {
			var clonedAttr = new cocktail_core_dom_Attr(this.name);
			clonedAttr.specified = this.specified;
			clonedAttr.isId = this.isId;
			clonedAttr.set_value(this.get_value());
			return clonedAttr;
		}
		, get_nodeName: function () {
			return this.name;
		}
		, get_nodeType: function () {
			return 2;
		}
		, get_nodeValue: function () {
			return this.get_value();
		}
		, set_nodeValue: function (value) {
			return this.set_value(value);
		}
		, get_value: function () {
			if (this.value == null) return "";
			return this.value;
		}
		, set_value: function (value) {
			this.specified = true;
			return this.value = value;
		}
		, __class__: cocktail_core_dom_Attr
		, __properties__: $extend(cocktail_core_dom_Node.prototype.__properties__, { set_value: "set_value", get_value: "get_value" })
	});
	var cocktail_core_dom_CharacterData = function () {
		cocktail_core_dom_Node.call(this);
	};
	$hxClasses["cocktail.core.dom.CharacterData"] = cocktail_core_dom_CharacterData;
	cocktail_core_dom_CharacterData.__name__ = ["cocktail", "core", "dom", "CharacterData"];
	cocktail_core_dom_CharacterData.__super__ = cocktail_core_dom_Node;
	cocktail_core_dom_CharacterData.prototype = $extend(cocktail_core_dom_Node.prototype, {
		get_nodeValue: function () {
			return this.data;
		}
		, set_nodeValue: function (value) {
			return this.data = value;
		}
		, __class__: cocktail_core_dom_CharacterData
	});
	var cocktail_core_dom_Comment = function () {
		cocktail_core_dom_CharacterData.call(this);
	};
	$hxClasses["cocktail.core.dom.Comment"] = cocktail_core_dom_Comment;
	cocktail_core_dom_Comment.__name__ = ["cocktail", "core", "dom", "Comment"];
	cocktail_core_dom_Comment.__super__ = cocktail_core_dom_CharacterData;
	cocktail_core_dom_Comment.prototype = $extend(cocktail_core_dom_CharacterData.prototype, {
		get_nodeType: function () {
			return 8;
		}
		, __class__: cocktail_core_dom_Comment
	});
	var cocktail_core_dom_DOMConstants = function () {
	};
	$hxClasses["cocktail.core.dom.DOMConstants"] = cocktail_core_dom_DOMConstants;
	cocktail_core_dom_DOMConstants.__name__ = ["cocktail", "core", "dom", "DOMConstants"];
	cocktail_core_dom_DOMConstants.prototype = {
		__class__: cocktail_core_dom_DOMConstants
	};
	var cocktail_core_dom_DOMException = function () {
	};
	$hxClasses["cocktail.core.dom.DOMException"] = cocktail_core_dom_DOMException;
	cocktail_core_dom_DOMException.__name__ = ["cocktail", "core", "dom", "DOMException"];
	cocktail_core_dom_DOMException.prototype = {
		__class__: cocktail_core_dom_DOMException
	};
	var cocktail_core_dom_Document = function () {
		cocktail_core_dom_Node.call(this);
	};
	$hxClasses["cocktail.core.dom.Document"] = cocktail_core_dom_Document;
	cocktail_core_dom_Document.__name__ = ["cocktail", "core", "dom", "Document"];
	cocktail_core_dom_Document.__super__ = cocktail_core_dom_Node;
	cocktail_core_dom_Document.prototype = $extend(cocktail_core_dom_Node.prototype, {
		createElement: function (tagName) {
			return null;
		}
		, createTextNode: function (data) {
			var text = new cocktail_core_dom_Text();
			text.set_nodeValue(data);
			text.set_ownerDocument(this);
			return text;
		}
		, createComment: function (data) {
			var comment = new cocktail_core_dom_Comment();
			comment.set_nodeValue(data);
			return comment;
		}
		, createAttribute: function (name) {
			var attribute = new cocktail_core_dom_Attr(name);
			return attribute;
		}
		, createEvent: function (eventInterface) {
			switch (eventInterface) {
				case "Event":
					return new cocktail_core_event_Event();
				case "UIEvent":
					return new cocktail_core_event_UIEvent();
				case "CustomEvent":
					return new cocktail_core_event_CustomEvent();
				case "MouseEvent":
					return new cocktail_core_event_MouseEvent();
				case "KeyboardEvent":
					return new cocktail_core_event_KeyboardEvent();
				case "FocusEvent":
					return new cocktail_core_event_FocusEvent();
				case "WheelEvent":
					return new cocktail_core_event_WheelEvent();
				case "TransitionEvent":
					return new cocktail_core_event_TransitionEvent();
				case "PopStateEvent":
					return new cocktail_core_event_PopStateEvent();
				default:
					throw new js__$Boot_HaxeError(9);
			}
			return null;
		}
		, getElementById: function (elementId) {
			return this.doGetElementById(this.documentElement, elementId);
		}
		, doGetElementById: function (node, elementId) {
			if (node.get_nodeType() == 1) {
				if (node.hasChildNodes() == true) {
					var length = node.childNodes.length;
					var _g = 0;
					while (_g < length) {
						var i = _g++;
						if (node.childNodes[i].get_nodeType() == 1) {
							var matchingElement = this.doGetElementById(node.childNodes[i], elementId);
							if (matchingElement != null) return matchingElement;
						}
					}
				}
				if (node.getAttribute("id") == elementId) return node;
			}
			return null;
		}
		, getElementsByTagName: function (tagName) {
			if (this.documentElement == null) return [];
			return this.documentElement.getElementsByTagName(tagName);
		}
		, getElementsByClassName: function (className) {
			return this.documentElement.getElementsByClassName(className);
		}
		, get_nodeType: function () {
			return 9;
		}
		, __class__: cocktail_core_dom_Document
	});
	var cocktail_core_dom_Element = function (tagName) {
		this.tagName = tagName;
		this.initAttributes();
		cocktail_core_dom_Node.call(this);
	};
	$hxClasses["cocktail.core.dom.Element"] = cocktail_core_dom_Element;
	cocktail_core_dom_Element.__name__ = ["cocktail", "core", "dom", "Element"];
	cocktail_core_dom_Element.__super__ = cocktail_core_dom_Node;
	cocktail_core_dom_Element.prototype = $extend(cocktail_core_dom_Node.prototype, {
		initAttributes: function () {
			this.attributes = new cocktail_core_dom_NamedNodeMap();
		}
		, getAttribute: function (name) {
			var attribute = this.getAttributeNode(name);
			if (attribute != null) return attribute.get_value(); else return null;
		}
		, setAttribute: function (name, value) {
			var attribute = this.attributes.getNamedItem(name);
			if (attribute == null) {
				attribute = new cocktail_core_dom_Attr(name);
				this.attributes.setNamedItem(attribute);
				attribute.ownerElement = this;
			}
			attribute.set_value(value);
		}
		, getAttributeNode: function (name) {
			var attribute = this.attributes.getNamedItem(name);
			if (attribute != null) return attribute;
			return null;
		}
		, setAttributeNode: function (newAttr) {
			newAttr.ownerElement = this;
			return this.attributes.setNamedItem(newAttr);
		}
		, removeAttribute: function (name) {
			var removedAttribute = this.attributes.removeNamedItem(name);
			if (removedAttribute != null) removedAttribute.ownerElement = null;
		}
		, setIdAttribute: function (name, isId) {
			var idAttribute = this.attributes.getNamedItem(name);
			if (idAttribute == null) {
				idAttribute = new cocktail_core_dom_Attr(name);
				this.attributes.setNamedItem(idAttribute);
				idAttribute.ownerElement = this;
			}
			idAttribute.isId = isId;
		}
		, setIdAttributeNode: function (idAttr, isId) {
			idAttr.isId = isId;
			this.attributes.setNamedItem(idAttr);
		}
		, hasAttribute: function (name) {
			return this.attributes.getNamedItem(name) != null;
		}
		, getElementsByTagName: function (tagName) {
			var elements = [];
			this.doGetElementsByTagName(this, tagName, elements);
			return elements;
		}
		, getElementsByClassName: function (className) {
			var elements = [];
			this.doGetElementsByClassName(this, className, elements);
			return elements;
		}
		, doCloneNode: function () {
			var clonedElement = new cocktail_core_dom_Element(this.tagName);
			var length = this.attributes.get_length();
			var _g = 0;
			while (_g < length) {
				var i = _g++;
				var clonedAttr = this.attributes.item(i).cloneNode(false);
				clonedElement.setAttributeNode(clonedAttr);
			}
			return clonedElement;
		}
		, doGetElementsByTagName: function (node, tagName, elements) {
			if (node.hasChildNodes() == true) {
				var length = node.childNodes.length;
				var _g = 0;
				while (_g < length) {
					var i = _g++;
					var childNode = node.childNodes[i];
					if (childNode.get_nodeName() == tagName) elements.push(childNode); else if (tagName == "*" && childNode.get_nodeType() == 1) elements.push(childNode);
					if (childNode.get_nodeType() == 1) this.doGetElementsByTagName(childNode, tagName, elements);
				}
			}
		}
		, doGetElementsByClassName: function (node, className, elements) {
			if (node.hasChildNodes() == true) {
				var length = node.childNodes.length;
				var _g = 0;
				while (_g < length) {
					var i = _g++;
					if (node.childNodes[i].get_nodeType() == 1) {
						var childNode = node.childNodes[i];
						var _g1 = childNode.get_nodeType();
						switch (_g1) {
							case 1:
								var classList = childNode.classList;
								if (classList != null) {
									var foundFlag = false;
									var classListLength = classList.length;
									var _g2 = 0;
									while (_g2 < classListLength) {
										var j = _g2++;
										if (classList[j] == className && foundFlag == false) {
											elements.push(childNode);
											foundFlag = true;
										}
									}
								}
								break;
						}
						this.doGetElementsByClassName(childNode, className, elements);
					}
				}
			}
		}
		, doGetTextContent: function (node) {
			var text = "";
			if (node.hasChildNodes() == true) {
				var length = node.childNodes.length;
				var _g = 0;
				while (_g < length) {
					var i = _g++;
					var childNode = node.childNodes[i];
					var _g1 = childNode.get_nodeType();
					switch (_g1) {
						case 3:
							var textNode = childNode;
							text += textNode.data;
							break;
					}
					text += this.doGetTextContent(childNode);
				}
			}
			return text;
		}
		, hasAttributes: function () {
			return this.attributes.get_length() > 0;
		}
		, get_nodeName: function () {
			return this.tagName;
		}
		, get_nodeType: function () {
			return 1;
		}
		, get_textContent: function () {
			return this.doGetTextContent(this);
		}
		, get_firstElementChild: function () {
			if (this.hasChildNodes() == false) return null;
			if (this.get_firstChild().get_nodeType() == 1) return this.get_firstChild(); else {
				var length = this.childNodes.length;
				var _g = 0;
				while (_g < length) {
					var i = _g++;
					if (this.childNodes[i].get_nodeType() == 1) return this.childNodes[i];
				}
			}
			return null;
		}
		, get_lastElementChild: function () {
			if (this.hasChildNodes() == false) return null;
			if (this.get_lastChild().get_nodeType() == 1) return this.get_lastChild(); else {
				var length = this.childNodes.length;
				var _g = length;
				while (_g < 0) {
					var i = _g++;
					if (this.childNodes[i].get_nodeType() == 1) return this.childNodes[i];
				}
			}
			return null;
		}
		, get_nextElementSibling: function () {
			if (this.get_nextSibling() == null) return null;
			var nextElementSibling = this.get_nextSibling();
			while (nextElementSibling.get_nodeType() != 1) {
				nextElementSibling = nextElementSibling.get_nextSibling();
				if (nextElementSibling == null) return null;
			}
			return nextElementSibling;
		}
		, get_previousElementSibling: function () {
			if (this.get_previousSibling() == null) return null;
			var previousElementSibling = this.get_previousSibling();
			while (previousElementSibling.get_nodeType() != 1) {
				previousElementSibling = previousElementSibling.get_previousSibling();
				if (previousElementSibling == null) return null;
			}
			return previousElementSibling;
		}
		, get_childElementCount: function () {
			var childElementCount = 0;
			var length = this.childNodes.length;
			var _g = 0;
			while (_g < length) {
				var i = _g++;
				if (this.childNodes[i].get_nodeType() == 1) childElementCount++;
			}
			return childElementCount;
		}
		, __class__: cocktail_core_dom_Element
		, __properties__: $extend(cocktail_core_dom_Node.prototype.__properties__, { get_childElementCount: "get_childElementCount", get_nextElementSibling: "get_nextElementSibling", get_previousElementSibling: "get_previousElementSibling", get_lastElementChild: "get_lastElementChild", get_firstElementChild: "get_firstElementChild" })
	});
	var cocktail_core_dom_NamedNodeMap = function () {
		this._nodes = [];
	};
	$hxClasses["cocktail.core.dom.NamedNodeMap"] = cocktail_core_dom_NamedNodeMap;
	cocktail_core_dom_NamedNodeMap.__name__ = ["cocktail", "core", "dom", "NamedNodeMap"];
	cocktail_core_dom_NamedNodeMap.prototype = {
		getNamedItem: function (name) {
			var length = this._nodes.length;
			var _g = 0;
			while (_g < length) {
				var i = _g++;
				if (this._nodes[i].name == name) return this._nodes[i];
			}
			return null;
		}
		, setNamedItem: function (arg) {
			var replacedNode = this.getNamedItem(arg.get_nodeName());
			if (replacedNode != null) {
				var _g1 = 0;
				var _g = this.get_length();
				while (_g1 < _g) {
					var i = _g1++;
					if (this._nodes[i] == replacedNode) {
						this._nodes[i] = arg;
						return replacedNode;
					}
				}
			} else this._nodes.push(arg);
			return replacedNode;
		}
		, removeNamedItem: function (name) {
			var removedNode = this.getNamedItem(name);
			if (removedNode == null) return null;
			HxOverrides.remove(this._nodes, removedNode);
			return removedNode;
		}
		, item: function (index) {
			if (index > this.get_length() - 1) return null; else return this._nodes[index];
		}
		, get_length: function () {
			return this._nodes.length;
		}
		, __class__: cocktail_core_dom_NamedNodeMap
		, __properties__: { get_length: "get_length" }
	};
	var cocktail_core_dom_Text = function () {
		cocktail_core_dom_CharacterData.call(this);
	};
	$hxClasses["cocktail.core.dom.Text"] = cocktail_core_dom_Text;
	cocktail_core_dom_Text.__name__ = ["cocktail", "core", "dom", "Text"];
	cocktail_core_dom_Text.__super__ = cocktail_core_dom_CharacterData;
	cocktail_core_dom_Text.prototype = $extend(cocktail_core_dom_CharacterData.prototype, {
		get_nodeName: function () {
			return "#text";
		}
		, get_nodeType: function () {
			return 3;
		}
		, __class__: cocktail_core_dom_Text
	});
	var cocktail_core_ds_IFastNode = function () { };
	$hxClasses["cocktail.core.ds.IFastNode"] = cocktail_core_ds_IFastNode;
	cocktail_core_ds_IFastNode.__name__ = ["cocktail", "core", "ds", "IFastNode"];
	cocktail_core_ds_IFastNode.prototype = {
		__class__: cocktail_core_ds_IFastNode
	};
	var cocktail_core_ds_FastNode = function () {
		this.previousSibling = null;
		this.nextSibling = null;
		this.lastChild = null;
		this.firstChild = null;
		this.parentNode = null;
	};
	$hxClasses["cocktail.core.ds.FastNode"] = cocktail_core_ds_FastNode;
	cocktail_core_ds_FastNode.__name__ = ["cocktail", "core", "ds", "FastNode"];
	cocktail_core_ds_FastNode.__interfaces__ = [cocktail_core_ds_IFastNode];
	cocktail_core_ds_FastNode.prototype = {
		removeChild: function (oldChild) {
			if (oldChild.parentNode != this) throw new js__$Boot_HaxeError("not a child node");
			oldChild.parentNode = null;
			if (this.firstChild == oldChild && this.lastChild == oldChild) {
				this.firstChild = null;
				this.lastChild = null;
			} else if (this.firstChild == oldChild) {
				var nextSibling = oldChild.nextSibling;
				this.firstChild = nextSibling;
				if (nextSibling != null) nextSibling.previousSibling = null;
			} else if (this.lastChild == oldChild) {
				var previousSibling = oldChild.previousSibling;
				this.lastChild = previousSibling;
				if (previousSibling != null) previousSibling.nextSibling = null;
			} else {
				var previousSibling1 = oldChild.previousSibling;
				var nextSibling1 = oldChild.nextSibling;
				previousSibling1.nextSibling = nextSibling1;
				nextSibling1.previousSibling = previousSibling1;
			}
			oldChild.previousSibling = null;
			oldChild.nextSibling = null;
		}
		, appendChild: function (newChild) {
			this.removeFromParentIfNecessary(newChild);
			newChild.parentNode = this;
			if (this.firstChild == null) {
				this.firstChild = newChild;
				this.lastChild = newChild;
				newChild.previousSibling = null;
				newChild.nextSibling = null;
			} else {
				var oldLastChild = this.lastChild;
				this.lastChild = newChild;
				oldLastChild.nextSibling = newChild;
				newChild.previousSibling = oldLastChild;
				newChild.nextSibling = null;
			}
		}
		, removeFromParentIfNecessary: function (newChild) {
			if (newChild.parentNode != null) {
				var parentNode = newChild.parentNode;
				parentNode.removeChild(newChild);
			}
		}
		, insertBefore: function (newChild, refChild) {
			if (this.firstChild == null || refChild == null) {
				this.appendChild(newChild);
				return;
			}
			this.removeFromParentIfNecessary(newChild);
			newChild.parentNode = this;
			var oldPreviousSibling = refChild.previousSibling;
			if (oldPreviousSibling == null) {
				this.firstChild = newChild;
				refChild.previousSibling = newChild;
				newChild.nextSibling = refChild;
				newChild.previousSibling = null;
			} else {
				oldPreviousSibling.nextSibling = newChild;
				refChild.previousSibling = newChild;
				newChild.previousSibling = oldPreviousSibling;
				newChild.nextSibling = refChild;
			}
		}
		, __class__: cocktail_core_ds_FastNode
	};
	var cocktail_core_event_Event = function () {
		this.dispatched = false;
		this.eventPhase = 0;
	};
	$hxClasses["cocktail.core.event.Event"] = cocktail_core_event_Event;
	cocktail_core_event_Event.__name__ = ["cocktail", "core", "event", "Event"];
	cocktail_core_event_Event.prototype = {
		initEvent: function (eventTypeArg, canBubbleArg, cancelableArg) {
			if (this.dispatched == true) return;
			this.type = eventTypeArg;
			this.bubbles = canBubbleArg;
			this.cancelable = cancelableArg;
		}
		, preventDefault: function () {
			this.defaultPrevented = true;
		}
		, stopPropagation: function () {
			this.propagationStopped = true;
		}
		, stopImmediatePropagation: function () {
			this.immediatePropagationStopped = true;
		}
		, __class__: cocktail_core_event_Event
	};
	var cocktail_core_event_CustomEvent = function () {
		cocktail_core_event_Event.call(this);
	};
	$hxClasses["cocktail.core.event.CustomEvent"] = cocktail_core_event_CustomEvent;
	cocktail_core_event_CustomEvent.__name__ = ["cocktail", "core", "event", "CustomEvent"];
	cocktail_core_event_CustomEvent.__super__ = cocktail_core_event_Event;
	cocktail_core_event_CustomEvent.prototype = $extend(cocktail_core_event_Event.prototype, {
		initCustomEvent: function (eventTypeArg, canBubbleArg, cancelableArg, detailArg) {
			if (this.dispatched == true) return;
			this.initEvent(eventTypeArg, canBubbleArg, cancelableArg);
			this.detail = detailArg;
		}
		, __class__: cocktail_core_event_CustomEvent
	});
	var cocktail_core_event_EventConstants = function () {
	};
	$hxClasses["cocktail.core.event.EventConstants"] = cocktail_core_event_EventConstants;
	cocktail_core_event_EventConstants.__name__ = ["cocktail", "core", "event", "EventConstants"];
	cocktail_core_event_EventConstants.prototype = {
		__class__: cocktail_core_event_EventConstants
	};
	var cocktail_core_event_EventListener = function (eventType, listener, useCapture) {
		this.listener = listener;
		this.useCapture = useCapture;
		this.eventType = eventType;
	};
	$hxClasses["cocktail.core.event.EventListener"] = cocktail_core_event_EventListener;
	cocktail_core_event_EventListener.__name__ = ["cocktail", "core", "event", "EventListener"];
	cocktail_core_event_EventListener.prototype = {
		handleEvent: function (evt) {
			this.listener(evt);
		}
		, __class__: cocktail_core_event_EventListener
	};
	var cocktail_core_event_UIEvent = function () {
		cocktail_core_event_Event.call(this);
	};
	$hxClasses["cocktail.core.event.UIEvent"] = cocktail_core_event_UIEvent;
	cocktail_core_event_UIEvent.__name__ = ["cocktail", "core", "event", "UIEvent"];
	cocktail_core_event_UIEvent.__super__ = cocktail_core_event_Event;
	cocktail_core_event_UIEvent.prototype = $extend(cocktail_core_event_Event.prototype, {
		initUIEvent: function (eventTypeArg, canBubbleArg, cancelableArg, viewArg, detailArg) {
			if (this.dispatched == true) return;
			this.initEvent(eventTypeArg, canBubbleArg, cancelableArg);
			this.view = viewArg;
			this.detail = detailArg;
		}
		, __class__: cocktail_core_event_UIEvent
	});
	var cocktail_core_event_FocusEvent = function () {
		cocktail_core_event_UIEvent.call(this);
	};
	$hxClasses["cocktail.core.event.FocusEvent"] = cocktail_core_event_FocusEvent;
	cocktail_core_event_FocusEvent.__name__ = ["cocktail", "core", "event", "FocusEvent"];
	cocktail_core_event_FocusEvent.__super__ = cocktail_core_event_UIEvent;
	cocktail_core_event_FocusEvent.prototype = $extend(cocktail_core_event_UIEvent.prototype, {
		initFocusEvent: function (eventTypeArg, canBubbleArg, cancelableArg, viewArg, detailArg, relatedTargetArg) {
			if (this.dispatched == true) return;
			this.initUIEvent(eventTypeArg, canBubbleArg, cancelableArg, viewArg, detailArg);
			this.relatedTarget = relatedTargetArg;
		}
		, __class__: cocktail_core_event_FocusEvent
	});
	var cocktail_core_event_KeyboardEvent = function () {
		cocktail_core_event_UIEvent.call(this);
	};
	$hxClasses["cocktail.core.event.KeyboardEvent"] = cocktail_core_event_KeyboardEvent;
	cocktail_core_event_KeyboardEvent.__name__ = ["cocktail", "core", "event", "KeyboardEvent"];
	cocktail_core_event_KeyboardEvent.__super__ = cocktail_core_event_UIEvent;
	cocktail_core_event_KeyboardEvent.prototype = $extend(cocktail_core_event_UIEvent.prototype, {
		initKeyboardEvent: function (eventTypeArg, canBubbleArg, cancelableArg, viewArg, charArg, keyArg, locationArg, modifiersListArg, repeatArg, localeArg) {
			if (this.dispatched == true) return;
			this.initUIEvent(eventTypeArg, canBubbleArg, cancelableArg, viewArg, 0);
			this.keyChar = charArg;
			this.key = keyArg;
			this.repeat = repeatArg;
			this.location = locationArg;
			this.locale = localeArg;
			this.setModifiersListArg(modifiersListArg);
		}
		, setModifiersListArg: function (modifiersListArg) {
			this.ctrlKey = false;
			this.shiftKey = false;
			this.altKey = false;
			this.metaKey = false;
			if (modifiersListArg == null) return;
			var modifiers = modifiersListArg.split(" ");
			var _g1 = 0;
			var _g = modifiers.length;
			while (_g1 < _g) {
				var i = _g1++;
				var _g2 = modifiers[i];
				switch (_g2) {
					case "Shift":
						this.shiftKey = true;
						break;
					case "Alt":
						this.altKey = true;
						break;
					case "Control":
						this.ctrlKey = true;
						break;
					case "Meta":
						this.metaKey = true;
						break;
				}
			}
		}
		, __class__: cocktail_core_event_KeyboardEvent
	});
	var cocktail_core_event_MouseEvent = function () {
		cocktail_core_event_UIEvent.call(this);
	};
	$hxClasses["cocktail.core.event.MouseEvent"] = cocktail_core_event_MouseEvent;
	cocktail_core_event_MouseEvent.__name__ = ["cocktail", "core", "event", "MouseEvent"];
	cocktail_core_event_MouseEvent.__super__ = cocktail_core_event_UIEvent;
	cocktail_core_event_MouseEvent.prototype = $extend(cocktail_core_event_UIEvent.prototype, {
		initMouseEvent: function (eventTypeArg, canBubbleArg, cancelableArg, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, ctrlKeyArg, altKeyArg, shiftKeyArg, metaKeyArg, buttonArg, relatedTargeArg) {
			if (this.dispatched == true) return;
			this.initUIEvent(eventTypeArg, canBubbleArg, cancelableArg, viewArg, detailArg);
			this.screenX = screenXArg;
			this.screenY = screenYArg;
			this.clientX = clientXArg;
			this.clientY = clientYArg;
			this.ctrlKey = ctrlKeyArg;
			this.shiftKey = shiftKeyArg;
			this.altKey = altKeyArg;
			this.metaKey = metaKeyArg;
			this.button = buttonArg;
			this.relatedTarget = relatedTargeArg;
		}
		, __class__: cocktail_core_event_MouseEvent
	});
	var cocktail_core_event_PopStateEvent = function () {
		cocktail_core_event_UIEvent.call(this);
	};
	$hxClasses["cocktail.core.event.PopStateEvent"] = cocktail_core_event_PopStateEvent;
	cocktail_core_event_PopStateEvent.__name__ = ["cocktail", "core", "event", "PopStateEvent"];
	cocktail_core_event_PopStateEvent.__super__ = cocktail_core_event_UIEvent;
	cocktail_core_event_PopStateEvent.prototype = $extend(cocktail_core_event_UIEvent.prototype, {
		initPopStateEvent: function (eventTypeArg, canBubbleArg, cancelableArg, viewArg, detailArg, state) {
			if (this.dispatched == true) return;
			this.initUIEvent(eventTypeArg, canBubbleArg, cancelableArg, viewArg, detailArg);
			this.state = state;
		}
		, __class__: cocktail_core_event_PopStateEvent
	});
	var cocktail_core_event_ProgressEvent = function () {
		cocktail_core_event_Event.call(this);
		this.lengthComputable = false;
		this.loaded = 0;
		this.total = 0;
	};
	$hxClasses["cocktail.core.event.ProgressEvent"] = cocktail_core_event_ProgressEvent;
	cocktail_core_event_ProgressEvent.__name__ = ["cocktail", "core", "event", "ProgressEvent"];
	cocktail_core_event_ProgressEvent.__super__ = cocktail_core_event_Event;
	cocktail_core_event_ProgressEvent.prototype = $extend(cocktail_core_event_Event.prototype, {
		initProgressEvent: function (eventTypeArg, canBubbleArg, cancelableArg, lengthComputableArg, loadedArg, totalArg) {
			if (this.dispatched == true) return;
			this.initEvent(eventTypeArg, canBubbleArg, cancelableArg);
			this.lengthComputable = lengthComputableArg;
			this.loaded = loadedArg;
			this.total = totalArg;
		}
		, __class__: cocktail_core_event_ProgressEvent
	});
	var cocktail_core_event_Touch = function () {
	};
	$hxClasses["cocktail.core.event.Touch"] = cocktail_core_event_Touch;
	cocktail_core_event_Touch.__name__ = ["cocktail", "core", "event", "Touch"];
	cocktail_core_event_Touch.prototype = {
		__class__: cocktail_core_event_Touch
	};
	var cocktail_core_event_TouchEvent = function () {
		cocktail_core_event_UIEvent.call(this);
	};
	$hxClasses["cocktail.core.event.TouchEvent"] = cocktail_core_event_TouchEvent;
	cocktail_core_event_TouchEvent.__name__ = ["cocktail", "core", "event", "TouchEvent"];
	cocktail_core_event_TouchEvent.__super__ = cocktail_core_event_UIEvent;
	cocktail_core_event_TouchEvent.prototype = $extend(cocktail_core_event_UIEvent.prototype, {
		initTouchEvent: function (eventTypeArg, canBubbleArg, cancelableArg, viewArg, detailArg, touchesArg, targetTouchesArg, changedTouchesArg, altKeyArg, metaKeyArg, ctrlKeyArg, shiftKeyArg) {
			if (this.dispatched == true) return;
			this.initUIEvent(eventTypeArg, canBubbleArg, cancelableArg, viewArg, detailArg);
			this.touches = touchesArg;
			targetTouchesArg = this.targetTouches;
			this.changedTouches = changedTouchesArg;
			this.altKey = altKeyArg;
			this.metaKey = metaKeyArg;
			this.ctrlKey = ctrlKeyArg;
			this.shiftKey = shiftKeyArg;
		}
		, __class__: cocktail_core_event_TouchEvent
	});
	var cocktail_core_event_TouchList = function (touches) {
		this._touches = touches;
	};
	$hxClasses["cocktail.core.event.TouchList"] = cocktail_core_event_TouchList;
	cocktail_core_event_TouchList.__name__ = ["cocktail", "core", "event", "TouchList"];
	cocktail_core_event_TouchList.prototype = {
		item: function (index) {
			return this._touches[index];
		}
		, identifiedTouch: function (identifier) {
			var _g1 = 0;
			var _g = this.get_length();
			while (_g1 < _g) {
				var i = _g1++;
				if (this._touches[i].identifier == identifier) return this._touches[i];
			}
			return null;
		}
		, get_length: function () {
			return this._touches.length;
		}
		, __class__: cocktail_core_event_TouchList
		, __properties__: { get_length: "get_length" }
	};
	var cocktail_core_event_TransitionEvent = function () {
		cocktail_core_event_Event.call(this);
	};
	$hxClasses["cocktail.core.event.TransitionEvent"] = cocktail_core_event_TransitionEvent;
	cocktail_core_event_TransitionEvent.__name__ = ["cocktail", "core", "event", "TransitionEvent"];
	cocktail_core_event_TransitionEvent.__super__ = cocktail_core_event_Event;
	cocktail_core_event_TransitionEvent.prototype = $extend(cocktail_core_event_Event.prototype, {
		initTransitionEvent: function (eventTypeArg, canBubbleArg, cancelableArg, propertyNameArg, elapsedTimeArg, pseudoElementArg) {
			if (this.dispatched == true) return;
			this.initEvent(eventTypeArg, canBubbleArg, cancelableArg);
			this.propertyName = propertyNameArg;
			this.elapsedTime = elapsedTimeArg;
			this.pseudoElement = pseudoElementArg;
		}
		, __class__: cocktail_core_event_TransitionEvent
	});
	var cocktail_core_event_WheelEvent = function () {
		cocktail_core_event_MouseEvent.call(this);
	};
	$hxClasses["cocktail.core.event.WheelEvent"] = cocktail_core_event_WheelEvent;
	cocktail_core_event_WheelEvent.__name__ = ["cocktail", "core", "event", "WheelEvent"];
	cocktail_core_event_WheelEvent.__super__ = cocktail_core_event_MouseEvent;
	cocktail_core_event_WheelEvent.prototype = $extend(cocktail_core_event_MouseEvent.prototype, {
		initWheelEvent: function (eventTypeArg, canBubbleArg, cancelableArg, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, buttonArg, relatedTargetArg, modifiersListArg, deltaXArg, deltaYArg, deltaZArg, deltaModeArg) {
			if (this.dispatched == true) return;
			this.initMouseEvent(eventTypeArg, canBubbleArg, cancelableArg, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, false, false, false, false, buttonArg, relatedTargetArg);
			this.deltaY = deltaYArg;
			this.deltaX = deltaXArg;
			this.deltaMode = deltaModeArg;
			this.deltaZ = deltaZArg;
		}
		, __class__: cocktail_core_event_WheelEvent
	});
	var cocktail_core_event_XMLHttpRequestEventTarget = function () {
		cocktail_core_event_EventTarget.call(this);
	};
	$hxClasses["cocktail.core.event.XMLHttpRequestEventTarget"] = cocktail_core_event_XMLHttpRequestEventTarget;
	cocktail_core_event_XMLHttpRequestEventTarget.__name__ = ["cocktail", "core", "event", "XMLHttpRequestEventTarget"];
	cocktail_core_event_XMLHttpRequestEventTarget.__super__ = cocktail_core_event_EventTarget;
	cocktail_core_event_XMLHttpRequestEventTarget.prototype = $extend(cocktail_core_event_EventTarget.prototype, {
		updateCallbackListener: function (eventType, newListener, oldListener) {
			if (oldListener != null) this.removeEventListener(eventType, oldListener);
			if (newListener != null) this.addEventListener(eventType, newListener);
		}
		, set_onloadstart: function (value) {
			this.updateCallbackListener("loadstart", value, this.onloadstart);
			return this.onloadstart = value;
		}
		, set_onprogress: function (value) {
			this.updateCallbackListener("progress", value, this.onprogress);
			return this.onprogress = value;
		}
		, set_onabort: function (value) {
			this.updateCallbackListener("abort", value, this.onabort);
			return this.onabort = value;
		}
		, set_onerror: function (value) {
			this.updateCallbackListener("error", value, this.onerror);
			return this.onerror = value;
		}
		, set_onload: function (value) {
			this.updateCallbackListener("load", value, this.onload);
			return this.onload = value;
		}
		, set_ontimeout: function (value) {
			this.updateCallbackListener("timeout", value, this.ontimeout);
			return this.ontimeout = value;
		}
		, set_onloadend: function (value) {
			this.updateCallbackListener("loadend", value, this.onloadend);
			return this.onloadend = value;
		}
		, __class__: cocktail_core_event_XMLHttpRequestEventTarget
		, __properties__: { set_onloadend: "set_onloadend", set_ontimeout: "set_ontimeout", set_onload: "set_onload", set_onerror: "set_onerror", set_onabort: "set_onabort", set_onprogress: "set_onprogress", set_onloadstart: "set_onloadstart" }
	});
	var cocktail_core_floats_FloatsManager = function () {
		var floatsLeft = [];
		var floatsRight = [];
		this.childrenWithClearance = [];
		this.floats = new cocktail_core_layout_FloatsVO(floatsLeft, floatsRight);
	};
	$hxClasses["cocktail.core.floats.FloatsManager"] = cocktail_core_floats_FloatsManager;
	cocktail_core_floats_FloatsManager.__name__ = ["cocktail", "core", "floats", "FloatsManager"];
	cocktail_core_floats_FloatsManager.prototype = {
		init: function () {
			if (this.floats.left.length > 0 || this.floats.right.length > 0) {
				this.floats.left = [];
				this.floats.right = [];
			}
			this.childrenWithClearance = [];
		}
		, registerClear: function (elementRenderer) {
			this.childrenWithClearance.push(elementRenderer);
		}
		, getClearance: function (target, currentY) {
			var clearance = 0;
			var _g = target.coreStyle.getKeyword(target.coreStyle.getComputedOrInitialProperty(3));
			switch (_g[1]) {
				case 11:
					clearance = this.doGetClearance(target, currentY, this.floats.left);
					break;
				case 12:
					clearance = this.doGetClearance(target, currentY, this.floats.right);
					break;
				case 31:
					clearance = this.clearBoth(target, currentY);
					break;
				default:
			}
			return clearance;
		}
		, hasClearance: function (target, currentY) {
			var hasClearance = false;
			var _g = target.coreStyle.getKeyword(target.coreStyle.getComputedOrInitialProperty(3));
			switch (_g[1]) {
				case 11:
					hasClearance = this.doGetHasClearance(target, currentY, this.floats.left);
					break;
				case 12:
					hasClearance = this.doGetHasClearance(target, currentY, this.floats.right);
					break;
				case 31:
					hasClearance = this.hasClearanceBoth(target, currentY);
					break;
				default:
			}
			return hasClearance;
		}
		, clearBoth: function (target, currentY) {
			var leftClearance = this.doGetClearance(target, currentY, this.floats.left);
			var rightClearance = this.doGetClearance(target, currentY, this.floats.right);
			if (leftClearance > rightClearance) return leftClearance; else return rightClearance;
		}
		, hasClearanceBoth: function (target, currentY) {
			var hasLeftClearance = this.doGetHasClearance(target, currentY, this.floats.left);
			if (hasLeftClearance == true) return true;
			return this.doGetHasClearance(target, currentY, this.floats.right);
		}
		, doGetClearance: function (target, currentY, floats) {
			var clearance = 0;
			var maxY = currentY;
			var length = floats.length;
			var _g = 0;
			while (_g < length) {
				var i = _g++;
				var floatBounds = floats[i].bounds;
				if (floatBounds.y + floatBounds.height >= maxY || floatBounds.y <= maxY && floatBounds.y + floatBounds.height > maxY) maxY = floatBounds.y + floatBounds.height;
			}
			return maxY - currentY;
		}
		, doGetHasClearance: function (target, currentY, floats) {
			var length = floats.length;
			var _g = 0;
			while (_g < length) {
				var i = _g++;
				var floatBounds = floats[i].bounds;
				if (floatBounds.y + floatBounds.height >= currentY || floatBounds.y <= currentY && floatBounds.y + floatBounds.height > currentY) return true;
			}
			return false;
		}
		, registerFloat: function (elementRenderer, floatY, containingBlockWidth, containingBlockXOffset) {
			var bounds = this.getFloatBoundsIfAlreadyRegistered(elementRenderer);
			if (bounds != null) return bounds;
			var _g = elementRenderer.coreStyle.getKeyword(elementRenderer.coreStyle.getComputedOrInitialProperty(2));
			switch (_g[1]) {
				case 11:
					var floatBounds = this.getLeftFloatBounds(elementRenderer, floatY, containingBlockWidth, containingBlockXOffset);
					this.floats.left.push(new cocktail_core_layout_FloatVO(elementRenderer, floatBounds));
					return floatBounds;
				case 12:
					var floatBounds1 = this.getRightFloatBounds(elementRenderer, floatY, containingBlockWidth, containingBlockXOffset);
					this.floats.right.push(new cocktail_core_layout_FloatVO(elementRenderer, floatBounds1));
					return floatBounds1;
				default:
					throw new js__$Boot_HaxeError("Illegal value for float style");
			}
		}
		, getFloatBoundsIfAlreadyRegistered: function (elementRenderer) {
			var _g1 = 0;
			var _g = this.floats.left.length;
			while (_g1 < _g) {
				var i = _g1++;
				if (this.floats.left[i].node == elementRenderer) return this.floats.left[i].bounds;
			}
			var _g11 = 0;
			var _g2 = this.floats.right.length;
			while (_g11 < _g2) {
				var i1 = _g11++;
				if (this.floats.right[i1].node == elementRenderer) return this.floats.right[i1].bounds;
			}
			return null;
		}
		, getLeftFloatBounds: function (elementRenderer, floatY, containingBlockWidth, containingBlockXOffset) {
			var floatBounds = this.getFloatBounds(elementRenderer, floatY, containingBlockWidth, containingBlockXOffset);
			floatBounds.x = this.getLeftFloatOffset(floatBounds.y, floatBounds.height, containingBlockXOffset);
			return floatBounds;
		}
		, getRightFloatBounds: function (elementRenderer, floatY, containingBlockWidth, containingBlockXOffset) {
			var floatBounds = this.getFloatBounds(elementRenderer, floatY, containingBlockWidth, containingBlockXOffset);
			floatBounds.x = this.getRightFloatOffset(floatBounds.y, floatBounds.height, floatBounds.width, containingBlockXOffset, containingBlockWidth) - floatBounds.width;
			return floatBounds;
		}
		, getFloatBounds: function (elementRenderer, floatY, containingBlockWidth, containingBlockXOffset) {
			var usedValues = elementRenderer.coreStyle.usedValues;
			var floatWidth = elementRenderer.bounds.width + usedValues.marginLeft + usedValues.marginRight;
			var floatHeight = elementRenderer.bounds.height + usedValues.marginTop + usedValues.marginBottom;
			var floatY1 = this.getFirstAvailableYPosition(floatY, floatHeight, floatWidth, containingBlockWidth, containingBlockXOffset);
			var floatX = 0.0;
			var rect = new cocktail_core_geom_RectangleVO();
			rect.x = floatX;
			rect.y = floatY1;
			rect.width = floatWidth;
			rect.height = floatHeight;
			return rect;
		}
		, getFirstAvailableYPosition: function (currentYPosition, elementHeight, elementWidth, containingBlockWidth, containingBlockXOffset) {
			var retY = currentYPosition;
			while (this.canFitElementAtY(retY, elementHeight, elementWidth, containingBlockWidth, containingBlockXOffset) == false) {
				var afterFloats = [];
				var leftFloatLength = this.floats.left.length;
				var _g = 0;
				while (_g < leftFloatLength) {
					var i = _g++;
					var floatBounds = this.floats.left[i].bounds;
					if (floatBounds.y <= retY && floatBounds.height + floatBounds.y > retY || floatBounds.y <= retY + elementHeight && floatBounds.y > retY) afterFloats.push(floatBounds);
				}
				var rightFloatLength = this.floats.right.length;
				var _g1 = 0;
				while (_g1 < rightFloatLength) {
					var i1 = _g1++;
					var floatBounds1 = this.floats.right[i1].bounds;
					if (floatBounds1.y <= retY && floatBounds1.height + floatBounds1.y > retY || floatBounds1.y <= retY + elementHeight && floatBounds1.y > retY) afterFloats.push(floatBounds1);
				}
				if (afterFloats.length == 0) break; else {
					var nextY = 1000000;
					var _g11 = 0;
					var _g2 = afterFloats.length;
					while (_g11 < _g2) {
						var i2 = _g11++;
						if (afterFloats[i2].y + afterFloats[i2].height - retY < nextY) nextY = afterFloats[i2].y + afterFloats[i2].height - retY;
					}
					retY += nextY;
				}
			}
			return retY;
		}
		, canFitElementAtY: function (y, elementHeight, elementWidth, containingBlockWidth, containingBlockXOffset) {
			if (this.getRightFloatOffset(y, elementHeight, elementWidth, containingBlockXOffset, containingBlockWidth) - this.getLeftFloatOffset(y, elementHeight, containingBlockXOffset) < elementWidth) return false; else return true;
		}
		, getLeftFloatOffset: function (y, elementHeight, containingBlockXOffset) {
			var leftFloatOffset = containingBlockXOffset;
			var length = this.floats.left.length;
			var _g = 0;
			while (_g < length) {
				var i = _g++;
				var floatBounds = this.floats.left[i].bounds;
				if (floatBounds.y + floatBounds.height > y && floatBounds.y <= y || floatBounds.y <= y + elementHeight && floatBounds.y > y) {
					if (floatBounds.x + floatBounds.width > leftFloatOffset) leftFloatOffset = floatBounds.x + floatBounds.width;
				}
			}
			return leftFloatOffset;
		}
		, getRightFloatOffset: function (y, elementHeight, elementWidth, containingBlockXOffset, containingBlockWidth) {
			var rightFloatOffset = containingBlockXOffset + containingBlockWidth;
			var length = this.floats.right.length;
			var _g = 0;
			while (_g < length) {
				var i = _g++;
				var floatBounds = this.floats.right[i].bounds;
				if (floatBounds.y + floatBounds.height > y && floatBounds.y <= y || floatBounds.y <= y + elementHeight && floatBounds.y > y) {
					if (floatBounds.x < rightFloatOffset) rightFloatOffset = floatBounds.x;
				}
			}
			return rightFloatOffset;
		}
		, get_hasFloats: function () {
			return this.floats.left.length > 0 || this.floats.right.length > 0;
		}
		, __class__: cocktail_core_floats_FloatsManager
		, __properties__: { get_hasFloats: "get_hasFloats" }
	};
	var cocktail_core_focus_FocusManager = function () {
	};
	$hxClasses["cocktail.core.focus.FocusManager"] = cocktail_core_focus_FocusManager;
	cocktail_core_focus_FocusManager.__name__ = ["cocktail", "core", "focus", "FocusManager"];
	cocktail_core_focus_FocusManager.prototype = {
		dispose: function () {
			this.activeElement = null;
		}
		, getNextFocusedElement: function (reverse, rootElement, activeElement) {
			var tabList = this.buildTabList(rootElement);
			var tabListIndex;
			if (activeElement == rootElement) {
				if (reverse == false) tabListIndex = 0; else tabListIndex = tabList.length - 1;
			} else {
				tabListIndex = this.getElementTabListIndex(activeElement, tabList);
				if (reverse == false) tabListIndex++; else tabListIndex--;
			}
			if (tabListIndex == tabList.length) tabListIndex = 0; else if (tabListIndex == -1) tabListIndex = tabList.length - 1;
			return tabList[tabListIndex];
		}
		, getElementTabListIndex: function (element, tabList) {
			var _g1 = 0;
			var _g = tabList.length;
			while (_g1 < _g) {
				var i = _g1++;
				if (tabList[i] == element) return i;
			}
			return -1;
		}
		, buildTabList: function (rootElement) {
			var orderedTabList = [];
			var indexedTabList = [];
			this.doBuildTabList(rootElement, orderedTabList, indexedTabList);
			var _g1 = 0;
			var _g = orderedTabList.length;
			while (_g1 < _g) {
				var i = _g1++;
				indexedTabList.push(orderedTabList[i]);
			}
			return indexedTabList;
		}
		, doBuildTabList: function (htmlElement, orderedTabList, indexedTabList) {
			var _g1 = 0;
			var _g = htmlElement.childNodes.length;
			while (_g1 < _g) {
				var i = _g1++;
				if (htmlElement.childNodes[i].get_nodeType() == 1) {
					var child = htmlElement.childNodes[i];
					if (child.hasChildNodes() == true) this.doBuildTabList(child, orderedTabList, indexedTabList);
					if (child.isFocusable() == true) {
						if (child.get_tabIndex() == 0) orderedTabList.push(child); else if (child.get_tabIndex() > 0) {
							if (indexedTabList.length == 0) indexedTabList.push(child); else {
								var foundSpotFlag = false;
								var _g3 = 0;
								var _g2 = indexedTabList.length;
								while (_g3 < _g2) {
									var j = _g3++;
									if (child.get_tabIndex() < indexedTabList[j].get_tabIndex()) {
										indexedTabList.splice(j, 0, child);
										foundSpotFlag = true;
									}
								}
								if (foundSpotFlag == false) indexedTabList.push(child);
							}
						}
					}
				}
			}
		}
		, setActiveElement: function (newActiveElement, body) {
			if (newActiveElement == null) return this.activeElement;
			if (this.activeElement == null) return this.activeElement = newActiveElement;
			if (newActiveElement != this.activeElement) {
				var focusOutEvent = new cocktail_core_event_FocusEvent();
				focusOutEvent.initFocusEvent("focusout", true, false, null, 0.0, newActiveElement);
				this.activeElement.dispatchEvent(focusOutEvent);
				var focusInEvent = new cocktail_core_event_FocusEvent();
				focusInEvent.initFocusEvent("focusin", true, false, null, 0.0, this.activeElement);
				newActiveElement.dispatchEvent(focusInEvent);
				var oldActiveElement = this.activeElement;
				oldActiveElement.invalidateStyleDeclaration(false);
				if (newActiveElement.isFocusable() == true) this.activeElement = newActiveElement; else this.activeElement = body;
				this.activeElement.invalidateStyleDeclaration(false);
				var blurEvent = new cocktail_core_event_FocusEvent();
				blurEvent.initFocusEvent("blur", false, false, null, 0.0, null);
				oldActiveElement.dispatchEvent(blurEvent);
				var focusEvent = new cocktail_core_event_FocusEvent();
				focusEvent.initFocusEvent("focus", false, false, null, 0.0, null);
				newActiveElement.dispatchEvent(focusEvent);
				if (this.activeElement.onfocus != null) {
					var focusEvent1 = new cocktail_core_event_FocusEvent();
					focusEvent1.initFocusEvent("focus", true, false, null, 0.0, null);
					this.activeElement.onfocus(focusEvent1);
				}
			}
			return this.activeElement;
		}
		, __class__: cocktail_core_focus_FocusManager
	};
	var cocktail_core_font_FontMetricsVO = function (fontSize, ascent, descent, xHeight, subscriptOffset, superscriptOffset, underlineOffset, spaceWidth, zeroHeight) {
		this.fontSize = fontSize;
		this.ascent = ascent;
		this.descent = descent;
		this.xHeight = xHeight;
		this.subscriptOffset = subscriptOffset;
		this.superscriptOffset = superscriptOffset;
		this.underlineOffset = underlineOffset;
		this.spaceWidth = spaceWidth;
		this.zeroHeight = zeroHeight;
	};
	$hxClasses["cocktail.core.font.FontMetricsVO"] = cocktail_core_font_FontMetricsVO;
	cocktail_core_font_FontMetricsVO.__name__ = ["cocktail", "core", "font", "FontMetricsVO"];
	cocktail_core_font_FontMetricsVO.prototype = {
		__class__: cocktail_core_font_FontMetricsVO
	};
	var cocktail_core_font_FontManager = function () {
		this._fontBuilder = new cocktail_port_platform_flash_$player_FontBuilder();
		this._computedFontMetrics = new haxe_ds_StringMap();
	};
	$hxClasses["cocktail.core.font.FontManager"] = cocktail_core_font_FontManager;
	cocktail_core_font_FontManager.__name__ = ["cocktail", "core", "font", "FontManager"];
	cocktail_core_font_FontManager.prototype = {
		dispose: function () {
			this._fontBuilder.dispose();
		}
		, getFontMetrics: function (fontFamily, fontSize) {
			var fontMetrics;
			var fontSizeMap = this._computedFontMetrics.get(fontFamily);
			if (fontSizeMap != null) {
				var key = Math.round(fontSize);
				fontMetrics = fontSizeMap.h[key];
				if (fontMetrics == null) {
					fontMetrics = this.doGetFontMetrics(fontFamily, fontSize);
					var key1 = Math.round(fontSize);
					fontSizeMap.h[key1] = fontMetrics;
					this._computedFontMetrics.set(fontFamily, fontSizeMap);
				}
			} else {
				fontMetrics = this.doGetFontMetrics(fontFamily, fontSize);
				fontSizeMap = new haxe_ds_IntMap();
				var key2 = Math.round(fontSize);
				fontSizeMap.h[key2] = fontMetrics;
				this._computedFontMetrics.set(fontFamily, fontSizeMap);
			}
			return fontMetrics;
		}
		, createNativeTextElement: function (text, style, fontFamily) {
			return this._fontBuilder.createNativeTextElement(text, style, fontFamily);
		}
		, getNativeFontFamily: function (fontFamily) {
			return this._fontBuilder.getNativeFontFamily(fontFamily);
		}
		, doGetFontMetrics: function (fontFamily, fontSize) {
			return this._fontBuilder.getFontMetrics(fontFamily, fontSize);
		}
		, __class__: cocktail_core_font_FontManager
	};
	var cocktail_core_geom_CubicBezier = function () {
	};
	$hxClasses["cocktail.core.geom.CubicBezier"] = cocktail_core_geom_CubicBezier;
	cocktail_core_geom_CubicBezier.__name__ = ["cocktail", "core", "geom", "CubicBezier"];
	cocktail_core_geom_CubicBezier.prototype = {
		init: function (x1, y1, x2, y2) {
			this._x1 = x1;
			this._y1 = y1;
			this._x2 = x2;
			this._y2 = y2;
			this._cx = 3 * this._x1;
			this._bx = 3 * (this._x2 - this._x1) - this._cx;
			this._ax = 1 - this._cx - this._bx;
			this._cy = 3 * this._y1;
			this._by = 3 * (this._y2 - this._y1) - this._cy;
			this._ay = 1 - this._cy - this._by;
		}
		, bezierX: function (t) {
			return t * (this._cx + t * (this._bx + t * this._ax));
		}
		, bezierY: function (t) {
			return t * (this._cy + t * (this._by + t * this._ay));
		}
		, __class__: cocktail_core_geom_CubicBezier
	};
	var cocktail_core_geom_RectangleVO = function () {
		this.x = 0;
		this.y = 0;
		this.width = 0;
		this.height = 0;
	};
	$hxClasses["cocktail.core.geom.RectangleVO"] = cocktail_core_geom_RectangleVO;
	cocktail_core_geom_RectangleVO.__name__ = ["cocktail", "core", "geom", "RectangleVO"];
	cocktail_core_geom_RectangleVO.prototype = {
		__class__: cocktail_core_geom_RectangleVO
	};
	var cocktail_core_geom_PointVO = function (x, y) {
		this.x = x;
		this.y = y;
	};
	$hxClasses["cocktail.core.geom.PointVO"] = cocktail_core_geom_PointVO;
	cocktail_core_geom_PointVO.__name__ = ["cocktail", "core", "geom", "PointVO"];
	cocktail_core_geom_PointVO.prototype = {
		__class__: cocktail_core_geom_PointVO
	};
	var cocktail_core_geom_DimensionVO = function (width, height) {
		this.width = width;
		this.height = height;
	};
	$hxClasses["cocktail.core.geom.DimensionVO"] = cocktail_core_geom_DimensionVO;
	cocktail_core_geom_DimensionVO.__name__ = ["cocktail", "core", "geom", "DimensionVO"];
	cocktail_core_geom_DimensionVO.prototype = {
		__class__: cocktail_core_geom_DimensionVO
	};
	var cocktail_core_geom_GeomUtils = function () {
	};
	$hxClasses["cocktail.core.geom.GeomUtils"] = cocktail_core_geom_GeomUtils;
	cocktail_core_geom_GeomUtils.__name__ = ["cocktail", "core", "geom", "GeomUtils"];
	cocktail_core_geom_GeomUtils.addBounds = function (addedBounds, bounds, getHorizontalBounds, getVerticalBounds) {
		if (getVerticalBounds == null) getVerticalBounds = true;
		if (getHorizontalBounds == null) getHorizontalBounds = true;
		if (getHorizontalBounds == true) {
			if (addedBounds.x < bounds.x) bounds.x = addedBounds.x;
			if (addedBounds.x + addedBounds.width > bounds.x + bounds.width) bounds.width = addedBounds.x + addedBounds.width - bounds.x;
		}
		if (getVerticalBounds == true) {
			if (addedBounds.y < bounds.y) bounds.y = addedBounds.y;
			if (addedBounds.y + addedBounds.height > bounds.y + bounds.height) bounds.height = addedBounds.y + addedBounds.height - bounds.y;
		}
	};
	cocktail_core_geom_GeomUtils.intersectBounds = function (bounds1, bounds2, resultBounds) {
		if (bounds1.x + bounds1.width < bounds2.x || bounds2.x + bounds2.width < bounds1.x || bounds1.y + bounds1.height < bounds2.y || bounds2.y + bounds2.height < bounds1.y) {
			resultBounds.x = 0;
			resultBounds.y = 0;
			resultBounds.height = 0;
			resultBounds.width = 0;
		} else {
			var left = 0;
			var right = 0;
			var top = 0;
			var bottom = 0;
			if (bounds1.x < bounds2.x) left = bounds2.x; else left = bounds1.x;
			if (bounds1.x + bounds1.width < bounds2.x + bounds2.width) right = bounds1.x + bounds1.width; else right = bounds2.x + bounds2.width;
			if (bounds1.y < bounds2.y) top = bounds2.y; else top = bounds1.y;
			if (bounds1.y + bounds1.height < bounds2.y + bounds2.height) bottom = bounds1.y + bounds1.height; else bottom = bounds2.y + bounds2.height;
			resultBounds.x = left;
			resultBounds.y = top;
			resultBounds.width = right - left;
			resultBounds.height = bottom - top;
		}
	};
	cocktail_core_geom_GeomUtils.getCenteredBounds = function (maximumWidth, maximumHeight, boundsWidth, boundsHeight, resultBounds) {
		if (maximumWidth == 0 || maximumHeight == 0 || boundsWidth == 0 || boundsHeight == 0) return;
		var width;
		var height;
		if (maximumWidth > maximumHeight) {
			var ratio = boundsHeight / maximumHeight;
			if (boundsWidth / ratio < maximumWidth) {
				width = boundsWidth / ratio;
				height = maximumHeight;
			} else {
				ratio = boundsWidth / maximumWidth;
				width = maximumWidth;
				height = boundsHeight / ratio;
			}
		} else {
			var ratio1 = boundsWidth / maximumWidth;
			if (boundsHeight / ratio1 < maximumHeight) {
				height = boundsHeight / ratio1;
				width = maximumWidth;
			} else {
				ratio1 = boundsHeight / maximumHeight;
				width = boundsWidth / ratio1;
				height = maximumHeight;
			}
		}
		var xOffset = (maximumWidth - width) / 2;
		var yOffset = (maximumHeight - height) / 2;
		resultBounds.x = xOffset;
		resultBounds.y = yOffset;
		resultBounds.width = width;
		resultBounds.height = height;
	};
	cocktail_core_geom_GeomUtils.prototype = {
		__class__: cocktail_core_geom_GeomUtils
	};
	var cocktail_core_geom_Matrix = function (a, b, c, d, e, f) {
		if (f == null) f = 0.0;
		if (e == null) e = 0.0;
		if (d == null) d = 1.0;
		if (c == null) c = 0.0;
		if (b == null) b = 0.0;
		if (a == null) a = 1.0;
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.e = e;
		this.f = f;
	};
	$hxClasses["cocktail.core.geom.Matrix"] = cocktail_core_geom_Matrix;
	cocktail_core_geom_Matrix.__name__ = ["cocktail", "core", "geom", "Matrix"];
	cocktail_core_geom_Matrix._concatenationMatrix = null;
	cocktail_core_geom_Matrix.getConcatenationMatrix = function (a, b, c, d, e, f) {
		if (cocktail_core_geom_Matrix._concatenationMatrix == null) cocktail_core_geom_Matrix._concatenationMatrix = new cocktail_core_geom_Matrix();
		cocktail_core_geom_Matrix._concatenationMatrix.a = a;
		cocktail_core_geom_Matrix._concatenationMatrix.b = b;
		cocktail_core_geom_Matrix._concatenationMatrix.c = c;
		cocktail_core_geom_Matrix._concatenationMatrix.d = d;
		cocktail_core_geom_Matrix._concatenationMatrix.e = e;
		cocktail_core_geom_Matrix._concatenationMatrix.f = f;
		return cocktail_core_geom_Matrix._concatenationMatrix;
	};
	cocktail_core_geom_Matrix.prototype = {
		identity: function () {
			this.a = 1.0;
			this.b = 0.0;
			this.c = 0.0;
			this.d = 1.0;
			this.e = 0.0;
			this.f = 0.0;
		}
		, concatenate: function (matrix) {
			this.a = this.a * matrix.a + this.c * matrix.b;
			this.b = this.b * matrix.a + this.d * matrix.b;
			this.c = this.a * matrix.c + this.c * matrix.d;
			this.d = this.b * matrix.c + this.d * matrix.d;
			this.e = this.a * matrix.e + this.c * matrix.f + this.e;
			this.f = this.b * matrix.e + this.d * matrix.f + this.f;
		}
		, isIdentity: function () {
			return this.a == 1.0 && this.b == 0.0 && this.c == 0.0 && this.d == 1.0 && this.e == 0.0 && this.f == 0.0;
		}
		, translate: function (x, y) {
			this.concatenate(cocktail_core_geom_Matrix.getConcatenationMatrix(1.0, 0.0, 0.0, 1.0, x, y));
		}
		, rotate: function (angle) {
			var a = 0.0;
			var b = 0.0;
			var c = 0.0;
			var d = 0.0;
			if (angle == Math.PI / 2) {
				a = d = 0.0;
				c = b = 1.0;
			} else if (angle == Math.PI) {
				a = d = -1.0;
				c = b = 0.0;
			} else if (angle == Math.PI * 3 / 2) {
				a = d = 0.0;
				c = b = -1.0;
			} else {
				a = d = Math.cos(angle);
				c = b = Math.sin(angle);
			}
			this.concatenate(cocktail_core_geom_Matrix.getConcatenationMatrix(a, b, c * -1.0, d, 0.0, 0.0));
		}
		, scale: function (scaleX, scaleY) {
			this.concatenate(cocktail_core_geom_Matrix.getConcatenationMatrix(scaleX, 0.0, 0.0, scaleY, 0.0, 0.0));
		}
		, skew: function (skewX, skewY) {
			this.concatenate(cocktail_core_geom_Matrix.getConcatenationMatrix(1.0, Math.tan(skewY), Math.tan(skewY), 1.0, 0.0, 0.0));
		}
		, __class__: cocktail_core_geom_Matrix
	};
	var cocktail_core_graphics_BackgroundDrawer = function () {
	};
	$hxClasses["cocktail.core.graphics.BackgroundDrawer"] = cocktail_core_graphics_BackgroundDrawer;
	cocktail_core_graphics_BackgroundDrawer.__name__ = ["cocktail", "core", "graphics", "BackgroundDrawer"];
	cocktail_core_graphics_BackgroundDrawer.render = function (graphicContext, backgroundBox, style, elementRenderer, clipRect) {
		if (Math.round(backgroundBox.width) <= 0 || Math.round(backgroundBox.height) <= 0) return;
		if (style.usedValues.backgroundColor.alpha != 0.0) {
			cocktail_core_graphics_BackgroundDrawer._intersectionBounds.x = backgroundBox.x;
			cocktail_core_graphics_BackgroundDrawer._intersectionBounds.y = backgroundBox.y;
			cocktail_core_graphics_BackgroundDrawer._intersectionBounds.width = backgroundBox.width;
			cocktail_core_graphics_BackgroundDrawer._intersectionBounds.height = backgroundBox.height;
			cocktail_core_geom_GeomUtils.intersectBounds(cocktail_core_graphics_BackgroundDrawer._intersectionBounds, clipRect, cocktail_core_graphics_BackgroundDrawer._intersectionBounds);
			if (cocktail_core_graphics_BackgroundDrawer._intersectionBounds.width == 0 || cocktail_core_graphics_BackgroundDrawer._intersectionBounds.height == 0) return;
			graphicContext.nativeLayer.graphics.fillRect(backgroundBox, style.usedValues.backgroundColor, clipRect);
		}
		if (style.hasBackgroundImage == false) return;
		cocktail_core_graphics_BackgroundDrawer._intersectionBounds.x = backgroundBox.x;
		cocktail_core_graphics_BackgroundDrawer._intersectionBounds.y = backgroundBox.y;
		cocktail_core_graphics_BackgroundDrawer._intersectionBounds.width = backgroundBox.width;
		cocktail_core_graphics_BackgroundDrawer._intersectionBounds.height = backgroundBox.height;
		cocktail_core_geom_GeomUtils.intersectBounds(cocktail_core_graphics_BackgroundDrawer._intersectionBounds, clipRect, cocktail_core_graphics_BackgroundDrawer._intersectionBounds);
		if (cocktail_core_graphics_BackgroundDrawer._intersectionBounds.width == 0 || cocktail_core_graphics_BackgroundDrawer._intersectionBounds.height == 0) return;
		var backgroundImages = cocktail_core_graphics_BackgroundDrawer.getAsArray(style.getComputedOrInitialProperty(26));
		var backgroundPositions = cocktail_core_graphics_BackgroundDrawer.getAsArray(style.getComputedOrInitialProperty(30));
		var backgroundOrigins = cocktail_core_graphics_BackgroundDrawer.getAsArray(style.getComputedOrInitialProperty(28));
		var backgroundClips = cocktail_core_graphics_BackgroundDrawer.getAsArray(style.getComputedOrInitialProperty(31));
		var backgroundSizes = cocktail_core_graphics_BackgroundDrawer.getAsArray(style.getComputedOrInitialProperty(29));
		var backgroundRepeats = cocktail_core_graphics_BackgroundDrawer.getAsArray(style.getComputedOrInitialProperty(27));
		var i = backgroundImages.length - 1;
		while (i >= 0) {
			var backgroundImage = backgroundImages[i];
			switch (backgroundImage[1]) {
				case 4:
					var value = backgroundImage[2];
					break;
				case 5:
					var value1 = backgroundImage[2];
					cocktail_core_graphics_BackgroundDrawer.drawBackgroundImage(graphicContext, value1, style, backgroundBox, backgroundPositions[cocktail_core_graphics_BackgroundDrawer.getRepeatedIndex(i, backgroundPositions.length)], backgroundSizes[cocktail_core_graphics_BackgroundDrawer.getRepeatedIndex(i, backgroundSizes.length)], backgroundOrigins[cocktail_core_graphics_BackgroundDrawer.getRepeatedIndex(i, backgroundOrigins.length)], backgroundClips[cocktail_core_graphics_BackgroundDrawer.getRepeatedIndex(i, backgroundClips.length)], backgroundRepeats[cocktail_core_graphics_BackgroundDrawer.getRepeatedIndex(i, backgroundRepeats.length)], backgroundImages[i], elementRenderer, clipRect);
					break;
				default:
			}
			i--;
		}
	};
	cocktail_core_graphics_BackgroundDrawer.getAsArray = function (cssProperty) {
		switch (cssProperty[1]) {
			case 4:
				var value = cssProperty[2];
				return [cssProperty];
			case 7:
				var value1 = cssProperty[2];
				return [cssProperty];
			case 2:
				var value2 = cssProperty[2];
				return [cssProperty];
			case 13:
				var value3 = cssProperty[2];
				return [cssProperty];
			case 5:
				var value4 = cssProperty[2];
				return [cssProperty];
			case 15:
				var value5 = cssProperty[2];
				var arr = [];
				var _g1 = 0;
				var _g = value5.length;
				while (_g1 < _g) {
					var i = _g1++;
					arr.push(value5[i]);
				}
				return arr;
			default:
				return null;
		}
	};
	cocktail_core_graphics_BackgroundDrawer.getRepeatedIndex = function (index, length) {
		if (index < length) return index; else if (length == 1) return 0;
		return length % index;
	};
	cocktail_core_graphics_BackgroundDrawer.drawBackgroundImage = function (graphicContext, url, style, backgroundBox, backgroundPosition, backgroundSize, backgroundOrigin, backgroundClip, backgroundRepeat, backgroundImage, elementRenderer, clipRect) {
		var foundResource = false;
		var htmlDocument = elementRenderer.domNode.ownerDocument;
		var resource = htmlDocument.resourceManager.getImageResource(url);
		if (resource.loaded == true) {
			cocktail_core_graphics_BackgroundDrawer._intersectionBounds.x = backgroundBox.x;
			cocktail_core_graphics_BackgroundDrawer._intersectionBounds.y = backgroundBox.y;
			cocktail_core_graphics_BackgroundDrawer._intersectionBounds.width = backgroundBox.width;
			cocktail_core_graphics_BackgroundDrawer._intersectionBounds.height = backgroundBox.height;
			cocktail_core_geom_GeomUtils.intersectBounds(cocktail_core_graphics_BackgroundDrawer._intersectionBounds, clipRect, cocktail_core_graphics_BackgroundDrawer._intersectionBounds);
			var computedGradientStyles = cocktail_core_layout_computer_BackgroundStylesComputer.computeIndividualBackground(style, backgroundBox, resource.intrinsicWidth, resource.intrinsicHeight, resource.intrinsicRatio, backgroundPosition, backgroundSize, backgroundOrigin, backgroundClip, backgroundRepeat, backgroundImage);
			cocktail_core_graphics_BackgroundDrawer.doDrawBackgroundImage(backgroundBox, graphicContext, resource, computedGradientStyles.backgroundOrigin, computedGradientStyles.backgroundClip, resource.intrinsicWidth, resource.intrinsicHeight, resource.intrinsicRatio, computedGradientStyles.backgroundSize, computedGradientStyles.backgroundPosition, computedGradientStyles.backgroundRepeat, cocktail_core_graphics_BackgroundDrawer._intersectionBounds);
			foundResource = true;
		} else if (resource.loadedWithError == false) {
			resource.addEventListener("load", function (e) {
				elementRenderer.invalidateRendering();
			});
			resource.addEventListener("error", function (e1) {
				elementRenderer.invalidateRendering();
			});
			foundResource = true;
		}
		if (foundResource == false) {
		}
	};
	cocktail_core_graphics_BackgroundDrawer.doDrawBackgroundImage = function (backgroundBox, graphicContext, resource, backgroundPositioningBox, backgroundPaintingBox, intrinsicWidth, intrinsicHeight, intrinsicRatio, computedBackgroundSize, computedBackgroundPosition, backgroundRepeat, clipRect) {
		var backgroundRepeatX = null;
		var backgroundRepeatY = null;
		switch (backgroundRepeat[1]) {
			case 13:
				var value = backgroundRepeat[2];
				{
					var _g = value[0];
					switch (_g[1]) {
						case 4:
							var value1 = _g[2];
							backgroundRepeatX = value1;
							break;
						default:
					}
				}
				{
					var _g1 = value[1];
					switch (_g1[1]) {
						case 4:
							var value2 = _g1[2];
							backgroundRepeatY = value2;
							break;
						default:
					}
				}
				break;
			default:
		}
		var totalWidth = computedBackgroundPosition.x + backgroundPositioningBox.x;
		var maxWidth = backgroundPaintingBox.x + backgroundPaintingBox.width;
		var imageWidth = computedBackgroundSize.width;
		switch (backgroundRepeatX[1]) {
			case 72:
				maxWidth = totalWidth + imageWidth;
				break;
			case 67:
				while (totalWidth > backgroundPaintingBox.x) totalWidth -= imageWidth;
				break;
			case 70:
				imageWidth = Math.round(backgroundPositioningBox.width / computedBackgroundSize.width);
				while (totalWidth > backgroundPaintingBox.x) totalWidth -= imageWidth;
				break;
			case 71:
				while (totalWidth > backgroundPaintingBox.x) totalWidth -= imageWidth;
				break;
			default:
		}
		var initialWidth = totalWidth;
		var totalHeight = computedBackgroundPosition.y + Math.round(backgroundPositioningBox.y);
		var maxHeight = backgroundPaintingBox.y + backgroundPaintingBox.height;
		var imageHeight = computedBackgroundSize.height;
		switch (backgroundRepeatY[1]) {
			case 72:
				maxHeight = totalHeight + imageHeight;
				break;
			case 67:
				while (totalHeight > backgroundPaintingBox.y) totalHeight -= imageHeight;
				break;
			case 70:
				imageHeight = backgroundPositioningBox.height / computedBackgroundSize.height;
				while (totalHeight > backgroundPaintingBox.y) totalHeight -= imageHeight;
				break;
			case 71:
				while (totalHeight > backgroundPaintingBox.y) totalHeight -= imageHeight;
				break;
			default:
		}
		var initialHeight = totalHeight;
		if (imageWidth / intrinsicWidth == 1 && imageHeight / intrinsicHeight == 1) {
			cocktail_core_graphics_BackgroundDrawer._destinationPoint.x = totalWidth + backgroundBox.x - computedBackgroundPosition.x;
			cocktail_core_graphics_BackgroundDrawer._destinationPoint.y = totalHeight + backgroundBox.y - computedBackgroundPosition.y;
			var intWidth = intrinsicWidth;
			var intHeight = intrinsicHeight;
			cocktail_core_graphics_BackgroundDrawer._box.x = backgroundPaintingBox.x - computedBackgroundPosition.x;
			cocktail_core_graphics_BackgroundDrawer._box.y = backgroundPaintingBox.y - computedBackgroundPosition.y;
			cocktail_core_graphics_BackgroundDrawer._box.width = backgroundPaintingBox.width;
			cocktail_core_graphics_BackgroundDrawer._box.height = backgroundPaintingBox.height;
			while (totalHeight < maxHeight) {
				graphicContext.nativeLayer.graphics.copyPixels(resource.nativeResource, cocktail_core_graphics_BackgroundDrawer._box, cocktail_core_graphics_BackgroundDrawer._destinationPoint, clipRect);
				totalWidth += imageWidth;
				if (totalWidth >= maxWidth) {
					totalWidth = initialWidth;
					totalHeight += imageHeight;
				}
				cocktail_core_graphics_BackgroundDrawer._destinationPoint.x = totalWidth + backgroundBox.x - computedBackgroundPosition.x;
				cocktail_core_graphics_BackgroundDrawer._destinationPoint.y = totalHeight + backgroundBox.y - computedBackgroundPosition.y;
			}
		} else {
			var matrix = new cocktail_core_geom_Matrix();
			backgroundPaintingBox.x += backgroundBox.x + computedBackgroundPosition.x;
			backgroundPaintingBox.y += backgroundBox.y + computedBackgroundPosition.y;
			while (totalHeight < maxHeight) {
				matrix.identity();
				matrix.translate(totalWidth + backgroundBox.x, totalHeight + backgroundBox.y);
				matrix.scale(imageWidth / intrinsicWidth, imageHeight / intrinsicHeight);
				graphicContext.nativeLayer.graphics.drawImage(resource.nativeResource, matrix, backgroundPaintingBox, clipRect);
				totalWidth += imageWidth;
				if (totalWidth >= maxWidth) {
					totalWidth = initialWidth;
					totalHeight += imageHeight;
				}
			}
		}
	};
	cocktail_core_graphics_BackgroundDrawer.prototype = {
		__class__: cocktail_core_graphics_BackgroundDrawer
	};
	var cocktail_core_graphics_BorderDrawer = function () {
	};
	$hxClasses["cocktail.core.graphics.BorderDrawer"] = cocktail_core_graphics_BorderDrawer;
	cocktail_core_graphics_BorderDrawer.__name__ = ["cocktail", "core", "graphics", "BorderDrawer"];
	cocktail_core_graphics_BorderDrawer.draw = function (graphicContext, borderBox, style, clipRect) {
		cocktail_core_graphics_BorderDrawer.drawBorder(graphicContext, cocktail_core_graphics_BorderDrawer.getTopBorderBox(borderBox, style.usedValues.borderTopWidth), style.usedValues.borderTopColor, style.getKeyword(style.getComputedOrInitialProperty(72)), clipRect);
		cocktail_core_graphics_BorderDrawer.drawBorder(graphicContext, cocktail_core_graphics_BorderDrawer.getLeftBorderBox(borderBox, style.usedValues.borderLeftWidth), style.usedValues.borderLeftColor, style.getKeyword(style.getComputedOrInitialProperty(75)), clipRect);
		cocktail_core_graphics_BorderDrawer.drawBorder(graphicContext, cocktail_core_graphics_BorderDrawer.getRightBorderBox(borderBox, style.usedValues.borderRightWidth), style.usedValues.borderRightColor, style.getKeyword(style.getComputedOrInitialProperty(73)), clipRect);
		cocktail_core_graphics_BorderDrawer.drawBorder(graphicContext, cocktail_core_graphics_BorderDrawer.getBottomBorderBox(borderBox, style.usedValues.borderBottomWidth), style.usedValues.borderBottomColor, style.getKeyword(style.getComputedOrInitialProperty(74)), clipRect);
	};
	cocktail_core_graphics_BorderDrawer.drawOutline = function (graphicContext, outlineBox, style, clipRect) {
		cocktail_core_graphics_BorderDrawer.drawBorder(graphicContext, cocktail_core_graphics_BorderDrawer.getTopBorderBox(outlineBox, style.usedValues.outlineWidth), style.usedValues.outlineColor, style.getKeyword(style.getComputedOrInitialProperty(83)), clipRect);
		cocktail_core_graphics_BorderDrawer.drawBorder(graphicContext, cocktail_core_graphics_BorderDrawer.getLeftBorderBox(outlineBox, style.usedValues.outlineWidth), style.usedValues.outlineColor, style.getKeyword(style.getComputedOrInitialProperty(83)), clipRect);
		cocktail_core_graphics_BorderDrawer.drawBorder(graphicContext, cocktail_core_graphics_BorderDrawer.getRightBorderBox(outlineBox, style.usedValues.outlineWidth), style.usedValues.outlineColor, style.getKeyword(style.getComputedOrInitialProperty(83)), clipRect);
		cocktail_core_graphics_BorderDrawer.drawBorder(graphicContext, cocktail_core_graphics_BorderDrawer.getBottomBorderBox(outlineBox, style.usedValues.outlineWidth), style.usedValues.outlineColor, style.getKeyword(style.getComputedOrInitialProperty(83)), clipRect);
	};
	cocktail_core_graphics_BorderDrawer.drawBorder = function (graphicContext, borderBox, borderColor, borderStyle, clipRect) {
		if (Math.round(borderBox.width) <= 0 || Math.round(borderBox.height) <= 0) return;
		graphicContext.nativeLayer.graphics.fillRect(borderBox, borderColor, clipRect);
	};
	cocktail_core_graphics_BorderDrawer.getTopBorderBox = function (borderBox, borderWidth) {
		cocktail_core_graphics_BorderDrawer._currentBorderBox.x = borderBox.x;
		cocktail_core_graphics_BorderDrawer._currentBorderBox.y = borderBox.y;
		cocktail_core_graphics_BorderDrawer._currentBorderBox.width = borderBox.width;
		cocktail_core_graphics_BorderDrawer._currentBorderBox.height = borderWidth;
		return cocktail_core_graphics_BorderDrawer._currentBorderBox;
	};
	cocktail_core_graphics_BorderDrawer.getBottomBorderBox = function (borderBox, borderWidth) {
		cocktail_core_graphics_BorderDrawer._currentBorderBox.x = borderBox.x;
		cocktail_core_graphics_BorderDrawer._currentBorderBox.y = borderBox.y + borderBox.height - borderWidth;
		cocktail_core_graphics_BorderDrawer._currentBorderBox.width = borderBox.width;
		cocktail_core_graphics_BorderDrawer._currentBorderBox.height = borderWidth;
		return cocktail_core_graphics_BorderDrawer._currentBorderBox;
	};
	cocktail_core_graphics_BorderDrawer.getLeftBorderBox = function (borderBox, borderWidth) {
		cocktail_core_graphics_BorderDrawer._currentBorderBox.x = borderBox.x;
		cocktail_core_graphics_BorderDrawer._currentBorderBox.y = borderBox.y;
		cocktail_core_graphics_BorderDrawer._currentBorderBox.width = borderWidth;
		cocktail_core_graphics_BorderDrawer._currentBorderBox.height = borderBox.height;
		return cocktail_core_graphics_BorderDrawer._currentBorderBox;
	};
	cocktail_core_graphics_BorderDrawer.getRightBorderBox = function (borderBox, borderWidth) {
		cocktail_core_graphics_BorderDrawer._currentBorderBox.x = borderBox.x + borderBox.width - borderWidth;
		cocktail_core_graphics_BorderDrawer._currentBorderBox.y = borderBox.y;
		cocktail_core_graphics_BorderDrawer._currentBorderBox.width = borderWidth;
		cocktail_core_graphics_BorderDrawer._currentBorderBox.height = borderBox.height;
		return cocktail_core_graphics_BorderDrawer._currentBorderBox;
	};
	cocktail_core_graphics_BorderDrawer.prototype = {
		__class__: cocktail_core_graphics_BorderDrawer
	};
	var cocktail_core_graphics_GraphicsContext = function (layerRenderer) {
		cocktail_core_ds_FastNode.call(this);
		this.layerRenderer = layerRenderer;
		this._needsNativeLayerUpdate = true;
		this.nativeLayer = new cocktail_port_platform_flash_$player_NativeLayer();
	};
	$hxClasses["cocktail.core.graphics.GraphicsContext"] = cocktail_core_graphics_GraphicsContext;
	cocktail_core_graphics_GraphicsContext.__name__ = ["cocktail", "core", "graphics", "GraphicsContext"];
	cocktail_core_graphics_GraphicsContext.__super__ = cocktail_core_ds_FastNode;
	cocktail_core_graphics_GraphicsContext.prototype = $extend(cocktail_core_ds_FastNode.prototype, {
		dispose: function () {
			this.nativeLayer.dispose();
			this.nativeLayer = null;
			this.layerRenderer = null;
		}
		, appendChild: function (newChild) {
			cocktail_core_ds_FastNode.prototype.appendChild.call(this, newChild);
			newChild.addedToGraphicsContextTree();
		}
		, removeChild: function (oldChild) {
			oldChild.removedFromGraphicsContextTree();
			cocktail_core_ds_FastNode.prototype.removeChild.call(this, oldChild);
		}
		, insertBefore: function (newChild, refChild) {
			cocktail_core_ds_FastNode.prototype.insertBefore.call(this, newChild, refChild);
			if (refChild == null) return;
			newChild.addedToGraphicsContextTree();
		}
		, addedToGraphicsContextTree: function () {
			this.invalidateNativeLayer();
			this.invalidateBitmapSize();
		}
		, removedFromGraphicsContextTree: function () {
			this.detach();
			this.invalidateNativeLayer();
			this.invalidateBitmapSize();
		}
		, updateGraphicsSize: function (viewportWidth, viewportHeight) {
			if (this.layerRenderer.needsBitmap() == true) this.nativeLayer.initBitmapData(viewportWidth, viewportHeight);
			var child = this.firstChild;
			while (child != null) {
				child.updateGraphicsSize(viewportWidth, viewportHeight);
				child = child.nextSibling;
			}
		}
		, updateNativeLayer: function () {
			if (this._needsNativeLayerUpdate == true) {
				this._needsNativeLayerUpdate = false;
				this.detach();
				this.attach();
				return;
			}
			var child = this.firstChild;
			while (child != null) {
				child.updateNativeLayer();
				child = child.nextSibling;
			}
		}
		, invalidateNativeLayer: function () {
			this._needsNativeLayerUpdate = true;
			var htmlDocument = this.layerRenderer.rootElementRenderer.domNode.ownerDocument;
			htmlDocument.invalidationManager.invalidateNativeLayerTree();
		}
		, invalidateBitmapSize: function () {
			var htmlDocument = this.layerRenderer.rootElementRenderer.domNode.ownerDocument;
			htmlDocument.invalidationManager.invalidateBitmapSizes();
		}
		, attach: function () {
			this.doAttach();
			var child = this.firstChild;
			while (child != null) {
				child.attach();
				child = child.nextSibling;
			}
		}
		, detach: function () {
			var child = this.firstChild;
			while (child != null) {
				child.detach();
				child = child.nextSibling;
			}
			this.doDetach();
		}
		, doAttach: function () {
			var index = 0;
			var previousGraphicsContextSibling = this.previousSibling;
			while (previousGraphicsContextSibling != null) {
				index++;
				previousGraphicsContextSibling = previousGraphicsContextSibling.previousSibling;
			}
			this.nativeLayer.attach(this.parentNode.nativeLayer.platformLayer, index);
		}
		, doDetach: function () {
			this.nativeLayer.detach(this.parentNode.nativeLayer.platformLayer);
		}
		, __class__: cocktail_core_graphics_GraphicsContext
	});
	var cocktail_core_graphics_InitialGraphicsContext = function (layerRenderer) {
		cocktail_core_graphics_GraphicsContext.call(this, layerRenderer);
		this.invalidateNativeLayer();
	};
	$hxClasses["cocktail.core.graphics.InitialGraphicsContext"] = cocktail_core_graphics_InitialGraphicsContext;
	cocktail_core_graphics_InitialGraphicsContext.__name__ = ["cocktail", "core", "graphics", "InitialGraphicsContext"];
	cocktail_core_graphics_InitialGraphicsContext.__super__ = cocktail_core_graphics_GraphicsContext;
	cocktail_core_graphics_InitialGraphicsContext.prototype = $extend(cocktail_core_graphics_GraphicsContext.prototype, {
		doAttach: function () {
			this.nativeLayer.attach(this.getTopPlatformLayer(), 0);
			this.invalidateBitmapSize();
		}
		, doDetach: function () {
			this.nativeLayer.detach(this.getTopPlatformLayer());
		}
		, getTopPlatformLayer: function () {
			var htmlDocument = this.layerRenderer.rootElementRenderer.domNode.ownerDocument;
			return htmlDocument.getTopPlatformLayer();
		}
		, __class__: cocktail_core_graphics_InitialGraphicsContext
	});
	var cocktail_core_graphics_TextDrawer = function () {
	};
	$hxClasses["cocktail.core.graphics.TextDrawer"] = cocktail_core_graphics_TextDrawer;
	cocktail_core_graphics_TextDrawer.__name__ = ["cocktail", "core", "graphics", "TextDrawer"];
	cocktail_core_graphics_TextDrawer.draw = function (graphicsContext, elementRenderer, hasUnderline, hasOverline, hasLineThrough, hasBlink, scrollOffset, clipRect) {
		var inlineBoxesLength = elementRenderer.inlineBoxes.length;
		var _g = 0;
		while (_g < inlineBoxesLength) {
			var i = _g++;
			var inlineBox = elementRenderer.inlineBoxes[i];
			cocktail_core_graphics_TextDrawer._renderRect.width = inlineBox.bounds.width;
			cocktail_core_graphics_TextDrawer._renderRect.height = inlineBox.bounds.height;
			cocktail_core_graphics_TextDrawer._destPoint.x = inlineBox.bounds.x + elementRenderer.globalBounds.x - scrollOffset.x;
			cocktail_core_graphics_TextDrawer._destPoint.y = inlineBox.bounds.y + elementRenderer.globalBounds.y - scrollOffset.y;
			cocktail_core_graphics_TextDrawer._destPoint.y += inlineBox.leadedAscent - elementRenderer.coreStyle.fontMetrics.ascent;
			if (inlineBox.lineBox != null) {
				cocktail_core_graphics_TextDrawer._destPoint.y += inlineBox.lineBox.bounds.y;
				cocktail_core_graphics_TextDrawer._destPoint.x += inlineBox.lineBox.bounds.x;
			}
			if (hasUnderline == true) {
				cocktail_core_graphics_TextDrawer._decorationRect.width = cocktail_core_graphics_TextDrawer._renderRect.width;
				cocktail_core_graphics_TextDrawer._decorationRect.height = cocktail_core_graphics_TextDrawer.TEXT_DECORATION_THICKNESS;
				cocktail_core_graphics_TextDrawer._decorationRect.x = cocktail_core_graphics_TextDrawer._destPoint.x;
				cocktail_core_graphics_TextDrawer._decorationRect.y = cocktail_core_graphics_TextDrawer._destPoint.y + elementRenderer.getLeadedAscent() + elementRenderer.coreStyle.fontMetrics.underlineOffset;
				graphicsContext.nativeLayer.graphics.fillRect(cocktail_core_graphics_TextDrawer._decorationRect, elementRenderer.coreStyle.usedValues.color, clipRect);
			}
			if (hasOverline == true) {
				cocktail_core_graphics_TextDrawer._decorationRect.width = cocktail_core_graphics_TextDrawer._renderRect.width;
				cocktail_core_graphics_TextDrawer._decorationRect.height = cocktail_core_graphics_TextDrawer.TEXT_DECORATION_THICKNESS;
				cocktail_core_graphics_TextDrawer._decorationRect.x = cocktail_core_graphics_TextDrawer._destPoint.x;
				cocktail_core_graphics_TextDrawer._decorationRect.y = cocktail_core_graphics_TextDrawer._destPoint.y;
				graphicsContext.nativeLayer.graphics.fillRect(cocktail_core_graphics_TextDrawer._decorationRect, elementRenderer.coreStyle.usedValues.color, clipRect);
			}
			if (inlineBox.isSpace == false) {
				var typedTextInlineBox = inlineBox;
				if (typedTextInlineBox.get_nativeTextBitmap() != null) graphicsContext.nativeLayer.graphics.copyPixels(typedTextInlineBox.get_nativeTextBitmap(), cocktail_core_graphics_TextDrawer._renderRect, cocktail_core_graphics_TextDrawer._destPoint, clipRect);
			}
			if (hasLineThrough == true) {
				cocktail_core_graphics_TextDrawer._decorationRect.width = cocktail_core_graphics_TextDrawer._renderRect.width;
				cocktail_core_graphics_TextDrawer._decorationRect.height = cocktail_core_graphics_TextDrawer.TEXT_DECORATION_THICKNESS;
				cocktail_core_graphics_TextDrawer._decorationRect.x = cocktail_core_graphics_TextDrawer._destPoint.x;
				cocktail_core_graphics_TextDrawer._decorationRect.y = cocktail_core_graphics_TextDrawer._destPoint.y + elementRenderer.coreStyle.fontMetrics.ascent / 2;
				graphicsContext.nativeLayer.graphics.fillRect(cocktail_core_graphics_TextDrawer._decorationRect, elementRenderer.coreStyle.usedValues.color, clipRect);
			}
		}
	};
	cocktail_core_graphics_TextDrawer.prototype = {
		__class__: cocktail_core_graphics_TextDrawer
	};
	var cocktail_core_history_History = function (document) {
		this.stateDataArray = [];
		this.currentIdx = 0;
		this.document = document;
		this.stateDataArray.push({ state: null, title: "", url: null });
	};
	$hxClasses["cocktail.core.history.History"] = cocktail_core_history_History;
	cocktail_core_history_History.__name__ = ["cocktail", "core", "history", "History"];
	cocktail_core_history_History.prototype = {
		dispose: function () {
			this.stateDataArray = null;
			this.document = null;
			this.state = null;
		}
		, get_length: function () {
			return this.stateDataArray.length;
		}
		, go: function (delta) {
			var newIndex = this.currentIdx + delta;
			if (newIndex < 0 || newIndex >= this.stateDataArray.length) return;
			this.currentIdx = newIndex;
			this.state = this.cloneData(this.stateDataArray[this.currentIdx].state);
			this.onPopState({ state: this.state, title: this.stateDataArray[this.currentIdx].title, url: this.stateDataArray[this.currentIdx].url });
		}
		, back: function () {
			this.go(-1);
		}
		, forward: function () {
			this.go(1);
		}
		, pushState: function (data, title, url) {
			while (this.stateDataArray.length > this.currentIdx + 1) this.stateDataArray.pop();
			var newStateData = this.computeStateData(data, title, url);
			this.stateDataArray.push(newStateData);
			this.currentIdx++;
			this.state = this.cloneData(newStateData.state);
		}
		, replaceState: function (data, title, url) {
			var newStateData = this.computeStateData(data, title, url);
			this.stateDataArray[this.currentIdx] = newStateData;
			this.state = this.cloneData(newStateData.state);
		}
		, onPopState: function (stateData) {
			var clonedState = this.cloneData(stateData.state);
			var event = new cocktail_core_event_PopStateEvent();
			event.initPopStateEvent("popstate", true, false, null, 0.0, clonedState);
			this.document.defaultView.dispatchEvent(event);
			if (this.document.defaultView.onpopstate != null) this.document.defaultView.onpopstate(event);
		}
		, cloneData: function (data) {
			return haxe_Unserializer.run(haxe_Serializer.run(data));
		}
		, computeStateData: function (data, title, url) {
			var clonedData;
			try {
				clonedData = this.cloneData(data);
			} catch (e) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				throw new js__$Boot_HaxeError("SecurityError - Error duplicating the data passed to History::replaceState or History::pushState. The error is: " + Std.string(e));
			}
			if (url != null) url = this.resolveUrl(url); else url = this.stateDataArray[this.currentIdx].url;
			return { state: clonedData, title: title, url: url };
		}
		, resolveUrl: function (url, base) {
			if (base == null) {
				var tags = this.document.getElementsByTagName("base");
				var _g1 = 0;
				var _g = tags.length;
				while (_g1 < _g) {
					var idx = _g1++;
					if (tags[idx].hasAttribute("href")) {
						base = tags[idx].getAttribute("href");
						break;
					}
				}
				if (base == null) base = "";
			}
			url = StringTools.replace(url, "\\", "/");
			var idxBase = url.indexOf("http");
			if (idxBase != 0) url = base + url;
			var urlArray = url.split("/");
			var absoluteUrlArray = [];
			var _g11 = 0;
			var _g2 = urlArray.length;
			while (_g11 < _g2) {
				var idx1 = _g11++;
				if (urlArray[idx1] == "..") absoluteUrlArray.pop(); else absoluteUrlArray.push(urlArray[idx1]);
			}
			url = absoluteUrlArray.join("/");
			return url;
		}
		, __class__: cocktail_core_history_History
		, __properties__: { get_length: "get_length" }
	};
	var cocktail_core_hittest_HitTestManager = function () {
		this._targetPoint = new cocktail_core_geom_PointVO(0.0, 0.0);
		this._elementRenderersAtPoint = [];
	};
	$hxClasses["cocktail.core.hittest.HitTestManager"] = cocktail_core_hittest_HitTestManager;
	cocktail_core_hittest_HitTestManager.__name__ = ["cocktail", "core", "hittest", "HitTestManager"];
	cocktail_core_hittest_HitTestManager.prototype = {
		dispose: function () {
			this._elementRenderersAtPoint = null;
			this._targetPoint = null;
		}
		, getTopMostElementRendererAtPoint: function (stackingContext, x, y) {
			this._targetPoint.x = x;
			this._targetPoint.y = y;
			this._elementRenderersAtPoint = [];
			this.getElementRenderersAtPointInStackingContext(this._elementRenderersAtPoint, stackingContext, this._targetPoint);
			return this._elementRenderersAtPoint[this._elementRenderersAtPoint.length - 1];
		}
		, getElementRenderersAtPointInStackingContext: function (elementRenderersAtPoint, stackingContext, point) {
			this.getElementRenderersAtPointInLayers(elementRenderersAtPoint, stackingContext.layerRenderer, point);
			var child = stackingContext.firstChild;
			while (child != null) {
				this.getElementRenderersAtPointInStackingContext(elementRenderersAtPoint, child, point);
				child = child.nextSibling;
			}
		}
		, getElementRenderersAtPointInLayers: function (elementRenderersAtPoint, layer, point) {
			this.getElementRenderersAtPointInLayer(elementRenderersAtPoint, layer, layer.rootElementRenderer, point);
			var child = layer.firstChild;
			while (child != null) {
				if (child.hasOwnStackingContext == false) this.getElementRenderersAtPointInLayers(elementRenderersAtPoint, child, point);
				child = child.nextSibling;
			}
		}
		, getElementRenderersAtPointInLayer: function (elementRenderersAtPoint, layer, renderer, point) {
			this.hitTestElementRenderer(elementRenderersAtPoint, renderer, point);
			var child = renderer.firstChild;
			while (child != null) {
				if (child.layerRenderer == layer) {
					if (child.firstChild != null) this.getElementRenderersAtPointInLayer(elementRenderersAtPoint, layer, child, point); else this.hitTestElementRenderer(elementRenderersAtPoint, child, point);
				}
				child = child.nextSibling;
			}
		}
		, hitTestElementRenderer: function (elementRenderersAtPoint, elementRenderer, point) {
			if (this.isWithinBounds(point, elementRenderer.hitTestingBounds) == true) {
				if (elementRenderer.isVisible() == true) elementRenderersAtPoint.push(elementRenderer);
			}
		}
		, isWithinBounds: function (point, bounds) {
			return point.x >= bounds.x && point.x <= bounds.x + bounds.width && point.y >= bounds.y && point.y <= bounds.y + bounds.height;
		}
		, __class__: cocktail_core_hittest_HitTestManager
	};
	var cocktail_core_html_HTMLElement = function (tagName) {
		cocktail_core_dom_Element.call(this, tagName);
		this.attachedToDOM = false;
		this._isInitialised = false;
		this._needsCascading = false;
		this._needsStyleDeclarationUpdate = false;
		this._shouldCascadeAllProperties = true;
		this._needsElementRendererUpdate = true;
		this._pendingChangedProperties = [];
		this._initialStyleDeclaration = cocktail_core_css_InitialStyleDeclaration.getInstance();
	};
	$hxClasses["cocktail.core.html.HTMLElement"] = cocktail_core_html_HTMLElement;
	cocktail_core_html_HTMLElement.__name__ = ["cocktail", "core", "html", "HTMLElement"];
	cocktail_core_html_HTMLElement.__super__ = cocktail_core_dom_Element;
	cocktail_core_html_HTMLElement.prototype = $extend(cocktail_core_dom_Element.prototype, {
		dispose: function () {
			this._ownerHTMLDocument = null;
			this.set_ownerDocument(null);
			this._initialStyleDeclaration = null;
			this._pendingChangedProperties = null;
			this.coreStyle.dispose();
			this.coreStyle = null;
			this.style.dispose();
			this.style = null;
		}
		, init: function () {
			this.initCoreStyle();
			this.initStyle();
		}
		, initCoreStyle: function () {
			this.coreStyle = new cocktail_core_css_CoreStyle(this);
		}
		, initStyle: function () {
			this.style = new cocktail_core_css_CSSStyleDeclaration(null, $bind(this, this.onInlineStyleChange));
		}
		, set_ownerDocument: function (value) {
			cocktail_core_dom_Element.prototype.set_ownerDocument.call(this, value);
			if (this._isInitialised == false) {
				this.init();
				this._isInitialised = true;
			}
			this._ownerHTMLDocument = value;
			return value;
		}
		, appendChild: function (newChild) {
			cocktail_core_dom_Element.prototype.appendChild.call(this, newChild);
			if (newChild.get_nodeType() == 1) {
				var child = newChild;
				child.appended();
			} else if (newChild.get_nodeType() == 3) this.invalidateElementRenderer();
			this.invalidateCascade();
			return newChild;
		}
		, removeChild: function (oldChild) {
			cocktail_core_dom_Element.prototype.removeChild.call(this, oldChild);
			if (oldChild.get_nodeType() == 1) {
				var child = oldChild;
				child.removed();
			} else if (oldChild.get_nodeType() == 3) this.invalidateElementRenderer();
			return oldChild;
		}
		, insertBefore: function (newChild, refChild) {
			cocktail_core_dom_Element.prototype.insertBefore.call(this, newChild, refChild);
			if (refChild != null) {
				if (newChild.get_nodeType() == 1) {
					var child = newChild;
					child.appended();
					this.invalidateCascade();
				}
			}
			return newChild;
		}
		, getElementsByTagName: function (tagName) {
			return cocktail_core_dom_Element.prototype.getElementsByTagName.call(this, tagName.toUpperCase());
		}
		, setAttribute: function (name, value) {
			name = name.toLowerCase();
			if (name == "style") {
				this.style.set_cssText(value);
				this.invalidateCascade();
			} else if (name == "class") this.set_className(value); else {
				cocktail_core_dom_Element.prototype.setAttribute.call(this, name, value);
				this.invalidateStyleDeclaration(true);
			}
		}
		, getAttribute: function (name) {
			if (name == "style") return this.style.get_cssText(); else return cocktail_core_dom_Element.prototype.getAttribute.call(this, name);
		}
		, getTargetAncestors: function () {
			var targetAncestors = cocktail_core_dom_Element.prototype.getTargetAncestors.call(this);
			targetAncestors.push(this._ownerHTMLDocument);
			if (this._ownerHTMLDocument.defaultView != null) targetAncestors.push(this._ownerHTMLDocument.defaultView);
			return targetAncestors;
		}
		, executeDefaultActionIfNeeded: function (defaultPrevented, event) {
			if (defaultPrevented == false) {
				var _g = event.type;
				switch (_g) {
					case "mousedown":
						this.focus();
						break;
				}
			}
		}
		, reset: function () {
		}
		, invalidate: function () {
			if (this.elementRenderer != null) this.elementRenderer.invalidate();
		}
		, invalidateStyle: function (styleIndex) {
			if (this.elementRenderer != null) this.elementRenderer.invalidateStyle(styleIndex);
		}
		, invalidateElementRenderer: function () {
			this._needsElementRendererUpdate = true;
			if (this._ownerHTMLDocument != null) this._ownerHTMLDocument.invalidationManager.invalidateRenderingTree();
		}
		, invalidateLayerRenderer: function () {
			if (this.elementRenderer != null) this.elementRenderer.invalidateLayerRenderer();
		}
		, invalidateStyleDeclaration: function (recursive) {
			this._needsStyleDeclarationUpdate = true;
			if (recursive == true) {
				if (this.get_nodeType() == 1) {
					var length = this.childNodes.length;
					var _g = 0;
					while (_g < length) {
						var i = _g++;
						if (this.childNodes[i].get_nodeType() == 1) {
							var child = this.childNodes[i];
							child.invalidateStyleDeclaration(true);
						}
					}
				}
			}
			this.invalidateCascade();
		}
		, invalidateCascade: function () {
			this._needsCascading = true;
			if (this._ownerHTMLDocument != null) this._ownerHTMLDocument.invalidationManager.invalidateCascade();
		}
		, invalidateRendering: function () {
			if (this.elementRenderer != null) this._ownerHTMLDocument.invalidationManager.invalidateRendering();
		}
		, updateDocumentImmediately: function () {
			this._ownerHTMLDocument.invalidationManager.updateDocumentImmediately();
		}
		, appended: function () {
			if (this.attachedToDOM == false) {
				if (this.isAttachedToDOM() == true) {
					this.attachedToDOM = true;
					this.addedToDOM();
					var child = this.get_firstChild();
					while (child != null) {
						if (child.get_nodeType() == 1) {
							var htmlChild = child;
							htmlChild.appended();
						}
						child = child.get_nextSibling();
					}
				}
			}
		}
		, removed: function () {
			this.attachedToDOM = false;
			this.removedFromDOM();
			var child = this.get_firstChild();
			while (child != null) {
				if (child.get_nodeType() == 1) {
					var htmlChild = child;
					htmlChild.removed();
				}
				child = child.get_nextSibling();
			}
		}
		, addedToDOM: function () {
			var _g = this.get_nodeType();
			switch (_g) {
				case 1: case 3:
					this.invalidateElementRenderer();
					break;
			}
			this.invalidateStyleDeclaration(true);
			this.invalidateCascade();
		}
		, removedFromDOM: function () {
			var _g = this.get_nodeType();
			switch (_g) {
				case 1: case 3:
					this.detach(true);
					this.invalidateElementRenderer();
					break;
			}
		}
		, isAttachedToDOM: function () {
			var parent = this.parentNode;
			while (parent != null) {
				if (parent.get_nodeType() == 9) return true;
				parent = parent.parentNode;
			}
			return false;
		}
		, updateElementRenderer: function () {
			if (this._needsElementRendererUpdate == true) {
				this._needsElementRendererUpdate = false;
				if (this.isRendered() == false) {
					if (this.elementRenderer != null) {
						this.detach(true);
						return;
					}
				} else if (this.elementRenderer == null) {
					this.attach(true);
					return;
				} else {
					this.detach(false);
					this.attach(false);
				}
			}
			if (this.get_nodeType() == 1) {
				var length = this.childNodes.length;
				var _g = 0;
				while (_g < length) {
					var i = _g++;
					if (this.childNodes[i].get_nodeType() == 1) {
						var child = this.childNodes[i];
						child.updateElementRenderer();
					}
				}
			}
		}
		, attach: function (recursive) {
			if (this.isParentRendered() == false) return;
			if (this.isRendered() == true) this.createElementRenderer();
			if (this.elementRenderer != null) {
				this.attachToParentElementRenderer();
				if (this.get_nodeType() == 1) {
					var length = this.childNodes.length;
					var _g = 0;
					while (_g < length) {
						var i = _g++;
						if (recursive == true && this.childNodes[i].get_nodeType() == 1) {
							var child = this.childNodes[i];
							child.attach(true);
						} else if (this.childNodes[i].get_nodeType() == 3) this.attachTextNode(this.childNodes[i]);
					}
				}
			}
			this._needsElementRendererUpdate = false;
		}
		, detach: function (recursive) {
			if (this.elementRenderer != null) {
				if (this.get_nodeType() == 1) {
					var length = this.childNodes.length;
					var _g = 0;
					while (_g < length) {
						var i = _g++;
						if (recursive == true && this.childNodes[i].get_nodeType() == 1) {
							var child = this.childNodes[i];
							child.detach(true);
						} else if (this.childNodes[i].get_nodeType() == 3) this.detachTextNode(this.childNodes[i]);
					}
				}
				this.detachFromParentElementRenderer();
				this.elementRenderer = null;
			}
		}
		, cascade: function (cascadeManager, programmaticChange) {
			if (this._needsCascading == true || cascadeManager.hasPropertiesToCascade == true) {
				this.cascadeSelf(cascadeManager, programmaticChange);
				this._needsCascading = false;
				if (cascadeManager.hasDisplay == true || cascadeManager.hasFloat == true || cascadeManager.hasOverflowX == true || cascadeManager.hasOverflowY == true || cascadeManager.hasPosition == true) {
					this.detach(true);
					this.invalidateElementRenderer();
				} else if (cascadeManager.hasTransform == true || cascadeManager.hasZIndex == true || cascadeManager.hasOpacity == true) this.invalidateLayerRenderer();
			}
			var childLength = this.childNodes.length;
			var _g = 0;
			while (_g < childLength) {
				var i = _g++;
				if (this.childNodes[i].get_nodeType() == 1) {
					var htmlChild = this.childNodes[i];
					htmlChild.cascade(cascadeManager, programmaticChange);
				}
			}
		}
		, getStyleDeclaration: function () {
			this._shouldCascadeAllProperties = true;
			this.styleManagerCSSDeclaration = this._ownerHTMLDocument.getStyleDeclaration(this);
		}
		, cascadeSelf: function (cascadeManager, programmaticChange) {
			if (this.parentNode != null) {
				var parent = this.parentNode;
				if (parent.styleManagerCSSDeclaration != null) {
					if (this._needsStyleDeclarationUpdate == true || this.styleManagerCSSDeclaration == null) {
						this.getStyleDeclaration();
						this._needsStyleDeclarationUpdate = false;
					}
					var parentStyleDeclaration = parent.coreStyle.computedValues;
					var parentFontMetrics = parent.coreStyle.fontMetrics;
					if (this._shouldCascadeAllProperties == true) cascadeManager.shouldCascadeAll(); else {
						var length = this._pendingChangedProperties.length;
						var _g = 0;
						while (_g < length) {
							var i = _g++;
							cascadeManager.addPropertyToCascade(this._pendingChangedProperties[i]);
						}
					}
					cascadeManager.parentRelativeLengthReference.em = parentFontMetrics.fontSize;
					cascadeManager.parentRelativeLengthReference.ch = parentFontMetrics.zeroHeight;
					cascadeManager.parentRelativeLengthReference.ex = parentFontMetrics.xHeight;
					this.coreStyle.cascade(cascadeManager, this._initialStyleDeclaration, this.styleManagerCSSDeclaration, this.style, parentStyleDeclaration, programmaticChange);
				}
			}
			this._shouldCascadeAllProperties = false;
			this._pendingChangedProperties = [];
		}
		, onInlineStyleChange: function (changedPropertyIndex) {
			if (this._shouldCascadeAllProperties == false) this._pendingChangedProperties.push(changedPropertyIndex);
			this.invalidateCascade();
		}
		, getNextElementRendererSibling: function () {
			var nextSibling = this.get_nextSibling();
			if (nextSibling == null) return null; else while (nextSibling != null) {
				if (nextSibling.get_nodeType() == 1) {
					var htmlNextSibling = nextSibling;
					if (htmlNextSibling.elementRenderer != null) {
						var elementRenderParent = htmlNextSibling.elementRenderer.parentNode;
						if (elementRenderParent.isAnonymousBlockBox() == true) return elementRenderParent;
						return htmlNextSibling.elementRenderer;
					}
				}
				nextSibling = nextSibling.get_nextSibling();
			}
			return null;
		}
		, attachToParentElementRenderer: function () {
			var parent = this.parentNode;
			parent.elementRenderer.insertBefore(this.elementRenderer, this.getNextElementRendererSibling());
		}
		, detachFromParentElementRenderer: function () {
			this.elementRenderer.parentNode.removeChild(this.elementRenderer);
		}
		, attachTextNode: function (textNode) {
			var textRenderer = new cocktail_core_renderer_TextRenderer(textNode, this.coreStyle);
			this.elementRenderer.appendChild(textRenderer);
		}
		, detachTextNode: function (textNode) {
			var child = this.elementRenderer.firstChild;
			while (child != null) {
				if (child.domNode == textNode) {
					this.elementRenderer.removeChild(child);
					return;
				} else if (child.isAnonymousBlockBox() == true) {
					if (child.firstChild != null) {
						if (child.firstChild.domNode == textNode) {
							this.elementRenderer.removeChild(child);
							return;
						}
					}
				}
				child = child.nextSibling;
			}
		}
		, createElementRenderer: function () {
			var _g = this.coreStyle.getKeyword(this.coreStyle.getComputedOrInitialProperty(0));
			switch (_g[1]) {
				case 28: case 29:
					this.elementRenderer = new cocktail_core_renderer_BlockBoxRenderer(this, this.coreStyle);
					break;
				case 30:
					this.elementRenderer = new cocktail_core_renderer_InlineBoxRenderer(this, this.coreStyle);
					break;
				case 18:
					break;
				default:
					throw new js__$Boot_HaxeError("Illegal value for display style");
			}
		}
		, isRendered: function () {
			if (this.get_hidden() == true) return false;
			if (this.coreStyle.isNone(this.coreStyle.getComputedOrInitialProperty(0))) return false;
			return true;
		}
		, isParentRendered: function () {
			if (this.parentNode == null) return false;
			var parent = this.parentNode;
			return parent.elementRenderer != null;
		}
		, startPendingTransitions: function () {
			var atLeastOneTransitionStarted = false;
			var transitionStarted = this.coreStyle.startPendingTransitions();
			if (transitionStarted == true) atLeastOneTransitionStarted = true;
			var length = this.childNodes.length;
			var _g = 0;
			while (_g < length) {
				var i = _g++;
				if (this.childNodes[i].get_nodeType() == 1) {
					var child = this.childNodes[i];
					var transitionStarted1 = child.startPendingTransitions();
					if (transitionStarted1 == true) atLeastOneTransitionStarted = true;
				}
			}
			return atLeastOneTransitionStarted;
		}
		, endPendingTransitions: function () {
			this.coreStyle.endPendingTransitions();
			var length = this.childNodes.length;
			var _g = 0;
			while (_g < length) {
				var i = _g++;
				if (this.childNodes[i].get_nodeType() == 1) {
					var child = this.childNodes[i];
					child.endPendingTransitions();
				}
			}
		}
		, querySelector: function (selectors) {
			var typedSelectors = [];
			var isValidSelector = this.parseSelectors(selectors, typedSelectors);
			if (isValidSelector == false) throw new js__$Boot_HaxeError(12);
			var nodes = this.doQuerySelector(this, typedSelectors, false);
			if (nodes.length == 0) return null; else return nodes[0];
		}
		, querySelectorAll: function (selectors) {
			var typedSelectors = [];
			var isValidSelector = this.parseSelectors(selectors, typedSelectors);
			if (isValidSelector == false) throw new js__$Boot_HaxeError(12);
			return this.doQuerySelector(this, typedSelectors, true);
		}
		, doQuerySelector: function (node, selectors, queryAll) {
			var nodes = [];
			var matches = this._ownerHTMLDocument.matchesSelector(node, selectors);
			if (matches == true) {
				nodes.push(node);
				if (queryAll == false) return nodes;
			}
			var length = node.childNodes.length;
			var _g = 0;
			while (_g < length) {
				var i = _g++;
				if (node.childNodes[i].get_nodeType() == 1) {
					var matchingNodes = this.doQuerySelector(node.childNodes[i], selectors, queryAll);
					if (queryAll == false && matchingNodes.length > 0) return matchingNodes;
					var matchingNodesLength = matchingNodes.length;
					var _g1 = 0;
					while (_g1 < matchingNodesLength) {
						var j = _g1++;
						nodes.push(matchingNodes[j]);
					}
				}
			}
			return nodes;
		}
		, parseSelectors: function (selectors, typedSelectors) {
			var selectorParser = new cocktail_core_css_parsers_CSSSelectorParser();
			var separatedSelectors = selectors.split(",");
			var _g1 = 0;
			var _g = separatedSelectors.length;
			while (_g1 < _g) {
				var i = _g1++;
				var isValidSelector = selectorParser.parseSelector(separatedSelectors[i], typedSelectors);
				if (isValidSelector == false) return false;
			}
			return true;
		}
		, click: function () {
			this.dispatchEvent(this.createMouseClickEvent());
		}
		, createMouseClickEvent: function () {
			var mouseEvent = new cocktail_core_event_MouseEvent();
			mouseEvent.initMouseEvent("click", false, false, null, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
			return mouseEvent;
		}
		, fireEvent: function (eventType, bubbles, cancelable) {
			var event = new cocktail_core_event_Event();
			event.initEvent(eventType, bubbles, cancelable);
			this.dispatchEvent(event);
			return event.defaultPrevented;
		}
		, isFocusable: function () {
			if (this.parentNode == null) return false;
			if (this.elementRenderer == null) return false; else if (this.isDefaultFocusable() == true) return true; else if (this.get_tabIndex() > 0) return true;
			return false;
		}
		, isDefaultFocusable: function () {
			return false;
		}
		, focus: function () {
			this._ownerHTMLDocument.set_activeElement(this);
		}
		, blur: function () {
			this._ownerHTMLDocument.body.focus();
		}
		, requestFullScreen: function () {
			this._ownerHTMLDocument.set_fullscreenElement(this);
		}
		, triggerActivationBehaviour: function (clickEvent) {
			var nearestActivatableElement = this.getNearestActivatableElement();
			if (nearestActivatableElement != null) nearestActivatableElement.runPreClickActivation();
			if (clickEvent == null) clickEvent = this.createMouseClickEvent();
			this.dispatchEvent(clickEvent);
			if (nearestActivatableElement != null) {
				if (clickEvent.defaultPrevented == true) nearestActivatableElement.runCanceledActivationStep(); else nearestActivatableElement.runPostClickActivationStep(clickEvent);
			}
		}
		, hasActivationBehaviour: function () {
			return false;
		}
		, runPreClickActivation: function () {
		}
		, runCanceledActivationStep: function () {
		}
		, runPostClickActivationStep: function (event) {
		}
		, getNearestActivatableElement: function () {
			var htmlElement = this;
			while (htmlElement.hasActivationBehaviour() == false) {
				if (htmlElement.parentNode == null || htmlElement.parentNode.get_nodeType() == 9) return null;
				htmlElement = htmlElement.parentNode;
			}
			return htmlElement;
		}
		, get_scrollHeight: function () {
			this.updateDocumentImmediately();
			if (this.elementRenderer != null) return Math.round(this.elementRenderer.get_scrollHeight());
			return 0;
		}
		, get_scrollWidth: function () {
			this.updateDocumentImmediately();
			if (this.elementRenderer != null) return Math.round(this.elementRenderer.get_scrollWidth());
			return 0;
		}
		, set_scrollLeft: function (value) {
			if (this.elementRenderer != null) this.elementRenderer.set_scrollLeft(value);
			return value;
		}
		, get_scrollLeft: function () {
			this.updateDocumentImmediately();
			if (this.elementRenderer != null) return Math.round(this.elementRenderer.get_scrollLeft());
			return 0;
		}
		, set_scrollTop: function (value) {
			if (this.elementRenderer != null) this.elementRenderer.set_scrollTop(value);
			return value;
		}
		, get_scrollTop: function () {
			this.updateDocumentImmediately();
			if (this.elementRenderer != null) return Math.round(this.elementRenderer.get_scrollTop());
			return 0;
		}
		, set_tabIndex: function (value) {
			this.setAttribute("tabindex", value == null ? "null" : "" + value);
			return value;
		}
		, get_tabIndex: function () {
			var tabIndex = cocktail_core_dom_Element.prototype.getAttribute.call(this, "tabindex");
			if (tabIndex == null) {
				if (this.isDefaultFocusable() == true) return 0; else return -1;
			} else return Std.parseInt(tabIndex);
		}
		, get_id: function () {
			return this.getAttributeAsDOMString("id");
		}
		, set_id: function (value) {
			this.setAttribute("id", value);
			return value;
		}
		, get_className: function () {
			return this.getAttributeAsDOMString("class");
		}
		, set_className: function (value) {
			cocktail_core_dom_Element.prototype.setAttribute.call(this, "class", value);
			this.classList = value.split(" ");
			this.invalidateStyleDeclaration(true);
			return value;
		}
		, get_hidden: function () {
			return this.getAttributeAsBool("hidden");
		}
		, set_hidden: function (value) {
			this.setAttributeAsBool("hidden", value);
			return value;
		}
		, getAttributeAsDOMString: function (name) {
			var attribute = this.getAttribute(name);
			if (attribute == null) attribute = "";
			return attribute;
		}
		, getEnumeratedAttributeAsDOMString: function (name, allowedValues, missingValueDefault, invalidValueDefault) {
			var attribute = this.getAttribute(name);
			if (attribute == null) {
				if (missingValueDefault != null) return missingValueDefault; else return "";
			}
			var allowedValuesLength = allowedValues.length;
			var _g = 0;
			while (_g < allowedValuesLength) {
				var i = _g++;
				if (attribute == allowedValues[i]) return attribute;
			}
			if (invalidValueDefault != null) return invalidValueDefault; else if (missingValueDefault != null) return missingValueDefault; else return "";
		}
		, getAttributeAsBool: function (name) {
			if (this.getAttribute(name) != null) return true; else return false;
		}
		, setAttributeAsBool: function (name, value) {
			var attribute = this.getAttribute(name);
			if (value == false) {
				if (attribute != null) this.removeAttribute(name);
			} else this.setAttribute(name, "");
		}
		, getAttributeAsSignedInteger: function (name, defaultValue) {
			var attribute = this.getAttribute(name);
			if (attribute == null) {
				if (defaultValue != null) return defaultValue; else return 0;
			}
			return Std.parseInt(attribute);
		}
		, getAttributeAsPositiveSignedInteger: function (name, defaultValue) {
			var attribute = this.getAttribute(name);
			if (attribute == null) {
				if (defaultValue != null) return defaultValue; else return -1;
			}
			var valueAsInt = Std.parseInt(attribute);
			if (valueAsInt < 0) return -1; else return valueAsInt;
		}
		, set_innerHTML: function (value) {
			var childLength = this.childNodes.length;
			var _g = 0;
			while (_g < childLength) {
				var i = _g++;
				this.removeChild(this.childNodes[0]);
			}
			var wrappedHTML = "<" + "DIV" + ">";
			wrappedHTML += value;
			wrappedHTML += "<" + "/" + "DIV" + ">";
			var node = cocktail_core_parser_DOMParser.parse(wrappedHTML, this.ownerDocument);
			if (node == null) return value;
			var length = node.childNodes.length;
			var _g1 = 0;
			while (_g1 < length) {
				var i1 = _g1++;
				this.appendChild(node.childNodes[0]);
			}
			return value;
		}
		, set_outerHTML: function (value) {
			var node = cocktail_core_parser_DOMParser.parse(value, this.ownerDocument);
			var oldNextSibling = this.get_nextSibling();
			this.parentNode.removeChild(this);
			if (node == null) return value;
			this.parentNode.insertBefore(node, oldNextSibling);
			return value;
		}
		, get_innerHTML: function () {
			var str = cocktail_core_parser_DOMParser.serialize(this);
			var pos = str.indexOf(">") + 1;
			var len = str.lastIndexOf("<") - str.indexOf(">") - 1;
			str = HxOverrides.substr(str, pos, len);
			return str;
		}
		, get_outerHTML: function () {
			var str = cocktail_core_parser_DOMParser.serialize(this);
			return str;
		}
		, isVoidElement: function () {
			return false;
		}
		, get_offsetParent: function () {
			if (this.elementRenderer == null) return null;
			var _g = this.coreStyle.getKeyword(this.coreStyle.getComputedOrInitialProperty(1));
			switch (_g[1]) {
				case 35:
					return null;
				default:
			}
			var parent = this.parentNode;
			while (parent != null) {
				if (parent.elementRenderer.isPositioned() == true || parent.tagName == "BODY") return parent;
				parent = parent.parentNode;
			}
			return null;
		}
		, get_offsetWidth: function () {
			this.updateDocumentImmediately();
			if (this.elementRenderer != null) {
				var usedValues = this.coreStyle.usedValues;
				return Math.round(usedValues.width + usedValues.paddingLeft + usedValues.paddingRight + usedValues.borderLeftWidth + usedValues.borderRightWidth);
			}
			return 0;
		}
		, get_offsetHeight: function () {
			this.updateDocumentImmediately();
			if (this.elementRenderer != null) {
				var usedValues = this.coreStyle.usedValues;
				return Math.round(usedValues.height + usedValues.paddingTop + usedValues.paddingBottom + usedValues.borderTopWidth + usedValues.borderBottomWidth);
			}
			return 0;
		}
		, get_offsetLeft: function () {
			this.updateDocumentImmediately();
			if (this.elementRenderer != null) {
				var offsetParent = this.get_offsetParent();
				if (offsetParent == null) return Math.round(this.elementRenderer.globalBounds.x); else {
					var globalX = offsetParent.elementRenderer.globalBounds.x;
					if (offsetParent.tagName == "BODY" && offsetParent.elementRenderer.isAbsolutelyPositioned() == false) globalX = 0;
					return Math.round(this.elementRenderer.globalBounds.x - globalX);
				}
			}
			return 0;
		}
		, get_offsetTop: function () {
			this.updateDocumentImmediately();
			if (this.elementRenderer != null) {
				var offsetParent = this.get_offsetParent();
				if (offsetParent == null) return Math.round(this.elementRenderer.globalBounds.y); else {
					var globalY = offsetParent.elementRenderer.globalBounds.y;
					if (offsetParent.tagName == "BODY" && offsetParent.elementRenderer.isAbsolutelyPositioned() == false) globalY = 0;
					return Math.round(this.elementRenderer.globalBounds.y - globalY);
				}
			}
			return 0;
		}
		, get_clientWidth: function () {
			this.updateDocumentImmediately();
			if (this.elementRenderer != null) {
				var usedValues = this.coreStyle.usedValues;
				return Math.round(usedValues.width + usedValues.paddingLeft + usedValues.paddingRight);
			}
			return 0;
		}
		, get_clientHeight: function () {
			this.updateDocumentImmediately();
			if (this.elementRenderer != null) {
				var usedValues = this.coreStyle.usedValues;
				return Math.round(usedValues.height + usedValues.paddingTop + usedValues.paddingBottom);
			}
			return 0;
		}
		, get_clientTop: function () {
			this.updateDocumentImmediately();
			if (this.elementRenderer != null) {
				var usedValues = this.coreStyle.usedValues;
				return Math.round(usedValues.borderTopWidth);
			}
			return 0;
		}
		, get_clientLeft: function () {
			this.updateDocumentImmediately();
			if (this.elementRenderer != null) {
				var usedValues = this.coreStyle.usedValues;
				return Math.round(usedValues.borderBottomWidth);
			}
			return 0;
		}
		, __class__: cocktail_core_html_HTMLElement
		, __properties__: $extend(cocktail_core_dom_Element.prototype.__properties__, { get_clientTop: "get_clientTop", get_clientLeft: "get_clientLeft", get_clientHeight: "get_clientHeight", get_clientWidth: "get_clientWidth", get_offsetTop: "get_offsetTop", get_offsetLeft: "get_offsetLeft", get_offsetHeight: "get_offsetHeight", get_offsetWidth: "get_offsetWidth", get_offsetParent: "get_offsetParent", set_outerHTML: "set_outerHTML", get_outerHTML: "get_outerHTML", set_innerHTML: "set_innerHTML", get_innerHTML: "get_innerHTML", get_scrollWidth: "get_scrollWidth", get_scrollHeight: "get_scrollHeight", set_scrollLeft: "set_scrollLeft", get_scrollLeft: "get_scrollLeft", set_scrollTop: "set_scrollTop", get_scrollTop: "get_scrollTop", set_hidden: "set_hidden", get_hidden: "get_hidden", set_className: "set_className", get_className: "get_className", set_id: "set_id", get_id: "get_id", set_tabIndex: "set_tabIndex", get_tabIndex: "get_tabIndex" })
	});
	var cocktail_core_html_EmbeddedElement = function (tagName) {
		cocktail_core_html_HTMLElement.call(this, tagName);
	};
	$hxClasses["cocktail.core.html.EmbeddedElement"] = cocktail_core_html_EmbeddedElement;
	cocktail_core_html_EmbeddedElement.__name__ = ["cocktail", "core", "html", "EmbeddedElement"];
	cocktail_core_html_EmbeddedElement.__super__ = cocktail_core_html_HTMLElement;
	cocktail_core_html_EmbeddedElement.prototype = $extend(cocktail_core_html_HTMLElement.prototype, {
		init: function () {
			cocktail_core_html_HTMLElement.prototype.init.call(this);
		}
		, get_intrinsicHeight: function () {
			return this.intrinsicHeight;
		}
		, get_intrinsicWidth: function () {
			return this.intrinsicWidth;
		}
		, get_intrinsicRatio: function () {
			return this.intrinsicRatio;
		}
		, set_width: function (value) {
			this.setAttribute("width", value == null ? "null" : "" + value);
			return value;
		}
		, get_width: function () {
			return this.getAttributeAsPositiveSignedInteger("width", 0);
		}
		, set_height: function (value) {
			this.setAttribute("height", value == null ? "null" : "" + value);
			return value;
		}
		, get_height: function () {
			return this.getAttributeAsPositiveSignedInteger("height", 0);
		}
		, __class__: cocktail_core_html_EmbeddedElement
		, __properties__: $extend(cocktail_core_html_HTMLElement.prototype.__properties__, { get_intrinsicRatio: "get_intrinsicRatio", get_intrinsicWidth: "get_intrinsicWidth", get_intrinsicHeight: "get_intrinsicHeight", set_width: "set_width", get_width: "get_width", set_height: "set_height", get_height: "get_height" })
	});
	var cocktail_core_html_FormAssociatedElement = function (tagName) {
		cocktail_core_html_EmbeddedElement.call(this, tagName);
	};
	$hxClasses["cocktail.core.html.FormAssociatedElement"] = cocktail_core_html_FormAssociatedElement;
	cocktail_core_html_FormAssociatedElement.__name__ = ["cocktail", "core", "html", "FormAssociatedElement"];
	cocktail_core_html_FormAssociatedElement.__super__ = cocktail_core_html_EmbeddedElement;
	cocktail_core_html_FormAssociatedElement.prototype = $extend(cocktail_core_html_EmbeddedElement.prototype, {
		appended: function () {
			cocktail_core_html_EmbeddedElement.prototype.appended.call(this);
			this.resetFormOwner();
		}
		, removed: function () {
			cocktail_core_html_EmbeddedElement.prototype.removed.call(this);
			this.resetFormOwner();
		}
		, resetFormOwner: function () {
			var firstFormAncestor = this.getFirstFormAncestor();
			if (firstFormAncestor == null) return;
			if (firstFormAncestor == this.form) return;
			if (this.form != null) {
				this.dissociateFormElement(this.form);
				this.form = null;
			}
			if (firstFormAncestor != null) {
				this.form = firstFormAncestor;
				this.associateFormElement(this.form);
			}
		}
		, getFirstFormAncestor: function () {
			if (this.parentNode.get_nodeType() != 1) return null;
			var parent = this.parentNode;
			while (parent != null) {
				if (parent.tagName == "FORM") return parent;
				if (parent.get_nodeType() != 1) return null;
				if (parent.parentNode == null) return null;
				if (parent.parentNode.get_nodeType() != 1) return null;
				parent = parent.parentNode;
			}
			return null;
		}
		, associateFormElement: function (form) {
			form.elements.push(this);
		}
		, dissociateFormElement: function (form) {
			HxOverrides.remove(form.elements, this);
		}
		, __class__: cocktail_core_html_FormAssociatedElement
	});
	var cocktail_core_html_HTMLAnchorElement = function () {
		cocktail_core_html_HTMLElement.call(this, "A");
	};
	$hxClasses["cocktail.core.html.HTMLAnchorElement"] = cocktail_core_html_HTMLAnchorElement;
	cocktail_core_html_HTMLAnchorElement.__name__ = ["cocktail", "core", "html", "HTMLAnchorElement"];
	cocktail_core_html_HTMLAnchorElement.__super__ = cocktail_core_html_HTMLElement;
	cocktail_core_html_HTMLAnchorElement.prototype = $extend(cocktail_core_html_HTMLElement.prototype, {
		hasActivationBehaviour: function () {
			return true;
		}
		, runPostClickActivationStep: function (event) {
			if (event.defaultPrevented == true) return;
			this.openDocument();
		}
		, isDefaultFocusable: function () {
			if (this.get_href() != null) return true; else return false;
		}
		, openDocument: function () {
			if (this.get_href() != null) this._ownerHTMLDocument.navigateToURL(this.get_href(), this.get_target());
		}
		, set_href: function (value) {
			this.setAttribute("href", value);
			return value;
		}
		, get_href: function () {
			return this.getAttributeAsDOMString("href");
		}
		, set_target: function (value) {
			this.setAttribute("target", value);
			return value;
		}
		, get_target: function () {
			return this.getAttributeAsDOMString("target");
		}
		, __class__: cocktail_core_html_HTMLAnchorElement
		, __properties__: $extend(cocktail_core_html_HTMLElement.prototype.__properties__, { set_target: "set_target", get_target: "get_target", set_href: "set_href", get_href: "get_href" })
	});
	var cocktail_core_html_HTMLMediaElement = function (tagName) {
		cocktail_core_html_EmbeddedElement.call(this, tagName);
		this.networkState = 0;
		this.ended = false;
		this.duration = 0;
		this.paused = true;
		this.seeking = false;
		this.readyState = 0;
		this._autoplaying = true;
		this.set_volume(1.0);
		this.set_muted(false);
		this._stalledByPreload = false;
		this._loadedDataWasDispatched = false;
		this._defaultPlaybackStartPosition = 0;
		this._officialPlaybackPosition = 0;
		this._currentPlaybackPosition = 0;
		this._initialPlaybackPosition = 0;
		this._earliestPossiblePosition = 0;
	};
	$hxClasses["cocktail.core.html.HTMLMediaElement"] = cocktail_core_html_HTMLMediaElement;
	cocktail_core_html_HTMLMediaElement.__name__ = ["cocktail", "core", "html", "HTMLMediaElement"];
	cocktail_core_html_HTMLMediaElement.__super__ = cocktail_core_html_EmbeddedElement;
	cocktail_core_html_HTMLMediaElement.prototype = $extend(cocktail_core_html_EmbeddedElement.prototype, {
		init: function () {
			this.initNativeMedia();
			cocktail_core_html_EmbeddedElement.prototype.init.call(this);
		}
		, initNativeMedia: function () {
		}
		, appendChild: function (newChild) {
			cocktail_core_html_EmbeddedElement.prototype.appendChild.call(this, newChild);
			if (this.get_src() == null && this.networkState == 0) {
				if (newChild.get_nodeName() == "SOURCE") this.selectResource();
			}
			return newChild;
		}
		, setAttribute: function (name, value) {
			if (name == "src") this.set_src(value); else if (name == "preload") this.set_preload(value); else cocktail_core_html_EmbeddedElement.prototype.setAttribute.call(this, name, value);
		}
		, getAttribute: function (name) {
			if (name == "preload") return this.get_preload(); else return cocktail_core_html_EmbeddedElement.prototype.getAttribute.call(this, name);
		}
		, play: function () {
			if (this.networkState == 0) this.selectResource();
			if (this.ended == true) {
				this.ended = false;
				this.seek(0);
			}
			if (this.paused == true) {
				this.paused = false;
				this.fireEvent("play", false, false);
				var _g = this.readyState;
				switch (_g) {
					case 0: case 1: case 2:
						this.fireEvent("waiting", false, false);
						break;
					case 3: case 4:
						this.doPlay();
						this.fireEvent("playing", false, false);
						break;
				}
			}
			this._autoplaying = false;
			if (this._stalledByPreload == true) this.selectResource();
		}
		, pause: function () {
			if (this.networkState == 0) this.selectResource();
			this._autoplaying = false;
			if (this.paused == false) {
				this.paused = true;
				this.fireEvent("timeupdate", false, false);
				this.fireEvent("pause", false, false);
				this._officialPlaybackPosition = this._currentPlaybackPosition;
			}
			this.nativeMedia.pause();
		}
		, canPlayType: function (type) {
			return this.nativeMedia.canPlayType(type);
		}
		, doPlay: function () {
			this.nativeMedia.play();
			this.onTimeUpdateTick(0);
		}
		, loadResource: function () {
			var _g = this.networkState;
			switch (_g) {
				case 2: case 1:
					this.fireEvent("abort", false, false);
					break;
			}
			if (this.networkState != 0) {
				this.fireEvent("emptied", false, false);
				this.nativeMedia.set_src(null);
				this.networkState = 0;
				this.readyState = 0;
				this.paused = true;
				this.seeking = false;
				this._currentPlaybackPosition = 0;
				if (this._officialPlaybackPosition > 0) {
					this._officialPlaybackPosition = 0;
					this.fireEvent("timeupdate", false, false);
				} else this._officialPlaybackPosition = 0;
				this._initialPlaybackPosition = 0;
				this.duration = NaN;
			}
			this._loadedDataWasDispatched = false;
			this.selectResource();
		}
		, selectResource: function () {
			this.networkState = 3;
			this._ownerHTMLDocument.timer.delay($bind(this, this.doSelectResource));
		}
		, doSelectResource: function (time) {
			var mode;
			var candidate;
			if (this.get_src() != null) mode = 0; else if (this.hasChildSourceElement() == true) {
				mode = 1;
				var length = this.childNodes.length;
				var _g = 0;
				while (_g < length) {
					var i = _g++;
					if (this.childNodes[i].get_nodeName() == "SOURCE") {
						candidate = this.childNodes[i];
						break;
					}
				}
			} else {
				this.networkState = 0;
				return;
			}
			this.networkState = 2;
			this.fireEvent("loadstart", false, false);
			if (mode == 0) {
				if (this.get_src() == "") {
					this.networkState = 3;
					this.fireEvent("error", false, false);
					return;
				}
				this.currentSrc = this.get_src();
				this.fetchResource(this.currentSrc);
			} else if (mode == 1) {
				var _g1 = 0;
				var _g2 = this.childNodes.length;
				while (_g1 < _g2) {
					var i1 = _g1++;
					if (this.childNodes[i1].get_nodeName() == "SOURCE") {
						var sourceChild = this.childNodes[i1];
						if (sourceChild.get_type() != null) {
							if (this.canPlayType(sourceChild.get_type()) == "probably") {
								this.currentSrc = sourceChild.get_src();
								this.fetchResource(this.currentSrc);
								return;
							}
						} else if (sourceChild.get_src() != null) {
							if (this.canPlayType(sourceChild.get_src()) == "probably") {
								this.currentSrc = sourceChild.get_src();
								this.fetchResource(this.currentSrc);
								return;
							}
						}
					}
				}
				this.networkState = 0;
			}
		}
		, fetchResource: function (url) {
			if (this.get_preload() == "none" && this._stalledByPreload == false) {
				if (this.get_autoplay() == false) {
					this.networkState = 1;
					this.fireEvent("suspend", false, false);
					this._stalledByPreload = true;
					return;
				}
			}
			this.nativeMedia.onLoadedMetaData = $bind(this, this.onNativeMediaLoadedMetaData);
			var absoluteUrl = this._ownerHTMLDocument.getAbsoluteURL(url);
			this.nativeMedia.set_src(absoluteUrl);
		}
		, seek: function (newPlaybackPosition) {
			if (this.readyState == 0) return;
			if (this.seeking == true) {
			}
			this.seeking = true;
			if (newPlaybackPosition > this.duration) newPlaybackPosition = this.duration;
			if (newPlaybackPosition < this._earliestPossiblePosition) newPlaybackPosition = 0;
			this.fireEvent("seeking", false, false);
			this._currentPlaybackPosition = newPlaybackPosition;
			this.nativeMedia.seek(newPlaybackPosition);
			this.fireEvent("timeupdate", false, false);
			this.fireEvent("seeked", false, false);
		}
		, setReadyState: function (newReadyState) {
			if (this.readyState == 0 && newReadyState == 1) this.fireEvent("loadedmetadata", false, false);
			if (this.readyState == 1 && (newReadyState == 2 || newReadyState == 4 || newReadyState == 3) || this.readyState == 3 && newReadyState == 4) {
				if (this._loadedDataWasDispatched == false && this.readyState == 1) {
					this.fireEvent("loadeddata", false, false);
					this._loadedDataWasDispatched = true;
				}
				if (newReadyState == 4 || newReadyState == 3) {
					if (this.readyState >= 3 && newReadyState <= 2) {
						if (this.isPotentiallyPlaying() == true) {
							this.fireEvent("timeupdate", false, false);
							this.fireEvent("waiting", false, false);
						}
					}
					if (this.readyState <= 2 && newReadyState == 3) {
						this.fireEvent("canplay", false, false);
						if (this.paused == false) {
							this.doPlay();
							this.fireEvent("playing", false, false);
						}
					}
					if (newReadyState == 4) {
						if (this.readyState == 2) {
							this.fireEvent("canplay", false, false);
							if (this.paused == false) {
								this.doPlay();
								this.fireEvent("playing", false, false);
							}
						}
						if (this._autoplaying == true) {
							if (this.paused == true) {
								if (this.get_autoplay() == true) {
									this.paused = false;
									this.fireEvent("play", false, false);
									this.doPlay();
									this.fireEvent("playing", false, false);
								}
							}
						}
						this.fireEvent("canplaythrough", false, false);
					}
				}
			}
			this.readyState = newReadyState;
		}
		, isPotentiallyPlaying: function () {
			if (this.paused == true) return false;
			if (this.ended == true) return false;
			return true;
		}
		, establishMediaTimeline: function () {
			this._currentPlaybackPosition = 0;
			this._initialPlaybackPosition = 0;
			this._officialPlaybackPosition = 0;
			this.duration = this.nativeMedia.get_duration();
			this.fireEvent("durationchange", false, false);
			this.setReadyState(1);
			var jumped = false;
			if (this._defaultPlaybackStartPosition > 0) {
				this.seek(this._defaultPlaybackStartPosition);
				jumped = true;
			}
			this._defaultPlaybackStartPosition = 0;
		}
		, hasChildSourceElement: function () {
			var _g1 = 0;
			var _g = this.childNodes.length;
			while (_g1 < _g) {
				var i = _g1++;
				if (this.childNodes[i].get_nodeName() == "SOURCE") return true;
			}
			return false;
		}
		, onLoadingError: function (error) {
			this.selectResource();
		}
		, onNativeMediaLoadedMetaData: function (e) {
			this.intrinsicHeight = this.nativeMedia.get_height();
			this.intrinsicWidth = this.nativeMedia.get_width();
			this.intrinsicRatio = this.get_intrinsicHeight() / this.get_intrinsicWidth();
			this.establishMediaTimeline();
			this.invalidate();
			this.onProgressTick(0);
			if (this._stalledByPreload == true) {
				this._stalledByPreload = false;
				this.play();
			}
		}
		, onTimeUpdateTick: function (timeStamp) {
			if (this.paused == true) return;
			this._currentPlaybackPosition = this.nativeMedia.get_currentTime();
			this._officialPlaybackPosition = this._currentPlaybackPosition;
			if (this.duration - this._currentPlaybackPosition < 0.2) {
				if (this.get_loop() == true) {
					this.seek(0);
					this.doPlay();
					return;
				}
				this.ended = true;
				this._currentPlaybackPosition = this.duration;
				this._officialPlaybackPosition = this._currentPlaybackPosition;
				this.fireEvent("timeupdate", false, false);
				if (this.paused == false) {
					this.paused = true;
					this.fireEvent("pause", false, false);
				}
				this.fireEvent("ended", false, false);
				return;
			}
			this.fireEvent("timeupdate", false, false);
			this._ownerHTMLDocument.timer.delay($bind(this, this.onTimeUpdateTick), 250);
		}
		, onProgressTick: function (timeStamp) {
			this.fireEvent("progress", false, false);
			if (this.readyState == 1) this.setReadyState(3);
			if (this.nativeMedia.get_bytesLoaded() >= this.nativeMedia.get_bytesTotal()) {
				this.setReadyState(4);
				this.networkState = 1;
				this.fireEvent("suspend", false, false);
				return;
			}
			this._ownerHTMLDocument.timer.delay($bind(this, this.onProgressTick), 350);
		}
		, get_src: function () {
			return this.getAttribute("src");
		}
		, set_src: function (value) {
			cocktail_core_html_EmbeddedElement.prototype.setAttribute.call(this, "src", value);
			this.selectResource();
			return value;
		}
		, get_autoplay: function () {
			if (this.getAttribute("autoplay") != null) return true; else return false;
		}
		, set_autoplay: function (value) {
			cocktail_core_html_EmbeddedElement.prototype.setAttribute.call(this, "autoplay", value == null ? "null" : "" + value);
			return value;
		}
		, get_loop: function () {
			if (this.getAttribute("loop") != null) return true; else return false;
		}
		, set_loop: function (value) {
			cocktail_core_html_EmbeddedElement.prototype.setAttribute.call(this, "loop", value == null ? "null" : "" + value);
			return value;
		}
		, get_preload: function () {
			var preloadValue = cocktail_core_html_EmbeddedElement.prototype.getAttribute.call(this, "preload");
			if (preloadValue == null) return "metadata";
			return preloadValue;
		}
		, set_preload: function (value) {
			switch (value) {
				case "":
					value = "auto";
					break;
				case "auto": case "metadata": case "none":
					break;
				default:
					value = "metadata";
			}
			cocktail_core_html_EmbeddedElement.prototype.setAttribute.call(this, "preload", value);
			return value;
		}
		, set_muted: function (value) {
			this.muted = value;
			if (this.nativeMedia == null) return value;
			if (value == false) this.nativeMedia.set_volume(this.volume); else this.nativeMedia.set_volume(0);
			this.fireEvent("volumechange", false, false);
			return value;
		}
		, set_volume: function (value) {
			this.volume = value;
			if (this.nativeMedia == null) return value;
			if (this.muted == false) this.nativeMedia.set_volume(value);
			this.fireEvent("volumechange", false, false);
			return value;
		}
		, get_buffered: function () {
			var ranges = [];
			ranges.push({ start: 0.0, end: this.duration * (this.nativeMedia.get_bytesLoaded() / this.nativeMedia.get_bytesTotal()) });
			var timeRanges = new cocktail_core_html_TimeRanges(ranges);
			return timeRanges;
		}
		, get_currentTime: function () {
			if (this._defaultPlaybackStartPosition != 0) return this._defaultPlaybackStartPosition;
			return this._officialPlaybackPosition;
		}
		, set_currentTime: function (value) {
			var _g = this.readyState;
			switch (_g) {
				case 0:
					this._defaultPlaybackStartPosition = value;
					break;
				default:
					this._officialPlaybackPosition = value;
					this.seek(value);
			}
			return value;
		}
		, __class__: cocktail_core_html_HTMLMediaElement
		, __properties__: $extend(cocktail_core_html_EmbeddedElement.prototype.__properties__, { set_volume: "set_volume", set_muted: "set_muted", get_buffered: "get_buffered", set_currentTime: "set_currentTime", get_currentTime: "get_currentTime", set_preload: "set_preload", get_preload: "get_preload", set_loop: "set_loop", get_loop: "get_loop", set_autoplay: "set_autoplay", get_autoplay: "get_autoplay", set_src: "set_src", get_src: "get_src" })
	});
	var cocktail_core_html_HTMLAudioElement = function () {
		cocktail_core_html_HTMLMediaElement.call(this, "AUDIO");
	};
	$hxClasses["cocktail.core.html.HTMLAudioElement"] = cocktail_core_html_HTMLAudioElement;
	cocktail_core_html_HTMLAudioElement.__name__ = ["cocktail", "core", "html", "HTMLAudioElement"];
	cocktail_core_html_HTMLAudioElement.__super__ = cocktail_core_html_HTMLMediaElement;
	cocktail_core_html_HTMLAudioElement.prototype = $extend(cocktail_core_html_HTMLMediaElement.prototype, {
		initNativeMedia: function () {
			this.nativeMedia = new cocktail_port_platform_flash_$player_NativeAudio();
		}
		, createElementRenderer: function () {
		}
		, __class__: cocktail_core_html_HTMLAudioElement
	});
	var cocktail_core_html_HTMLBRElement = function () {
		cocktail_core_html_EmbeddedElement.call(this, "BR");
	};
	$hxClasses["cocktail.core.html.HTMLBRElement"] = cocktail_core_html_HTMLBRElement;
	cocktail_core_html_HTMLBRElement.__name__ = ["cocktail", "core", "html", "HTMLBRElement"];
	cocktail_core_html_HTMLBRElement.__super__ = cocktail_core_html_EmbeddedElement;
	cocktail_core_html_HTMLBRElement.prototype = $extend(cocktail_core_html_EmbeddedElement.prototype, {
		isVoidElement: function () {
			return true;
		}
		, __class__: cocktail_core_html_HTMLBRElement
	});
	var cocktail_core_html_HTMLBodyElement = function () {
		cocktail_core_html_HTMLElement.call(this, "BODY");
	};
	$hxClasses["cocktail.core.html.HTMLBodyElement"] = cocktail_core_html_HTMLBodyElement;
	cocktail_core_html_HTMLBodyElement.__name__ = ["cocktail", "core", "html", "HTMLBodyElement"];
	cocktail_core_html_HTMLBodyElement.__super__ = cocktail_core_html_HTMLElement;
	cocktail_core_html_HTMLBodyElement.prototype = $extend(cocktail_core_html_HTMLElement.prototype, {
		createElementRenderer: function () {
			this.elementRenderer = new cocktail_core_renderer_BodyBoxRenderer(this, this.coreStyle);
		}
		, cascadeSelf: function (cascadeManager, programmaticChange) {
			cocktail_core_html_HTMLElement.prototype.cascadeSelf.call(this, cascadeManager, programmaticChange);
			var parent = this.parentNode;
			var parentCoreStyle = parent.coreStyle;
			if (parentCoreStyle.computedValues.get_overflowX() != null) {
				var _g = parentCoreStyle.getKeyword(parentCoreStyle.getComputedOrInitialProperty(51));
				switch (_g[1]) {
					case 36:
						parentCoreStyle.computedValues.set_overflowX(this.coreStyle.computedValues.get_overflowX());
						break;
					default:
				}
			}
			if (parentCoreStyle.computedValues.get_overflowY() != null) {
				var _g1 = parentCoreStyle.getKeyword(parentCoreStyle.getComputedOrInitialProperty(52));
				switch (_g1[1]) {
					case 36:
						parentCoreStyle.computedValues.set_overflowY(this.coreStyle.computedValues.get_overflowY());
						break;
					default:
				}
			}
		}
		, get_offsetParent: function () {
			return null;
		}
		, get_offsetTop: function () {
			return 0;
		}
		, get_offsetLeft: function () {
			return 0;
		}
		, __class__: cocktail_core_html_HTMLBodyElement
	});
	var cocktail_core_html_HTMLConstants = function () {
	};
	$hxClasses["cocktail.core.html.HTMLConstants"] = cocktail_core_html_HTMLConstants;
	cocktail_core_html_HTMLConstants.__name__ = ["cocktail", "core", "html", "HTMLConstants"];
	cocktail_core_html_HTMLConstants.getInputTypeValues = function () {
		return ["hidden", "text", "password", "checkbox", "radio", "submit", "reset", "button", "file", "image"];
	};
	cocktail_core_html_HTMLConstants.prototype = {
		__class__: cocktail_core_html_HTMLConstants
	};
	var cocktail_core_html_ValueModeValue = $hxClasses["cocktail.core.html.ValueModeValue"] = { __ename__: ["cocktail", "core", "html", "ValueModeValue"], __constructs__: ["VALUE", "DEFAULT", "DEFAULT_ON", "FILENAME"] };
	cocktail_core_html_ValueModeValue.VALUE = ["VALUE", 0];
	cocktail_core_html_ValueModeValue.VALUE.toString = $estr;
	cocktail_core_html_ValueModeValue.VALUE.__enum__ = cocktail_core_html_ValueModeValue;
	cocktail_core_html_ValueModeValue.DEFAULT = ["DEFAULT", 1];
	cocktail_core_html_ValueModeValue.DEFAULT.toString = $estr;
	cocktail_core_html_ValueModeValue.DEFAULT.__enum__ = cocktail_core_html_ValueModeValue;
	cocktail_core_html_ValueModeValue.DEFAULT_ON = ["DEFAULT_ON", 2];
	cocktail_core_html_ValueModeValue.DEFAULT_ON.toString = $estr;
	cocktail_core_html_ValueModeValue.DEFAULT_ON.__enum__ = cocktail_core_html_ValueModeValue;
	cocktail_core_html_ValueModeValue.FILENAME = ["FILENAME", 3];
	cocktail_core_html_ValueModeValue.FILENAME.toString = $estr;
	cocktail_core_html_ValueModeValue.FILENAME.__enum__ = cocktail_core_html_ValueModeValue;
	var cocktail_core_html_HTMLDocument = function () {
		cocktail_core_dom_Document.call(this);
		this.init();
	};
	$hxClasses["cocktail.core.html.HTMLDocument"] = cocktail_core_html_HTMLDocument;
	cocktail_core_html_HTMLDocument.__name__ = ["cocktail", "core", "html", "HTMLDocument"];
	cocktail_core_html_HTMLDocument.__super__ = cocktail_core_dom_Document;
	cocktail_core_html_HTMLDocument.prototype = $extend(cocktail_core_dom_Document.prototype, {
		dispose: function () {
			this.timer.dispose();
			this.timer = null;
			this.fontManager.dispose();
			this.fontManager = null;
			this.resourceManager.dispose();
			this.resourceManager = null;
			this.transitionManager.dispose();
			this.transitionManager = null;
			this.invalidationManager.dispose();
			this.invalidationManager = null;
			this.cascadeManager.dispose();
			this.cascadeManager = null;
			this._matchedPseudoClasses = null;
			this._focusManager.dispose();
			this._focusManager = null;
			this._hitTestManager.dispose();
			this._hitTestManager = null;
			this._multiTouchManager.dispose();
			this._multiTouchManager = null;
			this._lastTouchStartPosition = null;
			this.layoutManager.dispose();
			this.layoutManager = null;
			this.location.dispose();
			this.location = null;
			if (this.documentElement != null) {
				this.documentElement.dispose();
				this.documentElement = null;
				this.body = null;
			}
		}
		, init: function () {
			this.timer = new cocktail_core_timer_Timer();
			this.fontManager = new cocktail_core_font_FontManager();
			this.resourceManager = new cocktail_core_resource_ResourceManager(this);
			this.transitionManager = new cocktail_core_transition_TransitionManager(this);
			this.location = new cocktail_core_location_Location(this);
			this.location.onLocationChanged = $bind(this, this.onLocationChanged);
			this.initStyleManager();
			this.invalidationManager = new cocktail_core_invalidation_InvalidationManager(this);
			this.cascadeManager = new cocktail_core_css_CascadeManager();
			this._matchedPseudoClasses = new cocktail_core_css_MatchedPseudoClassesVO(false, false, false, false, false, false, false, false, false, false, null, null, null);
			this._focusManager = new cocktail_core_focus_FocusManager();
			this._hitTestManager = new cocktail_core_hittest_HitTestManager();
			this._multiTouchManager = new cocktail_core_multitouch_MultiTouchManager();
			this._shouldDispatchClickOnNextMouseUp = false;
			this._lastTouchStartPosition = new cocktail_core_geom_PointVO(0, 0);
			this.layoutManager = new cocktail_core_layout_LayoutManager();
			this._delayLoadEventCounter = 0;
			this._documentLoaded = false;
			this._currentMouseCursor = cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO);
		}
		, initBody: function (htmlBodyElement) {
			if (htmlBodyElement != null) {
				this.body = htmlBodyElement;
				this.documentElement.appendChild(this.body);
				this.set_activeElement(this.body);
			}
		}
		, initDocumentElement: function (documentElement) {
			this.documentElement = documentElement;
			this.appendChild(documentElement);
			documentElement.appended();
		}
		, initStyleManager: function () {
			this._selectorManager = new cocktail_core_css_SelectorManager();
			this._styleManager = new cocktail_core_css_StyleManager(this._selectorManager);
			this._styleManager.addStyleSheet(new cocktail_core_css_DefaultCSSStyleSheet());
		}
		, createElement: function (tagName) {
			var element;
			tagName = tagName.toUpperCase();
			switch (tagName) {
				case "IMG":
					element = new cocktail_core_html_HTMLImageElement();
					break;
				case "INPUT":
					element = new cocktail_core_html_HTMLInputElement();
					break;
				case "A":
					element = new cocktail_core_html_HTMLAnchorElement();
					break;
				case "HTML":
					element = new cocktail_core_html_HTMLHtmlElement();
					break;
				case "BODY":
					element = new cocktail_core_html_HTMLBodyElement();
					break;
				case "VIDEO":
					element = new cocktail_core_html_HTMLVideoElement();
					break;
				case "AUDIO":
					element = new cocktail_core_html_HTMLAudioElement();
					break;
				case "SOURCE":
					element = new cocktail_core_html_HTMLSourceElement();
					break;
				case "OBJECT":
					element = new cocktail_core_html_HTMLObjectElement();
					break;
				case "PARAM":
					element = new cocktail_core_html_HTMLParamElement();
					break;
				case "LINK":
					element = new cocktail_core_html_HTMLLinkElement();
					break;
				case "STYLE":
					element = new cocktail_core_html_HTMLStyleElement();
					break;
				case "BR":
					element = new cocktail_core_html_HTMLBRElement();
					break;
				case "META":
					element = new cocktail_core_html_HTMLMetaElement();
					break;
				case "FORM":
					element = new cocktail_core_html_HTMLFormElement();
					break;
				case "TEXTAREA":
					element = new cocktail_core_html_HTMLTextAreaElement();
					break;
				case "TITLE":
					element = new cocktail_core_html_HTMLTitleElement();
					break;
				default:
					element = new cocktail_core_html_HTMLElement(tagName);
			}
			element.set_ownerDocument(this);
			return element;
		}
		, delayLoadEvent: function () {
			this._delayLoadEventCounter++;
		}
		, undelayLoadEvent: function () {
			this._delayLoadEventCounter--;
			this.checkifDocumentLoaded();
		}
		, onDocumentLoaded: function () {
			this._documentLoaded = true;
			var event = new cocktail_core_event_UIEvent();
			event.initUIEvent("load", false, false, null, 0);
			this.dispatchEvent(event);
		}
		, checkifDocumentLoaded: function () {
			if (this._delayLoadEventCounter == 0 && this._documentLoaded == false) this.onDocumentLoaded();
		}
		, onUpdated: function () {
			if (this.onDocumentUpdated != null) this.onDocumentUpdated();
		}
		, update: function () {
			this.invalidationManager.update();
		}
		, focusNextElement: function () {
			this.set_activeElement(this._focusManager.getNextFocusedElement(false, this.body, this.get_activeElement()));
		}
		, focusPreviousElement: function () {
			this.set_activeElement(this._focusManager.getNextFocusedElement(true, this.body, this.get_activeElement()));
		}
		, querySelectorAll: function (selectors) {
			if (this.documentElement != null) return this.documentElement.querySelectorAll(selectors);
			return [];
		}
		, querySelector: function (selectors) {
			if (this.documentElement != null) return this.documentElement.querySelector(selectors);
			return null;
		}
		, addStyleSheet: function (stylesheet) {
			this._styleManager.addStyleSheet(stylesheet);
			if (this.documentElement != null) {
				this.documentElement.invalidateStyleDeclaration(true);
				this.documentElement.cascade(this.cascadeManager, false);
			}
		}
		, removeStyleSheet: function (stylesheet) {
			this._styleManager.removeStyleSheet(stylesheet);
			this.documentElement.invalidateStyleDeclaration(true);
			this.documentElement.cascade(this.cascadeManager, false);
		}
		, getStyleDeclaration: function (node) {
			return this._styleManager.getStyleDeclaration(node, this.getMatchedPseudoClassesVO(node));
		}
		, matchesSelector: function (node, selectors) {
			var matchedPseudoClass = this.getMatchedPseudoClassesVO(node);
			var length = selectors.length;
			var _g = 0;
			while (_g < length) {
				var i = _g++;
				if (this._selectorManager.matchSelector(node, selectors[i], matchedPseudoClass) == true) return true;
			}
			return false;
		}
		, getMatchedPseudoClassesVO: function (node) {
			var hover = false;
			var focus = false;
			var active = false;
			var link = false;
			var enabled = false;
			var disabled = false;
			var checked = false;
			var fullscreen = false;
			if (this._hoveredElementRenderer != null) hover = this._hoveredElementRenderer.domNode == node;
			if (this.get_activeElement() != null) focus = this.get_activeElement() == node;
			if (this._mousedDownedElementRenderer != null) active = this._mousedDownedElementRenderer.domNode == node;
			if (node.tagName == "A" && node.getAttribute("href") != null) link = true;
			if (node.tagName == "INPUT") {
				var inputNode = node;
				if (inputNode.get_disabled() == false) {
					enabled = true;
					disabled = false;
				} else {
					disabled = true;
					enabled = false;
				}
				if (inputNode.get_type() == "checkbox" || inputNode.get_type() == "radio") {
					if (inputNode.get_checked() == true) checked = true;
				}
			}
			if (this.fullscreenElement != null) fullscreen = true;
			this._matchedPseudoClasses.hasClasses = node.get_className() != "";
			if (this._matchedPseudoClasses.hasClasses == true) this._matchedPseudoClasses.nodeClassList = node.classList;
			this._matchedPseudoClasses.hasId = node.get_id() != "";
			if (this._matchedPseudoClasses.hasId == true) this._matchedPseudoClasses.nodeId = node.get_id();
			this._matchedPseudoClasses.nodeType = node.tagName;
			this._matchedPseudoClasses.hover = hover;
			this._matchedPseudoClasses.focus = focus;
			this._matchedPseudoClasses.active = active;
			this._matchedPseudoClasses.link = link;
			this._matchedPseudoClasses.enabled = enabled;
			this._matchedPseudoClasses.disabled = disabled;
			this._matchedPseudoClasses.checked = checked;
			this._matchedPseudoClasses.fullscreen = fullscreen;
			return this._matchedPseudoClasses;
		}
		, set_innerHTML: function (value) {
			var node = cocktail_core_parser_DOMParser.parse(value, this);
			this.initDocumentElement(node);
			this.initBody(node.getElementsByTagName("BODY")[0]);
			this.checkifDocumentLoaded();
			return value;
		}
		, get_innerHTML: function () {
			return cocktail_core_parser_DOMParser.serialize(this.documentElement);
		}
		, onPlatformMouseEvent: function (mouseEvent) {
			var eventType = mouseEvent.type;
			var elementRendererAtPoint = this.getFirstElementRendererWhichCanDispatchMouseEvent(mouseEvent.screenX, mouseEvent.screenY);
			this.refreshHoveredElement(elementRendererAtPoint, mouseEvent);
			if (elementRendererAtPoint == null) return;
			elementRendererAtPoint.domNode.dispatchEvent(mouseEvent);
			switch (eventType) {
				case "mousedown":
					this._shouldDispatchClickOnNextMouseUp = true;
					this._mousedDownedElementRenderer = elementRendererAtPoint;
					var htmlElement = elementRendererAtPoint.domNode;
					htmlElement.invalidateStyleDeclaration(false);
					break;
				case "mouseup":
					if (this._shouldDispatchClickOnNextMouseUp == true) this.dispatchClickEvent(mouseEvent);
					if (this._mousedDownedElementRenderer != null) {
						var htmlElement1 = this._mousedDownedElementRenderer.domNode;
						htmlElement1.invalidateStyleDeclaration(false);
						this._mousedDownedElementRenderer = null;
					}
					break;
			}
		}
		, onPlatformMouseLeaveEvent: function (event) {
			if (this._hoveredElementRenderer != null) {
				var oldHoveredElementRenderer = this._hoveredElementRenderer;
				var mouseOutEvent = new cocktail_core_event_MouseEvent();
				mouseOutEvent.initMouseEvent("mouseout", true, true, null, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
				this._hoveredElementRenderer.domNode.dispatchEvent(mouseOutEvent);
				var htmlElement = oldHoveredElementRenderer.domNode;
				htmlElement.invalidateStyleDeclaration(false);
				this._hoveredElementRenderer = null;
				this.setMouseCursor(cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO));
			}
		}
		, onPlatformMouseWheelEvent: function (wheelEvent) {
			var elementRendererAtPoint = this.getFirstElementRendererWhichCanDispatchMouseEvent(wheelEvent.screenX, wheelEvent.screenY);
			elementRendererAtPoint.domNode.dispatchEvent(wheelEvent);
		}
		, onPlatformMouseMoveEvent: function (mouseEvent) {
			if (this.documentElement.elementRenderer == null) return;
			var elementRendererAtPoint = this.getFirstElementRendererWhichCanDispatchMouseEvent(mouseEvent.screenX, mouseEvent.screenY);
			this.refreshHoveredElement(elementRendererAtPoint, mouseEvent);
			if (elementRendererAtPoint != null) elementRendererAtPoint.domNode.dispatchEvent(mouseEvent);
		}
		, onPlatformKeyDownEvent: function (keyboardEvent) {
			this.get_activeElement().dispatchEvent(keyboardEvent);
		}
		, onPlatformKeyUpEvent: function (keyboardEvent) {
			this.get_activeElement().dispatchEvent(keyboardEvent);
		}
		, onPlatformTouchEvent: function (touchEvent) {
			var touch = touchEvent.touches.item(0);
			var elementAtTouchPoint = this.getFirstElementRendererWhichCanDispatchMouseEvent(touch.screenX, touch.screenY);
			this._multiTouchManager.setUpTouchEvent(touchEvent, elementAtTouchPoint.domNode);
			elementAtTouchPoint.domNode.dispatchEvent(touchEvent);
			if (this._shouldDispatchClickOnNextMouseUp == true) {
				var _g = touchEvent.type;
				switch (_g) {
					case "touchstart":
						if (touchEvent.defaultPrevented == true) this._shouldDispatchClickOnNextMouseUp = false; else if (touchEvent.touches.get_length() > 1) {
						} else {
							this._lastTouchStartPosition.x = touchEvent.touches.item(0).screenX;
							this._lastTouchStartPosition.y = touchEvent.touches.item(0).screenY;
						}
						break;
					case "touchmove":
						if (touchEvent.defaultPrevented == true) this._shouldDispatchClickOnNextMouseUp = false; else {
							var yOffset = touchEvent.touches.item(0).screenY - this._lastTouchStartPosition.y;
							if (Math.abs(yOffset) > cocktail_core_config_Config.getInstance().touchMovePreventClickDistance) this._shouldDispatchClickOnNextMouseUp = false; else {
								var xOffset = touchEvent.touches.item(0).screenX - this._lastTouchStartPosition.x;
								if (Math.abs(xOffset) > cocktail_core_config_Config.getInstance().touchMovePreventClickDistance) this._shouldDispatchClickOnNextMouseUp = false;
							}
						}
						break;
				}
			}
		}
		, onPlatformResizeEvent: function (e) {
			this.invalidationManager.invalidateViewportSize();
		}
		, onPlatformOrientationChangeEvent: function (e) {
			this.invalidationManager.invalidateViewportSize();
		}
		, dispatchClickEvent: function (mouseEvent) {
			var elementRendererAtPoint = this.getFirstElementRendererWhichCanDispatchMouseEvent(mouseEvent.screenX, mouseEvent.screenY);
			var htmlElement = elementRendererAtPoint.domNode;
			var clickEvent = new cocktail_core_event_MouseEvent();
			clickEvent.initMouseEvent("click", true, true, null, 0.0, mouseEvent.screenX, mouseEvent.screenY, mouseEvent.clientX, mouseEvent.clientY, mouseEvent.ctrlKey, mouseEvent.altKey, mouseEvent.shiftKey, mouseEvent.metaKey, mouseEvent.button, null);
			htmlElement.triggerActivationBehaviour(clickEvent);
		}
		, setMouseCursor: function (cursor) {
			if (cursor != this._currentMouseCursor) {
				this._currentMouseCursor = cursor;
				if (this.onSetMouseCursor != null) this.onSetMouseCursor(cursor);
			}
		}
		, refreshHoveredElement: function (elementRendererAtPoint, mouseEvent) {
			if (elementRendererAtPoint == null) return;
			if (this._hoveredElementRenderer != elementRendererAtPoint) {
				var oldHoveredElementRenderer = this._hoveredElementRenderer;
				if (this._hoveredElementRenderer != null) {
					var mouseOutEvent = new cocktail_core_event_MouseEvent();
					mouseOutEvent.initMouseEvent("mouseout", true, true, null, 0.0, mouseEvent.screenX, mouseEvent.screenY, mouseEvent.clientX, mouseEvent.clientY, mouseEvent.ctrlKey, mouseEvent.altKey, mouseEvent.shiftKey, mouseEvent.metaKey, mouseEvent.button, elementRendererAtPoint.domNode);
					this._hoveredElementRenderer.domNode.dispatchEvent(mouseOutEvent);
					var htmlElement1 = oldHoveredElementRenderer.domNode;
					htmlElement1.invalidateStyleDeclaration(false);
				}
				this._hoveredElementRenderer = elementRendererAtPoint;
				var relatedTarget = null;
				if (this._hoveredElementRenderer != null) relatedTarget = this._hoveredElementRenderer.domNode;
				var mouseOverEvent = new cocktail_core_event_MouseEvent();
				mouseOverEvent.initMouseEvent("mouseover", true, true, null, 0.0, mouseEvent.screenX, mouseEvent.screenY, mouseEvent.clientX, mouseEvent.clientY, mouseEvent.ctrlKey, mouseEvent.shiftKey, mouseEvent.altKey, mouseEvent.metaKey, mouseEvent.button, relatedTarget);
				elementRendererAtPoint.domNode.dispatchEvent(mouseOverEvent);
				var htmlElement = elementRendererAtPoint.domNode;
				htmlElement.invalidateStyleDeclaration(false);
				this._shouldDispatchClickOnNextMouseUp = false;
				this.setMouseCursor(htmlElement.coreStyle.getComputedOrInitialProperty(54));
			}
		}
		, navigateToURL: function (url, name) {
			if (name == null) name = "_blank";
			if (this.onNavigateToURL != null) this.onNavigateToURL(url, name);
		}
		, onLocationChanged: function () {
		}
		, getAbsoluteURL: function (url) {
			if (this.location.href == null) return url;
			var typedURL = cocktail_core_url_URL.fromString(url);
			if (cocktail_core_url_URL.isRelative(typedURL) == false) return url;
			var documentURL = cocktail_core_url_URL.fromString(this.location.href);
			var retURL = cocktail_core_url_URL.appendURL(documentURL, typedURL);
			return cocktail_core_url_URL.toString(retURL);
		}
		, onPlatformFullScreenChange: function (event) {
			if (this.isFullscreen != null) {
				if (this.isFullscreen() == false) this.exitFullscreen();
			}
		}
		, exitFullscreen: function () {
			if (this.fullscreenElement == null) return;
			this.set_fullscreenElement(null);
			if (this.onExitFullscreen != null) this.onExitFullscreen();
			var fullscreenEvent = new cocktail_core_event_Event();
			fullscreenEvent.initEvent("fullscreenchange", true, false);
			this.dispatchEvent(fullscreenEvent);
			this.cascadeDocument();
		}
		, get_fullscreenEnabled: function () {
			if (this.isFullScreenEnabled != null) return this.isFullScreenEnabled();
			return false;
		}
		, set_fullscreenElement: function (value) {
			if (value == null) {
				this.fullscreenElement = null;
				return value;
			}
			if (this.fullscreenElement != null) return this.fullscreenElement;
			this.fullscreenElement = value;
			if (this.onEnterFullscreen != null) this.onEnterFullscreen();
			var fullscreenEvent = new cocktail_core_event_Event();
			fullscreenEvent.initEvent("fullscreenchange", true, false);
			this.dispatchEvent(fullscreenEvent);
			this.cascadeDocument();
			return value;
		}
		, cascadeDocument: function () {
			if (this.documentElement != null) {
				this.documentElement.invalidateStyleDeclaration(true);
				this.documentElement.cascade(this.cascadeManager, false);
			}
		}
		, getFirstElementRendererWhichCanDispatchMouseEvent: function (x, y) {
			var layerRendererTmp = this.documentElement.elementRenderer.layerRenderer;
			if (layerRendererTmp.stackingContext == null) layerRendererTmp.updateStackingContext();
			var elementRendererAtPoint = this._hitTestManager.getTopMostElementRendererAtPoint(layerRendererTmp.stackingContext, x, y);
			if (elementRendererAtPoint == null) return null;
			while (elementRendererAtPoint.domNode.get_nodeType() != 1 || elementRendererAtPoint.isAnonymousBlockBox() == true) {
				elementRendererAtPoint = elementRendererAtPoint.parentNode;
				if (elementRendererAtPoint == null) return null;
			}
			return elementRendererAtPoint;
		}
		, getFirstVerticallyScrollableHTMLElement: function (htmlElement, scrollOffset) {
			return htmlElement;
		}
		, set_activeElement: function (newActiveElement) {
			this._focusManager.setActiveElement(newActiveElement, this.body);
			return this.get_activeElement();
		}
		, get_activeElement: function () {
			return this._focusManager.activeElement;
		}
		, __class__: cocktail_core_html_HTMLDocument
		, __properties__: $extend(cocktail_core_dom_Document.prototype.__properties__, { set_innerHTML: "set_innerHTML", get_innerHTML: "get_innerHTML", set_fullscreenElement: "set_fullscreenElement", get_fullscreenEnabled: "get_fullscreenEnabled", set_activeElement: "set_activeElement", get_activeElement: "get_activeElement" })
	});
	var cocktail_core_html_HTMLFormElement = function () {
		cocktail_core_html_HTMLElement.call(this, "FORM");
		this.elements = [];
		this._submittedFromSubmitMethod = false;
	};
	$hxClasses["cocktail.core.html.HTMLFormElement"] = cocktail_core_html_HTMLFormElement;
	cocktail_core_html_HTMLFormElement.__name__ = ["cocktail", "core", "html", "HTMLFormElement"];
	cocktail_core_html_HTMLFormElement.__super__ = cocktail_core_html_HTMLElement;
	cocktail_core_html_HTMLFormElement.prototype = $extend(cocktail_core_html_HTMLElement.prototype, {
		submit: function () {
			this._submittedFromSubmitMethod = true;
			this.doSubmit(null);
		}
		, submitFrom: function (submitter) {
			this._submittedFromSubmitMethod = false;
			this.doSubmit(submitter);
		}
		, reset: function () {
			var defaultPrevented = this.fireEvent("reset", false, true);
			if (defaultPrevented == true) return;
			var _g1 = 0;
			var _g = this.get_length();
			while (_g1 < _g) {
				var i = _g1++;
				this.elements[i].reset();
			}
		}
		, doSubmit: function (submitter) {
			if (this._submittedFromSubmitMethod == false) {
				var defaultPrevented = this.fireEvent("submit", false, true);
				if (defaultPrevented == true) return;
			}
			var formDataSet = this.constructFormDataSet(submitter);
			var action = this.getSubmitAction(submitter);
			var scheme = cocktail_core_url_URL.fromString(action).scheme;
			var enctype = this.getSubmitEnctype(submitter);
			var method = this.getSubmitMethod(submitter);
			var target = this.getSubmitTarget(submitter);
			if (action != "") switch (scheme) {
				case "http":
					if (method.toUpperCase() == "GET") this.mutateActionUrl(formDataSet, action); else if (method.toUpperCase() == "POST") this.submitAsEntityBody(formDataSet, action, enctype);
					break;
			} else this.mutateActionUrl(formDataSet, action);
		}
		, mutateActionUrl: function (formDataSet, action) {
			var query = this.encodeAsURLQuery(formDataSet);
			var actionURL = cocktail_core_url_URL.fromString(action);
			actionURL.query = query;
			var destination = cocktail_core_url_URL.toString(actionURL);
			this._ownerHTMLDocument.navigateToURL(destination);
		}
		, submitAsEntityBody: function (formDataSet, action, enctype) {
		}
		, encodeAsURLQuery: function (formDataSet) {
			var result = "";
			var length = formDataSet.length;
			var _g = 0;
			while (_g < length) {
				var i = _g++;
				if (result != "") result += "&";
				var formData = formDataSet[i];
				result += encodeURIComponent(formData.name) + "=" + encodeURIComponent(formData.value);
			}
			return result;
		}
		, getSubmitAction: function (submitter) {
			return this.get_action();
		}
		, getSubmitEnctype: function (submitter) {
			return this.get_enctype();
		}
		, getSubmitMethod: function (submitter) {
			var formMethod = this.get_method();
			if (formMethod == "") formMethod = "GET";
			return formMethod;
		}
		, getSubmitTarget: function (submitter) {
			return this.getAttributeAsDOMString("target");
		}
		, constructFormDataSet: function (submitter) {
			var submittableElements = this.getSubmittablesElements(this, []);
			var formDataSet = [];
			var length = submittableElements.length;
			var _g = 0;
			while (_g < length) {
				var i = _g++;
				var submittableElement = submittableElements[i];
				if (this.canBeSubmitted(submittableElement, submitter) == true) {
					var type = this.getElementType(submittableElement);
					var name = submittableElement.getAttribute("name");
					if (submittableElement.tagName == "SELECT") {
					} else if (submittableElement.tagName == "INPUT" && (type == "checkbox" || type == "radio")) {
						var inputElement = submittableElement;
						var value = inputElement.get_value();
						if (value == "") value = "on";
						formDataSet.push({ name: name, type: type, value: value });
					} else if (submittableElement.tagName == "INPUT" && type == "file") {
					} else if (submittableElement.tagName == "OBJECT") {
					} else {
						var value1 = this.getElementValue(submittableElement);
						formDataSet.push({ name: name, value: value1, type: type });
					}
				}
			}
			return formDataSet;
		}
		, getSubmittablesElements: function (rootElement, submittableElements) {
			var child = rootElement.get_firstChild();
			while (child != null) {
				var _g = child.tagName;
				switch (_g) {
					case "INPUT": case "OBJECT": case "TEXTAREA":
						submittableElements.push(child);
						break;
				}
				this.getSubmittablesElements(child, submittableElements);
				child = child.get_nextSibling();
			}
			return submittableElements;
		}
		, canBeSubmitted: function (element, submitter) {
			if (element.getAttribute("disabled") != null) return false;
			if (this.isButton(element) == true) {
				if (element != submitter) return false;
			}
			if (this.isUncheckedRadioOrCheckBox(element) == true) return false;
			if (this.getElementType(element) != "image") {
				if (element.getAttribute("name") == null || element.getAttribute("name") == "") return false;
			}
			if (element.tagName == "OBJECT") {
				var objectElement = element;
				if (objectElement.plugin == null) return false;
			}
			if (element.tagName == "TEXTAREA") {
				if (element.getAttribute("name") == null || element.getAttribute("name") == "") return false;
			}
			return true;
		}
		, isButton: function (element) {
			if (element.tagName == "BUTTON") return true; else if (element.tagName == "INPUT") {
				var inputElement = element;
				var _g = inputElement.get_type();
				switch (_g) {
					case "reset": case "button": case "submit":
						return true;
				}
			}
			return false;
		}
		, isUncheckedRadioOrCheckBox: function (element) {
			if (element.tagName == "INPUT") {
				var inputElement = element;
				var _g = inputElement.get_type();
				switch (_g) {
					case "radio": case "checkbox":
						return inputElement.get_checked() == false;
				}
			}
			return false;
		}
		, getElementType: function (element) {
			var _g = element.tagName;
			switch (_g) {
				case "INPUT":
					var inputElement = element;
					return inputElement.get_type();
				default:
					return "";
			}
		}
		, getElementValue: function (element) {
			var _g = element.tagName;
			switch (_g) {
				case "INPUT":
					var inputElement = element;
					return inputElement.get_value();
				case "TEXTAREA":
					var textAreaElement = element;
					return textAreaElement.get_value();
				default:
					return "";
			}
		}
		, get_length: function () {
			return this.elements.length;
		}
		, get_method: function () {
			return this.getEnumeratedAttributeAsDOMString("method", ["GET", "POST"], null, "GET");
		}
		, set_method: function (value) {
			this.setAttribute("method", value);
			return value;
		}
		, get_enctype: function () {
			return this.getEnumeratedAttributeAsDOMString("enctype", ["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"], null, "application/x-www-form-urlencoded");
		}
		, set_enctype: function (value) {
			this.setAttribute("enctype", value);
			return value;
		}
		, get_action: function () {
			return this.getAttributeAsDOMString("action");
		}
		, set_action: function (value) {
			this.setAttribute("action", value);
			return value;
		}
		, __class__: cocktail_core_html_HTMLFormElement
		, __properties__: $extend(cocktail_core_html_HTMLElement.prototype.__properties__, { set_action: "set_action", get_action: "get_action", set_enctype: "set_enctype", get_enctype: "get_enctype", set_method: "set_method", get_method: "get_method", get_length: "get_length" })
	});
	var cocktail_core_html_HTMLHtmlElement = function () {
		cocktail_core_html_HTMLElement.call(this, "HTML");
	};
	$hxClasses["cocktail.core.html.HTMLHtmlElement"] = cocktail_core_html_HTMLHtmlElement;
	cocktail_core_html_HTMLHtmlElement.__name__ = ["cocktail", "core", "html", "HTMLHtmlElement"];
	cocktail_core_html_HTMLHtmlElement.__super__ = cocktail_core_html_HTMLElement;
	cocktail_core_html_HTMLHtmlElement.prototype = $extend(cocktail_core_html_HTMLElement.prototype, {
		set_innerHTML: function (value) {
			cocktail_core_html_HTMLElement.prototype.set_innerHTML.call(this, value);
			var htmlDocument = this.ownerDocument;
			htmlDocument.initBody(this.getElementsByTagName("BODY")[0]);
			return value;
		}
		, set_outerHTML: function (value) {
			throw new js__$Boot_HaxeError(7);
			return value;
		}
		, isParentRendered: function () {
			return true;
		}
		, createElementRenderer: function () {
			this.elementRenderer = new cocktail_core_renderer_InitialBlockRenderer(this, this.coreStyle);
		}
		, attachToParentElementRenderer: function () {
		}
		, detachFromParentElementRenderer: function () {
			this.elementRenderer.removedFromRenderingTree();
		}
		, cascadeSelf: function (cascadeManager, programmaticChange) {
			if (this._needsStyleDeclarationUpdate == true || this.styleManagerCSSDeclaration == null) {
				this.getStyleDeclaration();
				this._needsStyleDeclarationUpdate = false;
			}
			if (this._shouldCascadeAllProperties == true) cascadeManager.shouldCascadeAll(); else {
				var length = this._pendingChangedProperties.length;
				var _g = 0;
				while (_g < length) {
					var i = _g++;
					cascadeManager.addPropertyToCascade(this._pendingChangedProperties[i]);
				}
			}
			cascadeManager.parentRelativeLengthReference.em = 12.0;
			cascadeManager.parentRelativeLengthReference.ch = 12.0;
			cascadeManager.parentRelativeLengthReference.ex = 12.0;
			cascadeManager.parentRelativeLengthReference.rem = 12.0;
			this.coreStyle.cascade(cascadeManager, this._initialStyleDeclaration, this.styleManagerCSSDeclaration, this.style, this._initialStyleDeclaration, programmaticChange);
			cascadeManager.parentRelativeLengthReference.rem = this.coreStyle.fontMetrics.fontSize;
			cascadeManager.relativeLengthReference.rem = this.coreStyle.fontMetrics.fontSize;
			this._shouldCascadeAllProperties = false;
			this._pendingChangedProperties = [];
		}
		, get_offsetParent: function () {
			return null;
		}
		, get_offsetTop: function () {
			return 0;
		}
		, get_offsetLeft: function () {
			return 0;
		}
		, __class__: cocktail_core_html_HTMLHtmlElement
	});
	var cocktail_core_html_HTMLImageElement = function () {
		cocktail_core_html_EmbeddedElement.call(this, "IMG");
	};
	$hxClasses["cocktail.core.html.HTMLImageElement"] = cocktail_core_html_HTMLImageElement;
	cocktail_core_html_HTMLImageElement.__name__ = ["cocktail", "core", "html", "HTMLImageElement"];
	cocktail_core_html_HTMLImageElement.__super__ = cocktail_core_html_EmbeddedElement;
	cocktail_core_html_HTMLImageElement.prototype = $extend(cocktail_core_html_EmbeddedElement.prototype, {
		setAttribute: function (name, value) {
			if (name == "src") this.set_src(value); else cocktail_core_html_EmbeddedElement.prototype.setAttribute.call(this, name, value);
		}
		, createElementRenderer: function () {
			this.elementRenderer = new cocktail_core_renderer_ImageRenderer(this, this.coreStyle);
		}
		, isVoidElement: function () {
			return true;
		}
		, set_src: function (value) {
			value = this._ownerHTMLDocument.getAbsoluteURL(value);
			cocktail_core_html_EmbeddedElement.prototype.setAttribute.call(this, "src", value);
			this._ownerHTMLDocument.getAbsoluteURL(value);
			var resource = this._ownerHTMLDocument.resourceManager.getImageResource(value);
			this._ownerHTMLDocument.delayLoadEvent();
			if (resource.loaded == false) {
				this._resourceLoadedCallback = $bind(this, this.onResourceLoaded);
				this._resourceLoadError = $bind(this, this.onResourceLoadError);
				resource.addEventListener("load", this._resourceLoadedCallback);
				resource.addEventListener("error", this._resourceLoadError);
			} else if (resource.loadedWithError == true) this.onLoadError(); else this.onLoadComplete(resource);
			return value;
		}
		, onResourceLoaded: function (e) {
			this.removeListeners(e.target);
			this.onLoadComplete(e.target);
		}
		, onResourceLoadError: function (e) {
			this.removeListeners(e.target);
			this.onLoadError();
		}
		, removeListeners: function (resource) {
			resource.removeEventListener("load", this._resourceLoadedCallback);
			resource.removeEventListener("error", this._resourceLoadError);
		}
		, onLoadComplete: function (resource) {
			this.intrinsicHeight = resource.intrinsicHeight;
			this.intrinsicWidth = resource.intrinsicWidth;
			this.intrinsicRatio = this.get_intrinsicHeight() / this.get_intrinsicWidth();
			if (this.getAttributeNode("height") != null && this.getAttributeNode("width") != null) this.invalidateRendering(); else this.invalidate();
			var loadEvent = new cocktail_core_event_UIEvent();
			loadEvent.initUIEvent("load", false, false, null, 0.0);
			this.dispatchEvent(loadEvent);
			this._ownerHTMLDocument.undelayLoadEvent();
		}
		, onLoadError: function () {
			var errorEvent = new cocktail_core_event_UIEvent();
			errorEvent.initUIEvent("error", false, false, null, 0.0);
			this.dispatchEvent(errorEvent);
			this._ownerHTMLDocument.undelayLoadEvent();
		}
		, get_src: function () {
			return this.getAttribute("src");
		}
		, get_naturalHeight: function () {
			if (this.get_intrinsicHeight() == null) return 0;
			return Math.round(this.get_intrinsicHeight());
		}
		, get_naturalWidth: function () {
			if (this.get_intrinsicWidth() == null) return 0;
			return Math.round(this.get_intrinsicWidth());
		}
		, __class__: cocktail_core_html_HTMLImageElement
		, __properties__: $extend(cocktail_core_html_EmbeddedElement.prototype.__properties__, { get_naturalHeight: "get_naturalHeight", get_naturalWidth: "get_naturalWidth", set_src: "set_src", get_src: "get_src" })
	});
	var cocktail_core_html_HTMLInputElement = function () {
		cocktail_core_html_FormAssociatedElement.call(this, "INPUT");
		this._valueIsDirty = false;
		this._checkednessIsDirty = false;
		this._valueMode = cocktail_core_html_ValueModeValue.VALUE;
		this._value = "";
		this._checkedness = false;
	};
	$hxClasses["cocktail.core.html.HTMLInputElement"] = cocktail_core_html_HTMLInputElement;
	cocktail_core_html_HTMLInputElement.__name__ = ["cocktail", "core", "html", "HTMLInputElement"];
	cocktail_core_html_HTMLInputElement.__super__ = cocktail_core_html_FormAssociatedElement;
	cocktail_core_html_HTMLInputElement.prototype = $extend(cocktail_core_html_FormAssociatedElement.prototype, {
		isVoidElement: function () {
			return true;
		}
		, dispatchEvent: function (evt) {
			var defaultPrevented = cocktail_core_html_FormAssociatedElement.prototype.dispatchEvent.call(this, evt);
			if (this.elementRenderer != null) {
				if (evt.type == "focus") {
					var inputRenderer = this.elementRenderer;
					inputRenderer.focus();
				} else if (evt.type == "blur") {
					var inputRenderer1 = this.elementRenderer;
					inputRenderer1.blur();
				}
			}
			return defaultPrevented;
		}
		, setAttribute: function (name, value) {
			cocktail_core_html_FormAssociatedElement.prototype.setAttribute.call(this, name, value);
			if (name == "value") {
				if (this._valueIsDirty == false) this._value = value;
			} else if (name == "checked") {
				if (this._checkednessIsDirty == false) {
					if (value == "true") this.updateCheckedness(true); else this.updateCheckedness(false);
				}
			} else if (name == "name") {
				if (this._checkedness == true && this.get_type() == "radio") this.updateRadioButtonGroup();
			} else if (name == "disabled") this.updateInputRendererState();
		}
		, reset: function () {
			this._valueIsDirty = false;
			this._checkednessIsDirty = false;
			this._value = this.getAttributeAsDOMString("value");
			this.updateCheckedness(this.getAttributeAsBool("checked"));
			this.applyValueSanitization(this.get_value(), this.get_type());
			this.updateInputRendererState();
		}
		, createElementRenderer: function () {
			var _g = this.get_type();
			switch (_g) {
				case "text":
					this.elementRenderer = new cocktail_core_renderer_TextInputRenderer(this, this.coreStyle);
					break;
				case "password":
					this.elementRenderer = new cocktail_core_renderer_PasswordInputRenderer(this, this.coreStyle);
					break;
				case "checkbox":
					this.elementRenderer = new cocktail_core_renderer_CheckboxRenderer(this, this.coreStyle);
					break;
				case "radio":
					this.elementRenderer = new cocktail_core_renderer_RadioRenderer(this, this.coreStyle);
					break;
				case "button": case "reset": case "submit":
					this.elementRenderer = new cocktail_core_renderer_InputButtonRenderer(this, this.coreStyle);
					break;
				default:
			}
			if (this.elementRenderer != null) {
				var inputRenderer = this.elementRenderer;
				inputRenderer.onActivate = $bind(this, this.onUserActivation);
				inputRenderer.onInput = $bind(this, this.onUserInput);
				this.updateInputRendererState();
			}
		}
		, isDefaultFocusable: function () {
			if (this.get_disabled() == true) return false;
			if (this.isFocusableType() == false) return false;
			return true;
		}
		, associateFormElement: function (form) {
			cocktail_core_html_FormAssociatedElement.prototype.associateFormElement.call(this, form);
			if (this._checkedness == true && this.get_type() == "radio") this.updateRadioButtonGroup();
		}
		, hasActivationBehaviour: function () {
			var _g = this.get_type();
			switch (_g) {
				case "button": case "checkbox": case "radio": case "reset": case "submit":
					return true;
				default:
					return false;
			}
		}
		, runPreClickActivation: function () {
			if (this.isMutable() == false) return;
			var _g = this.get_type();
			switch (_g) {
				case "checkbox":
					this.updateCheckedness(!this._checkedness);
					break;
				case "radio":
					this.updateCheckedness(true);
					break;
				case "reset":
					if (this.form != null) this.form.reset();
					break;
				case "submit":
					if (this.form != null) this.form.submitFrom(this);
					break;
			}
		}
		, runPostClickActivationStep: function (event) {
			if (this.isMutable() == false) return;
			var _g = this.get_type();
			switch (_g) {
				case "checkbox": case "radio":
					this.fireEvent("change", false, false);
					break;
			}
		}
		, updateInputRendererState: function () {
			if (this.elementRenderer != null) {
				var inputRenderer = this.elementRenderer;
				inputRenderer.set_readonly(this.get_readOnly());
				inputRenderer.set_disabled(this.get_disabled());
				inputRenderer.set_maxLength(this.get_maxLength());
				inputRenderer.set_value(this.getElementRendererValue());
				inputRenderer.set_checked(this._checkedness);
			}
		}
		, updateInputType: function (oldType) {
			if (oldType == this.get_type()) return;
			if (this.useValueMode(oldType) == true && this.useDefaultOrDefaultOnMode(this.get_type()) == true) {
				if (this._value != "") this.setAttribute("value", this._value);
			} else if (this.useValueMode(oldType) == false && this.useValueMode(this.get_type()) == true) {
				this._value = this.getAttributeAsDOMString("value");
				this._valueIsDirty = false;
			}
			this.invalidateElementRenderer();
			this._value = this.applyValueSanitization(this._value, this.get_type());
		}
		, useValueMode: function (type) {
			switch (type) {
				case "hidden": case "checkbox": case "radio":
					return false;
				default:
					return true;
			}
		}
		, useDefaultOrDefaultOnMode: function (type) {
			switch (type) {
				case "text": case "password":
					return false;
				default:
					return true;
			}
		}
		, applyValueSanitization: function (value, type) {
			switch (type) {
				case "text": case "password":
					return StringTools.replace(value, "\n", "");
			}
			return value;
		}
		, isMutable: function () {
			if (this.get_disabled() == true) return false; else if (this.readonlyApplies() == true) return this.get_readOnly() == false;
			return true;
		}
		, readonlyApplies: function () {
			var _g = this.get_type();
			switch (_g) {
				case "text": case "password":
					return true;
				default:
					return false;
			}
		}
		, isFocusableType: function () {
			var _g = this.get_type();
			switch (_g) {
				case "hidden":
					return false;
				default:
					return true;
			}
		}
		, updateCheckedness: function (value) {
			this._checkedness = value;
			this.invalidateStyleDeclaration(false);
			if (this._checkedness == true && this.get_type() == "radio") this.updateRadioButtonGroup();
		}
		, updateRadioButtonGroup: function () {
			if (this.get_name() == "") return;
			var inputElements = this._ownerHTMLDocument.getElementsByTagName("INPUT");
			var inputLength = inputElements.length;
			var _g = 0;
			while (_g < inputLength) {
				var i = _g++;
				var input = inputElements[i];
				if (input.get_type() == "radio" && input != this) {
					if (input.form == this.form) {
						if (input.get_name() == this.get_name()) input.set_checked(false);
					}
				}
			}
		}
		, getElementRendererValue: function () {
			var _g = this.get_type();
			switch (_g) {
				case "reset": case "submit":
					var valueAttribute = this.getAttribute("value");
					if (valueAttribute == null) {
						if (this.get_type() == "reset") return "Reset"; else return "Submit";
					}
					break;
			}
			return this.get_value();
		}
		, onUserActivation: function () {
			this.triggerActivationBehaviour();
		}
		, onUserInput: function () {
			this._valueIsDirty = true;
			var inputRenderer = this.elementRenderer;
			this._value = inputRenderer.get_value();
			this.fireEvent("input", true, false);
		}
		, get_intrinsicWidth: function () {
			if (this.elementRenderer != null) {
				var inputRenderer = this.elementRenderer;
				return inputRenderer.get_intrinsicWidth();
			}
			return 0;
		}
		, get_intrinsicHeight: function () {
			if (this.elementRenderer != null) {
				var inputRenderer = this.elementRenderer;
				return inputRenderer.get_intrinsicHeight();
			}
			return 0;
		}
		, set_value: function (value) {
			this._valueIsDirty = true;
			var _g = this._valueMode;
			switch (_g[1]) {
				case 0:
					this._value = value;
					this.updateInputRendererState();
					break;
				case 1: case 2:
					this.setAttribute("value", value);
					this.updateInputRendererState();
					break;
				case 3:
					break;
			}
			return value;
		}
		, get_value: function () {
			var _g = this._valueMode;
			switch (_g[1]) {
				case 0:
					return this._value;
				case 1:
					return this.getAttributeAsDOMString("value");
				case 2:
					var value = this.getAttributeAsDOMString("value");
					if (value == "") return "on"; else return value;
					break;
				case 3:
					return "";
			}
		}
		, set_maxLength: function (value) {
			this.setAttribute("maxlength", value == null ? "null" : "" + value);
			return value;
		}
		, get_maxLength: function () {
			return this.getAttributeAsPositiveSignedInteger("maxlength", null);
		}
		, get_checked: function () {
			return this._checkedness;
		}
		, set_checked: function (value) {
			this._checkednessIsDirty = true;
			this.updateCheckedness(value);
			return value;
		}
		, get_readOnly: function () {
			return this.getAttributeAsBool("readonly");
		}
		, set_readOnly: function (value) {
			this.setAttributeAsBool("readonly", value);
			return value;
		}
		, get_disabled: function () {
			return this.getAttributeAsBool("disabled");
		}
		, set_disabled: function (value) {
			this.setAttributeAsBool("disabled", value);
			this.updateInputRendererState();
			return value;
		}
		, get_type: function () {
			return this.getEnumeratedAttributeAsDOMString("type", ["hidden", "text", "password", "checkbox", "radio", "submit", "reset", "button", "file", "image"], "text", null);
		}
		, set_type: function (value) {
			var oldType = this.get_type();
			this.setAttribute("type", value);
			this.updateInputType(oldType);
			return value;
		}
		, get_name: function () {
			return this.getAttributeAsDOMString("name");
		}
		, set_name: function (value) {
			this.setAttribute("name", value);
			return value;
		}
		, __class__: cocktail_core_html_HTMLInputElement
		, __properties__: $extend(cocktail_core_html_FormAssociatedElement.prototype.__properties__, { set_name: "set_name", get_name: "get_name", set_type: "set_type", get_type: "get_type", set_disabled: "set_disabled", get_disabled: "get_disabled", set_readOnly: "set_readOnly", get_readOnly: "get_readOnly", set_checked: "set_checked", get_checked: "get_checked", set_maxLength: "set_maxLength", get_maxLength: "get_maxLength", set_value: "set_value", get_value: "get_value" })
	});
	var cocktail_core_html_HTMLLinkElement = function () {
		cocktail_core_html_HTMLElement.call(this, "LINK");
		this._hasLoadedResource = false;
	};
	$hxClasses["cocktail.core.html.HTMLLinkElement"] = cocktail_core_html_HTMLLinkElement;
	cocktail_core_html_HTMLLinkElement.__name__ = ["cocktail", "core", "html", "HTMLLinkElement"];
	cocktail_core_html_HTMLLinkElement.__super__ = cocktail_core_html_HTMLElement;
	cocktail_core_html_HTMLLinkElement.prototype = $extend(cocktail_core_html_HTMLElement.prototype, {
		addedToDOM: function () {
			if (this._hasLoadedResource == false) this.loadLinkedResource();
			cocktail_core_html_HTMLElement.prototype.addedToDOM.call(this);
		}
		, removedFromDOM: function () {
			cocktail_core_html_HTMLElement.prototype.removedFromDOM.call(this);
			if (this._hasLoadedResource == true) this.unloadLinkedResource();
		}
		, createElementRenderer: function () {
		}
		, loadLinkedResource: function () {
			if (this.get_href() != null && this.get_rel() == "stylesheet") {
				this._hasLoadedResource = true;
				this._ownerHTMLDocument.delayLoadEvent();
				var nativeHttp = new cocktail_port_platform_flash_$player_NativeHttp(this._ownerHTMLDocument.timer);
				nativeHttp.addEventListener("load", $bind(this, this.onCSSLoaded));
				nativeHttp.addEventListener("error", $bind(this, this.onCSSLoadError));
				var absoluteHref = this._ownerHTMLDocument.getAbsoluteURL(this.get_href());
				nativeHttp.load(absoluteHref, "GET", null, null, cocktail_core_http_DataFormatValue.TEXT);
			}
		}
		, unloadLinkedResource: function () {
			if (this.sheet != null) {
				var htmlDocument = this.ownerDocument;
				htmlDocument.removeStyleSheet(this.sheet);
				this.sheet = null;
				this._hasLoadedResource = false;
			}
		}
		, onCSSLoaded: function (event) {
			var nativeHttp = event.target;
			this.createStyleSheet(nativeHttp.response);
			var loadEvent = new cocktail_core_event_UIEvent();
			loadEvent.initUIEvent("load", false, false, null, 0.0);
			this.dispatchEvent(loadEvent);
			this._ownerHTMLDocument.undelayLoadEvent();
		}
		, onCSSLoadError: function (event) {
			this.fireEvent("error", false, false);
			this._ownerHTMLDocument.undelayLoadEvent();
		}
		, createStyleSheet: function (css) {
			this.sheet = new cocktail_core_css_CSSStyleSheet(css, cocktail_core_css_PropertyOriginValue.AUTHOR, null, this.get_href());
			var htmlDocument = this.ownerDocument;
			htmlDocument.addStyleSheet(this.sheet);
		}
		, get_disabled: function () {
			return this.getAttributeAsBool("disabled");
		}
		, set_disabled: function (value) {
			this.setAttributeAsBool("disabled", value);
			return value;
		}
		, get_href: function () {
			return this.getAttributeAsDOMString("href");
		}
		, set_href: function (value) {
			this.setAttribute("href", value);
			return value;
		}
		, get_rel: function () {
			return this.getAttributeAsDOMString("rel");
		}
		, set_rel: function (value) {
			this.setAttribute("rel", value);
			return value;
		}
		, get_relList: function () {
			return [];
		}
		, get_media: function () {
			return this.getAttributeAsDOMString("media");
		}
		, set_media: function (value) {
			this.setAttribute("media", value);
			return value;
		}
		, get_hreflang: function () {
			return this.getAttributeAsDOMString("hreflang");
		}
		, set_hreflang: function (value) {
			this.setAttribute("hreflang", value);
			return value;
		}
		, get_type: function () {
			return this.getAttributeAsDOMString("type");
		}
		, set_type: function (value) {
			this.setAttribute("type", value);
			return value;
		}
		, __class__: cocktail_core_html_HTMLLinkElement
		, __properties__: $extend(cocktail_core_html_HTMLElement.prototype.__properties__, { set_type: "set_type", get_type: "get_type", set_hreflang: "set_hreflang", get_hreflang: "get_hreflang", set_media: "set_media", get_media: "get_media", get_relList: "get_relList", set_rel: "set_rel", get_rel: "get_rel", set_href: "set_href", get_href: "get_href", set_disabled: "set_disabled", get_disabled: "get_disabled" })
	});
	var cocktail_core_html_HTMLMetaElement = function () {
		cocktail_core_html_HTMLElement.call(this, "META");
	};
	$hxClasses["cocktail.core.html.HTMLMetaElement"] = cocktail_core_html_HTMLMetaElement;
	cocktail_core_html_HTMLMetaElement.__name__ = ["cocktail", "core", "html", "HTMLMetaElement"];
	cocktail_core_html_HTMLMetaElement.__super__ = cocktail_core_html_HTMLElement;
	cocktail_core_html_HTMLMetaElement.prototype = $extend(cocktail_core_html_HTMLElement.prototype, {
		addedToDOM: function () {
			cocktail_core_html_HTMLElement.prototype.addedToDOM.call(this);
			this.updateConfig();
		}
		, updateConfig: function () {
			if (this.isAttachedToDOM() == true && this.get_name() != null && this.get_content() != null) cocktail_core_config_Config.getInstance().updateConfig(this.get_name(), this.get_content());
		}
		, get_name: function () {
			return this.getAttributeAsDOMString("name");
		}
		, set_name: function (value) {
			this.setAttribute("name", value);
			this.updateConfig();
			return value;
		}
		, get_content: function () {
			return this.getAttributeAsDOMString("content");
		}
		, set_content: function (value) {
			this.setAttribute("content", value);
			this.updateConfig();
			return value;
		}
		, __class__: cocktail_core_html_HTMLMetaElement
		, __properties__: $extend(cocktail_core_html_HTMLElement.prototype.__properties__, { set_content: "set_content", get_content: "get_content", set_name: "set_name", get_name: "get_name" })
	});
	var cocktail_core_html_HTMLObjectElement = function () {
		cocktail_core_html_EmbeddedElement.call(this, "OBJECT");
		this._pluginReady = false;
		this.intrinsicHeight = 150;
		this.intrinsicWidth = 300;
		this.intrinsicRatio = this.get_intrinsicWidth() / this.get_intrinsicHeight();
	};
	$hxClasses["cocktail.core.html.HTMLObjectElement"] = cocktail_core_html_HTMLObjectElement;
	cocktail_core_html_HTMLObjectElement.__name__ = ["cocktail", "core", "html", "HTMLObjectElement"];
	cocktail_core_html_HTMLObjectElement.__super__ = cocktail_core_html_EmbeddedElement;
	cocktail_core_html_HTMLObjectElement.prototype = $extend(cocktail_core_html_EmbeddedElement.prototype, {
		setAttribute: function (name, value) {
			if (name == "data") this.set_data(value); else if (name == "type") this.set_type(value); else cocktail_core_html_EmbeddedElement.prototype.setAttribute.call(this, name, value);
		}
		, attach: function (recursive) {
			cocktail_core_html_EmbeddedElement.prototype.attach.call(this, recursive);
			if (this.isRendered() == true) this.createPlugin();
		}
		, addedToDOM: function () {
			cocktail_core_html_EmbeddedElement.prototype.addedToDOM.call(this);
			if (this.get_data() != null) {
				if (this.get_data().indexOf(".swf") != -1) this._ownerHTMLDocument.resourceManager.getBinaryResource(this.get_data());
			}
		}
		, removedFromDOM: function () {
			cocktail_core_html_EmbeddedElement.prototype.removedFromDOM.call(this);
			this.deletePlugin();
		}
		, createPlugin: function () {
			if (this.plugin != null) return;
			if (this.attachedToDOM == false) return;
			if (this.get_data() != null) {
				if (this.get_data().indexOf(".swf") != -1 || this.getAttribute("type") == "application/x-shockwave-flash") {
					var resource = this._ownerHTMLDocument.resourceManager.getBinaryResource(this.get_data());
					if (resource.error == true) return;
					if (resource.complete == false) {
						resource.addEventListener("load", $bind(this, this.onPluginResourceLoaded));
						return;
					}
					var params = new haxe_ds_StringMap();
					var length = this.childNodes.length;
					var _g = 0;
					while (_g < length) {
						var i = _g++;
						var child = this.childNodes[i];
						if (child.tagName == "PARAM") {
							var name = child.getAttribute("name");
							var value = child.getAttribute("value");
							if (name != null && value != null) {
								if (__map_reserved[name] != null) params.setReserved(name, value); else params.h[name] = value;
							}
						}
					}
					var elementAttributes = new haxe_ds_StringMap();
					var _g1 = 0;
					var _g2 = this.attributes.get_length();
					while (_g1 < _g2) {
						var i1 = _g1++;
						var attr = this.attributes.item(i1);
						var value1 = attr.get_value();
						elementAttributes.set(attr.name, value1);
					}
					this.plugin = new cocktail_plugin_swf_SWFPlugin(this, elementAttributes, params, $bind(this, this.onLoadComplete), $bind(this, this.onLoadError));
				}
			}
		}
		, deletePlugin: function () {
			if (this.plugin != null) {
				this._pluginReady = false;
				this.plugin.dispose();
				this.plugin = null;
			}
		}
		, onPluginResourceLoaded: function (e) {
			e.target.removeEventListener("load", $bind(this, this.onPluginResourceLoaded));
			this.createPlugin();
		}
		, createElementRenderer: function () {
			if (this._pluginReady == true) this.elementRenderer = new cocktail_core_renderer_ObjectRenderer(this, this.coreStyle);
		}
		, onLoadComplete: function () {
			this._pluginReady = true;
			this.invalidateElementRenderer();
			var loadEvent = new cocktail_core_event_UIEvent();
			loadEvent.initUIEvent("load", false, false, null, 0.0);
			this.dispatchEvent(loadEvent);
		}
		, onLoadError: function () {
			this._pluginReady = false;
			var errorEvent = new cocktail_core_event_UIEvent();
			errorEvent.initUIEvent("error", false, false, null, 0.0);
			this.dispatchEvent(errorEvent);
		}
		, set_data: function (value) {
			cocktail_core_html_EmbeddedElement.prototype.setAttribute.call(this, "data", value);
			this.deletePlugin();
			this.createPlugin();
			return value;
		}
		, get_data: function () {
			return this.getAttributeAsDOMString("data");
		}
		, set_type: function (value) {
			cocktail_core_html_EmbeddedElement.prototype.setAttribute.call(this, "type", value);
			return value;
		}
		, get_type: function () {
			return this.getAttributeAsDOMString("type");
		}
		, __class__: cocktail_core_html_HTMLObjectElement
		, __properties__: $extend(cocktail_core_html_EmbeddedElement.prototype.__properties__, { set_type: "set_type", get_type: "get_type", set_data: "set_data", get_data: "get_data" })
	});
	var cocktail_core_html_HTMLParamElement = function () {
		cocktail_core_html_HTMLElement.call(this, "PARAM");
	};
	$hxClasses["cocktail.core.html.HTMLParamElement"] = cocktail_core_html_HTMLParamElement;
	cocktail_core_html_HTMLParamElement.__name__ = ["cocktail", "core", "html", "HTMLParamElement"];
	cocktail_core_html_HTMLParamElement.__super__ = cocktail_core_html_HTMLElement;
	cocktail_core_html_HTMLParamElement.prototype = $extend(cocktail_core_html_HTMLElement.prototype, {
		createElementRenderer: function () {
		}
		, isVoidElement: function () {
			return true;
		}
		, get_name: function () {
			return this.getAttributeAsDOMString("name");
		}
		, set_name: function (value) {
			this.setAttribute("name", value);
			return value;
		}
		, get_value: function () {
			return this.getAttributeAsDOMString("value");
		}
		, set_value: function (value) {
			this.setAttribute("value", value);
			return value;
		}
		, __class__: cocktail_core_html_HTMLParamElement
		, __properties__: $extend(cocktail_core_html_HTMLElement.prototype.__properties__, { set_value: "set_value", get_value: "get_value", set_name: "set_name", get_name: "get_name" })
	});
	var cocktail_core_html_HTMLSourceElement = function () {
		cocktail_core_html_HTMLElement.call(this, "SOURCE");
	};
	$hxClasses["cocktail.core.html.HTMLSourceElement"] = cocktail_core_html_HTMLSourceElement;
	cocktail_core_html_HTMLSourceElement.__name__ = ["cocktail", "core", "html", "HTMLSourceElement"];
	cocktail_core_html_HTMLSourceElement.__super__ = cocktail_core_html_HTMLElement;
	cocktail_core_html_HTMLSourceElement.prototype = $extend(cocktail_core_html_HTMLElement.prototype, {
		createElementRenderer: function () {
		}
		, isVoidElement: function () {
			return true;
		}
		, get_src: function () {
			return this.getAttributeAsDOMString("src");
		}
		, set_src: function (value) {
			this.setAttribute("src", value);
			return value;
		}
		, get_type: function () {
			return this.getAttributeAsDOMString("type");
		}
		, set_type: function (value) {
			this.setAttribute("type", value);
			return value;
		}
		, get_media: function () {
			return this.getAttributeAsDOMString("media");
		}
		, set_media: function (value) {
			this.setAttribute("media", value);
			return value;
		}
		, __class__: cocktail_core_html_HTMLSourceElement
		, __properties__: $extend(cocktail_core_html_HTMLElement.prototype.__properties__, { set_media: "set_media", get_media: "get_media", set_type: "set_type", get_type: "get_type", set_src: "set_src", get_src: "get_src" })
	});
	var cocktail_core_html_HTMLStyleElement = function () {
		cocktail_core_html_HTMLElement.call(this, "STYLE");
	};
	$hxClasses["cocktail.core.html.HTMLStyleElement"] = cocktail_core_html_HTMLStyleElement;
	cocktail_core_html_HTMLStyleElement.__name__ = ["cocktail", "core", "html", "HTMLStyleElement"];
	cocktail_core_html_HTMLStyleElement.__super__ = cocktail_core_html_HTMLElement;
	cocktail_core_html_HTMLStyleElement.prototype = $extend(cocktail_core_html_HTMLElement.prototype, {
		appendChild: function (newChild) {
			cocktail_core_html_HTMLElement.prototype.appendChild.call(this, newChild);
			if (newChild.get_nodeType() == 3) this.updateStyleSheet();
			return newChild;
		}
		, removeChild: function (oldChild) {
			cocktail_core_html_HTMLElement.prototype.removeChild.call(this, oldChild);
			if (oldChild.get_nodeType() == 3) this.updateStyleSheet();
			return oldChild;
		}
		, insertBefore: function (newChild, refChild) {
			cocktail_core_html_HTMLElement.prototype.insertBefore.call(this, newChild, refChild);
			if (refChild != null) {
				if (newChild.get_nodeType() == 3) this.updateStyleSheet();
			}
			return newChild;
		}
		, addedToDOM: function () {
			cocktail_core_html_HTMLElement.prototype.addedToDOM.call(this);
			this.updateStyleSheet();
		}
		, removedFromDOM: function () {
			cocktail_core_html_HTMLElement.prototype.removedFromDOM.call(this);
			this.updateStyleSheet();
		}
		, updateStyleSheet: function () {
			if (this.sheet != null) this.removeStyleSheet();
			if (this.attachedToDOM == true) {
				var css = this.concatenateChildTextNode();
				if (css != "") {
					this.sheet = new cocktail_core_css_CSSStyleSheet(css, cocktail_core_css_PropertyOriginValue.AUTHOR, this);
					var htmlDocument = this.ownerDocument;
					htmlDocument.addStyleSheet(this.sheet);
				}
			}
		}
		, removeStyleSheet: function () {
			if (this.sheet != null) {
				var htmlDocument = this.ownerDocument;
				htmlDocument.removeStyleSheet(this.sheet);
				this.sheet = null;
			}
		}
		, concatenateChildTextNode: function () {
			var content = "";
			var length = this.childNodes.length;
			var _g = 0;
			while (_g < length) {
				var i = _g++;
				if (this.childNodes[i].get_nodeType() == 3) content += this.childNodes[i].get_nodeValue();
			}
			return content;
		}
		, createElementRenderer: function () {
		}
		, get_disabled: function () {
			return this.getAttributeAsBool("disabled");
		}
		, set_disabled: function (value) {
			this.setAttribute("disabled", value == null ? "null" : "" + value);
			return value;
		}
		, __class__: cocktail_core_html_HTMLStyleElement
		, __properties__: $extend(cocktail_core_html_HTMLElement.prototype.__properties__, { set_disabled: "set_disabled", get_disabled: "get_disabled" })
	});
	var cocktail_core_html_HTMLTextAreaElement = function () {
		cocktail_core_html_FormAssociatedElement.call(this, "TEXTAREA");
		this._valueIsDirty = false;
		this._rawValue = "";
	};
	$hxClasses["cocktail.core.html.HTMLTextAreaElement"] = cocktail_core_html_HTMLTextAreaElement;
	cocktail_core_html_HTMLTextAreaElement.__name__ = ["cocktail", "core", "html", "HTMLTextAreaElement"];
	cocktail_core_html_HTMLTextAreaElement.__super__ = cocktail_core_html_FormAssociatedElement;
	cocktail_core_html_HTMLTextAreaElement.prototype = $extend(cocktail_core_html_FormAssociatedElement.prototype, {
		dispatchEvent: function (evt) {
			var defaultPrevented = cocktail_core_html_FormAssociatedElement.prototype.dispatchEvent.call(this, evt);
			if (this.elementRenderer != null) {
				if (evt.type == "focus") {
					var inputRenderer = this.elementRenderer;
					inputRenderer.focus();
				} else if (evt.type == "blur") {
					var inputRenderer1 = this.elementRenderer;
					inputRenderer1.blur();
				}
			}
			return defaultPrevented;
		}
		, createElementRenderer: function () {
			this.elementRenderer = new cocktail_core_renderer_TextAreaRenderer(this, this.coreStyle);
			if (this._valueIsDirty == false) this._rawValue = this.get_textContent();
			if (this.elementRenderer != null) {
				var inputRenderer = this.elementRenderer;
				inputRenderer.onInput = $bind(this, this.onUserInput);
				this.updateInputRendererState();
			}
		}
		, reset: function () {
			this._rawValue = this.get_textContent();
			this.updateInputRendererState();
		}
		, isDefaultFocusable: function () {
			if (this.get_disabled() == true) return false;
			return true;
		}
		, onUserInput: function () {
			this._valueIsDirty = true;
			var inputRenderer = this.elementRenderer;
			this._rawValue = inputRenderer.get_value();
			this.fireEvent("input", true, false);
		}
		, updateInputRendererState: function () {
			if (this.elementRenderer != null) {
				var inputRenderer = this.elementRenderer;
				inputRenderer.set_readonly(this.get_readOnly());
				inputRenderer.set_disabled(this.get_disabled());
				inputRenderer.set_maxLength(this.get_maxLength());
				inputRenderer.set_value(this.get_value());
			}
		}
		, isMutable: function () {
			if (this.get_disabled() == true || this.get_readOnly() == true) return false;
			return true;
		}
		, set_value: function (value) {
			this._valueIsDirty = true;
			this._rawValue = value;
			this.updateInputRendererState();
			return value;
		}
		, get_value: function () {
			return this._rawValue;
		}
		, set_maxLength: function (value) {
			this.setAttribute("maxlength", value == null ? "null" : "" + value);
			return value;
		}
		, get_maxLength: function () {
			return this.getAttributeAsPositiveSignedInteger("maxlength", null);
		}
		, get_readOnly: function () {
			return this.getAttributeAsBool("readonly");
		}
		, set_readOnly: function (value) {
			this.setAttributeAsBool("readonly", value);
			return value;
		}
		, get_disabled: function () {
			return this.getAttributeAsBool("disabled");
		}
		, set_disabled: function (value) {
			this.setAttributeAsBool("disabled", value);
			this.updateInputRendererState();
			return value;
		}
		, get_type: function () {
			return "textarea";
		}
		, __class__: cocktail_core_html_HTMLTextAreaElement
		, __properties__: $extend(cocktail_core_html_FormAssociatedElement.prototype.__properties__, { get_type: "get_type", set_disabled: "set_disabled", get_disabled: "get_disabled", set_readOnly: "set_readOnly", get_readOnly: "get_readOnly", set_maxLength: "set_maxLength", get_maxLength: "get_maxLength", set_value: "set_value", get_value: "get_value" })
	});
	var cocktail_core_html_HTMLTitleElement = function () {
		cocktail_core_html_HTMLElement.call(this, "TITLE");
	};
	$hxClasses["cocktail.core.html.HTMLTitleElement"] = cocktail_core_html_HTMLTitleElement;
	cocktail_core_html_HTMLTitleElement.__name__ = ["cocktail", "core", "html", "HTMLTitleElement"];
	cocktail_core_html_HTMLTitleElement.__super__ = cocktail_core_html_HTMLElement;
	cocktail_core_html_HTMLTitleElement.prototype = $extend(cocktail_core_html_HTMLElement.prototype, {
		get_text: function () {
			return this.get_textContent();
		}
		, set_text: function (value) {
			return value;
		}
		, __class__: cocktail_core_html_HTMLTitleElement
		, __properties__: $extend(cocktail_core_html_HTMLElement.prototype.__properties__, { set_text: "set_text", get_text: "get_text" })
	});
	var cocktail_core_html_HTMLVideoElement = function () {
		cocktail_core_html_HTMLMediaElement.call(this, "VIDEO");
		this.initPosterFrame();
	};
	$hxClasses["cocktail.core.html.HTMLVideoElement"] = cocktail_core_html_HTMLVideoElement;
	cocktail_core_html_HTMLVideoElement.__name__ = ["cocktail", "core", "html", "HTMLVideoElement"];
	cocktail_core_html_HTMLVideoElement.__super__ = cocktail_core_html_HTMLMediaElement;
	cocktail_core_html_HTMLVideoElement.prototype = $extend(cocktail_core_html_HTMLMediaElement.prototype, {
		initNativeMedia: function () {
			this.nativeMedia = new cocktail_port_base_NativeMedia();
		}
		, initPosterFrame: function () {
			this._posterImage = new cocktail_core_html_HTMLImageElement();
		}
		, setAttribute: function (name, value) {
			if (name == "poster") this.set_poster(value); else cocktail_core_html_HTMLMediaElement.prototype.setAttribute.call(this, name, value);
		}
		, createElementRenderer: function () {
			this.elementRenderer = new cocktail_core_renderer_VideoRenderer(this, this.coreStyle);
		}
		, shouldRenderPosterFrame: function () {
			if (this.get_poster() == "") return false;
			var _g = this.readyState;
			switch (_g) {
				case 0: case 1:
					return true;
			}
			if (this.paused == true && this._currentPlaybackPosition == 0.0) return true;
			return false;
		}
		, onPosterLoadComplete: function (e) {
			this.removeListeners();
			this.invalidate();
		}
		, onPosterLoadError: function (e) {
			this.removeListeners();
		}
		, removeListeners: function () {
			this._posterImage.removeEventListener("load", this._onPosterLoadComplete);
			this._posterImage.removeEventListener("error", this._onPosterLoadError);
		}
		, set_poster: function (value) {
			cocktail_core_html_HTMLMediaElement.prototype.setAttribute.call(this, "poster", value);
			this._onPosterLoadComplete = $bind(this, this.onPosterLoadComplete);
			this._onPosterLoadError = $bind(this, this.onPosterLoadError);
			this._posterImage.addEventListener("load", this._onPosterLoadComplete);
			this._posterImage.addEventListener("error", this._onPosterLoadError);
			this._posterImage.set_src(value);
			return value;
		}
		, get_poster: function () {
			return this.getAttributeAsDOMString("poster");
		}
		, get_videoWidth: function () {
			if (this.nativeMedia.get_width() != null) return Math.round(this.nativeMedia.get_width()); else return 300;
		}
		, get_videoHeight: function () {
			if (this.nativeMedia.get_height() != null) return Math.round(this.nativeMedia.get_height()); else return 150;
		}
		, __class__: cocktail_core_html_HTMLVideoElement
		, __properties__: $extend(cocktail_core_html_HTMLMediaElement.prototype.__properties__, { get_videoHeight: "get_videoHeight", get_videoWidth: "get_videoWidth", set_poster: "set_poster", get_poster: "get_poster" })
	});
	var cocktail_core_html_TimeRanges = function (ranges) {
		this._ranges = ranges;
	};
	$hxClasses["cocktail.core.html.TimeRanges"] = cocktail_core_html_TimeRanges;
	cocktail_core_html_TimeRanges.__name__ = ["cocktail", "core", "html", "TimeRanges"];
	cocktail_core_html_TimeRanges.prototype = {
		start: function (index) {
			return this._ranges[index].start;
		}
		, end: function (index) {
			return this._ranges[index].end;
		}
		, get_length: function () {
			return this._ranges.length;
		}
		, __class__: cocktail_core_html_TimeRanges
		, __properties__: { get_length: "get_length" }
	};
	var cocktail_core_http_HTTPConstants = function () {
	};
	$hxClasses["cocktail.core.http.HTTPConstants"] = cocktail_core_http_HTTPConstants;
	cocktail_core_http_HTTPConstants.__name__ = ["cocktail", "core", "http", "HTTPConstants"];
	cocktail_core_http_HTTPConstants.getFormSubmitMethods = function () {
		return ["GET", "POST"];
	};
	cocktail_core_http_HTTPConstants.getFormEncodings = function () {
		return ["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"];
	};
	cocktail_core_http_HTTPConstants.prototype = {
		__class__: cocktail_core_http_HTTPConstants
	};
	var cocktail_core_http_DataFormatValue = $hxClasses["cocktail.core.http.DataFormatValue"] = { __ename__: ["cocktail", "core", "http", "DataFormatValue"], __constructs__: ["BINARY", "TEXT"] };
	cocktail_core_http_DataFormatValue.BINARY = ["BINARY", 0];
	cocktail_core_http_DataFormatValue.BINARY.toString = $estr;
	cocktail_core_http_DataFormatValue.BINARY.__enum__ = cocktail_core_http_DataFormatValue;
	cocktail_core_http_DataFormatValue.TEXT = ["TEXT", 1];
	cocktail_core_http_DataFormatValue.TEXT.toString = $estr;
	cocktail_core_http_DataFormatValue.TEXT.__enum__ = cocktail_core_http_DataFormatValue;
	var cocktail_core_http_XMLHTTPRequest = function () {
		cocktail_core_event_XMLHttpRequestEventTarget.call(this);
		this._timer = new cocktail_core_timer_Timer();
		this._nativeHttp = new cocktail_port_platform_flash_$player_NativeHttp(this._timer);
		this.set_responseType("");
		this.setReadyState(0);
	};
	$hxClasses["cocktail.core.http.XMLHTTPRequest"] = cocktail_core_http_XMLHTTPRequest;
	cocktail_core_http_XMLHTTPRequest.__name__ = ["cocktail", "core", "http", "XMLHTTPRequest"];
	cocktail_core_http_XMLHTTPRequest.__super__ = cocktail_core_event_XMLHttpRequestEventTarget;
	cocktail_core_http_XMLHTTPRequest.prototype = $extend(cocktail_core_event_XMLHttpRequestEventTarget.prototype, {
		open: function (method, url, async, user, password) {
			if (async == null) async = true;
			var _g = method.toUpperCase();
			switch (_g) {
				case "DELETE": case "GET": case "HEAD": case "OPTIONS": case "POST": case "PUT":
					break;
				case "CONNECT": case "TRACE": case "TRACK":
					throw new js__$Boot_HaxeError(18);
					return;
				default:
					throw new js__$Boot_HaxeError(12);
					return;
			}
			this._method = method;
			this._url = url;
			if (async == false) this._synchronous = true;
			this._authorRequestHeaders = new haxe_ds_StringMap();
			this._send = false;
			this.response = null;
			this.setReadyState(1);
		}
		, send: function (data) {
			if (this.readyState != 1 || this._send == true) {
				throw new js__$Boot_HaxeError(11);
				return;
			}
			var useRequestEntityBody = data != null;
			var _g = this._method;
			switch (_g) {
				case "GET": case "HEAD":
					useRequestEntityBody = false;
					break;
			}
			if (useRequestEntityBody == true) {
			}
			if (this._synchronous == true) {
			} else if (this._registeredEventListeners != null) this._uploadEvents = true;
			this._error = false;
			if (useRequestEntityBody == false || data == null) this._uploadComplete = true;
			if (this._synchronous == false) {
				this._send = true;
				this.fireReadyStateChange();
				var loadStart = new cocktail_core_event_ProgressEvent();
				loadStart.initEvent("loadstart", false, false);
				this.dispatchEvent(loadStart);
				if (this._uploadComplete == false) {
					var uploadLoadStart = new cocktail_core_event_ProgressEvent();
					uploadLoadStart.initEvent("loadstart", false, false);
					this.upload.dispatchEvent(uploadLoadStart);
				}
			}
			this._nativeHttp.load(this._url, this._method, data, this._authorRequestHeaders, cocktail_core_http_DataFormatValue.TEXT);
			this.onHttpProgressTick(0);
		}
		, abort: function () {
		}
		, setRequestHeader: function (header, value) {
			if (this.readyState != 1 || this._send == true) {
				throw new js__$Boot_HaxeError(11);
				return;
			}
			var _g = header.toLowerCase();
			switch (_g) {
				case "accept-charset": case "accept-encoding": case "access-control-request-headers": case "access-control-request-method": case "connection": case "content-length": case "cookie": case "cookie2": case "content-transfer-encoding": case "date": case "expect": case "host": case "keep-alive": case "origin": case "referer": case "te": case "trailer": case "transfer-encoding": case "upgrade": case "user-agent": case "via":
					return;
			}
			if ((function ($this) {
				var $r;
				var _this = header.toLowerCase();
				$r = HxOverrides.substr(_this, 0, 6);
				return $r;
			}(this)) == "proxy-" || (function ($this) {
				var $r;
				var _this1 = header.toLowerCase();
				$r = HxOverrides.substr(_this1, 0, 4);
				return $r;
			}(this)) == "sec-") return;
			if (this._authorRequestHeaders.exists(header) == false) this._authorRequestHeaders.set(header, value); else this._authorRequestHeaders.set(header, value);
		}
		, onHttpProgressTick: function (timeStamp) {
			this.status = this._nativeHttp.status;
			if (this._error == true) return;
			this.makeProgressNotification();
			this.makeUploadProgressNotification();
			if (this.readyState == 1) {
				if (this._nativeHttp.responseHeadersLoaded == true && this._synchronous == false) {
					this._responseHeaders = this._nativeHttp.responseHeaders;
					this.setReadyState(2);
				}
			}
			if (this.readyState == 2) {
				if (this._synchronous == false) {
					if (this._nativeHttp.get_loaded() > 0) this.setReadyState(3);
				}
			}
			if (this.readyState == 3 || this._nativeHttp.complete == true) {
				if (this._nativeHttp.complete == true) {
					this._synchronous = false;
					this.response = this._nativeHttp.response;
					this.responseText = this._nativeHttp.response;
					this.setReadyState(4);
					var loadEvent = new cocktail_core_event_ProgressEvent();
					loadEvent.initEvent("load", false, false);
					this.dispatchEvent(loadEvent);
					var loadEndEvent = new cocktail_core_event_ProgressEvent();
					loadEndEvent.initEvent("loadend", false, false);
					this.dispatchEvent(loadEndEvent);
					return;
				}
			}
			this._timer.delay($bind(this, this.onHttpProgressTick), 50);
		}
		, makeProgressNotification: function () {
			var progressEvent = new cocktail_core_event_ProgressEvent();
			progressEvent.initProgressEvent("progress", false, false, this._nativeHttp.get_total() != 0, this._nativeHttp.get_loaded(), this._nativeHttp.get_total());
			this.dispatchEvent(progressEvent);
		}
		, makeUploadProgressNotification: function () {
		}
		, requestError: function (error, event) {
			this._nativeHttp.close();
			this._error = true;
			this.readyState = 4;
			if (this._synchronous == true) {
				throw new js__$Boot_HaxeError(error);
				return;
			}
			this.fireReadyStateChange();
			if (this._uploadComplete == false) {
				this._uploadComplete = true;
				var errorEvent1 = new cocktail_core_event_ProgressEvent();
				errorEvent1.initEvent(event, false, false);
				this.upload.dispatchEvent(errorEvent1);
				var loadEnd1 = new cocktail_core_event_ProgressEvent();
				loadEnd1.initEvent("loadend", false, false);
				this.upload.dispatchEvent(loadEnd1);
			}
			var errorEvent = new cocktail_core_event_ProgressEvent();
			errorEvent.initEvent(event, false, false);
			this.dispatchEvent(errorEvent);
			var loadEnd = new cocktail_core_event_ProgressEvent();
			loadEnd.initEvent("loadend", false, false);
			this.dispatchEvent(loadEnd);
		}
		, setReadyState: function (value) {
			this.readyState = value;
			this.fireReadyStateChange();
		}
		, fireReadyStateChange: function () {
			var readyStateChangeEvent = new cocktail_core_event_Event();
			readyStateChangeEvent.initEvent("readystatechange", false, false);
			this.dispatchEvent(readyStateChangeEvent);
		}
		, get_status: function () {
			var _g = this.readyState;
			switch (_g) {
				case 0: case 1:
					return 0;
				default:
			}
			if (this._error == true) return 0;
			return this.status;
		}
		, get_statusText: function () {
			var _g = this.readyState;
			switch (_g) {
				case 0: case 1:
					return "";
				default:
			}
			if (this._error == true) return "";
			return this.statusText;
		}
		, get_response: function () {
			if (this.responseType == "" && this.responseType == "text") {
				var _g = this.readyState;
				switch (_g) {
					case 3: case 4:
						break;
					default:
						return "";
				}
				if (this._error == true) return "";
				return this.get_responseText();
			} else {
				if (this.readyState != 4) return null;
				if (this._error == true) return null;
				return null;
			}
		}
		, get_responseText: function () {
			if (this.responseType != "" && this.responseType != "text") {
				throw new js__$Boot_HaxeError(11);
				return null;
			}
			var _g = this.readyState;
			switch (_g) {
				case 3: case 4:
					break;
				default:
					return "";
			}
			if (this._error == true) return "";
			return this.responseText;
		}
		, get_responseXML: function () {
			if (this.responseType != "" && this.responseType != "document") {
				throw new js__$Boot_HaxeError(11);
				return null;
			}
			if (this.readyState != 4) return null;
			if (this._error == true) return null;
			return this.responseXML;
		}
		, set_responseType: function (value) {
			var _g = this.readyState;
			switch (_g) {
				case 3: case 4:
					throw new js__$Boot_HaxeError(11);
					return null;
				default:
			}
			return this.responseType = value;
		}
		, set_onreadystatechange: function (value) {
			this.updateCallbackListener("readystatechange", value, this.onreadystatechange);
			return this.onreadystatechange = value;
		}
		, __class__: cocktail_core_http_XMLHTTPRequest
		, __properties__: $extend(cocktail_core_event_XMLHttpRequestEventTarget.prototype.__properties__, { set_onreadystatechange: "set_onreadystatechange", get_statusText: "get_statusText", get_status: "get_status", set_responseType: "set_responseType", get_responseXML: "get_responseXML", get_responseText: "get_responseText", get_response: "get_response" })
	});
	var cocktail_core_http_XMLHttpRequestUpload = function () {
		cocktail_core_event_XMLHttpRequestEventTarget.call(this);
	};
	$hxClasses["cocktail.core.http.XMLHttpRequestUpload"] = cocktail_core_http_XMLHttpRequestUpload;
	cocktail_core_http_XMLHttpRequestUpload.__name__ = ["cocktail", "core", "http", "XMLHttpRequestUpload"];
	cocktail_core_http_XMLHttpRequestUpload.__super__ = cocktail_core_event_XMLHttpRequestEventTarget;
	cocktail_core_http_XMLHttpRequestUpload.prototype = $extend(cocktail_core_event_XMLHttpRequestEventTarget.prototype, {
		__class__: cocktail_core_http_XMLHttpRequestUpload
	});
	var cocktail_core_invalidation_InvalidationManager = function (htmlDocument) {
		this._htmlDocument = htmlDocument;
		this._invalidationScheduled = false;
		this._documentNeedsLayout = true;
		this._documentNeedsRendering = true;
		this._documentNeedsCascading = true;
		this._graphicsContextTreeNeedsUpdate = true;
		this._forceGraphicsContextUpdate = false;
		this._renderingTreeNeedsUpdate = true;
		this._layerTreeNeedsUpdate = true;
		this._nativeLayerTreeNeedsUpdate = true;
		this._stackingContextsNeedUpdate = true;
		this._pendingTransitionsNeedUpdate = true;
		this._forceLayout = false;
		this._viewportResized = false;
		this._bitmapSizeNeedsUpdate = true;
		this._scrollOffsetNeedsUpdate = false;
		this._initialMatrix = new cocktail_core_geom_Matrix();
		this._dirtyRect = new cocktail_core_geom_RectangleVO();
		this._firstDirtyRect = true;
		this._repaintWholeViewport = true;
	};
	$hxClasses["cocktail.core.invalidation.InvalidationManager"] = cocktail_core_invalidation_InvalidationManager;
	cocktail_core_invalidation_InvalidationManager.__name__ = ["cocktail", "core", "invalidation", "InvalidationManager"];
	cocktail_core_invalidation_InvalidationManager.prototype = {
		dispose: function () {
			this._htmlDocument = null;
			this._initialMatrix = null;
			this._dirtyRect = null;
		}
		, update: function () {
			this._invalidationScheduled = false;
			this.updateDocument();
		}
		, updateDocumentImmediately: function () {
			if (this._documentNeedsRendering == false) this.updateDocument(); else {
				this._documentNeedsRendering = false;
				this.updateDocument();
				this._documentNeedsRendering = true;
			}
		}
		, invalidateViewportSize: function () {
			this.invalidateLayout(true);
			this.invalidateRendering();
			this._viewportResized = true;
			this._bitmapSizeNeedsUpdate = true;
		}
		, invalidateBitmapSizes: function () {
			this._bitmapSizeNeedsUpdate = true;
			this.invalidate();
		}
		, invalidateLayout: function (force) {
			if (this._forceLayout == true) this._forceLayout = force;
			this._documentNeedsLayout = true;
			this.invalidate();
		}
		, invalidateRendering: function (dirtyRect) {
			this._documentNeedsRendering = true;
			this.invalidate();
			if (this._repaintWholeViewport == true) return;
			if (dirtyRect == null) this._repaintWholeViewport = true; else if (this._firstDirtyRect == true) {
				this._dirtyRect.x = dirtyRect.x;
				this._dirtyRect.y = dirtyRect.y;
				this._dirtyRect.width = dirtyRect.width;
				this._dirtyRect.height = dirtyRect.height;
				this._firstDirtyRect = false;
			} else cocktail_core_geom_GeomUtils.addBounds(dirtyRect, this._dirtyRect, null, null);
		}
		, invalidateScrollOffset: function () {
			this._scrollOffsetNeedsUpdate = true;
			this.invalidate();
		}
		, invalidateRenderingTree: function () {
			this._renderingTreeNeedsUpdate = true;
			this.invalidate();
		}
		, invalidateLayerTree: function () {
			this._layerTreeNeedsUpdate = true;
			this.invalidate();
		}
		, invalidateStackingContexts: function () {
			this._stackingContextsNeedUpdate = true;
			this.invalidate();
		}
		, invalidateNativeLayerTree: function () {
			this._nativeLayerTreeNeedsUpdate = true;
			this.invalidate();
		}
		, invalidatePendingTransitions: function () {
			this._pendingTransitionsNeedUpdate = true;
			this.invalidate();
		}
		, invalidateGraphicsContextTree: function (force) {
			this._graphicsContextTreeNeedsUpdate = true;
			if (force == true) this._forceGraphicsContextUpdate = true;
			this.invalidate();
		}
		, invalidateCascade: function () {
			this._documentNeedsCascading = true;
			this.invalidate();
		}
		, invalidate: function () {
			if (this._invalidationScheduled == false) this.doInvalidate();
		}
		, doInvalidate: function () {
			if (this._htmlDocument.onDocumentInvalidated != null) {
				this._invalidationScheduled = true;
				this._htmlDocument.onDocumentInvalidated();
			}
		}
		, updateDocument: function () {
			if (this._documentNeedsCascading == true) {
				this.updateCascade(true);
				this._documentNeedsCascading = false;
			}
			if (this._renderingTreeNeedsUpdate == true) {
				this.updateRenderingTree();
				this._renderingTreeNeedsUpdate = false;
			}
			if (this._layerTreeNeedsUpdate == true) {
				this._htmlDocument.documentElement.elementRenderer.updateLayerRenderer();
				this._layerTreeNeedsUpdate = false;
			}
			if (this._stackingContextsNeedUpdate == true) {
				this._htmlDocument.documentElement.elementRenderer.layerRenderer.updateStackingContext();
				this._stackingContextsNeedUpdate = false;
			}
			if (this._documentNeedsLayout == true) {
				this._htmlDocument.documentElement.elementRenderer.updateText();
				this.updateLayout(this._forceLayout);
				this._forceLayout = false;
				this._documentNeedsLayout = false;
			}
			if (this._pendingTransitionsNeedUpdate == true) {
				var atLeastOneTransitionStarted = this._htmlDocument.documentElement.startPendingTransitions();
				if (atLeastOneTransitionStarted == true) this.updateLayout(false);
			}
			if (this._graphicsContextTreeNeedsUpdate == true) {
				this._htmlDocument.documentElement.elementRenderer.layerRenderer.updateGraphicsContext(this._forceGraphicsContextUpdate);
				this._graphicsContextTreeNeedsUpdate = false;
				this._forceGraphicsContextUpdate = false;
			}
			if (this._nativeLayerTreeNeedsUpdate == true) {
				this._htmlDocument.documentElement.elementRenderer.layerRenderer.graphicsContext.updateNativeLayer();
				this._nativeLayerTreeNeedsUpdate = false;
			}
			if (this._bitmapSizeNeedsUpdate == true) {
				this._htmlDocument.documentElement.elementRenderer.layerRenderer.graphicsContext.updateGraphicsSize(Math.floor(this._htmlDocument.getViewportWidth()), Math.floor(this._htmlDocument.getViewportHeight()));
				this._bitmapSizeNeedsUpdate = false;
			}
			if (this._documentNeedsRendering == true || this._scrollOffsetNeedsUpdate == true) {
				var initialLayerRenderer = this._htmlDocument.documentElement.elementRenderer.layerRenderer;
				if (this._documentNeedsRendering == true) {
					initialLayerRenderer.updateLayerMatrix(this._initialMatrix);
					initialLayerRenderer.updateBounds();
					initialLayerRenderer.updateClippedBounds();
					initialLayerRenderer.updateScrollableBounds();
					initialLayerRenderer.resetScrollOffset();
					initialLayerRenderer.updateScrollOffset();
					initialLayerRenderer.resetClipRect(0, 0, this._htmlDocument.getViewportWidth(), this._htmlDocument.getViewportHeight());
					initialLayerRenderer.updateClipRect();
					this._htmlDocument.documentElement.elementRenderer.updateHitTestingBounds();
					initialLayerRenderer.updateLayerAlpha(1.0);
					this._htmlDocument.documentElement.elementRenderer.updateTextDecorations(false, false, false, false);
					if (this._repaintWholeViewport == true) {
						this._dirtyRect.x = 0;
						this._dirtyRect.y = 0;
						this._dirtyRect.width = this._htmlDocument.getViewportWidth();
						this._dirtyRect.height = this._htmlDocument.getViewportHeight();
					}
					initialLayerRenderer.clear(this._dirtyRect.x, this._dirtyRect.y, this._dirtyRect.width, this._dirtyRect.height);
					initialLayerRenderer.stackingContext.render(this._dirtyRect);
				} else {
					initialLayerRenderer.resetScrollOffset();
					initialLayerRenderer.updateScrollOffset();
					initialLayerRenderer.resetClipRect(0, 0, this._htmlDocument.getViewportWidth(), this._htmlDocument.getViewportHeight());
					initialLayerRenderer.updateClipRect();
					this._htmlDocument.documentElement.elementRenderer.updateHitTestingBounds();
					this._dirtyRect.x = 0;
					this._dirtyRect.y = 0;
					this._dirtyRect.width = 0;
					this._dirtyRect.height = 0;
					initialLayerRenderer.updateScrollRegion(this._dirtyRect);
					initialLayerRenderer.clear(this._dirtyRect.x, this._dirtyRect.y, this._dirtyRect.width, this._dirtyRect.height);
					initialLayerRenderer.stackingContext.render(this._dirtyRect);
				}
				this._documentNeedsRendering = false;
				this._repaintWholeViewport = false;
				this._firstDirtyRect = true;
				this._dirtyRect.x = 0;
				this._dirtyRect.y = 0;
				this._dirtyRect.width = 0;
				this._dirtyRect.height = 0;
				this._scrollOffsetNeedsUpdate = false;
			}
			if (this._pendingTransitionsNeedUpdate == true) {
				this._htmlDocument.documentElement.endPendingTransitions();
				this._pendingTransitionsNeedUpdate = false;
			}
			if (this._viewportResized == true) {
				this._viewportResized = false;
				var resizeEvent = new cocktail_core_event_UIEvent();
				resizeEvent.initUIEvent("resize", false, false, null, 0);
				this._htmlDocument.dispatchEvent(resizeEvent);
			}
			this._htmlDocument.onUpdated();
		}
		, updateCascade: function (programmaticChange) {
			this._htmlDocument.cascadeManager.reset();
			var parentRelativeLengthReference = this._htmlDocument.cascadeManager.parentRelativeLengthReference;
			var relativeLengthReference = this._htmlDocument.cascadeManager.relativeLengthReference;
			parentRelativeLengthReference.viewportHeight = this._htmlDocument.getViewportHeight();
			parentRelativeLengthReference.viewportWidth = this._htmlDocument.getViewportWidth();
			relativeLengthReference.viewportHeight = this._htmlDocument.getViewportHeight();
			relativeLengthReference.viewportWidth = this._htmlDocument.getViewportWidth();
			this._htmlDocument.documentElement.cascade(this._htmlDocument.cascadeManager, programmaticChange);
		}
		, updateLayout: function (forceLayout) {
			this._htmlDocument.documentElement.elementRenderer.layout(forceLayout, cocktail_core_layout_LayoutStateValue.NORMAL);
			this._htmlDocument.documentElement.elementRenderer.setGlobalOrigins(0, 0, 0, 0);
		}
		, updateRenderingTree: function () {
			this._htmlDocument.documentElement.updateElementRenderer();
			this._htmlDocument.documentElement.elementRenderer.updateAnonymousBlock();
			this._htmlDocument.documentElement.elementRenderer.updateInlineBoxes();
		}
		, __class__: cocktail_core_invalidation_InvalidationManager
	};
	var cocktail_core_layer_IScrollableView = function () { };
	$hxClasses["cocktail.core.layer.IScrollableView"] = cocktail_core_layer_IScrollableView;
	cocktail_core_layer_IScrollableView.__name__ = ["cocktail", "core", "layer", "IScrollableView"];
	cocktail_core_layer_IScrollableView.prototype = {
		__class__: cocktail_core_layer_IScrollableView
	};
	var cocktail_core_layer_ScrollableView = function (rootElementRenderer) {
		cocktail_core_ds_FastNode.call(this);
		this.rootElementRenderer = rootElementRenderer;
		this.set_scrollLeft(0);
		this.set_scrollTop(0);
		this._previousScrollOffsetX = 0;
		this._previousScrollOffsetY = 0;
		this._ancestorsScrollOffset = new cocktail_core_geom_PointVO(0, 0);
		this.scrollOffset = new cocktail_core_geom_PointVO(0, 0);
		this.bounds = new cocktail_core_geom_RectangleVO();
		this._clippedBounds = new cocktail_core_geom_RectangleVO();
		this.scrollableBounds = new cocktail_core_geom_RectangleVO();
		this.clipRect = new cocktail_core_geom_RectangleVO();
	};
	$hxClasses["cocktail.core.layer.ScrollableView"] = cocktail_core_layer_ScrollableView;
	cocktail_core_layer_ScrollableView.__name__ = ["cocktail", "core", "layer", "ScrollableView"];
	cocktail_core_layer_ScrollableView.__interfaces__ = [cocktail_core_layer_IScrollableView];
	cocktail_core_layer_ScrollableView.__super__ = cocktail_core_ds_FastNode;
	cocktail_core_layer_ScrollableView.prototype = $extend(cocktail_core_ds_FastNode.prototype, {
		resetClipRect: function (x, y, width, height) {
			this.clipRect.x = x;
			this.clipRect.y = y;
			this.clipRect.width = width;
			this.clipRect.height = height;
			var child = this.firstChild;
			while (child != null) {
				child.resetClipRect(x, y, width, height);
				child = child.nextSibling;
			}
		}
		, updateClipRect: function () {
			var clipped = false;
			if (this.isXAxisClipped() == true) clipped = true; else if (this.isYAxisClipped() == true) clipped = true;
			if (clipped == true) {
				this._clippedBounds.x -= this._ancestorsScrollOffset.x;
				this._clippedBounds.y -= this._ancestorsScrollOffset.y;
				cocktail_core_geom_GeomUtils.intersectBounds(this.clipRect, this._clippedBounds, this.clipRect);
				this._clippedBounds.x += this._ancestorsScrollOffset.x;
				this._clippedBounds.y += this._ancestorsScrollOffset.y;
				this.clipChildren(this, this.clipRect, this);
			}
			var child = this.firstChild;
			while (child != null) {
				child.updateClipRect();
				child = child.nextSibling;
			}
		}
		, clipChildren: function (rootLayerRenderer, clipRect, referenceLayer) {
			var child = rootLayerRenderer.firstChild;
			while (child != null) {
				var childWasClipped = child.clipIfNeeded(clipRect, referenceLayer);
				if (childWasClipped == true) {
					if (child.firstChild != null) this.clipChildren(child, clipRect, referenceLayer);
				}
				child = child.nextSibling;
			}
		}
		, clipIfNeeded: function (parentClipRect, layer) {
			if (this.rootElementRenderer.coreStyle.isFixedPositioned == true) return false;
			if (this.isContainingBlockChildren(layer) == true) return false;
			cocktail_core_geom_GeomUtils.intersectBounds(this.clipRect, parentClipRect, this.clipRect);
			return true;
		}
		, resetScrollOffset: function () {
			this._ancestorsScrollOffset.x = 0;
			this._ancestorsScrollOffset.y = 0;
			this._previousScrollOffsetX = this.scrollOffset.x;
			this._previousScrollOffsetY = this.scrollOffset.y;
			this.scrollOffset.x = 0;
			this.scrollOffset.y = 0;
			var child = this.firstChild;
			while (child != null) {
				child.resetScrollOffset();
				child = child.nextSibling;
			}
		}
		, updateScrollOffset: function () {
			if (this.isXAxisClipped() == true) this.addScrollOffsetToChildren(this, this.scrollLeft, this.scrollTop, this); else if (this.isYAxisClipped() == true) this.addScrollOffsetToChildren(this, this.scrollLeft, this.scrollTop, this);
			var child = this.firstChild;
			while (child != null) {
				child.updateScrollOffset();
				child = child.nextSibling;
			}
			this.scrollOffset.x = this._ancestorsScrollOffset.x + this.scrollLeft;
			this.scrollOffset.y = this._ancestorsScrollOffset.y + this.scrollTop;
		}
		, addScrollOffsetIfNeeded: function (layer, scrollLeft, scrollTop) {
			if (this.rootElementRenderer.coreStyle.isFixedPositioned == true) return;
			if (this.isContainingBlockChildren(layer) == true) return;
			this._ancestorsScrollOffset.x += scrollLeft;
			this._ancestorsScrollOffset.y += scrollTop;
		}
		, addScrollOffsetToChildren: function (rootLayerRenderer, scrollLeft, scrollTop, referenceLayer) {
			var child = rootLayerRenderer.firstChild;
			while (child != null) {
				child.addScrollOffsetIfNeeded(referenceLayer, scrollLeft, scrollTop);
				if (child.firstChild != null) this.addScrollOffsetToChildren(child, scrollLeft, scrollTop, referenceLayer);
				child = child.nextSibling;
			}
		}
		, updateBounds: function () {
			var child = this.firstChild;
			this.getElementRenderersBounds(this.rootElementRenderer, this.bounds);
			while (child != null) {
				child.updateBounds();
				child = child.nextSibling;
			}
		}
		, updateClippedBounds: function () {
			var child = this.firstChild;
			var x = this.bounds.x;
			var y = this.bounds.y;
			var width = this.bounds.width;
			var height = this.bounds.height;
			if (this.isXAxisClipped() == true) {
				x = this.rootElementRenderer.globalBounds.x;
				width = this.rootElementRenderer.globalBounds.width;
			}
			if (this.isYAxisClipped() == true) {
				y = this.rootElementRenderer.globalBounds.y;
				height = this.rootElementRenderer.globalBounds.height;
			}
			this._clippedBounds.x = x;
			this._clippedBounds.y = y;
			this._clippedBounds.width = width;
			this._clippedBounds.height = height;
			while (child != null) {
				child.updateClippedBounds();
				child = child.nextSibling;
			}
		}
		, getElementRenderersBounds: function (rootElementRenderer, bounds) {
			bounds.x = 50000;
			bounds.y = 50000;
			bounds.width = 0;
			bounds.height = 0;
			cocktail_core_geom_GeomUtils.addBounds(rootElementRenderer.globalBounds, bounds, null, null);
			this.doGetElementRenderersBounds(rootElementRenderer, bounds);
		}
		, doGetElementRenderersBounds: function (rootElementRenderer, bounds) {
			var thisAsLayer = this;
			var child = rootElementRenderer.firstChild;
			while (child != null) {
				if (child.isText == false) {
					if (child.layerRenderer == thisAsLayer) {
						cocktail_core_geom_GeomUtils.addBounds(child.globalBounds, bounds, null, null);
						if (child.firstChild != null) this.doGetElementRenderersBounds(child, bounds);
					}
				}
				child = child.nextSibling;
			}
		}
		, updateScrollableBounds: function () {
			var child = this.firstChild;
			this.getScrollableBounds(this, this.scrollableBounds);
			while (child != null) {
				child.updateScrollableBounds();
				child = child.nextSibling;
			}
		}
		, getScrollableBoundsIfNeeded: function (layer) {
			if (this.rootElementRenderer.coreStyle.isFixedPositioned == true) return null;
			if (this.isContainingBlockChildren(layer) == true) return null;
			if (this.isXAxisClipped() == false) {
				if (this.isYAxisClipped() == false) return this.bounds;
			}
			return this._clippedBounds;
		}
		, getScrollableBounds: function (rootLayerRenderer, scrollableBounds) {
			scrollableBounds.x = 50000;
			scrollableBounds.y = 50000;
			scrollableBounds.width = 0;
			scrollableBounds.height = 0;
			cocktail_core_geom_GeomUtils.addBounds(this.bounds, scrollableBounds, null, null);
			this.doGetScrollableBounds(rootLayerRenderer, scrollableBounds, this, true, true);
		}
		, doGetScrollableBounds: function (rootLayerRenderer, scrollableBounds, referenceLayer, getHorizontalBounds, getVerticalBounds) {
			var child = rootLayerRenderer.firstChild;
			while (child != null) {
				var childBounds = child.getScrollableBoundsIfNeeded(referenceLayer);
				if (childBounds != null) {
					if (getHorizontalBounds == true) {
						if (childBounds.x < scrollableBounds.x) scrollableBounds.x = childBounds.x;
						if (childBounds.x + childBounds.width > scrollableBounds.x + scrollableBounds.width) scrollableBounds.width = childBounds.x + childBounds.width - scrollableBounds.x;
					}
					if (getVerticalBounds == true) {
						if (childBounds.y < scrollableBounds.y) scrollableBounds.y = childBounds.y;
						if (childBounds.y + childBounds.height > scrollableBounds.y + scrollableBounds.height) scrollableBounds.height = childBounds.y + childBounds.height - scrollableBounds.y;
					}
					if (child.firstChild != null) {
						if (child.isXAxisClipped() == true) getHorizontalBounds = false;
						if (child.isYAxisClipped() == true) getVerticalBounds = false;
						if (getHorizontalBounds == true || getVerticalBounds == true) this.doGetScrollableBounds(child, scrollableBounds, referenceLayer, getHorizontalBounds, getVerticalBounds);
					}
				}
				child = child.nextSibling;
			}
		}
		, set_scrollLeft: function (value) {
			if (this.isXAxisClipped() == false) return this.scrollLeft = 0;
			if (value <= 0) {
				if (this.scrollLeft > 0) this.scrollChanged();
				this.scrollLeft = 0;
			} else {
				var maxWidthScroll = this.scrollableBounds.width - this._clippedBounds.width;
				if (maxWidthScroll <= 0) {
					if (this.scrollLeft != 0) this.scrollChanged();
					this.scrollLeft = 0;
				} else if (value > maxWidthScroll) {
					if (this.scrollLeft != maxWidthScroll) this.scrollChanged();
					this.scrollLeft = maxWidthScroll;
				} else {
					if (this.scrollLeft != value) this.scrollChanged();
					this.scrollLeft = value;
				}
			}
			return value;
		}
		, set_scrollTop: function (value) {
			if (this.isYAxisClipped() == false) return this.scrollTop = 0;
			if (value <= 0) {
				if (this.scrollTop > 0) this.scrollChanged();
				this.scrollTop = 0;
			} else {
				var maxHeightScroll = this.scrollableBounds.height - this._clippedBounds.height;
				if (maxHeightScroll <= 0) {
					if (this.scrollTop != 0) this.scrollChanged();
					this.scrollTop = 0;
				} else if (value > maxHeightScroll) {
					if (this.scrollTop != maxHeightScroll) this.scrollChanged();
					this.scrollTop = maxHeightScroll;
				} else {
					if (this.scrollTop != value) this.scrollChanged();
					this.scrollTop = value;
				}
			}
			return value;
		}
		, scrollChanged: function () {
		}
		, isContainingBlockChildren: function (layer) {
			var containingBlock = this.rootElementRenderer.containingBlock;
			var layerContainingBlock = layer.rootElementRenderer.containingBlock;
			if (containingBlock == layerContainingBlock) return false;
			var parent = layerContainingBlock;
			while (parent != null) {
				if (parent == containingBlock) return true;
				parent = parent.parentNode;
			}
			return false;
		}
		, isXAxisClipped: function () {
			if (this.rootElementRenderer.isBlockContainer == false) return false;
			if (this.rootElementRenderer.coreStyle.canAlwaysOverflow == true) return false;
			if (this.rootElementRenderer.coreStyle.hasHiddenOrScrollOverflowX == true) return true;
			var _g = this.rootElementRenderer.coreStyle.getKeyword(this.rootElementRenderer.coreStyle.getComputedOrInitialProperty(51));
			switch (_g[1]) {
				case 37: case 38:
					return true;
				case 27:
					return false;
				case 36:
					if (this.treatVisibleOverflowAsAuto() == true) return false;
					return false;
				default:
					return false;
			}
		}
		, isYAxisClipped: function () {
			if (this.rootElementRenderer.isBlockContainer == false) return false;
			if (this.rootElementRenderer.coreStyle.canAlwaysOverflow == true) return false;
			if (this.rootElementRenderer.coreStyle.hasHiddenOrScrollOverflowY == true) return true;
			var _g = this.rootElementRenderer.coreStyle.getKeyword(this.rootElementRenderer.coreStyle.getComputedOrInitialProperty(52));
			switch (_g[1]) {
				case 37: case 38:
					return true;
				case 27:
					return false;
				case 36:
					if (this.treatVisibleOverflowAsAuto() == true) return false;
					return false;
				default:
					return false;
			}
		}
		, treatVisibleOverflowAsAuto: function () {
			return false;
		}
		, __class__: cocktail_core_layer_ScrollableView
		, __properties__: { set_scrollTop: "set_scrollTop", set_scrollLeft: "set_scrollLeft" }
	});
	var cocktail_core_layer_LayerRenderer = function (rootElementRenderer) {
		cocktail_core_layer_ScrollableView.call(this, rootElementRenderer);
		this.hasOwnGraphicsContext = false;
		this.hasOwnStackingContext = false;
		this._needsGraphicsContextUpdate = true;
		this._needsStackingContextUpdate = true;
		this._canUpdateScrollRegion = false;
		this.matrix = new cocktail_core_geom_Matrix();
		this._currentMatrix = new cocktail_core_geom_Matrix();
		this._relativeOffset = new cocktail_core_geom_PointVO(0, 0);
		this._layerDirtyRect = new cocktail_core_geom_RectangleVO();
		this.alpha = 1.0;
	};
	$hxClasses["cocktail.core.layer.LayerRenderer"] = cocktail_core_layer_LayerRenderer;
	cocktail_core_layer_LayerRenderer.__name__ = ["cocktail", "core", "layer", "LayerRenderer"];
	cocktail_core_layer_LayerRenderer.__super__ = cocktail_core_layer_ScrollableView;
	cocktail_core_layer_LayerRenderer.prototype = $extend(cocktail_core_layer_ScrollableView.prototype, {
		dispose: function () {
			this.rootElementRenderer = null;
			this.graphicsContext = null;
		}
		, updateGraphicsContext: function (force) {
			if (this._needsGraphicsContextUpdate == true || force == true) {
				this._needsGraphicsContextUpdate = false;
				if (this.graphicsContext == null) {
					this.attachGraphicsContext();
					return;
				} else if (this.hasOwnGraphicsContext != this.establishesNewGraphicsContext()) {
					this.detachGraphicsContext();
					this.attachGraphicsContext();
					return;
				}
			}
			var child = this.firstChild;
			while (child != null) {
				child.updateGraphicsContext(force);
				child = child.nextSibling;
			}
		}
		, updateLayerMatrix: function (parentMatrix) {
			this.matrix.identity();
			if (this.rootElementRenderer.coreStyle.isTransformed == true) {
				if (this.rootElementRenderer.coreStyle.hasCSSTransform == true) cocktail_core_layout_computer_VisualEffectStylesComputer.compute(this.rootElementRenderer.coreStyle);
				this.matrix = this.getTransformationMatrix();
			}
			this.matrix.concatenate(parentMatrix);
			var child = this.firstChild;
			while (child != null) {
				child.updateLayerMatrix(this.matrix);
				child = child.nextSibling;
			}
		}
		, updateLayerAlpha: function (parentAlpha) {
			var layerAlpha = 1.0;
			if (this.rootElementRenderer.coreStyle.isTransparent == true) {
				var coreStyle = this.rootElementRenderer.coreStyle;
				{
					var _g = coreStyle.getTransitionablePropertyValue(53);
					switch (_g[1]) {
						case 1:
							var value = _g[2];
							layerAlpha = value;
							break;
						case 18:
							var value1 = _g[2];
							layerAlpha = value1;
							break;
						default:
					}
				}
			}
			this.alpha = layerAlpha * parentAlpha;
			var child = this.firstChild;
			while (child != null) {
				child.updateLayerAlpha(this.alpha);
				child = child.nextSibling;
			}
		}
		, updateStackingContext: function () {
			if (this._needsStackingContextUpdate == true) {
				this._needsStackingContextUpdate = false;
				if (this.stackingContext == null) {
					this.attachStackingContext();
					return;
				} else if (this.establishesNewStackingContext() != this.hasOwnStackingContext) {
					this.detachStackingContext();
					this.attachStackingContext();
					return;
				}
			}
			var child = this.firstChild;
			while (child != null) {
				child.updateStackingContext();
				child = child.nextSibling;
			}
		}
		, invalidateGraphicsContext: function (force) {
			this._needsGraphicsContextUpdate = true;
			var htmlDocument = this.rootElementRenderer.domNode.ownerDocument;
			htmlDocument.invalidationManager.invalidateGraphicsContextTree(force);
		}
		, invalidateRendering: function () {
			var htmlDocument = this.rootElementRenderer.domNode.ownerDocument;
			htmlDocument.invalidationManager.invalidateRendering();
		}
		, invalidateStackingContext: function () {
			var htmlDocument = this.rootElementRenderer.domNode.ownerDocument;
			htmlDocument.invalidationManager.invalidateStackingContexts();
			this._needsStackingContextUpdate = true;
			this.detachStackingContext();
		}
		, appendChild: function (newChild) {
			cocktail_core_layer_ScrollableView.prototype.appendChild.call(this, newChild);
			newChild.addedToLayerTree();
		}
		, insertBefore: function (newChild, refChild) {
			cocktail_core_layer_ScrollableView.prototype.insertBefore.call(this, newChild, refChild);
			if (refChild == null) return;
			newChild.addedToLayerTree();
		}
		, removeChild: function (oldChild) {
			oldChild.removedFromLayerTree();
			cocktail_core_layer_ScrollableView.prototype.removeChild.call(this, oldChild);
		}
		, addedToLayerTree: function () {
			this.invalidateStackingContext();
			this.invalidateRendering();
			this.invalidateGraphicsContext(this.isCompositingLayer());
		}
		, removedFromLayerTree: function () {
			this.invalidateGraphicsContext(this.isCompositingLayer());
			this.invalidateStackingContext();
			this.invalidateRendering();
			this.detachGraphicsContext();
		}
		, attachGraphicsContext: function () {
			this.doAttachGraphicsContext();
			var child = this.firstChild;
			while (child != null) {
				child.attachGraphicsContext();
				child = child.nextSibling;
			}
		}
		, detachGraphicsContext: function () {
			var child = this.firstChild;
			while (child != null) {
				child.detachGraphicsContext();
				child = child.nextSibling;
			}
			this.doDetachGraphicsContext();
		}
		, attachStackingContext: function () {
			this.doAttachStackingContext();
			var child = this.firstChild;
			while (child != null) {
				child.attachStackingContext();
				child = child.nextSibling;
			}
		}
		, detachStackingContext: function () {
			var child = this.firstChild;
			while (child != null) {
				child.detachStackingContext();
				child = child.nextSibling;
			}
			this.doDetachStackingContext();
		}
		, doAttachGraphicsContext: function () {
			if (this.parentNode != null) this.createGraphicsContext(this.parentNode.graphicsContext);
		}
		, doDetachGraphicsContext: function () {
			if (this.hasOwnGraphicsContext == true) {
				this.graphicsContext.parentNode.removeChild(this.graphicsContext);
				this.graphicsContext.dispose();
				this.hasOwnGraphicsContext = false;
			}
			this.graphicsContext = null;
		}
		, doAttachStackingContext: function () {
			if (this.parentNode != null) this.createStackingContext(this.parentNode.stackingContext);
		}
		, doDetachStackingContext: function () {
			if (this.hasOwnStackingContext == true) {
				this.parentNode.stackingContext.removeChild(this.stackingContext);
				this.hasOwnStackingContext = false;
			}
			this.stackingContext = null;
		}
		, createGraphicsContext: function (parentGraphicsContext) {
			if (this.establishesNewGraphicsContext() == true) {
				this.graphicsContext = new cocktail_core_graphics_GraphicsContext(this);
				this.hasOwnGraphicsContext = true;
				var parentStackingContext = this.parentNode.stackingContext;
				var foundSelf = false;
				var child = parentStackingContext.firstChild;
				var hasCheckedAutoAndZeroLayers = false;
				while (child != null) {
					if (hasCheckedAutoAndZeroLayers == false) {
						if (child.layerRenderer.getZIndex(child.layerRenderer) >= 0) {
							var nextSiblingWithGraphicsContext = this.getNextSiblingWithGraphicsContext(parentStackingContext.layerRenderer, this, foundSelf);
							if (nextSiblingWithGraphicsContext != null) {
								if (nextSiblingWithGraphicsContext == this) foundSelf = true; else {
									nextSiblingWithGraphicsContext.graphicsContext.parentNode.insertBefore(this.graphicsContext, nextSiblingWithGraphicsContext.graphicsContext);
									return;
								}
							}
							hasCheckedAutoAndZeroLayers = true;
						}
					}
					if (foundSelf == true && child.layerRenderer != this) {
						if (child.layerRenderer.graphicsContext != null) {
							if (child.layerRenderer.hasOwnGraphicsContext == true) {
								child.layerRenderer.graphicsContext.parentNode.insertBefore(this.graphicsContext, child.layerRenderer.graphicsContext);
								return;
							}
						}
					}
					if (this.hasOwnStackingContext == true) {
						if (child.layerRenderer == this) foundSelf = true;
					}
					child = child.nextSibling;
				}
				if (hasCheckedAutoAndZeroLayers == false) {
					var nextSiblingWithGraphicsContext1 = this.getNextSiblingWithGraphicsContext(parentStackingContext.layerRenderer, this, foundSelf);
					if (nextSiblingWithGraphicsContext1 != null) {
						if (nextSiblingWithGraphicsContext1 == this) foundSelf = true; else {
							nextSiblingWithGraphicsContext1.graphicsContext.parentNode.insertBefore(this.graphicsContext, nextSiblingWithGraphicsContext1.graphicsContext);
							return;
						}
					}
				}
				parentGraphicsContext.appendChild(this.graphicsContext);
			} else this.graphicsContext = parentGraphicsContext;
		}
		, getNextSiblingWithGraphicsContext: function (rootLayer, referenceLayer, hasFoundSelf) {
			var nextSiblingWithGraphicsContext = null;
			var child = rootLayer.firstChild;
			while (child != null) {
				if (child.hasOwnStackingContext == false) {
					if (child == referenceLayer) hasFoundSelf = true; else if (hasFoundSelf == true) {
						if (child.hasOwnGraphicsContext == true) return child;
					}
					var childNextSiblingWithGraphicsContext = this.getNextSiblingWithGraphicsContext(child, referenceLayer, hasFoundSelf);
					if (childNextSiblingWithGraphicsContext != null) {
						if (childNextSiblingWithGraphicsContext == referenceLayer) hasFoundSelf = true; else return childNextSiblingWithGraphicsContext;
					}
				} else {
					var _g = child.rootElementRenderer.coreStyle.getComputedOrInitialProperty(4);
					switch (_g[1]) {
						case 0:
							var value = _g[2];
							if (value == 0) {
								if (child == referenceLayer) hasFoundSelf = true; else if (hasFoundSelf == true) {
									if (child.hasOwnGraphicsContext == true) return child;
								}
							}
							break;
						default:
					}
				}
				child = child.nextSibling;
			}
			if (hasFoundSelf == true) return referenceLayer; else return null;
		}
		, establishesNewGraphicsContext: function () {
			if (cocktail_core_config_Config.getInstance().enableCompositing == true) {
				if (this.hasCompositingLayerDescendant(this) == true) return true; else if (this.hasCompositingLayerSibling() == true) return true;
			}
			return false;
		}
		, createStackingContext: function (parentStackingContext) {
			if (this.establishesNewStackingContext() == true) {
				this.stackingContext = new cocktail_core_stacking_StackingContext(this);
				this.hasOwnStackingContext = true;
				var zIndex = this.getZIndex(this);
				var child = parentStackingContext.firstChild;
				while (child != null) {
					var childZIndex = this.getZIndex(child.layerRenderer);
					if (childZIndex > zIndex) {
						parentStackingContext.insertBefore(this.stackingContext, child);
						return;
					}
					child = child.nextSibling;
				}
				parentStackingContext.appendChild(this.stackingContext);
			} else this.stackingContext = parentStackingContext;
		}
		, getZIndex: function (layerRenderer) {
			var zIndex = 0;
			{
				var _g = layerRenderer.rootElementRenderer.coreStyle.getComputedOrInitialProperty(4);
				switch (_g[1]) {
					case 0:
						var value = _g[2];
						zIndex = value;
						break;
					default:
				}
			}
			return zIndex;
		}
		, hasCompositingLayerDescendant: function (rootLayerRenderer) {
			var child = rootLayerRenderer.firstChild;
			while (child != null) {
				if (child.isCompositingLayer() == true || child.hasOwnGraphicsContext == true) return true; else if (child.firstChild != null) {
					var hasCompositingLayer = this.hasCompositingLayerDescendant(child);
					if (hasCompositingLayer == true) return true;
				}
				child = child.nextSibling;
			}
			return false;
		}
		, hasCompositingLayerSibling: function () {
			var parentStackingContext = this.parentNode.stackingContext;
			if (parentStackingContext == null) return false;
			var hasCheckedAutoAndZeroLayers = false;
			var child = parentStackingContext.firstChild;
			while (child != null) {
				if (hasCheckedAutoAndZeroLayers == false) {
					if (child.layerRenderer.getZIndex(child.layerRenderer) >= 0) {
						var ret = this.hasZeroOrAutoCompositingLayerSibling(parentStackingContext.layerRenderer, this);
						if (ret == true) return true;
						hasCheckedAutoAndZeroLayers = true;
					}
				}
				if (child.layerRenderer == this) return false; else if (child.layerRenderer.isCompositingLayer() == true || child.layerRenderer.hasOwnGraphicsContext == true) return true;
				child = child.nextSibling;
			}
			if (hasCheckedAutoAndZeroLayers == false) return this.hasZeroOrAutoCompositingLayerSibling(parentStackingContext.layerRenderer, this);
			return false;
		}
		, hasZeroOrAutoCompositingLayerSibling: function (rootLayer, referenceLayer) {
			var child = rootLayer.firstChild;
			while (child != null) {
				if (child.hasOwnStackingContext == false) {
					if (child == referenceLayer) return false;
					if (child.isCompositingLayer() == true || child.hasOwnGraphicsContext == true) return true;
					var ret = this.hasZeroOrAutoCompositingLayerSibling(child, referenceLayer);
					if (ret == true) return true;
				} else {
					var _g = child.rootElementRenderer.coreStyle.getComputedOrInitialProperty(4);
					switch (_g[1]) {
						case 0:
							var value = _g[2];
							if (value == 0) {
								if (child == referenceLayer) return false;
								if (child.isCompositingLayer() == true || child.hasOwnGraphicsContext == true) return true;
							}
							break;
						default:
					}
				}
				child = child.nextSibling;
			}
			return false;
		}
		, isCompositingLayer: function () {
			return false;
		}
		, needsBitmap: function () {
			return true;
		}
		, updateBounds: function () {
			cocktail_core_layer_ScrollableView.prototype.updateBounds.call(this);
			this.bounds.x += this.matrix.e;
			this.bounds.y += this.matrix.f;
		}
		, scrollChanged: function () {
			var htmlDocument = this.rootElementRenderer.domNode.ownerDocument;
			htmlDocument.invalidationManager.invalidateRendering(this.clipRect);
			this._canUpdateScrollRegion = true;
			htmlDocument.timer.delay($bind(this, this.dispatchScrollEvent));
		}
		, clear: function (x, y, width, height) {
			if (this.hasOwnGraphicsContext == true) this.doClear(x, y, width, height);
			var child = this.firstChild;
			while (child != null) {
				child.clear(x, y, width, height);
				child = child.nextSibling;
			}
		}
		, render: function (dirtyRect) {
			if (this.alpha == 0) return;
			cocktail_core_geom_GeomUtils.intersectBounds(dirtyRect, this.clipRect, this._layerDirtyRect);
			if (this._layerDirtyRect.width == 0 || this._layerDirtyRect.height == 0) return;
			if (this.alpha != 1.0) this.graphicsContext.nativeLayer.graphics.beginTransparency(this.alpha);
			this.graphicsContext.nativeLayer.graphics.beginTransformations(this.matrix);
			this.rootElementRenderer.render(this.graphicsContext, this._layerDirtyRect, this.scrollOffset);
			this.graphicsContext.nativeLayer.graphics.endTransformations();
			if (this.alpha != 1.0) this.graphicsContext.nativeLayer.graphics.endTransparency();
			this._canUpdateScrollRegion = false;
		}
		, updateScrollRegion: function (dirtyRect) {
			if (this._canUpdateScrollRegion == true) {
				var leftScrollOffset = this.scrollOffset.x - this._previousScrollOffsetX;
				var topScrollOffset = this.scrollOffset.y - this._previousScrollOffsetY;
				var copyRect = new cocktail_core_geom_RectangleVO();
				copyRect.x = this.clipRect.x;
				copyRect.y = this.clipRect.y;
				copyRect.width = this.clipRect.width;
				copyRect.height = this.clipRect.height;
				var copyDestination = new cocktail_core_geom_PointVO(this.clipRect.x, this.clipRect.y);
				if (topScrollOffset != 0) {
					copyRect.height -= Math.abs(topScrollOffset);
					if (topScrollOffset > 0) copyRect.y += topScrollOffset; else copyDestination.y -= topScrollOffset;
					var scrollTopRect = new cocktail_core_geom_RectangleVO();
					scrollTopRect.width = this.clipRect.width;
					scrollTopRect.height = Math.abs(topScrollOffset);
					scrollTopRect.x = this.clipRect.x;
					if (topScrollOffset > 0) scrollTopRect.y = this.clipRect.y + this.clipRect.height - topScrollOffset; else scrollTopRect.y = this.clipRect.y;
					if (dirtyRect.width == 0 && dirtyRect.height == 0) {
						dirtyRect.x = scrollTopRect.x;
						dirtyRect.y = scrollTopRect.y;
						dirtyRect.width = scrollTopRect.width;
						dirtyRect.height = scrollTopRect.height;
					} else cocktail_core_geom_GeomUtils.intersectBounds(dirtyRect, scrollTopRect, dirtyRect);
				}
				if (leftScrollOffset != 0) {
					copyRect.width -= Math.abs(leftScrollOffset);
					if (leftScrollOffset > 0) copyRect.x += leftScrollOffset; else copyDestination.x -= leftScrollOffset;
					var scrollLeftRect = new cocktail_core_geom_RectangleVO();
					scrollLeftRect.width = Math.abs(leftScrollOffset);
					scrollLeftRect.height = this.clipRect.height;
					scrollLeftRect.y = this.clipRect.y;
					if (leftScrollOffset > 0) scrollLeftRect.x = this.clipRect.x + this.clipRect.width - leftScrollOffset; else scrollLeftRect.x = this.clipRect.x;
					if (dirtyRect.width == 0 && dirtyRect.height == 0) {
						dirtyRect.x = scrollLeftRect.x;
						dirtyRect.y = scrollLeftRect.y;
						dirtyRect.width = scrollLeftRect.width;
						dirtyRect.height = scrollLeftRect.height;
					} else cocktail_core_geom_GeomUtils.intersectBounds(dirtyRect, scrollLeftRect, dirtyRect);
				}
				this.graphicsContext.nativeLayer.graphics.copyRect(copyRect, copyDestination.x, copyDestination.y);
				this._canUpdateScrollRegion = false;
			}
			var child = this.firstChild;
			while (child != null) {
				child.updateScrollRegion(dirtyRect);
				child = child.nextSibling;
			}
		}
		, doClear: function (x, y, width, height) {
			this.graphicsContext.nativeLayer.graphics.clear(x, y, width, height);
		}
		, getTransformationMatrix: function () {
			var relativeOffset = this.getRelativeOffset(this.rootElementRenderer);
			this._currentMatrix.identity();
			if (this.rootElementRenderer.hasCSSTransform() == true) this.getConcatenatedMatrix(this.rootElementRenderer.coreStyle.usedValues.transform, relativeOffset);
			this._currentMatrix.translate(relativeOffset.x, relativeOffset.y);
			return this._currentMatrix;
		}
		, getConcatenatedMatrix: function (matrix, relativeOffset) {
			var globalBounds = this.rootElementRenderer.globalBounds;
			this._currentMatrix.translate(globalBounds.x + relativeOffset.x, globalBounds.y + relativeOffset.y);
			this._currentMatrix.concatenate(matrix);
			this._currentMatrix.translate((globalBounds.x + relativeOffset.x) * -1, (globalBounds.y + relativeOffset.y) * -1);
		}
		, getRelativeOffset: function (elementRenderer) {
			this._relativeOffset.x = 0;
			this._relativeOffset.y = 0;
			if (elementRenderer.isRelativePositioned() == true) {
				if (elementRenderer.coreStyle.hasAutoLeft == false) this._relativeOffset.x += elementRenderer.coreStyle.usedValues.left; else if (elementRenderer.coreStyle.hasAutoRight == false) this._relativeOffset.x -= elementRenderer.coreStyle.usedValues.right;
				if (elementRenderer.coreStyle.hasAutoTop == false) this._relativeOffset.y += elementRenderer.coreStyle.usedValues.top; else if (elementRenderer.coreStyle.hasAutoBottom == false) this._relativeOffset.y -= elementRenderer.coreStyle.usedValues.bottom;
			}
			return this._relativeOffset;
		}
		, establishesNewStackingContext: function () {
			if (this.rootElementRenderer.isPositioned() == false) return false;
			{
				var _g = this.rootElementRenderer.coreStyle.getComputedOrInitialProperty(4);
				switch (_g[1]) {
					case 4:
						var value = _g[2];
						if (value == cocktail_core_css_CSSKeywordValue.AUTO) return false;
						break;
					default:
				}
			}
			return true;
		}
		, dispatchScrollEvent: function (timestamp) {
			var scrollEvent = new cocktail_core_event_UIEvent();
			scrollEvent.initEvent("scroll", false, false);
			if (this.rootElementRenderer != null) {
				if (this.rootElementRenderer.domNode != null) this.rootElementRenderer.domNode.dispatchEvent(scrollEvent);
			}
		}
		, __class__: cocktail_core_layer_LayerRenderer
	});
	var cocktail_core_layer_CompositingLayerRenderer = function (rootElementRenderer) {
		cocktail_core_layer_LayerRenderer.call(this, rootElementRenderer);
	};
	$hxClasses["cocktail.core.layer.CompositingLayerRenderer"] = cocktail_core_layer_CompositingLayerRenderer;
	cocktail_core_layer_CompositingLayerRenderer.__name__ = ["cocktail", "core", "layer", "CompositingLayerRenderer"];
	cocktail_core_layer_CompositingLayerRenderer.__super__ = cocktail_core_layer_LayerRenderer;
	cocktail_core_layer_CompositingLayerRenderer.prototype = $extend(cocktail_core_layer_LayerRenderer.prototype, {
		establishesNewGraphicsContext: function () {
			if (cocktail_core_config_Config.getInstance().enableCompositing == true) {
				if (this.isCompositingLayer() == true) return true; else return cocktail_core_layer_LayerRenderer.prototype.establishesNewGraphicsContext.call(this);
			}
			return false;
		}
		, isCompositingLayer: function () {
			return true;
		}
		, __class__: cocktail_core_layer_CompositingLayerRenderer
	});
	var cocktail_core_layer_InitialLayerRenderer = function (rootElementRenderer) {
		cocktail_core_layer_LayerRenderer.call(this, rootElementRenderer);
	};
	$hxClasses["cocktail.core.layer.InitialLayerRenderer"] = cocktail_core_layer_InitialLayerRenderer;
	cocktail_core_layer_InitialLayerRenderer.__name__ = ["cocktail", "core", "layer", "InitialLayerRenderer"];
	cocktail_core_layer_InitialLayerRenderer.__super__ = cocktail_core_layer_LayerRenderer;
	cocktail_core_layer_InitialLayerRenderer.prototype = $extend(cocktail_core_layer_LayerRenderer.prototype, {
		doAttachGraphicsContext: function () {
			this.graphicsContext = new cocktail_core_graphics_InitialGraphicsContext(this);
			this.hasOwnGraphicsContext = true;
		}
		, doDetachGraphicsContext: function () {
			this.graphicsContext.removedFromGraphicsContextTree();
			this.graphicsContext.dispose();
			this.hasOwnGraphicsContext = false;
			this.graphicsContext = null;
		}
		, doAttachStackingContext: function () {
			this.stackingContext = new cocktail_core_stacking_StackingContext(this);
			this.hasOwnStackingContext = true;
		}
		, doDetachStackingContext: function () {
			this.stackingContext = null;
			this.hasOwnStackingContext = false;
		}
		, establishesNewGraphicsContext: function () {
			return true;
		}
		, establishesNewStackingContext: function () {
			return true;
		}
		, hasCompositingLayerSibling: function () {
			return false;
		}
		, treatVisibleOverflowAsAuto: function () {
			return true;
		}
		, __class__: cocktail_core_layer_InitialLayerRenderer
	});
	var cocktail_core_layer_InputLayerRenderer = function (rootElementRenderer) {
		cocktail_core_layer_CompositingLayerRenderer.call(this, rootElementRenderer);
	};
	$hxClasses["cocktail.core.layer.InputLayerRenderer"] = cocktail_core_layer_InputLayerRenderer;
	cocktail_core_layer_InputLayerRenderer.__name__ = ["cocktail", "core", "layer", "InputLayerRenderer"];
	cocktail_core_layer_InputLayerRenderer.__super__ = cocktail_core_layer_CompositingLayerRenderer;
	cocktail_core_layer_InputLayerRenderer.prototype = $extend(cocktail_core_layer_CompositingLayerRenderer.prototype, {
		attachGraphicsContext: function () {
			cocktail_core_layer_CompositingLayerRenderer.prototype.attachGraphicsContext.call(this);
			if (this.graphicsContext != null) {
				var htmlInputElement = this.rootElementRenderer.domNode;
				if (htmlInputElement.elementRenderer != null) {
					var inputRenderer = htmlInputElement.elementRenderer;
					inputRenderer.nativeInput.attach(this.graphicsContext);
				}
			}
		}
		, detachGraphicsContext: function () {
			if (this.graphicsContext != null) {
				var htmlInputElement = this.rootElementRenderer.domNode;
				if (htmlInputElement.elementRenderer != null) {
					var inputRenderer = htmlInputElement.elementRenderer;
					inputRenderer.nativeInput.detach(this.graphicsContext);
				}
			}
			cocktail_core_layer_CompositingLayerRenderer.prototype.detachGraphicsContext.call(this);
		}
		, __class__: cocktail_core_layer_InputLayerRenderer
	});
	var cocktail_core_layer_PluginLayerRenderer = function (rootElementRenderer) {
		cocktail_core_layer_CompositingLayerRenderer.call(this, rootElementRenderer);
	};
	$hxClasses["cocktail.core.layer.PluginLayerRenderer"] = cocktail_core_layer_PluginLayerRenderer;
	cocktail_core_layer_PluginLayerRenderer.__name__ = ["cocktail", "core", "layer", "PluginLayerRenderer"];
	cocktail_core_layer_PluginLayerRenderer.__super__ = cocktail_core_layer_CompositingLayerRenderer;
	cocktail_core_layer_PluginLayerRenderer.prototype = $extend(cocktail_core_layer_CompositingLayerRenderer.prototype, {
		attachGraphicsContext: function () {
			cocktail_core_layer_CompositingLayerRenderer.prototype.attachGraphicsContext.call(this);
			var htmlObjectElement = this.rootElementRenderer.domNode;
			htmlObjectElement.plugin.attach(this.graphicsContext);
		}
		, detachGraphicsContext: function () {
			if (this.graphicsContext != null) {
				var htmlObjectElement = this.rootElementRenderer.domNode;
				htmlObjectElement.plugin.detach(this.graphicsContext);
			}
			cocktail_core_layer_CompositingLayerRenderer.prototype.detachGraphicsContext.call(this);
		}
		, isCompositingLayer: function () {
			var htmlObjectElement = this.rootElementRenderer.domNode;
			return htmlObjectElement.plugin.isCompositedPlugin();
		}
		, needsBitmap: function () {
			return false;
		}
		, doClear: function (x, y, width, height) {
		}
		, __class__: cocktail_core_layer_PluginLayerRenderer
	});
	var cocktail_core_layer_VideoLayerRenderer = function (rootElementRenderer) {
		cocktail_core_layer_CompositingLayerRenderer.call(this, rootElementRenderer);
	};
	$hxClasses["cocktail.core.layer.VideoLayerRenderer"] = cocktail_core_layer_VideoLayerRenderer;
	cocktail_core_layer_VideoLayerRenderer.__name__ = ["cocktail", "core", "layer", "VideoLayerRenderer"];
	cocktail_core_layer_VideoLayerRenderer.__super__ = cocktail_core_layer_CompositingLayerRenderer;
	cocktail_core_layer_VideoLayerRenderer.prototype = $extend(cocktail_core_layer_CompositingLayerRenderer.prototype, {
		attachGraphicsContext: function () {
			cocktail_core_layer_CompositingLayerRenderer.prototype.attachGraphicsContext.call(this);
			var htmlVideoElement = this.rootElementRenderer.domNode;
			htmlVideoElement.nativeMedia.attach(this.graphicsContext);
		}
		, detachGraphicsContext: function () {
			if (this.graphicsContext != null) {
				var htmlVideoElement = this.rootElementRenderer.domNode;
				htmlVideoElement.nativeMedia.detach(this.graphicsContext);
			}
			cocktail_core_layer_CompositingLayerRenderer.prototype.detachGraphicsContext.call(this);
		}
		, needsBitmap: function () {
			return false;
		}
		, doClear: function (x, y, width, height) {
		}
		, __class__: cocktail_core_layer_VideoLayerRenderer
	});
	var cocktail_core_layout_ContainingBlockVO = function (width, isWidthAuto, height, isHeightAuto) {
		this.width = width;
		this.isWidthAuto = isWidthAuto;
		this.height = height;
		this.isHeightAuto = isHeightAuto;
	};
	$hxClasses["cocktail.core.layout.ContainingBlockVO"] = cocktail_core_layout_ContainingBlockVO;
	cocktail_core_layout_ContainingBlockVO.__name__ = ["cocktail", "core", "layout", "ContainingBlockVO"];
	cocktail_core_layout_ContainingBlockVO.prototype = {
		__class__: cocktail_core_layout_ContainingBlockVO
	};
	var cocktail_core_layout_LayoutStateValue = $hxClasses["cocktail.core.layout.LayoutStateValue"] = { __ename__: ["cocktail", "core", "layout", "LayoutStateValue"], __constructs__: ["NORMAL", "SHRINK_TO_FIT_PREFERED_WIDTH", "SHRINK_TO_FIT_PREFERED_MINIMUM_WIDTH"] };
	cocktail_core_layout_LayoutStateValue.NORMAL = ["NORMAL", 0];
	cocktail_core_layout_LayoutStateValue.NORMAL.toString = $estr;
	cocktail_core_layout_LayoutStateValue.NORMAL.__enum__ = cocktail_core_layout_LayoutStateValue;
	cocktail_core_layout_LayoutStateValue.SHRINK_TO_FIT_PREFERED_WIDTH = ["SHRINK_TO_FIT_PREFERED_WIDTH", 1];
	cocktail_core_layout_LayoutStateValue.SHRINK_TO_FIT_PREFERED_WIDTH.toString = $estr;
	cocktail_core_layout_LayoutStateValue.SHRINK_TO_FIT_PREFERED_WIDTH.__enum__ = cocktail_core_layout_LayoutStateValue;
	cocktail_core_layout_LayoutStateValue.SHRINK_TO_FIT_PREFERED_MINIMUM_WIDTH = ["SHRINK_TO_FIT_PREFERED_MINIMUM_WIDTH", 2];
	cocktail_core_layout_LayoutStateValue.SHRINK_TO_FIT_PREFERED_MINIMUM_WIDTH.toString = $estr;
	cocktail_core_layout_LayoutStateValue.SHRINK_TO_FIT_PREFERED_MINIMUM_WIDTH.__enum__ = cocktail_core_layout_LayoutStateValue;
	var cocktail_core_layout_ComputedBackgroundStyleVO = function () {
	};
	$hxClasses["cocktail.core.layout.ComputedBackgroundStyleVO"] = cocktail_core_layout_ComputedBackgroundStyleVO;
	cocktail_core_layout_ComputedBackgroundStyleVO.__name__ = ["cocktail", "core", "layout", "ComputedBackgroundStyleVO"];
	cocktail_core_layout_ComputedBackgroundStyleVO.prototype = {
		__class__: cocktail_core_layout_ComputedBackgroundStyleVO
	};
	var cocktail_core_layout_InlineFormattingVO = function () {
	};
	$hxClasses["cocktail.core.layout.InlineFormattingVO"] = cocktail_core_layout_InlineFormattingVO;
	cocktail_core_layout_InlineFormattingVO.__name__ = ["cocktail", "core", "layout", "InlineFormattingVO"];
	cocktail_core_layout_InlineFormattingVO.prototype = {
		__class__: cocktail_core_layout_InlineFormattingVO
	};
	var cocktail_core_layout_FloatsVO = function (left, right) {
		this.left = left;
		this.right = right;
	};
	$hxClasses["cocktail.core.layout.FloatsVO"] = cocktail_core_layout_FloatsVO;
	cocktail_core_layout_FloatsVO.__name__ = ["cocktail", "core", "layout", "FloatsVO"];
	cocktail_core_layout_FloatsVO.prototype = {
		__class__: cocktail_core_layout_FloatsVO
	};
	var cocktail_core_layout_FloatVO = function (node, bounds) {
		this.node = node;
		this.bounds = bounds;
	};
	$hxClasses["cocktail.core.layout.FloatVO"] = cocktail_core_layout_FloatVO;
	cocktail_core_layout_FloatVO.__name__ = ["cocktail", "core", "layout", "FloatVO"];
	cocktail_core_layout_FloatVO.prototype = {
		__class__: cocktail_core_layout_FloatVO
	};
	var cocktail_core_layout_LayoutManager = function () {
		this.embeddedBlockBoxStylesComputer = new cocktail_core_boxmodel_EmbeddedBlockBoxStylesComputer();
		this.embeddedFloatBoxStylesComputer = new cocktail_core_boxmodel_EmbeddedFloatBoxStylesComputer();
		this.embeddedInlineBlockBoxStylesComputer = new cocktail_core_boxmodel_EmbeddedInlineBlockBoxStylesComputer();
		this.embeddedInlineBoxStylesComputer = new cocktail_core_boxmodel_EmbeddedInlineBoxStylesComputer();
		this.embeddedPositionedBoxStylesComputer = new cocktail_core_boxmodel_EmbeddedPositionedBoxStylesComputer();
		this.blockBoxStyleComputer = new cocktail_core_boxmodel_BlockBoxStylesComputer();
		this.floatBoxStylesComputer = new cocktail_core_boxmodel_FloatBoxStylesComputer();
		this.inlineBoxStylesComputer = new cocktail_core_boxmodel_InLineBoxStylesComputer();
		this.inlineBlockBoxStylesComputer = new cocktail_core_boxmodel_InlineBlockBoxStylesComputer();
		this.positionedBoxStylesComputer = new cocktail_core_boxmodel_PositionedBoxStylesComputer();
	};
	$hxClasses["cocktail.core.layout.LayoutManager"] = cocktail_core_layout_LayoutManager;
	cocktail_core_layout_LayoutManager.__name__ = ["cocktail", "core", "layout", "LayoutManager"];
	cocktail_core_layout_LayoutManager.prototype = {
		dispose: function () {
			this.embeddedBlockBoxStylesComputer = null;
			this.embeddedFloatBoxStylesComputer = null;
			this.embeddedInlineBlockBoxStylesComputer = null;
			this.embeddedInlineBoxStylesComputer = null;
			this.embeddedPositionedBoxStylesComputer = null;
			this.blockBoxStyleComputer = null;
			this.floatBoxStylesComputer = null;
			this.inlineBoxStylesComputer = null;
			this.inlineBlockBoxStylesComputer = null;
			this.positionedBoxStylesComputer = null;
		}
		, getBoxStylesComputer: function (elementRenderer) {
			if (elementRenderer.isFloat() == true) {
				if (elementRenderer.isReplaced == true) return this.embeddedFloatBoxStylesComputer; else return this.floatBoxStylesComputer;
			} else if (elementRenderer.isPositioned() == true && elementRenderer.isRelativePositioned() == false) {
				if (elementRenderer.isReplaced == true) return this.embeddedPositionedBoxStylesComputer; else return this.positionedBoxStylesComputer;
			} else if (elementRenderer.isAnonymousBlockBox() == true) return this.blockBoxStyleComputer; else {
				var _g = elementRenderer.coreStyle.getComputedOrInitialProperty(0);
				switch (_g[1]) {
					case 4:
						var value = _g[2];
						switch (value[1]) {
							case 28:
								if (elementRenderer.isReplaced == true) return this.embeddedBlockBoxStylesComputer; else return this.blockBoxStyleComputer;
								break;
							case 29:
								if (elementRenderer.isReplaced == true) return this.embeddedInlineBlockBoxStylesComputer; else return this.inlineBlockBoxStylesComputer;
								break;
							case 30:
								if (elementRenderer.isReplaced == true) return this.embeddedInlineBoxStylesComputer; else return this.inlineBoxStylesComputer;
								break;
							default:
								return null;
						}
						break;
					default:
						return null;
				}
			}
		}
		, __class__: cocktail_core_layout_LayoutManager
	};
	var cocktail_core_layout_computer_BackgroundStylesComputer = function () {
	};
	$hxClasses["cocktail.core.layout.computer.BackgroundStylesComputer"] = cocktail_core_layout_computer_BackgroundStylesComputer;
	cocktail_core_layout_computer_BackgroundStylesComputer.__name__ = ["cocktail", "core", "layout", "computer", "BackgroundStylesComputer"];
	cocktail_core_layout_computer_BackgroundStylesComputer.computeIndividualBackground = function (style, backgroundBox, intrinsicWidth, intrinsicHeight, intrinsicRatio, backgroundPosition, backgroundSize, backgroundOrigin, backgroundClip, backgroundRepeat, backgroundImage) {
		var backgroundPositioningArea = cocktail_core_layout_computer_BackgroundStylesComputer.getBackgroundPositioningArea(style, backgroundOrigin, backgroundBox);
		var computedBackgroundSize = cocktail_core_layout_computer_BackgroundStylesComputer.getComputedBackgroundSize(backgroundSize, backgroundPositioningArea, intrinsicWidth, intrinsicHeight, intrinsicRatio);
		var computedBackgroundPosition = cocktail_core_layout_computer_BackgroundStylesComputer.getComputedBackgroundPosition(backgroundPosition, backgroundPositioningArea, computedBackgroundSize);
		var computedBackgroundClip = cocktail_core_layout_computer_BackgroundStylesComputer.getBackgroundPaintingArea(style, backgroundClip, backgroundBox);
		var computedBackgroundStyle = new cocktail_core_layout_ComputedBackgroundStyleVO();
		computedBackgroundStyle.backgroundOrigin = backgroundPositioningArea;
		computedBackgroundStyle.backgroundClip = computedBackgroundClip;
		computedBackgroundStyle.backgroundRepeat = backgroundRepeat;
		computedBackgroundStyle.backgroundImage = backgroundImage;
		computedBackgroundStyle.backgroundSize = computedBackgroundSize;
		computedBackgroundStyle.backgroundPosition = computedBackgroundPosition;
		return computedBackgroundStyle;
	};
	cocktail_core_layout_computer_BackgroundStylesComputer.getComputedBackgroundPosition = function (backgroundPosition, backgroundPositioningArea, computedBackgroundSize) {
		var backgroundPositionX = null;
		var backgroundPositionY = null;
		switch (backgroundPosition[1]) {
			case 13:
				var value = backgroundPosition[2];
				backgroundPositionX = value[0];
				backgroundPositionY = value[1];
				break;
			default:
		}
		var computedBackgroundXPosition = cocktail_core_layout_computer_BackgroundStylesComputer.doGetComputedBackgroundPosition(backgroundPositionX, backgroundPositioningArea.width, computedBackgroundSize.width);
		var computedBackgroundYPosition = cocktail_core_layout_computer_BackgroundStylesComputer.doGetComputedBackgroundPosition(backgroundPositionY, backgroundPositioningArea.height, computedBackgroundSize.height);
		var computedBackgroundPosition = new cocktail_core_geom_PointVO(computedBackgroundXPosition, computedBackgroundYPosition);
		return computedBackgroundPosition;
	};
	cocktail_core_layout_computer_BackgroundStylesComputer.doGetComputedBackgroundPosition = function (backgroundPosition, backgroundPositioningAreaDimension, imageDimension) {
		var computedBackgroundPosition = 0.0;
		switch (backgroundPosition[1]) {
			case 18:
				var value = backgroundPosition[2];
				computedBackgroundPosition = value;
				break;
			case 2:
				var value1 = backgroundPosition[2];
				computedBackgroundPosition = (backgroundPositioningAreaDimension - imageDimension) * (value1 * 0.01);
				break;
			case 4:
				var value2 = backgroundPosition[2];
				switch (value2[1]) {
					case 13:
						computedBackgroundPosition = (backgroundPositioningAreaDimension - imageDimension) * 0.5;
						break;
					case 11: case 22:
						computedBackgroundPosition = (backgroundPositioningAreaDimension - imageDimension) * 0.;
						break;
					case 12: case 25:
						computedBackgroundPosition = backgroundPositioningAreaDimension - imageDimension;
						break;
					default:
				}
				break;
			default:
		}
		return computedBackgroundPosition;
	};
	cocktail_core_layout_computer_BackgroundStylesComputer.getComputedBackgroundSize = function (backgroundSize, backgroundPositioningArea, intrinsicWidth, intrinsicHeight, intrinsicRatio) {
		var computedBackgroundSize = new cocktail_core_geom_DimensionVO(0.0, 0.0);
		switch (backgroundSize[1]) {
			case 4:
				var value = backgroundSize[2];
				switch (value[1]) {
					case 42:
						if (intrinsicRatio != null) {
							var ratio = backgroundPositioningArea.width / backgroundPositioningArea.height;
							if (intrinsicRatio < ratio) {
								computedBackgroundSize.height = backgroundPositioningArea.height;
								computedBackgroundSize.width = backgroundPositioningArea.height * intrinsicRatio;
							} else {
								computedBackgroundSize.width = backgroundPositioningArea.width;
								computedBackgroundSize.height = backgroundPositioningArea.width / intrinsicRatio;
							}
						} else {
							computedBackgroundSize.width = backgroundPositioningArea.width;
							computedBackgroundSize.height = backgroundPositioningArea.height;
						}
						break;
					case 43:
						if (intrinsicRatio != null) {
							var ratio1 = backgroundPositioningArea.width / backgroundPositioningArea.height;
							if (intrinsicRatio > ratio1) {
								computedBackgroundSize.height = backgroundPositioningArea.height;
								computedBackgroundSize.width = backgroundPositioningArea.height * intrinsicRatio;
							} else {
								computedBackgroundSize.width = backgroundPositioningArea.width;
								computedBackgroundSize.height = backgroundPositioningArea.width / intrinsicRatio;
							}
						} else {
							computedBackgroundSize.width = backgroundPositioningArea.width;
							computedBackgroundSize.height = backgroundPositioningArea.height;
						}
						break;
					case 27:
						computedBackgroundSize.width = cocktail_core_layout_computer_BackgroundStylesComputer.getBackgroundSizeStyleDimensionVO(cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO), cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO), backgroundPositioningArea.width, backgroundPositioningArea.height, intrinsicWidth, intrinsicHeight, intrinsicRatio);
						computedBackgroundSize.height = cocktail_core_layout_computer_BackgroundStylesComputer.getBackgroundSizeStyleDimensionVO(cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO), cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO), backgroundPositioningArea.height, backgroundPositioningArea.width, intrinsicHeight, intrinsicWidth, intrinsicRatio);
						break;
					default:
				}
				break;
			case 18:
				var value1 = backgroundSize[2];
				computedBackgroundSize.width = cocktail_core_layout_computer_BackgroundStylesComputer.getBackgroundSizeStyleDimensionVO(backgroundSize, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO), backgroundPositioningArea.width, backgroundPositioningArea.height, intrinsicWidth, intrinsicHeight, intrinsicRatio);
				computedBackgroundSize.height = cocktail_core_layout_computer_BackgroundStylesComputer.getBackgroundSizeStyleDimensionVO(cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO), backgroundSize, backgroundPositioningArea.height, backgroundPositioningArea.width, intrinsicHeight, intrinsicWidth, intrinsicRatio);
				break;
			case 2:
				var value2 = backgroundSize[2];
				computedBackgroundSize.width = cocktail_core_layout_computer_BackgroundStylesComputer.getBackgroundSizeStyleDimensionVO(backgroundSize, cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO), backgroundPositioningArea.width, backgroundPositioningArea.height, intrinsicWidth, intrinsicHeight, intrinsicRatio);
				computedBackgroundSize.height = cocktail_core_layout_computer_BackgroundStylesComputer.getBackgroundSizeStyleDimensionVO(cocktail_core_css_CSSPropertyValue.KEYWORD(cocktail_core_css_CSSKeywordValue.AUTO), backgroundSize, backgroundPositioningArea.height, backgroundPositioningArea.width, intrinsicHeight, intrinsicWidth, intrinsicRatio);
				break;
			case 13:
				var value3 = backgroundSize[2];
				computedBackgroundSize.width = cocktail_core_layout_computer_BackgroundStylesComputer.getBackgroundSizeStyleDimensionVO(value3[0], value3[1], backgroundPositioningArea.width, backgroundPositioningArea.height, intrinsicWidth, intrinsicHeight, intrinsicRatio);
				computedBackgroundSize.height = cocktail_core_layout_computer_BackgroundStylesComputer.getBackgroundSizeStyleDimensionVO(value3[1], value3[0], backgroundPositioningArea.height, backgroundPositioningArea.width, intrinsicHeight, intrinsicWidth, intrinsicRatio);
				break;
			default:
		}
		return computedBackgroundSize;
	};
	cocktail_core_layout_computer_BackgroundStylesComputer.getBackgroundSizeStyleDimensionVO = function (backgroundSizeValue, opositeBackgroundSizeValue, backgroundPositioningAreaDimension, opositeBackgroundAreaDimension, intrinsicDimension, opositeIntrinsicDimension, intrinsicRatio) {
		var backgroundSizeStyleDimension = 0.0;
		switch (backgroundSizeValue[1]) {
			case 18:
				var value = backgroundSizeValue[2];
				backgroundSizeStyleDimension = value;
				break;
			case 2:
				var value1 = backgroundSizeValue[2];
				backgroundSizeStyleDimension = backgroundPositioningAreaDimension * (value1 * 0.01);
				break;
			case 4:
				var value2 = backgroundSizeValue[2];
				if (value2 == cocktail_core_css_CSSKeywordValue.AUTO) {
					var isOpositeAuto = false;
					switch (opositeBackgroundSizeValue[1]) {
						case 4:
							var value3 = opositeBackgroundSizeValue[2];
							if (value3 == cocktail_core_css_CSSKeywordValue.AUTO) isOpositeAuto = true;
							break;
						default:
					}
					if (intrinsicDimension != null && isOpositeAuto == true) backgroundSizeStyleDimension = intrinsicDimension; else if (opositeIntrinsicDimension != null && intrinsicRatio != null) {
						var opositeDimension = cocktail_core_layout_computer_BackgroundStylesComputer.getBackgroundSizeStyleDimensionVO(opositeBackgroundSizeValue, backgroundSizeValue, opositeBackgroundAreaDimension, backgroundPositioningAreaDimension, opositeIntrinsicDimension, intrinsicDimension, intrinsicRatio);
						backgroundSizeStyleDimension = opositeDimension * intrinsicRatio;
					} else backgroundSizeStyleDimension = backgroundPositioningAreaDimension;
				}
				break;
			default:
		}
		return backgroundSizeStyleDimension;
	};
	cocktail_core_layout_computer_BackgroundStylesComputer.getBackgroundPositioningArea = function (style, backgroundOrigin, backgroundBox) {
		var height = 0.0;
		var width = 0.0;
		var x = 0.0;
		var y = 0.0;
		switch (backgroundOrigin[1]) {
			case 4:
				var value = backgroundOrigin[2];
				switch (value[1]) {
					case 39:
						height = backgroundBox.height;
						width = backgroundBox.width;
						x = 0.0;
						y = 0.0;
						break;
					case 40:
						height = backgroundBox.height;
						width = backgroundBox.width;
						x = 0.0;
						y = 0.0;
						break;
					case 41:
						height = backgroundBox.height - style.usedValues.marginTop - style.usedValues.marginBottom - style.usedValues.paddingTop - style.usedValues.paddingBottom - style.usedValues.borderTopWidth - style.usedValues.borderBottomWidth;
						width = backgroundBox.width - style.usedValues.marginLeft - style.usedValues.marginRight - style.usedValues.paddingLeft - style.usedValues.paddingRight - style.usedValues.borderLeftWidth - style.usedValues.borderRightWidth;
						x = 0.0;
						y = 0.0;
						break;
					default:
				}
				break;
			default:
		}
		var rectangle = new cocktail_core_geom_RectangleVO();
		rectangle.x = x;
		rectangle.y = y;
		rectangle.width = width;
		rectangle.height = height;
		return rectangle;
	};
	cocktail_core_layout_computer_BackgroundStylesComputer.getBackgroundPaintingArea = function (style, backgroundClip, backgroundBox) {
		var height = 0.0;
		var width = 0.0;
		var x = 0.0;
		var y = 0.0;
		switch (backgroundClip[1]) {
			case 4:
				var value = backgroundClip[2];
				switch (value[1]) {
					case 39:
						height = backgroundBox.height;
						width = backgroundBox.width;
						x = 0.0;
						y = 0.0;
						break;
					case 40:
						height = backgroundBox.height;
						width = backgroundBox.width;
						x = style.usedValues.marginLeft;
						y = style.usedValues.marginTop;
						break;
					case 41:
						height = backgroundBox.height - style.usedValues.marginTop - style.usedValues.marginBottom - style.usedValues.paddingTop - style.usedValues.paddingBottom - style.usedValues.borderTopWidth - style.usedValues.borderBottomWidth;
						width = backgroundBox.width - style.usedValues.marginLeft - style.usedValues.marginRight - style.usedValues.paddingLeft - style.usedValues.paddingRight - style.usedValues.borderLeftWidth - style.usedValues.borderRightWidth;
						x = style.usedValues.marginLeft + style.usedValues.paddingLeft + style.usedValues.borderLeftWidth;
						y = style.usedValues.marginTop + style.usedValues.paddingTop + style.usedValues.borderTopWidth;
						break;
					default:
				}
				break;
			default:
		}
		var rectangle = new cocktail_core_geom_RectangleVO();
		rectangle.x = x;
		rectangle.y = y;
		rectangle.width = width;
		rectangle.height = height;
		return rectangle;
	};
	cocktail_core_layout_computer_BackgroundStylesComputer.prototype = {
		__class__: cocktail_core_layout_computer_BackgroundStylesComputer
	};
	var cocktail_core_layout_computer_VisualEffectStylesComputer = function () {
	};
	$hxClasses["cocktail.core.layout.computer.VisualEffectStylesComputer"] = cocktail_core_layout_computer_VisualEffectStylesComputer;
	cocktail_core_layout_computer_VisualEffectStylesComputer.__name__ = ["cocktail", "core", "layout", "computer", "VisualEffectStylesComputer"];
	cocktail_core_layout_computer_VisualEffectStylesComputer.compute = function (style) {
		style.usedValues.transformOrigin = cocktail_core_layout_computer_VisualEffectStylesComputer.getComputedTransformOrigin(style);
		style.usedValues.transform = cocktail_core_layout_computer_VisualEffectStylesComputer.getComputedTransform(style);
	};
	cocktail_core_layout_computer_VisualEffectStylesComputer.getComputedTransformOrigin = function (style) {
		var x = 0.0;
		var y = 0.0;
		var transformOriginX = null;
		var transformOriginY = null;
		{
			var _g = style.getComputedOrInitialProperty(60);
			switch (_g[1]) {
				case 13:
					var value = _g[2];
					transformOriginX = value[0];
					transformOriginY = value[1];
					break;
				default:
			}
		}
		switch (transformOriginX[1]) {
			case 18:
				var value1 = transformOriginX[2];
				x = value1;
				break;
			case 2:
				var value2 = transformOriginX[2];
				x = style.usedValues.width * (value2 * 0.01);
				break;
			case 4:
				var value3 = transformOriginX[2];
				switch (value3[1]) {
					case 11:
						x = style.usedValues.width * 0.;
						break;
					case 13:
						x = style.usedValues.width * 0.5;
						break;
					case 12:
						x = style.usedValues.width;
						break;
					default:
				}
				break;
			default:
		}
		switch (transformOriginY[1]) {
			case 18:
				var value4 = transformOriginY[2];
				y = value4;
				break;
			case 2:
				var value5 = transformOriginY[2];
				y = style.usedValues.width * (value5 * 0.01);
				break;
			case 4:
				var value6 = transformOriginY[2];
				switch (value6[1]) {
					case 22:
						y = style.usedValues.width * 0.;
						break;
					case 13:
						y = style.usedValues.width * 0.5;
						break;
					case 25:
						y = style.usedValues.width;
						break;
					default:
				}
				break;
			default:
		}
		var transformOriginPoint = new cocktail_core_geom_PointVO(x, y);
		return transformOriginPoint;
	};
	cocktail_core_layout_computer_VisualEffectStylesComputer.getComputedTransform = function (style) {
		if (style.isNone(style.getComputedOrInitialProperty(61))) return new cocktail_core_geom_Matrix();
		var matrix = new cocktail_core_geom_Matrix();
		var transformFunctions = [];
		var transformOrigin = style.usedValues.transformOrigin;
		{
			var _g = style.getComputedOrInitialProperty(61);
			switch (_g[1]) {
				case 15:
					var value = _g[2];
					var _g2 = 0;
					var _g1 = value.length;
					while (_g2 < _g1) {
						var i = _g2++;
						{
							var _g3 = value[i];
							switch (_g3[1]) {
								case 21:
									var value1 = _g3[2];
									transformFunctions.push(value1);
									break;
								default:
							}
						}
					}
					break;
				case 21:
					var value2 = _g[2];
					transformFunctions.push(value2);
					break;
				default:
			}
		}
		matrix.translate(transformOrigin.x, transformOrigin.y);
		var _g11 = 0;
		var _g4 = transformFunctions.length;
		while (_g11 < _g4) {
			var i1 = _g11++;
			var transformFunction = transformFunctions[i1];
			switch (transformFunction[1]) {
				case 0:
					var f = transformFunction[7];
					var e = transformFunction[6];
					var d = transformFunction[5];
					var c = transformFunction[4];
					var b = transformFunction[3];
					var a = transformFunction[2];
					matrix.concatenate(new cocktail_core_geom_Matrix(a, b, c, d, e, f));
					break;
				case 7:
					var value3 = transformFunction[2];
					var angle = cocktail_core_layout_computer_VisualEffectStylesComputer.getRadFromAngle(value3);
					matrix.rotate(angle);
					break;
				case 4:
					var sy = transformFunction[3];
					var sx = transformFunction[2];
					matrix.scale(sx, sy);
					break;
				case 5:
					var sx1 = transformFunction[2];
					matrix.scale(sx1, 1);
					break;
				case 6:
					var sy1 = transformFunction[2];
					matrix.scale(1, sy1);
					break;
				case 10:
					var angleY = transformFunction[3];
					var angleX = transformFunction[2];
					var skewX = cocktail_core_layout_computer_VisualEffectStylesComputer.getRadFromAngle(angleX);
					var skewY = cocktail_core_layout_computer_VisualEffectStylesComputer.getRadFromAngle(angleY);
					matrix.skew(skewX, skewY);
					break;
				case 8:
					var angleX1 = transformFunction[2];
					var skewX1 = cocktail_core_layout_computer_VisualEffectStylesComputer.getRadFromAngle(angleX1);
					matrix.skew(skewX1, 0);
					break;
				case 9:
					var angleY1 = transformFunction[2];
					var skewY1 = cocktail_core_layout_computer_VisualEffectStylesComputer.getRadFromAngle(angleY1);
					matrix.skew(0, skewY1);
					break;
				case 1:
					var ty = transformFunction[3];
					var tx = transformFunction[2];
					var translationX = cocktail_core_layout_computer_VisualEffectStylesComputer.getComputedTranslation(style, tx, style.usedValues.width);
					var translationY = cocktail_core_layout_computer_VisualEffectStylesComputer.getComputedTranslation(style, ty, style.usedValues.height);
					matrix.translate(translationX, translationY);
					break;
				case 2:
					var tx1 = transformFunction[2];
					var translationX1 = cocktail_core_layout_computer_VisualEffectStylesComputer.getComputedTranslation(style, tx1, style.usedValues.width);
					matrix.translate(translationX1, 0.0);
					break;
				case 3:
					var ty1 = transformFunction[2];
					var translationY1 = cocktail_core_layout_computer_VisualEffectStylesComputer.getComputedTranslation(style, ty1, style.usedValues.height);
					matrix.translate(0.0, translationY1);
					break;
			}
		}
		matrix.translate(transformOrigin.x * -1, transformOrigin.y * -1);
		return matrix;
	};
	cocktail_core_layout_computer_VisualEffectStylesComputer.getComputedTranslation = function (style, translation, percentReference) {
		var computedTranslation = 0.0;
		switch (translation[1]) {
			case 0:
				var value = translation[2];
				computedTranslation = value;
				break;
			case 2:
				var value1 = translation[2];
				computedTranslation = percentReference * (value1 * 0.01);
				break;
			default:
		}
		return computedTranslation;
	};
	cocktail_core_layout_computer_VisualEffectStylesComputer.getRadFromAngle = function (value) {
		var angle;
		switch (value[1]) {
			case 0:
				var value1 = value[2];
				angle = value1 * (Math.PI / 180);
				break;
			case 2:
				var value2 = value[2];
				angle = value2;
				break;
			case 3:
				var value3 = value[2];
				angle = value3 * 360 * (Math.PI / 180);
				break;
			case 1:
				var value4 = value[2];
				angle = value4 * (Math.PI / 200);
				break;
		}
		return angle;
	};
	cocktail_core_layout_computer_VisualEffectStylesComputer.prototype = {
		__class__: cocktail_core_layout_computer_VisualEffectStylesComputer
	};
	var cocktail_core_linebox_InlineBox = function (elementRenderer, leadedAscent, leadedDescent) {
		cocktail_core_ds_FastNode.call(this);
		this.isSpace = false;
		this.isText = false;
		this.isEmbedded = false;
		this.isLineFeed = false;
		this.bounds = new cocktail_core_geom_RectangleVO();
		this.offsetFromParentInlineBox = new cocktail_core_geom_PointVO(0, 0);
		this.elementRenderer = elementRenderer;
		this.marginLeft = 0;
		this.marginRight = 0;
		this.paddingLeft = 0;
		this.paddingRight = 0;
		this.borderLeft = 0;
		this.borderRight = 0;
		this.leadedAscent = leadedAscent;
		this.leadedDescent = leadedDescent;
	};
	$hxClasses["cocktail.core.linebox.InlineBox"] = cocktail_core_linebox_InlineBox;
	cocktail_core_linebox_InlineBox.__name__ = ["cocktail", "core", "linebox", "InlineBox"];
	cocktail_core_linebox_InlineBox.__super__ = cocktail_core_ds_FastNode;
	cocktail_core_linebox_InlineBox.prototype = $extend(cocktail_core_ds_FastNode.prototype, {
		dispose: function () {
			this.elementRenderer = null;
		}
		, __class__: cocktail_core_linebox_InlineBox
	});
	var cocktail_core_linebox_EmbeddedInlineBox = function (elementRenderer, leadedAscent, leadedDescent) {
		cocktail_core_linebox_InlineBox.call(this, elementRenderer, leadedAscent, leadedDescent);
		this.isEmbedded = true;
	};
	$hxClasses["cocktail.core.linebox.EmbeddedInlineBox"] = cocktail_core_linebox_EmbeddedInlineBox;
	cocktail_core_linebox_EmbeddedInlineBox.__name__ = ["cocktail", "core", "linebox", "EmbeddedInlineBox"];
	cocktail_core_linebox_EmbeddedInlineBox.__super__ = cocktail_core_linebox_InlineBox;
	cocktail_core_linebox_EmbeddedInlineBox.prototype = $extend(cocktail_core_linebox_InlineBox.prototype, {
		__class__: cocktail_core_linebox_EmbeddedInlineBox
	});
	var cocktail_core_linebox_LineBox = function (elementRenderer, isFirstLine, layoutState) {
		this._isFirstLine = isFirstLine;
		this._elementRenderer = elementRenderer;
		this._spacesNumber = 0;
		this.unbreakableWidth = 0;
		this._addedWidth = 0;
		this._firstInlineBoxInserted = false;
		this._unbreakableInlineBoxes = [];
		this._layoutState = layoutState;
		this._trailingSpaceWidth = 0;
		this.rootInlineBox = new cocktail_core_linebox_InlineBox(elementRenderer, elementRenderer.getLeadedAscent(), elementRenderer.getLeadedDescent());
		this.bounds = new cocktail_core_geom_RectangleVO();
	};
	$hxClasses["cocktail.core.linebox.LineBox"] = cocktail_core_linebox_LineBox;
	cocktail_core_linebox_LineBox.__name__ = ["cocktail", "core", "linebox", "LineBox"];
	cocktail_core_linebox_LineBox.prototype = {
		addUnbreakableWidth: function (width) {
			this.unbreakableWidth += Math.floor(width);
		}
		, widthCanFit: function (width) {
			this._trailingSpaceWidth = 0;
			this.getTrailingSpacesWidth(this.rootInlineBox);
			if (this._addedWidth + width - this._trailingSpaceWidth <= this.bounds.width) return true; else return false;
		}
		, insert: function (inlineBox, parentInlineBox, force) {
			if (this._firstInlineBoxInserted == false) {
				if (inlineBox.isSpace == true) {
					var inlineBoxCoreStyle = inlineBox.elementRenderer.coreStyle;
					if (inlineBoxCoreStyle.hasNormalWhiteSpace == true || inlineBoxCoreStyle.hasPreWrapWhiteSpace == true || inlineBoxCoreStyle.hasNoWrapWhiteSpace) return false;
				}
				this._firstInlineBoxInserted = true;
			}
			if (inlineBox.isSpace == true) this._spacesNumber++;
			this._unbreakableInlineBoxes.push(inlineBox);
			var inlineBoxWidth = inlineBox.bounds.width + inlineBox.marginLeft + inlineBox.marginRight;
			this.unbreakableWidth += Math.floor(inlineBoxWidth);
			var remainingLineWidth = Math.floor(this.bounds.width - this._addedWidth);
			if (inlineBox.isLineFeed == true) return true; else if (remainingLineWidth - this.unbreakableWidth < 0) {
				if (this.introduceBreakOpportunity(inlineBox) == true && force == false) return true; else {
					this._addedWidth += this.unbreakableWidth;
					this.addUnbreakableInlineBoxesToLineBox(parentInlineBox);
				}
			} else if (this.introduceBreakOpportunity(inlineBox) == true || force == true) {
				this._addedWidth += this.unbreakableWidth;
				this.addUnbreakableInlineBoxesToLineBox(parentInlineBox);
			}
			if (this._layoutState == cocktail_core_layout_LayoutStateValue.SHRINK_TO_FIT_PREFERED_MINIMUM_WIDTH) return true;
			return false;
		}
		, addUnbreakableInlineBoxesToLineBox: function (parentInlineBox) {
			var unbreakableLength = this._unbreakableInlineBoxes.length;
			var _g = 0;
			while (_g < unbreakableLength) {
				var i = _g++;
				this._unbreakableInlineBoxes[i].lineBox = this;
				parentInlineBox.appendChild(this._unbreakableInlineBoxes[i]);
			}
			this._unbreakableInlineBoxes = [];
			this.unbreakableWidth = 0;
		}
		, introduceBreakOpportunity: function (inlineBox) {
			if (this._layoutState == cocktail_core_layout_LayoutStateValue.SHRINK_TO_FIT_PREFERED_WIDTH) return false;
			var inlineBoxCoreStyle = inlineBox.elementRenderer.coreStyle;
			if (inlineBoxCoreStyle.hasPreWhiteSpace == true || inlineBoxCoreStyle.hasNoWrapWhiteSpace == true) return false;
			return true;
		}
		, layout: function (isLastLine, parentInlineBox) {
			if (isLastLine == true) {
				this._addedWidth += this.unbreakableWidth;
				var unbreakableLength = this._unbreakableInlineBoxes.length;
				var _g = 0;
				while (_g < unbreakableLength) {
					var i = _g++;
					this._unbreakableInlineBoxes[i].lineBox = this;
					parentInlineBox.appendChild(this._unbreakableInlineBoxes[i]);
				}
			}
			this.removeTrailingSpaces(this.rootInlineBox);
			this.bounds.width = this.alignInlineBoxesHorizontally(this.rootInlineBox, isLastLine, this._addedWidth);
			this.updateInlineBoxesBounds(this.rootInlineBox);
			this.bounds.height = this.alignInlineBoxesVertically();
			if (this.isEmptyLineBox(this.rootInlineBox) == true) this.bounds.height = 0;
		}
		, removeTrailingSpaces: function (inlineBox) {
			var child = inlineBox.lastChild;
			while (child != null) {
				if (child.isEmbedded == false) {
					if (child.firstChild != null) {
						var canRemoveSpacesFurther = this.removeTrailingSpaces(child);
						if (canRemoveSpacesFurther == false) return false;
					}
				}
				var previousSibling = child.previousSibling;
				if (child.isSpace == true) {
					var inlineBoxCoreStyle = child.elementRenderer.coreStyle;
					if (inlineBoxCoreStyle.hasNormalWhiteSpace == true || inlineBoxCoreStyle.hasNoWrapWhiteSpace == true || inlineBoxCoreStyle.hasPreLineWhiteSpace == true) {
						child.parentNode.removeChild(child);
						this._addedWidth -= child.bounds.width;
						this._spacesNumber--;
					} else return false;
				} else return false;
				child = previousSibling;
			}
			return true;
		}
		, getTrailingSpacesWidth: function (inlineBox) {
			var child = inlineBox.lastChild;
			while (child != null) {
				if (child.isEmbedded == false) {
					if (child.firstChild != null) {
						var canAddSpacesWidthFurther = this.getTrailingSpacesWidth(child);
						if (canAddSpacesWidthFurther == false) return false;
					}
				}
				if (child.isSpace == true) {
					var inlineBoxCoreStyle = child.elementRenderer.coreStyle;
					if (inlineBoxCoreStyle.hasNormalWhiteSpace == true || inlineBoxCoreStyle.hasNoWrapWhiteSpace == true || inlineBoxCoreStyle.hasPreLineWhiteSpace == true) this._trailingSpaceWidth += child.bounds.width; else return false;
				} else return false;
				child = child.previousSibling;
			}
			return true;
		}
		, isEmptyLineBox: function (rootInlineBox) {
			var child = rootInlineBox.firstChild;
			while (child != null) {
				if (child.isText == true && child.isSpace == false) return false; else if (child.isEmbedded == true) return false; else if (child.marginLeft != 0 || child.marginRight != 0 || child.paddingLeft != 0 || child.paddingLeft != 0 || child.borderLeft != 0 || child.borderRight != 0) return false; else {
					var isEmpty = this.isEmptyLineBox(child);
					if (isEmpty == false) return false;
				}
				child = child.nextSibling;
			}
			return true;
		}
		, alignInlineBoxesHorizontally: function (rootInlineBox, isLastLine, concatenatedLength) {
			var remainingSpace = this.bounds.width - concatenatedLength;
			var x = 0;
			if (this._isFirstLine == true) {
				x += this._elementRenderer.coreStyle.usedValues.textIndent;
				remainingSpace -= this._elementRenderer.coreStyle.usedValues.textIndent;
			}
			if (this._elementRenderer.coreStyle.isLeftAligned == true) this.alignLeft(x, rootInlineBox); else {
				var _g = this._elementRenderer.coreStyle.getKeyword(this._elementRenderer.coreStyle.getComputedOrInitialProperty(46));
				switch (_g[1]) {
					case 12:
						x = this.bounds.width - x;
						this.alignRight(x, rootInlineBox);
						break;
					case 13:
						this.alignCenter(x, remainingSpace, rootInlineBox);
						break;
					case 14:
						if (isLastLine == true) this.alignLeft(x, rootInlineBox); else {
							var _g1 = this._elementRenderer.coreStyle.getKeyword(this._elementRenderer.coreStyle.getComputedOrInitialProperty(45));
							switch (_g1[1]) {
								case 7: case 9:
									this.alignLeft(x, rootInlineBox);
									break;
								default:
									concatenatedLength = this.bounds.width;
									var concatedWidthWithoutSpaces = this.getConcatenatedWidthWithoutSpaces(rootInlineBox);
									var spaceWidth = (concatenatedLength - concatedWidthWithoutSpaces) / this._spacesNumber;
									this.alignJustify(x, rootInlineBox, spaceWidth);
							}
						}
						break;
					default:
						throw new js__$Boot_HaxeError("Illegal value for text-align style");
				}
			}
			return concatenatedLength;
		}
		, alignLeft: function (x, inlineBox) {
			x += inlineBox.paddingLeft + inlineBox.borderLeft + inlineBox.marginLeft;
			var child = inlineBox.firstChild;
			while (child != null) {
				if (child.firstChild != null) x = this.alignLeft(x, child); else {
					child.bounds.x = x + child.marginLeft;
					x += child.bounds.width + child.marginLeft + child.marginRight;
				}
				child = child.nextSibling;
			}
			x += inlineBox.paddingRight + inlineBox.borderRight + inlineBox.marginRight;
			return x;
		}
		, alignCenter: function (x, remainingSpace, inlineBox) {
			x += inlineBox.marginLeft + inlineBox.borderLeft + inlineBox.paddingLeft;
			var child = inlineBox.firstChild;
			while (child != null) {
				if (child.firstChild != null) x = this.alignCenter(x, remainingSpace, child);
				child.bounds.x = remainingSpace / 2 + x;
				x += child.bounds.width;
				child = child.nextSibling;
			}
			x += inlineBox.marginRight + inlineBox.borderRight + inlineBox.paddingRight;
			return x;
		}
		, alignRight: function (x, inlineBox) {
			x -= inlineBox.paddingRight + inlineBox.borderRight + inlineBox.marginRight;
			var child = inlineBox.lastChild;
			while (child != null) {
				if (child.lastChild != null) x = this.alignRight(x, child); else {
					child.bounds.x = x - child.bounds.width + child.marginLeft;
					x -= child.bounds.width + child.marginLeft + child.marginRight;
				}
				child = child.previousSibling;
			}
			x -= inlineBox.paddingLeft + inlineBox.borderLeft + inlineBox.marginLeft;
			return x;
		}
		, alignJustify: function (x, inlineBox, spacesWidth) {
			x += inlineBox.paddingLeft + inlineBox.borderLeft + inlineBox.marginLeft;
			var child = inlineBox.firstChild;
			while (child != null) {
				if (child.firstChild != null) x = this.alignJustify(x, child, spacesWidth); else if (child.isSpace == true) {
					child.bounds.x = x;
					x += spacesWidth;
				} else {
					child.bounds.x = x + child.marginLeft;
					x += child.bounds.width + child.marginLeft + child.marginRight;
				}
				child = child.nextSibling;
			}
			x += inlineBox.marginRight + inlineBox.borderRight + inlineBox.paddingRight;
			return x;
		}
		, getConcatenatedWidthWithoutSpaces: function (inlineBox) {
			var width = 0;
			var child = inlineBox.firstChild;
			while (child != null) {
				if (child.firstChild != null) width += this.getConcatenatedWidthWithoutSpaces(child); else if (child.isSpace == false) width += child.bounds.width;
				child = child.nextSibling;
			}
			return width;
		}
		, alignInlineBoxesVertically: function () {
			this.updateOffsetFromParentInlineBox(this.rootInlineBox);
			cocktail_core_linebox_LineBox._inlineBoxesBounds.x = 0;
			cocktail_core_linebox_LineBox._inlineBoxesBounds.y = 0;
			cocktail_core_linebox_LineBox._inlineBoxesBounds.width = 0;
			cocktail_core_linebox_LineBox._inlineBoxesBounds.height = 0;
			cocktail_core_linebox_LineBox._inlineBoxesBounds.height = this._elementRenderer.coreStyle.usedValues.lineHeight;
			this.updateOffsetFromLineBox(this.rootInlineBox, 0, 0);
			var minimumTop = this.getMinimumTop(this.rootInlineBox, 0);
			this.applyMinimumTop(this.rootInlineBox, minimumTop);
			this.getLineBoxHeight(this.rootInlineBox, cocktail_core_linebox_LineBox._inlineBoxesBounds, 0);
			var lineBoxHeight = cocktail_core_linebox_LineBox._inlineBoxesBounds.height;
			return lineBoxHeight;
		}
		, updateInlineBoxesBounds: function (inlineBox) {
			var child = inlineBox.firstChild;
			while (child != null) {
				if (child.isText == false && child.isEmbedded == false) {
					this.updateInlineBoxesBounds(child);
					this.updateInlineBoxBounds(child);
				}
				child = child.nextSibling;
			}
		}
		, updateInlineBoxBounds: function (inlineBox) {
			inlineBox.bounds.x = 50000;
			inlineBox.bounds.y = 50000;
			inlineBox.bounds.width = 0;
			inlineBox.bounds.height = 0;
			var child = inlineBox.firstChild;
			if (child == null) {
				inlineBox.bounds.x = 0;
				inlineBox.bounds.y = 0;
			}
			while (child != null) {
				cocktail_core_linebox_LineBox._childBounds.x = child.bounds.x - child.marginLeft;
				cocktail_core_linebox_LineBox._childBounds.y = child.bounds.y;
				cocktail_core_linebox_LineBox._childBounds.width = child.bounds.width + child.marginRight + child.marginLeft;
				cocktail_core_linebox_LineBox._childBounds.height = child.bounds.height;
				cocktail_core_geom_GeomUtils.addBounds(cocktail_core_linebox_LineBox._childBounds, inlineBox.bounds, null, null);
				child = child.nextSibling;
			}
			inlineBox.bounds.width += inlineBox.paddingLeft + inlineBox.paddingRight + inlineBox.borderLeft + inlineBox.borderRight;
			inlineBox.bounds.x -= inlineBox.paddingLeft + inlineBox.borderLeft;
		}
		, updateOffsetFromParentInlineBox: function (inlineBox) {
			var child = inlineBox.firstChild;
			while (child != null) {
				var childCoreStyle = child.elementRenderer.coreStyle;
				if (childCoreStyle.isBaselineAligned == true) {
					var childLeadedAscent = child.leadedAscent;
					if (child.isEmbedded == true) {
						childLeadedAscent = child.bounds.height + child.elementRenderer.coreStyle.usedValues.marginTop + child.elementRenderer.coreStyle.usedValues.marginBottom;
						if (child.elementRenderer.isBlockContainer == true && child.elementRenderer.coreStyle.isInlineBlock == true) {
							if (child.elementRenderer.childrenInline() == true) {
								var blockBox = child.elementRenderer;
								childLeadedAscent = blockBox.lineBoxes[blockBox.lineBoxes.length - 1].bounds.y + child.leadedAscent;
							}
						}
					}
					var yOffset = childLeadedAscent - inlineBox.leadedAscent;
					child.offsetFromParentInlineBox.y = -yOffset;
				} else {
					var _g = childCoreStyle.getComputedOrInitialProperty(48);
					switch (_g[1]) {
						case 4:
							var value = _g[2];
							switch (value[1]) {
								case 24:
									var yOffset1 = childCoreStyle.fontMetrics.ascent + child.bounds.height / 2 - (inlineBox.leadedAscent + inlineBox.elementRenderer.coreStyle.fontMetrics.xHeight / 2);
									child.offsetFromParentInlineBox.y = -yOffset1;
									break;
								case 26:
									break;
								case 23:
									break;
								case 20:
									break;
								case 21:
									break;
								case 22: case 25:
									child.offsetFromParentInlineBox.y = 0;
									break;
								default:
							}
							break;
						case 18:
							var value1 = _g[2];
							var offsetFromBaseline = childCoreStyle.fontMetrics.ascent - inlineBox.elementRenderer.coreStyle.fontMetrics.ascent;
							child.offsetFromParentInlineBox.y = -value1;
							break;
						case 2:
							var value2 = _g[2];
							break;
						default:
					}
				}
				if (child.isEmbedded == false) {
					if (child.firstChild != null) this.updateOffsetFromParentInlineBox(child);
				}
				child = child.nextSibling;
			}
		}
		, updateOffsetFromLineBox: function (inlineBox, lineBoxHeight, addedY) {
			var child = inlineBox.firstChild;
			while (child != null) {
				if (child.elementRenderer.coreStyle.isTopAligned) child.bounds.y = 0; else if (child.elementRenderer.coreStyle.isBottomAligned) child.bounds.y = lineBoxHeight - this.getAlignedSubTreeHeight(child, child.bounds.height, 0, false); else child.bounds.y = addedY + child.offsetFromParentInlineBox.y;
				if (child.isEmbedded == false && child.isText == false) {
					child.bounds.y += addedY;
					if (child.firstChild != null) this.updateOffsetFromLineBox(child, lineBoxHeight, child.bounds.y);
				}
				child = child.nextSibling;
			}
		}
		, getMinimumTop: function (inlineBox, minimumTop) {
			var child = inlineBox.firstChild;
			while (child != null) {
				if ((child.elementRenderer.coreStyle.isBottomAligned == true || child.elementRenderer.coreStyle.isTopAligned) == false) {
					if (child.bounds.y < minimumTop) minimumTop = child.bounds.y;
					if (child.isEmbedded == false) {
						if (child.firstChild != null) minimumTop = this.getMinimumTop(child, minimumTop);
					}
				}
				child = child.nextSibling;
			}
			return minimumTop;
		}
		, applyMinimumTop: function (inlineBox, minimumTop) {
			var child = inlineBox.firstChild;
			while (child != null) {
				if ((child.elementRenderer.coreStyle.isBottomAligned == true || child.elementRenderer.coreStyle.isTopAligned) == false) {
					child.bounds.y -= minimumTop;
					if (child.isEmbedded == false) {
						if (child.firstChild != null) this.applyMinimumTop(child, minimumTop);
					}
				}
				child = child.nextSibling;
			}
		}
		, getLineBoxHeight: function (inlineBox, lineBoxBounds, addedY) {
			var child = inlineBox.firstChild;
			while (child != null) {
				if ((child.elementRenderer.coreStyle.isBottomAligned == true || child.elementRenderer.coreStyle.isTopAligned) == true) {
					var alignedSubTreeHeight = this.getAlignedSubTreeHeight(child, child.bounds.height, 0, true);
				} else {
					if (child.isEmbedded == true || child.isText == true) {
						cocktail_core_linebox_LineBox._childBounds.x = 0;
						cocktail_core_linebox_LineBox._childBounds.y = 0;
						cocktail_core_linebox_LineBox._childBounds.width = 0;
						cocktail_core_linebox_LineBox._childBounds.height = 0;
						cocktail_core_linebox_LineBox._childBounds.y = child.bounds.y + addedY;
						cocktail_core_linebox_LineBox._childBounds.height = child.bounds.height;
						cocktail_core_geom_GeomUtils.addBounds(cocktail_core_linebox_LineBox._childBounds, lineBoxBounds, null, null);
					}
					if (child.isEmbedded == false) {
						if (child.firstChild != null) this.getLineBoxHeight(child, lineBoxBounds, addedY + child.offsetFromParentInlineBox.y);
					}
				}
				child = child.nextSibling;
			}
		}
		, isTopOrBottomAligned: function (inlineBox) {
			return inlineBox.elementRenderer.coreStyle.isBottomAligned == true || inlineBox.elementRenderer.coreStyle.isTopAligned;
		}
		, isTopAligned: function (inlineBox) {
			return inlineBox.elementRenderer.coreStyle.isTopAligned;
		}
		, isBottomAligned: function (inlineBox) {
			return inlineBox.elementRenderer.coreStyle.isBottomAligned;
		}
		, getAlignedSubTreeHeight: function (inlineBox, alignedSubTreeHeight, addedY, includeChildTopAndBottomInlineBoxes) {
			return alignedSubTreeHeight;
		}
		, __class__: cocktail_core_linebox_LineBox
	};
	var cocktail_core_linebox_SpaceInlineBox = function (elementRenderer, leadedAscent, leadedDescent, spaceWidth) {
		cocktail_core_linebox_InlineBox.call(this, elementRenderer, leadedAscent, leadedDescent);
		this.bounds.width = spaceWidth;
		this.bounds.height = leadedAscent + leadedDescent;
		this.isSpace = true;
		this.isText = true;
	};
	$hxClasses["cocktail.core.linebox.SpaceInlineBox"] = cocktail_core_linebox_SpaceInlineBox;
	cocktail_core_linebox_SpaceInlineBox.__name__ = ["cocktail", "core", "linebox", "SpaceInlineBox"];
	cocktail_core_linebox_SpaceInlineBox.__super__ = cocktail_core_linebox_InlineBox;
	cocktail_core_linebox_SpaceInlineBox.prototype = $extend(cocktail_core_linebox_InlineBox.prototype, {
		__class__: cocktail_core_linebox_SpaceInlineBox
	});
	var cocktail_core_linebox_TextInlineBox = function (elementRenderer, leadedAscent, leadedDescent, text, fontMetrics, fontManager, fontFamily) {
		cocktail_core_linebox_InlineBox.call(this, elementRenderer, leadedAscent, leadedDescent);
		this.isText = true;
		this._text = text;
		this.initNativeTextElement(text, fontManager, elementRenderer.coreStyle, fontFamily);
		this.bounds.width = this._nativeText.get_width();
		this.bounds.height = leadedAscent + leadedDescent;
	};
	$hxClasses["cocktail.core.linebox.TextInlineBox"] = cocktail_core_linebox_TextInlineBox;
	cocktail_core_linebox_TextInlineBox.__name__ = ["cocktail", "core", "linebox", "TextInlineBox"];
	cocktail_core_linebox_TextInlineBox.__super__ = cocktail_core_linebox_InlineBox;
	cocktail_core_linebox_TextInlineBox.prototype = $extend(cocktail_core_linebox_InlineBox.prototype, {
		dispose: function () {
			cocktail_core_linebox_InlineBox.prototype.dispose.call(this);
			if (this._nativeText != null) {
				this._nativeText.dispose();
				this._nativeText = null;
			}
		}
		, initNativeTextElement: function (text, fontManager, style, fontFamily) {
			var nativeTextElement = fontManager.createNativeTextElement(text, style, fontFamily);
			this._nativeText = new cocktail_port_platform_flash_$player_NativeText(nativeTextElement);
		}
		, initTextBitmap: function () {
			cocktail_core_linebox_TextInlineBox._bitmapBounds.y = this.leadedAscent;
			cocktail_core_linebox_TextInlineBox._bitmapBounds.width = this.bounds.width;
			cocktail_core_linebox_TextInlineBox._bitmapBounds.height = this.bounds.height;
			if (cocktail_core_linebox_TextInlineBox._bitmapBounds.width != 0 && cocktail_core_linebox_TextInlineBox._bitmapBounds.height != 0) this.nativeTextBitmap = this._nativeText.getBitmap(cocktail_core_linebox_TextInlineBox._bitmapBounds);
		}
		, get_nativeTextBitmap: function () {
			if (this.nativeTextBitmap == null) this.initTextBitmap();
			return this.nativeTextBitmap;
		}
		, getTextWidth: function () {
			return this._nativeText.get_width();
		}
		, getTextHeight: function () {
			return this.leadedAscent + this.leadedDescent;
		}
		, __class__: cocktail_core_linebox_TextInlineBox
		, __properties__: { get_nativeTextBitmap: "get_nativeTextBitmap" }
	});
	var cocktail_core_location_Location = function (document) {
		this._document = document;
	};
	$hxClasses["cocktail.core.location.Location"] = cocktail_core_location_Location;
	cocktail_core_location_Location.__name__ = ["cocktail", "core", "location", "Location"];
	cocktail_core_location_Location.prototype = {
		dispose: function () {
			this._document = null;
			this._url = null;
		}
		, set_href: function (value) {
			this.href = value;
			this._url = cocktail_core_url_URL.fromString(this.href);
			if (this.onLocationChanged != null) this.onLocationChanged();
			return value;
		}
		, get_protocol: function () {
			if (this._url == null) return null;
			return this._url.scheme;
		}
		, get_host: function () {
			if (this._url == null) return null;
			return this._url.host;
		}
		, get_hostname: function () {
			if (this._url == null) return null;
			return this._url.authority;
		}
		, get_port: function () {
			if (this._url == null) return null;
			return this._url.port;
		}
		, get_pathname: function () {
			if (this._url == null) return null;
			return this._url.path;
		}
		, get_search: function () {
			if (this._url == null) return null;
			return this._url.query;
		}
		, get_hash: function () {
			if (this._url == null) return null;
			return this._url.fragment;
		}
		, __class__: cocktail_core_location_Location
		, __properties__: { get_search: "get_search", get_pathname: "get_pathname", get_port: "get_port", get_hostname: "get_hostname", get_host: "get_host", get_protocol: "get_protocol", set_href: "set_href" }
	};
	var cocktail_core_multitouch_MultiTouchManager = function () {
		this._touches = [];
	};
	$hxClasses["cocktail.core.multitouch.MultiTouchManager"] = cocktail_core_multitouch_MultiTouchManager;
	cocktail_core_multitouch_MultiTouchManager.__name__ = ["cocktail", "core", "multitouch", "MultiTouchManager"];
	cocktail_core_multitouch_MultiTouchManager.prototype = {
		dispose: function () {
			this._touches = null;
		}
		, setUpTouchEvent: function (touchEvent, target) {
			var touch = touchEvent.touches.item(0);
			var _g = touchEvent.type;
			switch (_g) {
				case "touchstart":
					this.registerTouch(touch, touchEvent, target);
					break;
				case "touchend":
					this.unregisterTouch(touch, touchEvent);
					break;
				case "touchmove":
					this.updateTouch(touch, touchEvent);
					break;
			}
		}
		, registerTouch: function (touch, touchEvent, target) {
			touch.target = target;
			this.updatePagePosition(touch);
			this._touches.push(touch);
			this.initTouchEvent(touchEvent, this.getTouchesByTarget(target), new cocktail_core_event_TouchList([touch]));
		}
		, unregisterTouch: function (touch, touchEvent) {
			var storedTouch = this.getTouchByIdentifier(touch.identifier);
			this.updateStoredTouch(storedTouch, touch);
			this.initTouchEvent(touchEvent, this.getTouchesByTarget(touch.target), new cocktail_core_event_TouchList([touch]));
			HxOverrides.remove(this._touches, storedTouch);
		}
		, updateTouch: function (touch, touchEvent) {
			var storedTouch = this.getTouchByIdentifier(touch.identifier);
			this.updateStoredTouch(storedTouch, touch);
			this.initTouchEvent(touchEvent, this.getTouchesByTarget(touch.target), new cocktail_core_event_TouchList([touch]));
		}
		, updateStoredTouch: function (storedTouch, touch) {
			storedTouch.clientX = touch.clientX;
			storedTouch.clientY = touch.clientY;
			storedTouch.screenX = touch.screenX;
			storedTouch.screenY = touch.screenY;
			this.updatePagePosition(storedTouch);
		}
		, updatePagePosition: function (touch) {
		}
		, initTouchEvent: function (touchEvent, targetTouches, changedTouches) {
			touchEvent.initTouchEvent(touchEvent.type, true, true, null, 0.0, new cocktail_core_event_TouchList(this._touches), targetTouches, changedTouches, false, false, false, false);
		}
		, getTouchesByTarget: function (target) {
			var targetTouches = [];
			var length = this._touches.length;
			var _g = 0;
			while (_g < length) {
				var i = _g++;
				var touch = this._touches[i];
				if (touch.target == target) targetTouches.push(touch);
			}
			return new cocktail_core_event_TouchList(targetTouches);
		}
		, getTouchByIdentifier: function (identifier) {
			var length = this._touches.length;
			var _g = 0;
			while (_g < length) {
				var i = _g++;
				var touch = this._touches[i];
				if (touch.identifier == identifier) return touch;
			}
			return null;
		}
		, __class__: cocktail_core_multitouch_MultiTouchManager
	};
	var cocktail_core_parser_DOMParser = function () {
	};
	$hxClasses["cocktail.core.parser.DOMParser"] = cocktail_core_parser_DOMParser;
	cocktail_core_parser_DOMParser.__name__ = ["cocktail", "core", "parser", "DOMParser"];
	cocktail_core_parser_DOMParser.parse = function (html, ownerDocument) {
		return cocktail_core_parser_DOMParser.doSetInnerHTML(haxe_xml_Parser.parse(html).firstElement(), ownerDocument);
	};
	cocktail_core_parser_DOMParser.serialize = function (node) {
		var xml = cocktail_core_parser_DOMParser.doGetInnerHTML(node, Xml.createElement(node.get_nodeName()));
		var _g1 = 0;
		var _g = node.attributes.get_length();
		while (_g1 < _g) {
			var i = _g1++;
			var attribute = node.attributes.item(i);
			if (attribute.specified == true) xml.set(attribute.name, attribute.get_value());
		}
		return haxe_xml_Printer.print(xml);
	};
	cocktail_core_parser_DOMParser.doSetInnerHTML = function (xml, ownerDocument) {
		var _g = xml.nodeType;
		switch (_g) {
			case 1:
				return ownerDocument.createTextNode((function ($this) {
					var $r;
					if (xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
					$r = xml.nodeValue;
					return $r;
				}(this)));
			case 3:
				return ownerDocument.createComment((function ($this) {
					var $r;
					if (xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
					$r = xml.nodeValue;
					return $r;
				}(this)));
			case 4:
				return null;
			case 0:
				var htmlElement = ownerDocument.createElement((function ($this) {
					var $r;
					if (xml.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + xml.nodeType);
					$r = xml.nodeName;
					return $r;
				}(this)));
				var $it0 = (function ($this) {
					var $r;
					if (xml.nodeType != Xml.Document && xml.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + xml.nodeType);
					$r = HxOverrides.iter(xml.children);
					return $r;
				}(this));
				while ($it0.hasNext()) {
					var child = $it0.next();
					var _g1 = child.nodeType;
					switch (_g1) {
						case 1:
							if ((function ($this) {
								var $r;
								if (child.nodeType == Xml.Document || child.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + child.nodeType);
								$r = child.nodeValue;
								return $r;
							}(this)) == "") continue;
							break;
						default:
					}
					var childNode = cocktail_core_parser_DOMParser.doSetInnerHTML(child, ownerDocument);
					if (childNode != null) htmlElement.appendChild(childNode);
				}
				var attributes = xml.attributes();
				while (attributes.hasNext()) {
					var attribute = attributes.next();
					var value = xml.get(attribute);
					htmlElement.setAttribute(attribute, value);
				}
				return htmlElement;
			default:
		}
		return null;
	};
	cocktail_core_parser_DOMParser.doGetInnerHTML = function (node, xml) {
		var length = node.childNodes.length;
		var _g = 0;
		while (_g < length) {
			var i = _g++;
			var node1 = node.childNodes[i];
			var _g1 = node1.get_nodeType();
			switch (_g1) {
				case 1:
					var child = node1;
					var childXml = Xml.createElement(child.get_nodeName());
					var childAttributes = child.attributes;
					var childAttributesLength = childAttributes.get_length();
					var _g2 = 0;
					while (_g2 < childAttributesLength) {
						var j = _g2++;
						var attribute = childAttributes.item(j);
						if (attribute.specified == true) childXml.set(attribute.name, attribute.get_value());
					}
					if (child.style.length > 0) childXml.set("style", child.style.get_cssText());
					xml.addChild(cocktail_core_parser_DOMParser.doGetInnerHTML(child, childXml));
					if ((function ($this) {
						var $r;
						if (childXml.nodeType != Xml.Document && childXml.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + childXml.nodeType);
						$r = childXml.children[0];
						return $r;
					}(this)) == null && child.isVoidElement() == false) childXml.addChild(Xml.createPCData(""));
					break;
				case 3:
					var text = Xml.createPCData(node1.get_nodeValue());
					xml.addChild(text);
					break;
				case 8:
					var comment = Xml.createComment(node1.get_nodeValue());
					xml.addChild(comment);
					break;
			}
		}
		return xml;
	};
	cocktail_core_parser_DOMParser.prototype = {
		__class__: cocktail_core_parser_DOMParser
	};
	var cocktail_core_parser_TextToken = $hxClasses["cocktail.core.parser.TextToken"] = { __ename__: ["cocktail", "core", "parser", "TextToken"], __constructs__: ["word", "space", "tab", "lineFeed"] };
	cocktail_core_parser_TextToken.word = function (value) { var $x = ["word", 0, value]; $x.__enum__ = cocktail_core_parser_TextToken; $x.toString = $estr; return $x; };
	cocktail_core_parser_TextToken.space = ["space", 1];
	cocktail_core_parser_TextToken.space.toString = $estr;
	cocktail_core_parser_TextToken.space.__enum__ = cocktail_core_parser_TextToken;
	cocktail_core_parser_TextToken.tab = ["tab", 2];
	cocktail_core_parser_TextToken.tab.toString = $estr;
	cocktail_core_parser_TextToken.tab.__enum__ = cocktail_core_parser_TextToken;
	cocktail_core_parser_TextToken.lineFeed = ["lineFeed", 3];
	cocktail_core_parser_TextToken.lineFeed.toString = $estr;
	cocktail_core_parser_TextToken.lineFeed.__enum__ = cocktail_core_parser_TextToken;
	var cocktail_core_parser_PlainTextParser = function () {
	};
	$hxClasses["cocktail.core.parser.PlainTextParser"] = cocktail_core_parser_PlainTextParser;
	cocktail_core_parser_PlainTextParser.__name__ = ["cocktail", "core", "parser", "PlainTextParser"];
	cocktail_core_parser_PlainTextParser.parse = function (text) {
		var textTokens = [];
		var textToken = null;
		var lastCharacterIsSpace = false;
		var i = 0;
		while (i < text.length) {
			if (text.charAt(i) == "\\") {
				if (i < text.length - 1) {
					if (text.charAt(i + 1) == "n") {
						if (textToken != null) {
							textTokens.push(cocktail_core_parser_TextToken.word(textToken));
							textToken = null;
						}
						textTokens.push(cocktail_core_parser_TextToken.lineFeed);
						i++;
					} else if (text.charAt(i + 1) == "t") {
						if (textToken != null) {
							textTokens.push(cocktail_core_parser_TextToken.word(textToken));
							textToken = null;
						}
						textTokens.push(cocktail_core_parser_TextToken.tab);
						i++;
					}
				}
			} else if (text.charCodeAt(i) == 32) {
				if (textToken != null) {
					textTokens.push(cocktail_core_parser_TextToken.word(textToken));
					textToken = null;
				}
				textTokens.push(cocktail_core_parser_TextToken.space);
				lastCharacterIsSpace = true;
			} else {
				lastCharacterIsSpace = false;
				if (textToken == null) textToken = "";
				textToken += text.charAt(i);
			}
			i++;
		}
		if (textToken != null) textTokens.push(cocktail_core_parser_TextToken.word(textToken));
		return textTokens;
	};
	cocktail_core_parser_PlainTextParser.applyWhiteSpaceProcessing = function (text, whiteSpace) {
		switch (whiteSpace[1]) {
			case 0: case 8:
				var hasLineFeed = text.indexOf("\n") != -1;
				if (hasLineFeed == true) {
					text = cocktail_core_parser_PlainTextParser.removeControlCharactersSurroundingLineFeed(text);
					text = cocktail_core_parser_PlainTextParser.convertLineFeedsToSpaces(text);
				}
				var hasTab = text.indexOf("\t") != -1;
				if (hasTab == true) text = cocktail_core_parser_PlainTextParser.convertTabToSpaces(text);
				var hasSpace = text.indexOf(" ") != -1;
				if (hasSpace == true) text = cocktail_core_parser_PlainTextParser.concatenateSpaces(text);
				break;
			case 10:
				text = cocktail_core_parser_PlainTextParser.removeControlCharactersSurroundingLineFeed(text);
				text = cocktail_core_parser_PlainTextParser.convertTabToSpaces(text);
				text = cocktail_core_parser_PlainTextParser.concatenateSpaces(text);
				break;
			case 7: case 9:
				break;
			default:
		}
		return text;
	};
	cocktail_core_parser_PlainTextParser.removeControlCharactersSurroundingLineFeed = function (sourceText) {
		var state = 0;
		var position = 0;
		var c = sourceText.charCodeAt(position);
		var outputText = "";
		var buffer = "";
		while (!(c != c)) {
			switch (state) {
				case 0:
					switch (c) {
						case 9: case 32: case 13:
							buffer += sourceText.charAt(position);
							state = 1;
							break;
						case 10:
							outputText += sourceText.charAt(position);
							state = 2;
							break;
						default:
							outputText += sourceText.charAt(position);
					}
					break;
				case 1:
					switch (c) {
						case 10:
							buffer = "";
							outputText += sourceText.charAt(position);
							state = 2;
							break;
						case 9: case 32: case 13:
							buffer += sourceText.charAt(position);
							break;
						default:
							outputText += buffer;
							buffer = "";
							outputText += sourceText.charAt(position);
							state = 0;
					}
					break;
				case 2:
					switch (c) {
						case 9: case 32: case 13:
							break;
						case 10:
							outputText += sourceText.charAt(position);
							break;
						default:
							outputText += sourceText.charAt(position);
							state = 0;
					}
					break;
			}
			c = StringTools.fastCodeAt(sourceText, ++position);
		}
		outputText += buffer;
		return outputText;
	};
	cocktail_core_parser_PlainTextParser.concatenateSpaces = function (sourceText) {
		var state = 0;
		var position = 0;
		var c = sourceText.charCodeAt(position);
		var outputText = "";
		while (!(c != c)) {
			switch (state) {
				case 0:
					switch (c) {
						case 32:
							outputText += sourceText.charAt(position);
							state = 3;
							break;
						default:
							outputText += sourceText.charAt(position);
					}
					break;
				case 3:
					switch (c) {
						case 32:
							break;
						default:
							outputText += sourceText.charAt(position);
							state = 0;
					}
					break;
			}
			c = StringTools.fastCodeAt(sourceText, ++position);
		}
		return outputText;
	};
	cocktail_core_parser_PlainTextParser.convertLineFeedsToSpaces = function (sourceText) {
		var er = new EReg("\n", "g");
		return er.replace(sourceText, " ");
	};
	cocktail_core_parser_PlainTextParser.convertTabToSpaces = function (sourceText) {
		var er = new EReg("\t", "g");
		return er.replace(sourceText, " ");
	};
	cocktail_core_parser_PlainTextParser.applyTextTransform = function (text, textTransform) {
		switch (textTransform[1]) {
			case 16:
				text = text.toUpperCase();
				break;
			case 17:
				text = text.toLowerCase();
				break;
			case 15:
				text = cocktail_core_parser_PlainTextParser.capitalizeText(text);
				break;
			case 18:
				break;
			default:
		}
		return text;
	};
	cocktail_core_parser_PlainTextParser.capitalizeText = function (sourceText) {
		var state = 4;
		var position = 0;
		var c = sourceText.charCodeAt(position);
		var outputText = "";
		while (!(c != c)) {
			switch (state) {
				case 0:
					switch (c) {
						case 32:
							outputText += sourceText.charAt(position);
							state = 4;
							break;
						default:
							outputText += sourceText.charAt(position);
					}
					break;
				case 4:
					switch (c) {
						case 32:
							outputText += sourceText.charAt(position);
							break;
						default:
							outputText += sourceText.charAt(position).toUpperCase();
							state = 0;
					}
					break;
			}
			c = StringTools.fastCodeAt(sourceText, ++position);
		}
		return outputText;
	};
	cocktail_core_parser_PlainTextParser.prototype = {
		__class__: cocktail_core_parser_PlainTextParser
	};
	var cocktail_core_renderer_ElementRenderer = function (domNode, coreStyle) {
		cocktail_core_ds_FastNode.call(this);
		this.domNode = domNode;
		this.coreStyle = coreStyle;
		this._hasOwnLayer = false;
		this._wasAbsolutelyPositioned = false;
		this._needsLayerRendererUpdate = true;
		this.bounds = new cocktail_core_geom_RectangleVO();
		this.globalBounds = new cocktail_core_geom_RectangleVO();
		this.staticOrigin = new cocktail_core_geom_PointVO(0.0, 0.0);
		this.hitTestingBounds = new cocktail_core_geom_RectangleVO();
		this.inlineBoxes = [];
		this.isBlockContainer = false;
		this.isReplaced = false;
		this.isText = false;
		this.hasLineBoxes = false;
	};
	$hxClasses["cocktail.core.renderer.ElementRenderer"] = cocktail_core_renderer_ElementRenderer;
	cocktail_core_renderer_ElementRenderer.__name__ = ["cocktail", "core", "renderer", "ElementRenderer"];
	cocktail_core_renderer_ElementRenderer.__super__ = cocktail_core_ds_FastNode;
	cocktail_core_renderer_ElementRenderer.prototype = $extend(cocktail_core_ds_FastNode.prototype, {
		dispose: function () {
			this.domNode = null;
			this.coreStyle = null;
			this.bounds = null;
			this.globalBounds = null;
			this.staticOrigin = null;
			this.hitTestingBounds = null;
			this.layerRenderer = null;
			var length = this.inlineBoxes.length;
			var _g = 0;
			while (_g < length) {
				var i = _g++;
				this.inlineBoxes[i].dispose();
			}
			this.inlineBoxes = null;
		}
		, appendChild: function (newChild) {
			cocktail_core_ds_FastNode.prototype.appendChild.call(this, newChild);
			newChild.addedToRenderingTree();
			this.invalidate();
		}
		, removeChild: function (oldChild) {
			oldChild.removedFromRenderingTree();
			cocktail_core_ds_FastNode.prototype.removeChild.call(this, oldChild);
			this.invalidate();
		}
		, insertBefore: function (newChild, refChild) {
			cocktail_core_ds_FastNode.prototype.insertBefore.call(this, newChild, refChild);
			if (refChild == null) return;
			newChild.addedToRenderingTree();
			this.invalidate();
		}
		, updateHitTestingBounds: function () {
			this.hitTestingBounds.x = this.globalBounds.x;
			this.hitTestingBounds.y = this.globalBounds.y;
			this.hitTestingBounds.width = this.globalBounds.width;
			this.hitTestingBounds.height = this.globalBounds.height;
			if ((this.coreStyle.isInline == true || this.isText == true) && this.isReplaced == false) {
				this.hitTestingBounds.x += this.bounds.x;
				this.hitTestingBounds.y += this.bounds.y;
			}
			var scrollOffset = this.layerRenderer.scrollOffset;
			this.hitTestingBounds.x -= scrollOffset.x;
			this.hitTestingBounds.y -= scrollOffset.y;
			var matrix = this.layerRenderer.matrix;
			this.hitTestingBounds.x += matrix.e;
			this.hitTestingBounds.y += matrix.f;
			if (this._hasOwnLayer == true) {
				this.hitTestingBounds.x += this.layerRenderer.scrollLeft;
				this.hitTestingBounds.y += this.layerRenderer.scrollTop;
			}
			cocktail_core_geom_GeomUtils.intersectBounds(this.layerRenderer.clipRect, this.hitTestingBounds, this.hitTestingBounds);
			var child = this.firstChild;
			while (child != null) {
				child.updateHitTestingBounds();
				child = child.nextSibling;
			}
		}
		, render: function (parentGraphicContext, clipRect, scrollOffset) {
		}
		, updateText: function () {
			var child = this.firstChild;
			while (child != null) {
				child.updateText();
				child = child.nextSibling;
			}
		}
		, updateTextDecorations: function (inheritUnderline, inheritOverline, inheritLineThrough, inheritBlink) {
			{
				var _g = this.coreStyle.getComputedOrInitialProperty(86);
				switch (_g[1]) {
					case 4:
						var value = _g[2];
						switch (value[1]) {
							case 84:
								inheritUnderline = true;
								break;
							case 85:
								inheritOverline = true;
								break;
							case 86:
								inheritLineThrough = true;
								break;
							case 87:
								inheritBlink = true;
								break;
							default:
						}
						break;
					case 13:
						var value1 = _g[2];
						var _g2 = 0;
						var _g1 = value1.length;
						while (_g2 < _g1) {
							var i = _g2++;
							{
								var _g3 = value1[i];
								switch (_g3[1]) {
									case 4:
										var value2 = _g3[2];
										switch (value2[1]) {
											case 84:
												inheritUnderline = true;
												break;
											case 85:
												inheritOverline = true;
												break;
											case 86:
												inheritLineThrough = true;
												break;
											case 87:
												inheritBlink = true;
												break;
											default:
										}
										break;
									default:
								}
							}
						}
						break;
					default:
				}
			}
			var child = this.firstChild;
			while (child != null) {
				if (child.coreStyle.isFloat == true || child.coreStyle.isAbsolutelyPositioned == true || child.coreStyle.isInlineBlock == true) child.updateTextDecorations(false, false, false, false); else child.updateTextDecorations(inheritUnderline, inheritOverline, inheritLineThrough, inheritBlink);
				child = child.nextSibling;
			}
		}
		, invalidateLayerRenderer: function () {
			this._needsLayerRendererUpdate = true;
			var _g = this.domNode.get_nodeType();
			switch (_g) {
				case 1: case 3:
					var htmlDocument = this.domNode.ownerDocument;
					htmlDocument.invalidationManager.invalidateLayerTree();
					break;
			}
		}
		, layout: function (forceLayout, layoutState) {
		}
		, setGlobalOrigins: function (addedX, addedY, addedPositionedX, addedPositionedY) {
			if (this.isPositioned() == true) {
				addedPositionedX = this.globalBounds.x;
				addedPositionedY = this.globalBounds.y;
			}
			if (this.isBlockContainer == true) {
				addedX = this.globalBounds.x + this.coreStyle.usedValues.paddingLeft + this.coreStyle.usedValues.borderLeftWidth;
				addedY = this.globalBounds.y + this.coreStyle.usedValues.paddingTop + this.coreStyle.usedValues.borderTopWidth;
			}
			var child = this.firstChild;
			while (child != null) {
				if (child.isAbsolutelyPositioned()) this.setAbsolutelyPositionedGlobalOrigins(child, addedX, addedY, addedPositionedX, addedPositionedY); else {
					child.globalBounds.x = addedX;
					child.globalBounds.y = addedY;
					if (child.isInlineLevel() == false || child.isReplaced == true) {
						child.globalBounds.x += child.bounds.x;
						child.globalBounds.y += child.bounds.y;
					} else if (child.isBlockContainer == true) {
						child.globalBounds.x += child.bounds.x;
						child.globalBounds.y += child.bounds.y;
					}
				}
				child.globalBounds.width = child.bounds.width;
				child.globalBounds.height = child.bounds.height;
				if (child.firstChild != null) child.setGlobalOrigins(addedX, addedY, addedPositionedX, addedPositionedY);
				child = child.nextSibling;
			}
		}
		, setAbsolutelyPositionedGlobalOrigins: function (elementRenderer, addedX, addedY, addedPositionedX, addedPositionedY) {
			var elementRendererCoreStyle = elementRenderer.coreStyle;
			if (elementRendererCoreStyle.isFixedPositioned) {
				if (elementRendererCoreStyle.hasAutoLeft == true && elementRendererCoreStyle.hasAutoRight == true) elementRenderer.globalBounds.x = addedX + elementRenderer.staticOrigin.x; else elementRenderer.globalBounds.x = elementRenderer.bounds.x;
				if (elementRendererCoreStyle.hasAutoTop == true && elementRendererCoreStyle.hasAutoBottom == true) elementRenderer.globalBounds.y = addedY + elementRenderer.staticOrigin.y; else elementRenderer.globalBounds.y = elementRenderer.bounds.y;
			} else {
				if (elementRendererCoreStyle.hasAutoLeft == true && elementRendererCoreStyle.hasAutoRight == true) elementRenderer.globalBounds.x = addedX + elementRenderer.staticOrigin.x; else elementRenderer.globalBounds.x = addedPositionedX + elementRenderer.bounds.x;
				if (elementRendererCoreStyle.hasAutoTop == true && elementRendererCoreStyle.hasAutoBottom == true) elementRenderer.globalBounds.y = addedY + elementRenderer.staticOrigin.y; else elementRenderer.globalBounds.y = addedPositionedY + elementRenderer.bounds.y;
			}
		}
		, getCollapsedTopMargin: function (onlyIfFirstAdjoiningMargin) {
			return 0.0;
		}
		, getCollapsedBottomMargin: function (onlyIfFirstAdjoiningMargin) {
			return 0.0;
		}
		, getNextAdjoiningMargins: function (adjoiningMargins, startWithTopMargin, isFirst) {
		}
		, getPreviousAdjoiningMargins: function (adjoiningMargins, startWithTopMargin, isFirst) {
		}
		, collapseBottomMarginWithLastChildBottomMargin: function () {
			return false;
		}
		, updateLayerRenderer: function () {
			if (this._needsLayerRendererUpdate == true) {
				this._needsLayerRendererUpdate = false;
				if (this.layerRenderer == null) {
					this.attach();
					return;
				} else if (this._hasOwnLayer != this.createOwnLayer()) {
					this.detach();
					this.attach();
					return;
				} else if (this.createOwnLayer() == true) this.parentNode.layerRenderer.insertBefore(this.layerRenderer, this.getNextLayerRenderer(this.parentNode.layerRenderer.rootElementRenderer, this));
			}
			var child = this.firstChild;
			while (child != null) {
				child.updateLayerRenderer();
				child = child.nextSibling;
			}
		}
		, attach: function () {
			this.attachLayer();
			var child = this.firstChild;
			while (child != null) {
				child.attach();
				child = child.nextSibling;
			}
		}
		, detach: function () {
			var child = this.firstChild;
			while (child != null) {
				child.detach();
				child = child.nextSibling;
			}
			if (this.layerRenderer != null) this.detachLayer();
		}
		, updateAnonymousBlock: function () {
		}
		, updateInlineBoxes: function () {
			var child = this.firstChild;
			while (child != null) {
				child.updateInlineBoxes();
				child = child.nextSibling;
			}
		}
		, addedToRenderingTree: function () {
			this.containingBlock = this.getContainingBlock();
			this.registerWithContaininingBlock();
			this.invalidateLayerRenderer();
		}
		, removedFromRenderingTree: function () {
			this.detach();
			this.unregisterWithContainingBlock();
			this.containingBlock = null;
		}
		, attachLayer: function () {
			if (this.parentNode != null) this.createLayer(this.parentNode.layerRenderer);
		}
		, detachLayer: function () {
			if (this._hasOwnLayer == true) {
				this.parentNode.layerRenderer.removeChild(this.layerRenderer);
				this._hasOwnLayer = false;
				this.layerRenderer.dispose();
			}
			this.layerRenderer = null;
		}
		, registerWithContaininingBlock: function () {
			if (this.isAbsolutelyPositioned() == true) {
				this.containingBlock.addAbsolutelyPositionedChildren(this);
				this._wasAbsolutelyPositioned = true;
			}
		}
		, unregisterWithContainingBlock: function () {
			if (this._wasAbsolutelyPositioned == true) {
				this.containingBlock.removeAbsolutelyPositionedChild(this);
				this._wasAbsolutelyPositioned = false;
			}
		}
		, getLeadedAscent: function () {
			var fontMetrics = this.coreStyle.fontMetrics;
			var ascent = fontMetrics.ascent;
			var descent = fontMetrics.descent;
			var lineHeight = this.coreStyle.usedValues.lineHeight;
			var leading = lineHeight - (ascent + descent);
			var leadedAscent = ascent + leading / 2;
			var leadedDescent = descent + leading / 2;
			return leadedAscent;
		}
		, getLeadedDescent: function () {
			var fontMetrics = this.coreStyle.fontMetrics;
			var ascent = fontMetrics.ascent;
			var descent = fontMetrics.descent;
			var lineHeight = this.coreStyle.usedValues.lineHeight;
			var leading = lineHeight - (ascent + descent);
			var leadedAscent = ascent + leading / 2;
			var leadedDescent = descent + leading / 2;
			return leadedDescent;
		}
		, establishesNewBlockFormattingContext: function () {
			return false;
		}
		, isScrollBar: function () {
			return false;
		}
		, canHaveClearance: function () {
			return false;
		}
		, isFloat: function () {
			return false;
		}
		, isPositioned: function () {
			return false;
		}
		, isAbsolutelyPositioned: function () {
			return false;
		}
		, isInlineLevel: function () {
			return false;
		}
		, isRelativePositioned: function () {
			return false;
		}
		, isTransparent: function () {
			return false;
		}
		, childrenInline: function () {
			return false;
		}
		, isAnonymousBlockBox: function () {
			return false;
		}
		, isTransformed: function () {
			return false;
		}
		, hasCSSTransform: function () {
			return false;
		}
		, isVisible: function () {
			return true;
		}
		, createOwnLayer: function () {
			return false;
		}
		, createLayer: function (parentLayer) {
			if (this.createOwnLayer() == true) {
				this.doCreateLayer();
				parentLayer.insertBefore(this.layerRenderer, this.getNextLayerRenderer(parentLayer.rootElementRenderer, this));
				this._hasOwnLayer = true;
			} else this.layerRenderer = parentLayer;
		}
		, doCreateLayer: function () {
			this.layerRenderer = new cocktail_core_layer_LayerRenderer(this);
		}
		, getNextLayerRenderer: function (rootElementRenderer, referenceElementRenderer) {
			var nextElementRendererWithOwnLayerRenderer = this.getNextElementRendererWithOwnLayerRenderer(rootElementRenderer, referenceElementRenderer);
			if (nextElementRendererWithOwnLayerRenderer == null) return null; else if (nextElementRendererWithOwnLayerRenderer == referenceElementRenderer) return null; else return nextElementRendererWithOwnLayerRenderer.layerRenderer;
		}
		, getNextElementRendererWithOwnLayerRenderer: function (rootElementRenderer, referenceElementRenderer) {
			var foundSelf = false;
			var child = rootElementRenderer.firstChild;
			while (child != null) {
				if (child == referenceElementRenderer) foundSelf = true; else if (child.createOwnLayer() == true && child.layerRenderer != null) {
					if (foundSelf == true) return child;
				} else if (child.firstChild != null) {
					var nextElementRendererWithOwnLayerRenderer = this.getNextElementRendererWithOwnLayerRenderer(child, referenceElementRenderer);
					if (nextElementRendererWithOwnLayerRenderer != null) {
						if (nextElementRendererWithOwnLayerRenderer == referenceElementRenderer) foundSelf = true; else return nextElementRendererWithOwnLayerRenderer;
					}
				}
				child = child.nextSibling;
			}
			if (foundSelf == true) return referenceElementRenderer; else return null;
		}
		, getContainingBlock: function () {
			if (this.isAbsolutelyPositioned() == true) {
				if (this.coreStyle.isFixedPositioned == true) return this.getInitialContainingBlock(); else return this.getFirstPositionedAncestor();
			} else return this.getFirstBlockContainer();
		}
		, getFirstPositionedAncestor: function () {
			var parent = this.parentNode;
			while (parent.isPositioned() == false) {
				if (parent.parentNode == null) break;
				parent = parent.parentNode;
			}
			return parent;
		}
		, getInitialContainingBlock: function () {
			return this.domNode.ownerDocument.documentElement.elementRenderer;
		}
		, getFirstBlockContainer: function () {
			var parent = this.parentNode;
			while (parent.isBlockContainer == false) parent = parent.parentNode;
			return parent;
		}
		, getInlineBoxesBounds: function (inLineBoxes, bounds) {
			bounds.x = 50000;
			bounds.y = 50000;
			bounds.width = 0;
			bounds.height = 0;
			var length = inLineBoxes.length;
			var _g = 0;
			while (_g < length) {
				var i = _g++;
				cocktail_core_geom_GeomUtils.addBounds(inLineBoxes[i].bounds, bounds, null, null);
			}
		}
		, doGetChildrenBounds: function (rootElementRenderer, bounds) {
			var child = rootElementRenderer.firstChild;
			while (child != null) {
				cocktail_core_geom_GeomUtils.addBounds(child.bounds, bounds, null, null);
				if (child.firstChild != null) this.doGetChildrenBounds(child, bounds);
				child = child.nextSibling;
			}
		}
		, invalidate: function () {
		}
		, invalidateStyle: function (styleIndex) {
		}
		, invalidateRendering: function () {
		}
		, set_scrollLeft: function (value) {
			if (this._hasOwnLayer == true) this.layerRenderer.set_scrollLeft(value);
			return value;
		}
		, get_scrollLeft: function () {
			if (this._hasOwnLayer == true) return this.layerRenderer.scrollLeft;
			return 0;
		}
		, set_scrollTop: function (value) {
			if (this._hasOwnLayer == true) this.layerRenderer.set_scrollTop(value);
			return value;
		}
		, get_scrollTop: function () {
			if (this._hasOwnLayer == true) return this.layerRenderer.scrollTop;
			return 0;
		}
		, get_previousNormalFlowSibling: function () {
			var previousElementRendererSibling = this.previousSibling;
			while (previousElementRendererSibling != null) {
				if (previousElementRendererSibling.isFloat() == false) {
					if (previousElementRendererSibling.isAbsolutelyPositioned() == false) return previousElementRendererSibling;
				}
				previousElementRendererSibling = previousElementRendererSibling.previousSibling;
			}
			return null;
		}
		, get_nextNormalFlowSibling: function () {
			var nextElementRendererSibling = this.nextSibling;
			while (nextElementRendererSibling != null) {
				if (nextElementRendererSibling.isFloat() == false) {
					if (nextElementRendererSibling.isAbsolutelyPositioned() == false) return nextElementRendererSibling;
				}
				nextElementRendererSibling = nextElementRendererSibling.nextSibling;
			}
			return null;
		}
		, get_firstNormalFlowChild: function () {
			var firstElementRendererChild = this.firstChild;
			if (firstElementRendererChild != null) {
				if (firstElementRendererChild.isFloat() == false) {
					if (firstElementRendererChild.isAbsolutelyPositioned() == false) return firstElementRendererChild;
				}
				return firstElementRendererChild.get_nextNormalFlowSibling();
			}
			return null;
		}
		, get_lastNormalFlowChild: function () {
			var lastElementRendererChild = this.lastChild;
			if (lastElementRendererChild != null) {
				if (lastElementRendererChild.isFloat() == false) {
					if (lastElementRendererChild.isAbsolutelyPositioned() == false) return lastElementRendererChild;
				}
				return lastElementRendererChild.get_previousNormalFlowSibling();
			}
			return null;
		}
		, get_scrollWidth: function () {
			if (this._hasOwnLayer == true) {
				var scrollableWidth = this.layerRenderer.scrollableBounds.width;
				if (scrollableWidth > this.bounds.width) return scrollableWidth;
			}
			return this.bounds.width;
		}
		, get_scrollHeight: function () {
			if (this._hasOwnLayer == true) {
				var scrollableHeight = this.layerRenderer.scrollableBounds.height;
				if (scrollableHeight > this.bounds.height) return scrollableHeight;
			}
			return this.bounds.height;
		}
		, __class__: cocktail_core_renderer_ElementRenderer
		, __properties__: { get_lastNormalFlowChild: "get_lastNormalFlowChild", get_firstNormalFlowChild: "get_firstNormalFlowChild", get_nextNormalFlowSibling: "get_nextNormalFlowSibling", get_previousNormalFlowSibling: "get_previousNormalFlowSibling", get_scrollHeight: "get_scrollHeight", get_scrollWidth: "get_scrollWidth", set_scrollTop: "set_scrollTop", get_scrollTop: "get_scrollTop", set_scrollLeft: "set_scrollLeft", get_scrollLeft: "get_scrollLeft" }
	});
	var cocktail_core_renderer_InvalidatingElementRenderer = function (domNode, coreStyle) {
		cocktail_core_renderer_ElementRenderer.call(this, domNode, coreStyle);
		this._needsLayout = true;
		this._childrenNeedLayout = true;
		this._positionedChildrenNeedLayout = true;
	};
	$hxClasses["cocktail.core.renderer.InvalidatingElementRenderer"] = cocktail_core_renderer_InvalidatingElementRenderer;
	cocktail_core_renderer_InvalidatingElementRenderer.__name__ = ["cocktail", "core", "renderer", "InvalidatingElementRenderer"];
	cocktail_core_renderer_InvalidatingElementRenderer.__super__ = cocktail_core_renderer_ElementRenderer;
	cocktail_core_renderer_InvalidatingElementRenderer.prototype = $extend(cocktail_core_renderer_ElementRenderer.prototype, {
		addedToRenderingTree: function () {
			cocktail_core_renderer_ElementRenderer.prototype.addedToRenderingTree.call(this);
			this.invalidateLayout();
		}
		, invalidate: function () {
			this._childrenNeedLayout = true;
			this._positionedChildrenNeedLayout = true;
			this.invalidateLayoutAndRendering();
		}
		, invalidateRendering: function () {
			if (this.layerRenderer != null) this.layerRenderer.invalidateRendering();
		}
		, invalidateStyle: function (styleIndex) {
			switch (styleIndex) {
				case 22: case 23: case 21: case 24:
					if (this.isAbsolutelyPositioned() == true) {
						this.invalidateLayoutAndRendering();
						this.invalidateContainingBlock(styleIndex);
					} else this.invalidateRendering();
					break;
				case 40: case 37: case 34: case 38: case 36: case 35: case 43: case 42: case 45:
					this.invalidateText();
					this.invalidateLayoutAndRendering();
					this.invalidateContainingBlock(styleIndex);
					break;
				case 53: case 49:
					this.invalidateRendering();
					break;
				case 25: case 31: case 26: case 30: case 28: case 27: case 29:
					this.invalidateRendering();
					break;
				default:
					this.invalidateLayoutAndRendering();
					this.invalidateContainingBlock(styleIndex);
			}
		}
		, childInvalidated: function () {
			this.invalidate();
		}
		, positionedChildInvalidated: function () {
			this.invalidate();
		}
		, invalidateContainingBlock: function (styleIndex) {
			if (this.containingBlock == null) return;
			if (this.isPositioned() == true && this.isRelativePositioned() == false) this.containingBlock.invalidatedChildStyle(styleIndex); else this.containingBlock.invalidatedPositionedChildStyle(styleIndex);
		}
		, invalidatedStyle: function (styleIndex) {
			switch (styleIndex) {
				case 22: case 23: case 21: case 24:
					if (this.isPositioned() == true && this.isRelativePositioned() == false) {
						this.invalidateLayoutAndRendering();
						this.invalidateContainingBlock(styleIndex);
					} else this.invalidateRendering();
					break;
				case 40: case 37: case 34: case 38: case 36: case 35: case 43: case 42: case 45:
					this.invalidateText();
					this.invalidateLayoutAndRendering();
					this.invalidateContainingBlock(styleIndex);
					break;
				case 53: case 49:
					this.invalidateRendering();
					break;
				case 25: case 31: case 26: case 30: case 28: case 27: case 29:
					this.invalidateRendering();
					break;
				default:
					this.invalidateLayout();
					this.invalidateContainingBlock(styleIndex);
			}
		}
		, invalidatedChildStyle: function (styleIndex) {
			switch (styleIndex) {
				case 25: case 31: case 26: case 30: case 28: case 27: case 29:
					break;
				default:
					this._childrenNeedLayout = true;
			}
		}
		, invalidatedPositionedChildStyle: function (styleIndex) {
			switch (styleIndex) {
				case 25: case 31: case 26: case 30: case 28: case 27: case 29:
					break;
				default:
					this._positionedChildrenNeedLayout = true;
			}
		}
		, invalidateLayout: function () {
			this._needsLayout = true;
			var htmlDocument = this.domNode.ownerDocument;
			if (htmlDocument != null) htmlDocument.invalidationManager.invalidateLayout(false);
		}
		, invalidateLayoutAndRendering: function () {
			this._needsLayout = true;
			var htmlDocument = this.domNode.ownerDocument;
			htmlDocument.invalidationManager.invalidateLayout(false);
			if (this.layerRenderer != null) this.layerRenderer.invalidateRendering();
		}
		, invalidateText: function () {
			var child = this.firstChild;
			while (child != null) {
				if (child.isText == true) child.invalidate();
				child = child.nextSibling;
			}
		}
		, __class__: cocktail_core_renderer_InvalidatingElementRenderer
	});
	var cocktail_core_renderer_BoxRenderer = function (domNode, coreStyle) {
		cocktail_core_renderer_InvalidatingElementRenderer.call(this, domNode, coreStyle);
		this._containerBlockData = new cocktail_core_layout_ContainingBlockVO(0.0, false, 0.0, false);
		this._viewportData = new cocktail_core_layout_ContainingBlockVO(0.0, false, 0.0, false);
		this._backgroundAndBorderBounds = new cocktail_core_geom_RectangleVO();
	};
	$hxClasses["cocktail.core.renderer.BoxRenderer"] = cocktail_core_renderer_BoxRenderer;
	cocktail_core_renderer_BoxRenderer.__name__ = ["cocktail", "core", "renderer", "BoxRenderer"];
	cocktail_core_renderer_BoxRenderer.__super__ = cocktail_core_renderer_InvalidatingElementRenderer;
	cocktail_core_renderer_BoxRenderer.prototype = $extend(cocktail_core_renderer_InvalidatingElementRenderer.prototype, {
		updateInlineBoxes: function () {
			this.inlineBoxes = [];
			var inlineBox = new cocktail_core_linebox_EmbeddedInlineBox(this, this.getLeadedAscent(), this.getLeadedDescent());
			this.inlineBoxes.push(inlineBox);
			cocktail_core_renderer_InvalidatingElementRenderer.prototype.updateInlineBoxes.call(this);
		}
		, render: function (parentGraphicContext, clipRect, scrollOffset) {
			if (this.coreStyle.isVisible == true) {
				cocktail_core_renderer_BoxRenderer._intersectBounds.x = this.hitTestingBounds.x;
				cocktail_core_renderer_BoxRenderer._intersectBounds.y = this.hitTestingBounds.y;
				cocktail_core_renderer_BoxRenderer._intersectBounds.width = this.hitTestingBounds.width;
				cocktail_core_renderer_BoxRenderer._intersectBounds.height = this.hitTestingBounds.height;
				cocktail_core_geom_GeomUtils.intersectBounds(cocktail_core_renderer_BoxRenderer._intersectBounds, clipRect, cocktail_core_renderer_BoxRenderer._intersectBounds);
				if (cocktail_core_renderer_BoxRenderer._intersectBounds.width != 0 && cocktail_core_renderer_BoxRenderer._intersectBounds.height != 0) this.renderSelf(parentGraphicContext, clipRect, scrollOffset);
			}
			if (this.firstChild != null) this.renderChildren(parentGraphicContext, clipRect, scrollOffset);
		}
		, renderSelf: function (graphicContext, clipRect, scrollOffset) {
			if (this.coreStyle.hasBackgroundImage == true || this.coreStyle.hasBackgroundColor == true) this.renderBackground(graphicContext, clipRect, scrollOffset);
			this.renderBorder(graphicContext, clipRect, scrollOffset);
			this.renderOutline(graphicContext, clipRect, scrollOffset);
		}
		, renderBackground: function (graphicContext, clipRect, scrollOffset) {
			var backgroundBounds = this.getBackgroundAndBordersBounds(scrollOffset);
			cocktail_core_graphics_BackgroundDrawer.render(graphicContext, backgroundBounds, this.coreStyle, this, clipRect);
		}
		, renderBorder: function (graphicsContext, clipRect, scrollOffset) {
			var borderBounds = this.getBackgroundAndBordersBounds(scrollOffset);
			cocktail_core_graphics_BorderDrawer.draw(graphicsContext, borderBounds, this.coreStyle, clipRect);
		}
		, renderOutline: function (graphicsContext, clipRect, scrollOffset) {
			var outlineBounds = this.getOutlineBounds(scrollOffset);
			cocktail_core_graphics_BorderDrawer.drawOutline(graphicsContext, outlineBounds, this.coreStyle, clipRect);
		}
		, renderChildren: function (graphicContext, clipRect, scrollOffset) {
		}
		, layout: function (forceLayout, layoutState) {
			this.layoutSelfIfNeeded(forceLayout);
		}
		, layoutSelfIfNeeded: function (forceLayout) {
			if (this._needsLayout == false && forceLayout == false) return;
			var containingBlockData = this.containingBlock.getContainerBlockData();
			if (containingBlockData.isHeightAuto == true) {
				if (this.coreStyle.isAbsolutelyPositioned == false) {
					var _g = this.coreStyle.getTransitionablePropertyValue(16);
					switch (_g[1]) {
						case 2:
							var value = _g[2];
							containingBlockData.height = this.getHeightOfFirstParentWithNotAutoHeight();
							break;
						default:
					}
				}
			}
			if (this.coreStyle.isAbsolutelyPositioned == true) {
				if (this.containingBlock.isBlockContainer == true) {
					var containingBlockUsedValues = this.containingBlock.coreStyle.usedValues;
					containingBlockData.height += containingBlockUsedValues.paddingTop + containingBlockUsedValues.paddingBottom;
					containingBlockData.width += containingBlockUsedValues.paddingLeft + containingBlockUsedValues.paddingRight;
				}
			}
			if (this.coreStyle.isBlock == true) {
				if (this.childrenInline() == true) this.updateUsedTextIndent(containingBlockData.width);
			}
			this.computeBoxModelStyles(containingBlockData);
			var usedValues = this.coreStyle.usedValues;
			this.bounds.width = usedValues.width + usedValues.paddingLeft + usedValues.paddingRight + usedValues.borderLeftWidth + usedValues.borderRightWidth;
			this.bounds.height = usedValues.height + usedValues.paddingTop + usedValues.paddingBottom + usedValues.borderTopWidth + usedValues.borderBottomWidth;
			this._needsLayout = false;
		}
		, updateUsedTextIndent: function (containingBlockWidth) {
			{
				var _g = this.coreStyle.getTransitionablePropertyValue(47);
				switch (_g[1]) {
					case 18:
						var value = _g[2];
						this.coreStyle.usedValues.textIndent = value;
						break;
					case 2:
						var value1 = _g[2];
						this.coreStyle.usedValues.textIndent = containingBlockWidth * (value1 * 0.01);
						break;
					default:
				}
			}
		}
		, getHeightOfFirstParentWithNotAutoHeight: function () {
			var parent = this.parentNode;
			while (parent != null) {
				if (parent.getContainerBlockData().isHeightAuto == false) return parent.coreStyle.usedValues.height;
				parent = parent.parentNode;
			}
			return 0;
		}
		, computeBoxModelStyles: function (containingBlockDimensions) {
			var htmlDocument = this.domNode.ownerDocument;
			var boxComputer = htmlDocument.layoutManager.getBoxStylesComputer(this);
			boxComputer.measure(this.coreStyle, containingBlockDimensions);
		}
		, getCollapsedTopMargin: function (onlyIfFirstAdjoiningMargin) {
			return this.doGetCollapsedMargin(true, onlyIfFirstAdjoiningMargin);
		}
		, getCollapsedBottomMargin: function (onlyIfFirstAdjoiningMargin) {
			return this.doGetCollapsedMargin(false, onlyIfFirstAdjoiningMargin);
		}
		, doGetCollapsedMargin: function (isTopMargin, onlyIfFirstAdjoiningMargin) {
			this.layoutSelfIfNeeded(false);
			var previousAdjoiningMargins = [];
			this.getPreviousAdjoiningMargins(previousAdjoiningMargins, isTopMargin, true);
			var nextAdjoiningMargins = [];
			this.getNextAdjoiningMargins(nextAdjoiningMargins, isTopMargin, true);
			if (nextAdjoiningMargins.length == 0 && previousAdjoiningMargins.length == 0) {
				if (isTopMargin == true) return this.coreStyle.usedValues.marginTop; else return this.coreStyle.usedValues.marginBottom;
			} else if (onlyIfFirstAdjoiningMargin == false || previousAdjoiningMargins.length == 0) {
				var adjoiningMargins = nextAdjoiningMargins.concat(previousAdjoiningMargins);
				if (isTopMargin == true) adjoiningMargins.push(this.coreStyle.usedValues.marginTop); else adjoiningMargins.push(this.coreStyle.usedValues.marginBottom);
				return this.getCollapsedMargin(adjoiningMargins);
			} else return 0;
		}
		, getNextAdjoiningMargins: function (adjoiningMargins, startWithTopMargin, isFirst) {
			this.layoutSelfIfNeeded(false);
			if (startWithTopMargin == true) {
				if (this.collapseTopMarginWithFirstChildTopMargin() == true) {
					if (isFirst == false) adjoiningMargins.push(this.coreStyle.usedValues.marginTop);
					this.get_firstNormalFlowChild().getNextAdjoiningMargins(adjoiningMargins, true, false);
				} else if (this.collapseTopMarginWithBottomMargin() == true) {
					if (isFirst == false) adjoiningMargins.push(this.coreStyle.usedValues.marginTop);
					this.getNextAdjoiningMargins(adjoiningMargins, false, false);
				} else if (this.collapseTopMarginWithParentTopMargin() == true) {
					if (isFirst == false) adjoiningMargins.push(this.coreStyle.usedValues.marginTop);
				} else if (this.collapseTopMarginWithPreviousSiblingBottomMargin() == true) {
					if (isFirst == false) adjoiningMargins.push(this.coreStyle.usedValues.marginTop);
				}
			} else if (this.collapseBottomMarginWithNextSiblingTopMargin() == true) {
				if (isFirst == false) adjoiningMargins.push(this.coreStyle.usedValues.marginBottom);
				this.get_nextNormalFlowSibling().getNextAdjoiningMargins(adjoiningMargins, true, false);
			} else if (this.collapseBottomMarginWithParentBottomMargin() == true) {
				if (isFirst == false) adjoiningMargins.push(this.coreStyle.usedValues.marginBottom);
				this.parentNode.getNextAdjoiningMargins(adjoiningMargins, false, false);
			} else if (this.collapseBottomMarginWithLastChildBottomMargin() == true) {
				if (isFirst == false) adjoiningMargins.push(this.coreStyle.usedValues.marginBottom);
			} else if (this.collapseTopMarginWithBottomMargin() == true) {
				if (isFirst == false) adjoiningMargins.push(this.coreStyle.usedValues.marginBottom);
			}
		}
		, getPreviousAdjoiningMargins: function (adjoiningMargins, startWithTopMargin, isFirst) {
			this.layoutSelfIfNeeded(false);
			if (startWithTopMargin == true) {
				if (this.collapseTopMarginWithPreviousSiblingBottomMargin() == true) {
					if (isFirst == false) adjoiningMargins.push(this.coreStyle.usedValues.marginTop);
					this.get_previousNormalFlowSibling().getPreviousAdjoiningMargins(adjoiningMargins, false, false);
				} else if (this.collapseTopMarginWithParentTopMargin() == true) {
					if (isFirst == false) adjoiningMargins.push(this.coreStyle.usedValues.marginTop);
					this.parentNode.getPreviousAdjoiningMargins(adjoiningMargins, true, false);
				} else if (this.collapseTopMarginWithBottomMargin() == true) {
					if (isFirst == false) adjoiningMargins.push(this.coreStyle.usedValues.marginTop);
				} else if (this.collapseTopMarginWithFirstChildTopMargin() == true) {
					if (isFirst == false) adjoiningMargins.push(this.coreStyle.usedValues.marginTop);
				}
			} else if (this.collapseBottomMarginWithLastChildBottomMargin() == true) {
				if (isFirst == false) adjoiningMargins.push(this.coreStyle.usedValues.marginBottom);
				this.get_lastNormalFlowChild().getPreviousAdjoiningMargins(adjoiningMargins, false, false);
			} else if (this.collapseTopMarginWithBottomMargin() == true) {
				if (isFirst == false) adjoiningMargins.push(this.coreStyle.usedValues.marginBottom);
				this.getPreviousAdjoiningMargins(adjoiningMargins, true, false);
			} else if (this.collapseBottomMarginWithParentBottomMargin() == true) {
				if (isFirst == false) adjoiningMargins.push(this.coreStyle.usedValues.marginBottom);
			} else if (this.collapseBottomMarginWithNextSiblingTopMargin() == true) {
				if (isFirst == false) adjoiningMargins.push(this.coreStyle.usedValues.marginBottom);
			}
		}
		, getCollapsedMargin: function (adjoiningMargins) {
			var maximumPositiveMargin = 0.0;
			var maximumNegativeMargin = 0.0;
			var length = adjoiningMargins.length;
			var _g = 0;
			while (_g < length) {
				var i = _g++;
				var adjoiningMargin = adjoiningMargins[i];
				if (adjoiningMargin > maximumPositiveMargin) maximumPositiveMargin = adjoiningMargin; else if (adjoiningMargin < maximumNegativeMargin) maximumNegativeMargin = adjoiningMargin;
			}
			return maximumPositiveMargin - Math.abs(maximumNegativeMargin);
		}
		, collapseTopMarginWithParentTopMargin: function () {
			if (this.parentNode == null) return false;
			if (this.get_previousNormalFlowSibling() != null) return false;
			if (this.parentNode.establishesNewBlockFormattingContext() == true) return false;
			if (this.parentNode.coreStyle.usedValues.paddingTop != 0) return false;
			if (this.parentNode.coreStyle.usedValues.borderTopWidth != 0) return false;
			return true;
		}
		, collapseBottomMarginWithParentBottomMargin: function () {
			if (this.parentNode == null) return false;
			if (this.get_nextNormalFlowSibling() != null) return false;
			if (this.parentNode.establishesNewBlockFormattingContext() == true) return false;
			if (this.parentNode.coreStyle.usedValues.paddingBottom != 0) return false;
			if (this.parentNode.coreStyle.usedValues.borderBottomWidth != 0) return false;
			return true;
		}
		, collapseTopMarginWithPreviousSiblingBottomMargin: function () {
			if (this.get_previousNormalFlowSibling() == null) return false;
			return true;
		}
		, collapseBottomMarginWithNextSiblingTopMargin: function () {
			if (this.get_nextNormalFlowSibling() == null) return false;
			return true;
		}
		, collapseTopMarginWithFirstChildTopMargin: function () {
			return false;
		}
		, collapseTopMarginWithBottomMargin: function () {
			if (this.get_firstNormalFlowChild() != null) {
				if (this.hasZeroHeightChildren() == false) return false;
			}
			if (this.coreStyle.usedValues.paddingTop != 0 || this.coreStyle.usedValues.paddingBottom != 0) return false;
			if (this.coreStyle.usedValues.borderTopWidth != 0 || this.coreStyle.usedValues.borderBottomWidth != 0) return false;
			if (this.bounds.height != 0) return false;
			if (this.establishesNewBlockFormattingContext() == true) return false;
			return true;
		}
		, hasZeroHeightChildren: function () {
			return false;
		}
		, isFloat: function () {
			return this.coreStyle.isFloat;
		}
		, canHaveClearance: function () {
			return this.coreStyle.canHaveClearance;
		}
		, isPositioned: function () {
			return this.coreStyle.isPositioned;
		}
		, isAbsolutelyPositioned: function () {
			return this.coreStyle.isAbsolutelyPositioned;
		}
		, isRelativePositioned: function () {
			return this.coreStyle.isRelativePositioned;
		}
		, isInlineLevel: function () {
			return this.coreStyle.isInlineLevel;
		}
		, createOwnLayer: function () {
			if (this.coreStyle.isPositioned == true) return true; else if (this.coreStyle.isTransparent == true) return true; else if (this.coreStyle.isTransformed == true) return true;
			return false;
		}
		, isTransformed: function () {
			return this.coreStyle.isTransformed;
		}
		, hasCSSTransform: function () {
			return this.coreStyle.hasCSSTransform;
		}
		, isVisible: function () {
			return this.coreStyle.isVisible;
		}
		, isTransparent: function () {
			return this.coreStyle.isTransparent;
		}
		, getBackgroundAndBordersBounds: function (scrollOffset) {
			this._backgroundAndBorderBounds.x = this.globalBounds.x - scrollOffset.x;
			this._backgroundAndBorderBounds.y = this.globalBounds.y - scrollOffset.y;
			this._backgroundAndBorderBounds.width = this.globalBounds.width;
			this._backgroundAndBorderBounds.height = this.globalBounds.height;
			return this._backgroundAndBorderBounds;
		}
		, getOutlineBounds: function (scrollOffset) {
			var outlineBounds = this.getBackgroundAndBordersBounds(scrollOffset);
			outlineBounds.x -= this.coreStyle.usedValues.outlineWidth;
			outlineBounds.y -= this.coreStyle.usedValues.outlineWidth;
			outlineBounds.width += this.coreStyle.usedValues.outlineWidth * 2;
			outlineBounds.height += this.coreStyle.usedValues.outlineWidth * 2;
			return outlineBounds;
		}
		, getContainerBlockData: function () {
			this._containerBlockData.width = this.coreStyle.usedValues.width;
			this._containerBlockData.isWidthAuto = this.coreStyle.hasAutoWidth;
			this._containerBlockData.height = this.coreStyle.usedValues.height;
			this._containerBlockData.isHeightAuto = this.coreStyle.hasAutoHeight;
			return this._containerBlockData;
		}
		, getViewportData: function () {
			var htmlDocument = this.domNode.ownerDocument;
			var width = htmlDocument.getViewportWidth();
			var height = htmlDocument.getViewportHeight();
			this._viewportData.width = width;
			this._viewportData.height = height;
			this._viewportData.isHeightAuto = false;
			this._viewportData.isWidthAuto = false;
			return this._viewportData;
		}
		, __class__: cocktail_core_renderer_BoxRenderer
	});
	var cocktail_core_renderer_FlowBoxRenderer = function (domNode, coreStyle) {
		cocktail_core_renderer_BoxRenderer.call(this, domNode, coreStyle);
		this._absolutelyPositionedChildren = [];
		this._childStaticOrigin = new cocktail_core_geom_PointVO(0, 0);
	};
	$hxClasses["cocktail.core.renderer.FlowBoxRenderer"] = cocktail_core_renderer_FlowBoxRenderer;
	cocktail_core_renderer_FlowBoxRenderer.__name__ = ["cocktail", "core", "renderer", "FlowBoxRenderer"];
	cocktail_core_renderer_FlowBoxRenderer.__super__ = cocktail_core_renderer_BoxRenderer;
	cocktail_core_renderer_FlowBoxRenderer.prototype = $extend(cocktail_core_renderer_BoxRenderer.prototype, {
		renderInlineChildren: function (rootRenderer, referenceLayer, graphicContext, clipRect, scrollOffset) {
			var child = rootRenderer.firstChild;
			while (child != null) {
				if (child.layerRenderer == referenceLayer) {
					if (child.coreStyle.isFloat == false) {
						child.render(graphicContext, clipRect, scrollOffset);
						if (child.firstChild != null && child.establishesNewBlockFormattingContext() == false) this.renderInlineChildren(child, referenceLayer, graphicContext, clipRect, scrollOffset);
					}
				}
				child = child.nextSibling;
			}
		}
		, addAbsolutelyPositionedChildren: function (element) {
			this._absolutelyPositionedChildren.push(element);
		}
		, removeAbsolutelyPositionedChild: function (element) {
			HxOverrides.remove(this._absolutelyPositionedChildren, element);
		}
		, layout: function (forceLayout, layoutState) {
			cocktail_core_renderer_BoxRenderer.prototype.layout.call(this, forceLayout, layoutState);
			if (this.firstChild != null) this.layoutChildren(layoutState);
			if (this.isPositioned() == true) {
				if (this._absolutelyPositionedChildren.length > 0) this.layoutAbsolutelyPositionedChildren(layoutState);
			}
		}
		, layoutChildren: function (layoutState) {
		}
		, layoutAbsolutelyPositionedChildren: function (layoutState) {
			var containerBlockData = this.getContainerBlockData();
			var viewportData = this.getViewportData();
			var length = this._absolutelyPositionedChildren.length;
			var _g = 0;
			while (_g < length) {
				var i = _g++;
				this._absolutelyPositionedChildren[i].layout(true, layoutState);
				this.layoutPositionedChild(this._absolutelyPositionedChildren[i], containerBlockData, viewportData);
			}
		}
		, layoutPositionedChild: function (elementRenderer, firstPositionedAncestorData, viewportData) {
			var coreStyle = elementRenderer.coreStyle;
			if (coreStyle.isFixedPositioned == true) this.doLayoutPositionedChild(elementRenderer, viewportData, false); else this.doLayoutPositionedChild(elementRenderer, firstPositionedAncestorData, true);
		}
		, doLayoutPositionedChild: function (elementRenderer, containingBlockData, isAbsolutelyPositioned) {
			var elementCoreStyle = elementRenderer.coreStyle;
			if (elementCoreStyle.hasAutoLeft == false) elementRenderer.bounds.x = this.getLeftOffset(elementRenderer, isAbsolutelyPositioned); else if (elementCoreStyle.hasAutoRight == false) elementRenderer.bounds.x = this.getRightOffset(elementRenderer, containingBlockData.width, isAbsolutelyPositioned); else elementRenderer.staticOrigin.x = this.getStaticPosition(elementRenderer).x;
			if (elementCoreStyle.hasAutoTop == false) elementRenderer.bounds.y = this.getTopOffset(elementRenderer, isAbsolutelyPositioned); else if (elementCoreStyle.hasAutoBottom == false) elementRenderer.bounds.y = this.getBottomOffset(elementRenderer, containingBlockData.height, isAbsolutelyPositioned); else elementRenderer.staticOrigin.y = this.getStaticPosition(elementRenderer).y;
		}
		, getLeftOffset: function (elementRenderer, isAbsolutelyPositioned) {
			var usedValues = elementRenderer.coreStyle.usedValues;
			var leftOffset = usedValues.left + usedValues.marginLeft;
			if (isAbsolutelyPositioned == true) leftOffset -= this.coreStyle.usedValues.paddingLeft - this.coreStyle.usedValues.borderLeftWidth;
			return leftOffset;
		}
		, getRightOffset: function (elementRenderer, containingHTMLElementWidth, isAbsolutelyPositioned) {
			var usedValues = elementRenderer.coreStyle.usedValues;
			var rightOffset = containingHTMLElementWidth - usedValues.width - usedValues.paddingLeft - usedValues.paddingRight - usedValues.borderLeftWidth - usedValues.borderRightWidth - usedValues.right - usedValues.marginRight;
			if (isAbsolutelyPositioned == true) rightOffset += this.coreStyle.usedValues.paddingRight + this.coreStyle.usedValues.borderRightWidth;
			return rightOffset;
		}
		, getTopOffset: function (elementRenderer, isAbsolutelyPositioned) {
			var usedValues = elementRenderer.coreStyle.usedValues;
			var topOffset = usedValues.top + usedValues.marginTop;
			if (isAbsolutelyPositioned == true) topOffset -= this.coreStyle.usedValues.paddingTop - this.coreStyle.usedValues.borderTopWidth;
			return topOffset;
		}
		, getBottomOffset: function (elementRenderer, containingHTMLElementHeight, isAbsolutelyPositioned) {
			var usedValues = elementRenderer.coreStyle.usedValues;
			var bottomOffset = containingHTMLElementHeight - usedValues.height - usedValues.paddingTop - usedValues.paddingBottom - usedValues.bottom - usedValues.marginBottom;
			if (isAbsolutelyPositioned == true) bottomOffset += this.coreStyle.usedValues.paddingBottom + this.coreStyle.usedValues.borderBottomWidth;
			return bottomOffset;
		}
		, getStaticPosition: function (elementRenderer) {
			var staticContainingBlock = elementRenderer.parentNode;
			while (staticContainingBlock != null) {
				if (staticContainingBlock.isBlockContainer == true) break;
				staticContainingBlock = staticContainingBlock.parentNode;
			}
			if (staticContainingBlock.childrenInline() == false) {
				var previousNormalFlowSibling = elementRenderer.get_previousNormalFlowSibling();
				if (previousNormalFlowSibling == null) {
					this._childStaticOrigin.x = elementRenderer.coreStyle.usedValues.marginLeft;
					this._childStaticOrigin.y = elementRenderer.coreStyle.usedValues.marginTop;
				} else {
					this._childStaticOrigin.x = elementRenderer.coreStyle.usedValues.marginLeft;
					this._childStaticOrigin.y = previousNormalFlowSibling.bounds.y + previousNormalFlowSibling.bounds.height + previousNormalFlowSibling.coreStyle.usedValues.marginBottom;
					this._childStaticOrigin.y += elementRenderer.coreStyle.usedValues.marginTop;
				}
			} else {
				var previousNormalFlowSibling1 = elementRenderer.get_previousNormalFlowSibling();
				if (previousNormalFlowSibling1 == null) {
					var parent = elementRenderer.parentNode;
					if (parent.isBlockContainer == true) {
						this._childStaticOrigin.x = elementRenderer.coreStyle.usedValues.marginLeft;
						this._childStaticOrigin.y = elementRenderer.coreStyle.usedValues.marginTop;
					} else {
						var lastInlineBox = parent.inlineBoxes[parent.inlineBoxes.length - 1];
						this._childStaticOrigin = this.getPositionAfterInlineBox(lastInlineBox, elementRenderer, this._childStaticOrigin);
					}
				} else {
					var lastInlineBox1 = previousNormalFlowSibling1.inlineBoxes[previousNormalFlowSibling1.inlineBoxes.length - 1];
					this._childStaticOrigin = this.getPositionAfterInlineBox(lastInlineBox1, elementRenderer, this._childStaticOrigin);
				}
			}
			return this._childStaticOrigin;
		}
		, getPositionAfterInlineBox: function (inlineBox, elementRenderer, staticOrigin) {
			if (inlineBox.lineBox == null) {
				staticOrigin.x = elementRenderer.coreStyle.usedValues.marginLeft;
				staticOrigin.y = elementRenderer.coreStyle.usedValues.marginTop;
			} else {
				staticOrigin.x = inlineBox.bounds.x + inlineBox.lineBox.bounds.x + inlineBox.bounds.width + inlineBox.marginLeft + inlineBox.marginRight;
				staticOrigin.x += elementRenderer.coreStyle.usedValues.marginLeft;
				staticOrigin.y = inlineBox.bounds.y + inlineBox.lineBox.bounds.y;
				staticOrigin.y += elementRenderer.coreStyle.usedValues.marginTop;
			}
			return staticOrigin;
		}
		, __class__: cocktail_core_renderer_FlowBoxRenderer
	});
	var cocktail_core_renderer_BlockBoxRenderer = function (domNode, coreStyle) {
		cocktail_core_renderer_FlowBoxRenderer.call(this, domNode, coreStyle);
		this._lineBoxPosition = new cocktail_core_geom_PointVO(0, 0);
		this._childPosition = new cocktail_core_geom_PointVO(0, 0);
		this.lineBoxes = [];
		this.floatsManager = new cocktail_core_floats_FloatsManager();
		this._inlineBoxContainingBlockBounds = new cocktail_core_geom_RectangleVO();
		this._blockFormattingBounds = new cocktail_core_geom_RectangleVO();
		this._floatedElementsBounds = new cocktail_core_geom_RectangleVO();
		this._childBlockFormattingBounds = new cocktail_core_geom_RectangleVO();
		this._offsetFromBlockFormattingRoot = new cocktail_core_geom_PointVO(0, 0);
		this.isBlockContainer = true;
	};
	$hxClasses["cocktail.core.renderer.BlockBoxRenderer"] = cocktail_core_renderer_BlockBoxRenderer;
	cocktail_core_renderer_BlockBoxRenderer.__name__ = ["cocktail", "core", "renderer", "BlockBoxRenderer"];
	cocktail_core_renderer_BlockBoxRenderer.__super__ = cocktail_core_renderer_FlowBoxRenderer;
	cocktail_core_renderer_BlockBoxRenderer.prototype = $extend(cocktail_core_renderer_FlowBoxRenderer.prototype, {
		updateAnonymousBlock: function () {
			var shouldMakeChildrenNonInline = false;
			if (this.get_firstNormalFlowChild() != null) {
				var childrenInline = this.childrenInline();
				var child1 = this.firstChild;
				while (child1 != null) {
					if (child1.isAbsolutelyPositioned() == false) {
						if (child1.isFloat() == false) {
							if (child1.isAnonymousBlockBox() == false) {
								if (child1.isInlineLevel() != childrenInline) {
									shouldMakeChildrenNonInline = true;
									break;
								}
							}
						}
					}
					child1 = child1.nextSibling;
				}
			}
			if (shouldMakeChildrenNonInline == true) this.makeChildrenNonInline();
			var child = this.firstChild;
			while (child != null) {
				child.updateAnonymousBlock();
				child = child.nextSibling;
			}
		}
		, makeChildrenNonInline: function () {
			var newChildNodes = [];
			var lastCreatedAnonymousBlock = null;
			var child = this.lastChild;
			while (child != null) {
				var previousSibling = child.previousSibling;
				if (child.isInlineLevel() == true) {
					if (lastCreatedAnonymousBlock != null) lastCreatedAnonymousBlock.insertBefore(child, lastCreatedAnonymousBlock.firstChild); else {
						lastCreatedAnonymousBlock = this.createAnonymousBlock(child);
						newChildNodes.push(lastCreatedAnonymousBlock);
					}
				} else {
					lastCreatedAnonymousBlock = null;
					newChildNodes.push(child);
				}
				child = previousSibling;
			}
			newChildNodes.reverse();
			var length = newChildNodes.length;
			var _g = 0;
			while (_g < length) {
				var i = _g++;
				this.appendChild(newChildNodes[i]);
			}
		}
		, createAnonymousBlock: function (child) {
			var anonymousBlock = new cocktail_core_renderer_AnonymousBlockBoxRenderer(this.domNode.ownerDocument);
			anonymousBlock.appendChild(child);
			var htmlElement = anonymousBlock.domNode;
			anonymousBlock.coreStyle = htmlElement.coreStyle;
			var initialStyleDeclaration = cocktail_core_css_InitialStyleDeclaration.getInstance();
			anonymousBlock.coreStyle.specifiedValues = initialStyleDeclaration;
			anonymousBlock.coreStyle.computedValues = initialStyleDeclaration.initialComputedStyleDeclaration;
			anonymousBlock.coreStyle.applyHiddenBordersWidth();
			anonymousBlock.coreStyle.applyNoneOutlineWidth();
			var htmlDocument = this.domNode.ownerDocument;
			anonymousBlock.coreStyle.updateCoreStyleAttribute(htmlDocument.cascadeManager, true);
			anonymousBlock.coreStyle.setUsedLineHeight();
			return anonymousBlock;
		}
		, renderChildren: function (graphicContext, clipRect, scrollOffset) {
			cocktail_core_renderer_FlowBoxRenderer.prototype.renderChildren.call(this, graphicContext, clipRect, scrollOffset);
			if (this.createOwnLayer() == true || this.coreStyle.isInlineBlock == true || this.coreStyle.isFloat == true) {
				if (this.lineBoxes.length == 0) {
					this.renderBlockContainerChildren(this, this.layerRenderer, graphicContext, clipRect, scrollOffset);
					this.renderBlockReplacedChildren(this, this.layerRenderer, graphicContext, clipRect, scrollOffset);
				}
				this.renderFloatedChildren(this, this.layerRenderer, graphicContext, clipRect, scrollOffset);
				this.renderLineBoxes(this, this.layerRenderer, graphicContext, clipRect, scrollOffset);
			}
		}
		, renderLineBoxes: function (rootRenderer, referenceLayer, graphicContext, clipRect, scrollOffset) {
			var canHaveLineBoxes = false;
			if (rootRenderer.isBlockContainer == true) {
				if (rootRenderer.hasLineBoxes == true) canHaveLineBoxes = true;
			}
			if (canHaveLineBoxes == true) this.renderInlineChildren(rootRenderer, referenceLayer, graphicContext, clipRect, scrollOffset); else {
				var child = rootRenderer.firstChild;
				while (child != null) {
					if (child.layerRenderer == referenceLayer) {
						if (child.isReplaced == false) {
							if (child.coreStyle.isFloat == false) this.renderLineBoxes(child, referenceLayer, graphicContext, clipRect, scrollOffset);
						}
					}
					child = child.nextSibling;
				}
			}
		}
		, renderBlockReplacedChildren: function (rootRenderer, referenceLayer, graphicContext, clipRect, scrollOffset) {
			var child = rootRenderer.firstChild;
			while (child != null) {
				if (child.layerRenderer == referenceLayer) {
					if (child.coreStyle.isFloat == false) {
						if (child.isReplaced == false && child.coreStyle.isBlock == true) this.renderBlockReplacedChildren(child, referenceLayer, graphicContext, clipRect, scrollOffset); else if (child.coreStyle.isBlock == true) child.render(graphicContext, clipRect, scrollOffset);
					}
				}
				child = child.nextSibling;
			}
		}
		, renderBlockContainerChildren: function (rootElementRenderer, referenceLayer, graphicContext, clipRect, scrollOffset) {
			var child = rootElementRenderer.firstChild;
			while (child != null) {
				if (child.layerRenderer == referenceLayer) {
					if (child.coreStyle.isInlineLevel == false) {
						if (child.isReplaced == false && child.isText == false) {
							if (child.coreStyle.isFloat == false) {
								child.render(graphicContext, clipRect, scrollOffset);
								this.renderBlockContainerChildren(child, referenceLayer, graphicContext, clipRect, scrollOffset);
							}
						}
					}
				}
				child = child.nextSibling;
			}
		}
		, renderFloatedChildren: function (rootElementRenderer, referenceLayer, graphicContext, clipRect, scrollOffset) {
			var child = rootElementRenderer.firstChild;
			while (child != null) {
				if (child.layerRenderer == referenceLayer) {
					if (child.coreStyle.isFloat == true) child.render(graphicContext, clipRect, scrollOffset); else this.renderFloatedChildren(child, referenceLayer, graphicContext, clipRect, scrollOffset);
				}
				child = child.nextSibling;
			}
		}
		, layoutChildren: function (layoutState) {
			this.updateFloatedAndClearElements();
			this.doLayoutChildren(layoutState);
			if (this.establishesNewBlockFormattingContext() == true) {
				if (this.establishesNewBlockFormattingContextOnlyBecauseOfOverflow() == false) this.applyShrinkToFitIfNeeded(layoutState);
			}
			this.applyContentHeightIfNeeded();
		}
		, doLayoutChildren: function (layoutState) {
			if (this.childrenInline() == false) this.layoutBlockChildrenAndFloats(layoutState); else {
				this.layoutInlineChildrenAndFloats(layoutState);
				this.updateInlineChildrenBounds(this);
			}
		}
		, updateFloatedAndClearElements: function () {
			if (this.establishesNewBlockFormattingContext() == true) {
				this.floatsManager.init();
				this._offsetFromBlockFormattingRoot.x = 0;
				this._offsetFromBlockFormattingRoot.y = 0;
			} else {
				var blockFormattingContextRoot = this.getNearestBlockFormattingContextRoot();
				this._offsetFromBlockFormattingRoot = this.getBlockBoxesOffset(this, blockFormattingContextRoot);
				this._offsetFromBlockFormattingRoot.x += this.coreStyle.usedValues.paddingLeft + this.coreStyle.usedValues.borderLeftWidth;
				this._offsetFromBlockFormattingRoot.y += this.coreStyle.usedValues.paddingTop + this.coreStyle.usedValues.borderTopWidth;
				this.floatsManager.floats = blockFormattingContextRoot.floatsManager.floats;
				this.floatsManager.childrenWithClearance = blockFormattingContextRoot.floatsManager.childrenWithClearance;
			}
		}
		, applyShrinkToFitIfNeeded: function (layoutState) {
			if ((this.coreStyle.hasAutoWidth == true || layoutState != cocktail_core_layout_LayoutStateValue.NORMAL) && this.isAutoWidthAbsolutelyPositionedWithNotAutoLeftAndRight() == false) {
				this.doLayoutChildren(cocktail_core_layout_LayoutStateValue.SHRINK_TO_FIT_PREFERED_MINIMUM_WIDTH);
				this.getBlockFormattingBounds();
				var preferedMinimumWidth = this._blockFormattingBounds.width;
				if (this.coreStyle.hasAutoWidth == false) {
					if (this.bounds.width > preferedMinimumWidth) preferedMinimumWidth = this.bounds.width;
				}
				this.doLayoutChildren(cocktail_core_layout_LayoutStateValue.SHRINK_TO_FIT_PREFERED_WIDTH);
				this.getBlockFormattingBounds();
				var preferedWidth = this._blockFormattingBounds.width;
				if (this.coreStyle.hasAutoWidth == false) {
					if (this.bounds.width > preferedWidth) preferedWidth = this.bounds.width;
				}
				var availableWidth = this.containingBlock.coreStyle.usedValues.width;
				var shrinkToFitWidth = Math.min(Math.max(preferedMinimumWidth, availableWidth), preferedWidth);
				if (this.coreStyle.hasMaxWidth == true) {
					if (shrinkToFitWidth > this.coreStyle.usedValues.maxWidth) shrinkToFitWidth = this.coreStyle.usedValues.maxWidth;
				}
				if (shrinkToFitWidth < this.coreStyle.usedValues.minWidth) shrinkToFitWidth = this.coreStyle.usedValues.minWidth;
				this.coreStyle.usedValues.width = shrinkToFitWidth;
				this.bounds.width = shrinkToFitWidth + this.coreStyle.usedValues.paddingLeft + this.coreStyle.usedValues.paddingRight + this.coreStyle.usedValues.borderLeftWidth + this.coreStyle.usedValues.borderRightWidth;
				this.doLayoutChildren(cocktail_core_layout_LayoutStateValue.NORMAL);
			}
		}
		, getBlockFormattingBounds: function () {
			this._blockFormattingBounds.x = 50000;
			this._blockFormattingBounds.y = 50000;
			this._blockFormattingBounds.width = 0;
			this._blockFormattingBounds.height = 0;
			this.doGetBlockFormattingBounds(this, this._blockFormattingBounds, 0, 0);
		}
		, doGetBlockFormattingBounds: function (rootElementRenderer, blockFormattingBounds, xOffset, yOffset) {
			var child = rootElementRenderer.firstChild;
			while (child != null) {
				if (child.isFloat() == false) {
					if (child.isAbsolutelyPositioned() == false) {
						this._childBlockFormattingBounds.x = child.bounds.x + xOffset;
						this._childBlockFormattingBounds.y = child.bounds.y + yOffset;
						this._childBlockFormattingBounds.width = child.bounds.width;
						this._childBlockFormattingBounds.height = child.bounds.height;
						if (child.isText == false) {
							this._childBlockFormattingBounds.x -= child.coreStyle.usedValues.marginLeft;
							this._childBlockFormattingBounds.y -= child.coreStyle.usedValues.marginTop;
							this._childBlockFormattingBounds.width += child.coreStyle.usedValues.marginRight + child.coreStyle.usedValues.marginLeft;
							this._childBlockFormattingBounds.height += child.coreStyle.usedValues.marginBottom + child.coreStyle.usedValues.marginTop;
						}
						if (child.isText == false || child.parentNode.isBlockContainer == true) cocktail_core_geom_GeomUtils.addBounds(this._childBlockFormattingBounds, blockFormattingBounds, null, null);
						if (child.establishesNewBlockFormattingContext() == false && child.firstChild != null) this.doGetBlockFormattingBounds(child, blockFormattingBounds, xOffset + child.bounds.x, yOffset + child.bounds.y);
					}
				}
				child = child.nextSibling;
			}
		}
		, getFloatedElementsBounds: function () {
			this._floatedElementsBounds.x = 50000;
			this._floatedElementsBounds.y = 50000;
			this._floatedElementsBounds.width = 0;
			this._floatedElementsBounds.height = 0;
			if (this.floatsManager.floats.left.length == 0 && this.floatsManager.floats.right.length == 0) {
				this._floatedElementsBounds.x = 0;
				this._floatedElementsBounds.y = 0;
				return;
			}
			this.doGetFloatedElementsBounds(this.floatsManager.floats.left, this._floatedElementsBounds);
			this.doGetFloatedElementsBounds(this.floatsManager.floats.right, this._floatedElementsBounds);
		}
		, doGetFloatedElementsBounds: function (floats, floatedElementsBounds) {
			var _g1 = 0;
			var _g = floats.length;
			while (_g1 < _g) {
				var i = _g1++;
				cocktail_core_geom_GeomUtils.addBounds(floats[i].bounds, floatedElementsBounds, null, null);
			}
		}
		, applyContentHeightIfNeeded: function () {
			if (this.coreStyle.hasAutoHeight == true && this.isAutoHeightAbsolutelyPositionedWithNotAutoTopAndBottom() == false) {
				var childrenHeight = 0;
				if (this.childrenInline() == false) {
					childrenHeight = this._childPosition.y;
					if (this.collapseBottomMarginWithLastChildBottomMargin() == true) childrenHeight -= this.getCollapsedBottomMargin(false);
				} else childrenHeight = this._lineBoxPosition.y;
				if (this.establishesNewBlockFormattingContext() == true) {
					this.getFloatedElementsBounds();
					if (this._floatedElementsBounds.y + this._floatedElementsBounds.height > childrenHeight) childrenHeight = this._floatedElementsBounds.y + this._floatedElementsBounds.height;
				}
				if (this.coreStyle.hasMaxHeight == true) {
					if (childrenHeight > this.coreStyle.usedValues.maxHeight) childrenHeight = this.coreStyle.usedValues.maxHeight;
				}
				if (childrenHeight < this.coreStyle.usedValues.minHeight) childrenHeight = this.coreStyle.usedValues.minHeight;
				this.coreStyle.usedValues.height = childrenHeight;
				this.bounds.height = childrenHeight + this.coreStyle.usedValues.paddingTop + this.coreStyle.usedValues.paddingBottom + this.coreStyle.usedValues.borderTopWidth + this.coreStyle.usedValues.borderBottomWidth;
			}
		}
		, isAutoHeightAbsolutelyPositionedWithNotAutoTopAndBottom: function () {
			if (this.isPositioned() == true && this.isRelativePositioned() == false) return this.coreStyle.hasAutoTop == false && this.coreStyle.hasAutoBottom == false;
			return false;
		}
		, isAutoWidthAbsolutelyPositionedWithNotAutoLeftAndRight: function () {
			if (this.isPositioned() == true && this.isRelativePositioned() == false) return this.coreStyle.hasAutoLeft == false && this.coreStyle.hasAutoRight == false;
			return false;
		}
		, layoutBlockChildrenAndFloats: function (layoutState) {
			this._childPosition.x = 0;
			this._childPosition.y = 0;
			var child = this.firstChild;
			while (child != null) {
				if (child.isPositioned() == false || child.isRelativePositioned() == true) {
					var childHasClearance = false;
					if (child.canHaveClearance() == true) {
						var hypotheticalChildYPosition = this._childPosition.y + child.getCollapsedTopMargin(true);
						if (this.floatsManager.hasClearance(child, hypotheticalChildYPosition + this._offsetFromBlockFormattingRoot.y) == true) {
							this.registerClearElement(child);
							var clearance = this.floatsManager.getClearance(child, hypotheticalChildYPosition + this._offsetFromBlockFormattingRoot.y);
							this._childPosition.y += clearance;
							childHasClearance = true;
						}
					}
					if (child.isFloat() == false) {
						if (child.establishesNewBlockFormattingContext() == false && child.isBlockContainer == true) {
							if (childHasClearance == false) this._childPosition.y += child.getCollapsedTopMargin(true);
							child.bounds.x = child.coreStyle.usedValues.marginLeft;
							child.bounds.y = this._childPosition.y;
							child.layout(true, layoutState);
						} else {
							child.layout(true, layoutState);
							var childMarginWidth = child.bounds.width + child.coreStyle.usedValues.marginLeft + child.coreStyle.usedValues.marginRight;
							var childMarginHeight = child.bounds.height + child.getCollapsedTopMargin(true) + child.getCollapsedBottomMargin(true);
							var contentWidth = this.bounds.width - this.coreStyle.usedValues.paddingLeft - this.coreStyle.usedValues.paddingRight - this.coreStyle.usedValues.borderLeftWidth - this.coreStyle.usedValues.borderRightWidth;
							var firstYPosition = this._childPosition.y;
							if (this.floatsManager.get_hasFloats() == true) {
								firstYPosition = this.floatsManager.getFirstAvailableYPosition(this._childPosition.y + this._offsetFromBlockFormattingRoot.y, childMarginHeight, childMarginWidth, contentWidth, this._offsetFromBlockFormattingRoot.x);
								this._childPosition.y = firstYPosition - this._offsetFromBlockFormattingRoot.y;
							}
							if (childHasClearance == false) this._childPosition.y += child.getCollapsedTopMargin(true);
							child.bounds.y = this._childPosition.y;
							var leftFloatOffset = 0;
							if (this.floatsManager.get_hasFloats() == true) {
								var leftFloatOffset1 = this.floatsManager.getLeftFloatOffset(this._childPosition.y + this._offsetFromBlockFormattingRoot.y, childMarginHeight, this._offsetFromBlockFormattingRoot.x);
								leftFloatOffset1 -= this._offsetFromBlockFormattingRoot.x;
							}
							if (leftFloatOffset > child.coreStyle.usedValues.marginLeft) child.bounds.x = leftFloatOffset; else child.bounds.x = child.coreStyle.usedValues.marginLeft;
						}
						this._childPosition.y += child.bounds.height;
						this._childPosition.y += child.getCollapsedBottomMargin(true);
						if (child.collapseBottomMarginWithLastChildBottomMargin() == true) this._childPosition.y += child.get_lastNormalFlowChild().getCollapsedBottomMargin(true);
					} else {
						child.layout(true, layoutState);
						var childPosition = this._childPosition;
						var previousFlowSibling = child.get_previousNormalFlowSibling();
						var needToLayoutPreviousSibling = false;
						if (previousFlowSibling != null) {
							if (previousFlowSibling.isAnonymousBlockBox() == true) {
								if (previousFlowSibling.childrenInline() == true) {
									childPosition = new cocktail_core_geom_PointVO(this._childPosition.x, this._childPosition.y);
									var blockPreviousSibling = previousFlowSibling;
									var lastLineBox = blockPreviousSibling.lineBoxes[blockPreviousSibling.lineBoxes.length - 1];
									childPosition.y = lastLineBox.bounds.y + blockPreviousSibling.bounds.y;
									needToLayoutPreviousSibling = true;
								}
							}
						}
						this.registerFloatedElement(child, childPosition);
						if (needToLayoutPreviousSibling == true) previousFlowSibling.layout(true, layoutState);
					}
				}
				child = child.nextSibling;
			}
		}
		, registerClearElement: function (clearElement) {
			var blockFormattingContextRoot = this.getNearestBlockFormattingContextRoot();
			blockFormattingContextRoot.floatsManager.registerClear(clearElement);
		}
		, registerFloatedElement: function (floatedElement, childPosition) {
			var blockFormattingContextRoot = this.getNearestBlockFormattingContextRoot();
			var contentWidth = this.bounds.width - this.coreStyle.usedValues.paddingLeft - this.coreStyle.usedValues.paddingRight - this.coreStyle.usedValues.borderLeftWidth - this.coreStyle.usedValues.borderRightWidth;
			var floatBounds = blockFormattingContextRoot.floatsManager.registerFloat(floatedElement, childPosition.y + this._offsetFromBlockFormattingRoot.y, contentWidth, this._offsetFromBlockFormattingRoot.x);
			floatedElement.bounds.x = floatBounds.x + floatedElement.coreStyle.usedValues.marginLeft;
			floatedElement.bounds.y = floatBounds.y + floatedElement.coreStyle.usedValues.marginTop;
			floatedElement.bounds.x -= this._offsetFromBlockFormattingRoot.x;
			floatedElement.bounds.y -= this._offsetFromBlockFormattingRoot.y;
		}
		, layoutInlineChildrenAndFloats: function (layoutState) {
			this.lineBoxes = [];
			this.hasLineBoxes = false;
			this._lineBoxPosition.x = 0;
			this._lineBoxPosition.y = 0;
			var firstLineBox = this.createLineBox(this._lineBoxPosition, layoutState);
			var openedElementRendererStack = [];
			var inlineFormattingData = new cocktail_core_layout_InlineFormattingVO();
			inlineFormattingData.inlineBox = firstLineBox.rootInlineBox;
			inlineFormattingData.lineBox = firstLineBox;
			inlineFormattingData.openedElementRenderers = openedElementRendererStack;
			inlineFormattingData.lineBoxPosition = this._lineBoxPosition;
			var lastInlineBox = this.doLayoutInlineChildrenAndFloats(this, inlineFormattingData, layoutState);
			inlineFormattingData.lineBox.layout(true, lastInlineBox);
			this._lineBoxPosition.y += inlineFormattingData.lineBox.bounds.height;
		}
		, createLineBox: function (lineBoxPosition, layoutState) {
			var lineBox = new cocktail_core_linebox_LineBox(this, this.lineBoxes.length == 0, layoutState);
			lineBox.bounds.y = lineBoxPosition.y;
			this.setLineBoxPositionAndWidth(lineBox);
			this.lineBoxes.push(lineBox);
			this.hasLineBoxes = true;
			return lineBox;
		}
		, setLineBoxPositionAndWidth: function (lineBox) {
			var availableWidth = this.coreStyle.usedValues.width;
			if (this.floatsManager.get_hasFloats() == true) availableWidth = this.floatsManager.getRightFloatOffset(lineBox.bounds.y + this._offsetFromBlockFormattingRoot.y, this.coreStyle.usedValues.lineHeight, 0, this._offsetFromBlockFormattingRoot.x, this.coreStyle.usedValues.width) - this.floatsManager.getLeftFloatOffset(lineBox.bounds.y + this._offsetFromBlockFormattingRoot.y, this.coreStyle.usedValues.lineHeight, this._offsetFromBlockFormattingRoot.x);
			lineBox.bounds.width = availableWidth;
			var leftFloatOffset = 0;
			if (this.floatsManager.get_hasFloats() == true) {
				leftFloatOffset = this.floatsManager.getLeftFloatOffset(lineBox.bounds.y + this._offsetFromBlockFormattingRoot.y, this.coreStyle.usedValues.lineHeight, this._offsetFromBlockFormattingRoot.x);
				leftFloatOffset -= this._offsetFromBlockFormattingRoot.x;
			}
			lineBox.bounds.x = leftFloatOffset;
		}
		, layoutLineBox: function (inlineFormattingData, layoutState) {
			var lineBox = inlineFormattingData.lineBox;
			var lineBoxPosition = inlineFormattingData.lineBoxPosition;
			var openedElementRenderers = inlineFormattingData.openedElementRenderers;
			lineBox.layout(false, null);
			lineBoxPosition.y += lineBox.bounds.height;
			var firstAvailableY = lineBoxPosition.y;
			if (this.floatsManager.get_hasFloats() == true) {
				firstAvailableY = this.floatsManager.getFirstAvailableYPosition(lineBoxPosition.y + this._offsetFromBlockFormattingRoot.y, this.coreStyle.usedValues.lineHeight, lineBox.unbreakableWidth, this.coreStyle.usedValues.width, this._offsetFromBlockFormattingRoot.x);
				firstAvailableY -= this._offsetFromBlockFormattingRoot.y;
			}
			lineBoxPosition.y = firstAvailableY;
			var newLineBox = this.createLineBox(lineBoxPosition, layoutState);
			var currentInlineBox = newLineBox.rootInlineBox;
			var length = openedElementRenderers.length;
			var _g = 0;
			while (_g < length) {
				var i = _g++;
				var childInlineBox = new cocktail_core_linebox_InlineBox(openedElementRenderers[i], openedElementRenderers[i].getLeadedAscent(), openedElementRenderers[i].getLeadedDescent());
				childInlineBox.lineBox = newLineBox;
				openedElementRenderers[i].inlineBoxes.push(childInlineBox);
				currentInlineBox.appendChild(childInlineBox);
				currentInlineBox = childInlineBox;
			}
			inlineFormattingData.lineBox = newLineBox;
			inlineFormattingData.inlineBox = currentInlineBox;
		}
		, doLayoutInlineChildrenAndFloats: function (elementRenderer, inlineFormattingData, layoutState) {
			var child = elementRenderer.firstChild;
			while (child != null) {
				if (child.isPositioned() == false || child.isRelativePositioned() == true) {
					if (child.isFloat() == true) {
						child.layout(true, layoutState);
						if (child.canHaveClearance() == true) {
							var hypotheticalChildYPosition = inlineFormattingData.lineBoxPosition.y + child.coreStyle.usedValues.marginTop;
							if (this.floatsManager.hasClearance(child, hypotheticalChildYPosition + this._offsetFromBlockFormattingRoot.y) == true) {
								this.registerClearElement(child);
								var clearance = this.floatsManager.getClearance(child, hypotheticalChildYPosition + this._offsetFromBlockFormattingRoot.y);
								var clearedFloatPosition = new cocktail_core_geom_PointVO(0, 0);
								clearedFloatPosition.y = inlineFormattingData.lineBoxPosition.y + clearance;
								this.registerFloatedElement(child, clearedFloatPosition);
							}
						} else {
							var floatMarginWidth = child.bounds.width + child.coreStyle.usedValues.marginLeft + child.coreStyle.usedValues.marginRight;
							if (inlineFormattingData.lineBox.widthCanFit(floatMarginWidth) == false) this.layoutLineBox(inlineFormattingData, layoutState);
							this.registerFloatedElement(child, inlineFormattingData.lineBoxPosition);
							this.setLineBoxPositionAndWidth(inlineFormattingData.lineBox);
						}
					} else if (child.isText == true) {
						var textLength = child.inlineBoxes.length;
						var _g = 0;
						while (_g < textLength) {
							var i = _g++;
							var lineIsFull = inlineFormattingData.lineBox.insert(child.inlineBoxes[i], inlineFormattingData.inlineBox, false);
							if (lineIsFull == true) {
								this.layoutLineBox(inlineFormattingData, layoutState);
								inlineFormattingData.lineBox.insert(child.inlineBoxes[i], inlineFormattingData.inlineBox, true);
							}
						}
					} else if (child.establishesNewBlockFormattingContext() == true || child.isReplaced == true) {
						child.layout(true, layoutState);
						var childInlineBox = child.inlineBoxes[0];
						childInlineBox.bounds.height = child.bounds.height;
						childInlineBox.bounds.width = child.bounds.width;
						childInlineBox.marginLeft = child.coreStyle.usedValues.marginLeft;
						childInlineBox.marginRight = child.coreStyle.usedValues.marginRight;
						var lineIsFull1 = inlineFormattingData.lineBox.insert(childInlineBox, inlineFormattingData.inlineBox, false);
						if (lineIsFull1 == true) {
							this.layoutLineBox(inlineFormattingData, layoutState);
							inlineFormattingData.lineBox.insert(childInlineBox, inlineFormattingData.inlineBox, true);
						}
					} else if (child.firstChild != null) {
						child.layout(true, cocktail_core_layout_LayoutStateValue.NORMAL);
						child.inlineBoxes = [];
						var childInlineBox1 = new cocktail_core_linebox_InlineBox(child, child.getLeadedAscent(), child.getLeadedDescent());
						childInlineBox1.lineBox = inlineFormattingData.lineBox;
						child.inlineBoxes.push(childInlineBox1);
						var childUsedValues = child.coreStyle.usedValues;
						childInlineBox1.marginLeft = childUsedValues.marginLeft;
						childInlineBox1.paddingLeft = childUsedValues.paddingLeft;
						childInlineBox1.borderLeft = childUsedValues.borderLeftWidth;
						inlineFormattingData.lineBox.addUnbreakableWidth(childUsedValues.marginLeft + childUsedValues.paddingLeft + childUsedValues.borderLeftWidth);
						inlineFormattingData.inlineBox.appendChild(childInlineBox1);
						inlineFormattingData.inlineBox = childInlineBox1;
						inlineFormattingData.openedElementRenderers.push(child);
						inlineFormattingData.inlineBox = this.doLayoutInlineChildrenAndFloats(child, inlineFormattingData, layoutState);
						inlineFormattingData.openedElementRenderers.pop();
						inlineFormattingData.inlineBox = inlineFormattingData.inlineBox.parentNode;
						var lastInLineBox = child.inlineBoxes[child.inlineBoxes.length - 1];
						lastInLineBox.marginRight = childUsedValues.marginRight;
						lastInLineBox.paddingRight = childUsedValues.paddingRight;
						inlineFormattingData.lineBox.addUnbreakableWidth(childUsedValues.marginRight + childUsedValues.paddingRight);
					}
				}
				child = child.nextSibling;
			}
			return inlineFormattingData.inlineBox;
		}
		, updateInlineChildrenBounds: function (elementRenderer) {
			var child = elementRenderer.firstChild;
			while (child != null) {
				if ((child.isPositioned() == false || child.isRelativePositioned() == true) && child.isFloat() == false) {
					if (child.firstChild != null && child.establishesNewBlockFormattingContext() == false) this.updateInlineChildrenBounds(child);
					child.bounds.width = 0;
					child.bounds.height = 0;
					child.bounds.x = 50000;
					child.bounds.y = 50000;
					var inlineBoxesLength = child.inlineBoxes.length;
					if (inlineBoxesLength == 0) {
						child.bounds.x = 0;
						child.bounds.y = 0;
					}
					var _g = 0;
					while (_g < inlineBoxesLength) {
						var i = _g++;
						var inlineBox = child.inlineBoxes[i];
						this._inlineBoxContainingBlockBounds.width = inlineBox.bounds.width;
						this._inlineBoxContainingBlockBounds.height = inlineBox.bounds.height;
						if (inlineBox.lineBox != null) {
							this._inlineBoxContainingBlockBounds.x = inlineBox.bounds.x + inlineBox.lineBox.bounds.x;
							this._inlineBoxContainingBlockBounds.y = inlineBox.bounds.y + inlineBox.lineBox.bounds.y;
						}
						cocktail_core_geom_GeomUtils.addBounds(this._inlineBoxContainingBlockBounds, child.bounds, null, null);
					}
				}
				child = child.nextSibling;
			}
		}
		, collapseBottomMarginWithLastChildBottomMargin: function () {
			if (this.get_lastNormalFlowChild() == null) return false;
			if (this.get_lastNormalFlowChild().isBlockContainer == false) return false;
			if (this.establishesNewBlockFormattingContext() == true) return false;
			if (this.coreStyle.usedValues.paddingBottom != 0 || this.get_lastNormalFlowChild().coreStyle.usedValues.paddingBottom != 0) return false;
			if (this.coreStyle.usedValues.borderBottomWidth != 0 || this.get_lastNormalFlowChild().coreStyle.usedValues.borderBottomWidth != 0) return false;
			return true;
		}
		, collapseTopMarginWithFirstChildTopMargin: function () {
			if (this.get_firstNormalFlowChild() == null) return false;
			if (this.get_firstNormalFlowChild().isBlockContainer == false) return false;
			if (this.establishesNewBlockFormattingContext() == true) return false;
			if (this.coreStyle.usedValues.paddingTop != 0 || this.get_firstNormalFlowChild().coreStyle.usedValues.paddingTop != 0) return false;
			if (this.coreStyle.usedValues.borderTopWidth != 0 || this.get_firstNormalFlowChild().coreStyle.usedValues.borderTopWidth != 0) return false;
			return true;
		}
		, hasZeroHeightChildren: function () {
			if (this.childrenInline() == true) {
				var lineBoxesLength = this.lineBoxes.length;
				var _g = 0;
				while (_g < lineBoxesLength) {
					var i = _g++;
					if (this.lineBoxes[i].bounds.height > 0) return false;
				}
				if (this.hasNonZeroHeightInlineBox(this) == true) return false;
			} else return this.bounds.height == 0;
			return true;
		}
		, createOwnLayer: function () {
			var createOwnLayer = cocktail_core_renderer_FlowBoxRenderer.prototype.createOwnLayer.call(this);
			if (createOwnLayer == true) return true;
			return this.coreStyle.canAlwaysOverflow != true;
		}
		, establishesNewBlockFormattingContext: function () {
			if (this.coreStyle.isFloat == true) return true; else if (this.coreStyle.canAlwaysOverflow == false) return true; else if (this.coreStyle.isPositioned == true && this.coreStyle.isRelativePositioned == false) return true; else if (this.coreStyle.isInlineBlock == true) return true;
			return false;
		}
		, childrenInline: function () {
			var child = this.firstChild;
			while (child != null) {
				if (child.isInlineLevel() == true) {
					if (child.isFloat() == false) {
						if (child.isAbsolutelyPositioned() == false) return true;
					}
				}
				child = child.nextSibling;
			}
			return false;
		}
		, getBackgroundAndBordersBounds: function (scrollOffset) {
			var backgroundAndBordersBounds = cocktail_core_renderer_FlowBoxRenderer.prototype.getBackgroundAndBordersBounds.call(this, scrollOffset);
			if (this._hasOwnLayer == true) {
				backgroundAndBordersBounds.x += this.layerRenderer.scrollLeft;
				backgroundAndBordersBounds.y += this.layerRenderer.scrollTop;
			}
			return backgroundAndBordersBounds;
		}
		, hasNonZeroHeightInlineBox: function (rootElementRenderer) {
			var child = rootElementRenderer.firstChild;
			while (child != null) {
				var inlineBoxLength = child.inlineBoxes.length;
				var _g = 0;
				while (_g < inlineBoxLength) {
					var i = _g++;
					var inlineBox = child.inlineBoxes[i];
					if (inlineBox.isText == true && inlineBox.isSpace == false) return true; else if (inlineBox.isEmbedded == true) return true;
				}
				this.hasNonZeroHeightInlineBox(child);
				child = child.nextSibling;
			}
			return false;
		}
		, establishesNewBlockFormattingContextOnlyBecauseOfOverflow: function () {
			if (this.coreStyle.isFloat == false && this.coreStyle.isAbsolutelyPositioned == false && this.coreStyle.isInlineBlock == false && this.coreStyle.canAlwaysOverflow == false) return true; else return false;
		}
		, getBlockBoxesOffset: function (target, source) {
			var offset = new cocktail_core_geom_PointVO(0, 0);
			var parent = target;
			while (parent != null) {
				if (parent == source) return offset;
				offset.x += parent.bounds.x;
				offset.y += parent.bounds.y;
				parent = parent.parentNode;
			}
			return offset;
		}
		, getNearestBlockFormattingContextRoot: function () {
			var parent = this;
			while (parent != null) {
				if (parent.establishesNewBlockFormattingContext() == true) return parent;
				parent = parent.parentNode;
			}
			return parent;
		}
		, __class__: cocktail_core_renderer_BlockBoxRenderer
	});
	var cocktail_core_renderer_AnonymousBlockBoxRenderer = function (document) {
		if (cocktail_core_renderer_AnonymousBlockBoxRenderer._node == null) cocktail_core_renderer_AnonymousBlockBoxRenderer._node = document.createElement("DIV");
		cocktail_core_renderer_BlockBoxRenderer.call(this, cocktail_core_renderer_AnonymousBlockBoxRenderer._node, cocktail_core_renderer_AnonymousBlockBoxRenderer._node.coreStyle);
	};
	$hxClasses["cocktail.core.renderer.AnonymousBlockBoxRenderer"] = cocktail_core_renderer_AnonymousBlockBoxRenderer;
	cocktail_core_renderer_AnonymousBlockBoxRenderer.__name__ = ["cocktail", "core", "renderer", "AnonymousBlockBoxRenderer"];
	cocktail_core_renderer_AnonymousBlockBoxRenderer._node = null;
	cocktail_core_renderer_AnonymousBlockBoxRenderer.__super__ = cocktail_core_renderer_BlockBoxRenderer;
	cocktail_core_renderer_AnonymousBlockBoxRenderer.prototype = $extend(cocktail_core_renderer_BlockBoxRenderer.prototype, {
		removeChild: function (oldChild) {
			cocktail_core_renderer_BlockBoxRenderer.prototype.removeChild.call(this, oldChild);
			if (this.firstChild == null) this.parentNode.removeChild(this);
		}
		, isPositioned: function () {
			return false;
		}
		, isAnonymousBlockBox: function () {
			return true;
		}
		, createOwnLayer: function () {
			return false;
		}
		, isInlineLevel: function () {
			return false;
		}
		, __class__: cocktail_core_renderer_AnonymousBlockBoxRenderer
	});
	var cocktail_core_renderer_BodyBoxRenderer = function (domNode, coreStyle) {
		cocktail_core_renderer_BlockBoxRenderer.call(this, domNode, coreStyle);
	};
	$hxClasses["cocktail.core.renderer.BodyBoxRenderer"] = cocktail_core_renderer_BodyBoxRenderer;
	cocktail_core_renderer_BodyBoxRenderer.__name__ = ["cocktail", "core", "renderer", "BodyBoxRenderer"];
	cocktail_core_renderer_BodyBoxRenderer.__super__ = cocktail_core_renderer_BlockBoxRenderer;
	cocktail_core_renderer_BodyBoxRenderer.prototype = $extend(cocktail_core_renderer_BlockBoxRenderer.prototype, {
		layoutSelfIfNeeded: function (forceLayout) {
			if (this._needsLayout == false && forceLayout == false) return;
			cocktail_core_renderer_BlockBoxRenderer.prototype.layoutSelfIfNeeded.call(this, forceLayout);
			if (this.coreStyle.hasAutoHeight == true && (this.isPositioned() == false || this.isRelativePositioned() == true)) {
				var usedValues = this.coreStyle.usedValues;
				usedValues.height = this.containingBlock.getContainerBlockData().height - usedValues.marginTop - usedValues.marginBottom - usedValues.paddingTop - usedValues.paddingBottom - usedValues.borderTopWidth - usedValues.borderBottomWidth;
			}
		}
		, collapseTopMarginWithParentTopMargin: function () {
			return false;
		}
		, collapseBottomMarginWithParentBottomMargin: function () {
			return false;
		}
		, getContainerBlockData: function () {
			cocktail_core_renderer_BlockBoxRenderer.prototype.getContainerBlockData.call(this);
			if (this.coreStyle.hasAutoHeight == true && (this.isPositioned() == false || this.isRelativePositioned() == true)) this._containerBlockData.isHeightAuto = false;
			return this._containerBlockData;
		}
		, getBackgroundAndBordersBounds: function (scrollOffset) {
			var viewportData = this.getViewportData();
			var width = viewportData.width;
			var height = viewportData.height;
			this.bounds.width = width;
			this.bounds.height = height;
			this.bounds.x = 0.0;
			this.bounds.y = 0.0;
			return this.bounds;
		}
		, __class__: cocktail_core_renderer_BodyBoxRenderer
	});
	var cocktail_core_renderer_InputRenderer = function (domNode, coreStyle) {
		cocktail_core_renderer_BlockBoxRenderer.call(this, domNode, coreStyle);
		this.createNativeInput();
		this.setNativeInputCallbacks();
	};
	$hxClasses["cocktail.core.renderer.InputRenderer"] = cocktail_core_renderer_InputRenderer;
	cocktail_core_renderer_InputRenderer.__name__ = ["cocktail", "core", "renderer", "InputRenderer"];
	cocktail_core_renderer_InputRenderer.__super__ = cocktail_core_renderer_BlockBoxRenderer;
	cocktail_core_renderer_InputRenderer.prototype = $extend(cocktail_core_renderer_BlockBoxRenderer.prototype, {
		createNativeInput: function () {
		}
		, setNativeInputCallbacks: function () {
			var _g = this;
			this.nativeInput.onActivate = function () {
				_g.onActivate();
			};
			this.nativeInput.onInput = function () {
				_g.onInput();
			};
		}
		, focus: function () {
			this.nativeInput.focus();
		}
		, blur: function () {
			this.nativeInput.blur();
		}
		, createOwnLayer: function () {
			return true;
		}
		, doCreateLayer: function () {
			this.layerRenderer = new cocktail_core_layer_InputLayerRenderer(this);
		}
		, renderSelf: function (graphicContext, clipRect, scrollOffset) {
			cocktail_core_renderer_BlockBoxRenderer.prototype.renderSelf.call(this, graphicContext, clipRect, scrollOffset);
			this.updateNativeInputViewport(scrollOffset, clipRect);
		}
		, updateNativeInputViewport: function (scrollOffset, clipRect) {
			var globalBounds = this.globalBounds;
			var x = globalBounds.x + this.coreStyle.usedValues.borderLeftWidth - scrollOffset.x;
			var y = this.getViewportY(scrollOffset);
			var layerMatrix = this.layerRenderer.matrix;
			x += layerMatrix.e;
			y += layerMatrix.f;
			var width = globalBounds.width - this.coreStyle.usedValues.borderLeftWidth - this.coreStyle.usedValues.borderRightWidth;
			var height = globalBounds.height - this.coreStyle.usedValues.borderTopWidth - this.coreStyle.usedValues.borderBottomWidth;
			var viewport = new cocktail_core_geom_RectangleVO();
			viewport.x = x;
			viewport.y = y;
			viewport.width = width;
			viewport.height = height;
			this.nativeInput.set_viewport(viewport);
			this.nativeInput.set_clipRect(this.layerRenderer.clipRect);
		}
		, getViewportY: function (scrollOffset) {
			return this.globalBounds.y + this.coreStyle.usedValues.borderTopWidth + (this.globalBounds.height - this.coreStyle.usedValues.borderTopWidth - this.coreStyle.usedValues.borderBottomWidth) / 2 - this.coreStyle.fontMetrics.fontSize + this.coreStyle.fontMetrics.ascent / 2 - scrollOffset.y;
		}
		, get_value: function () {
			return this.nativeInput.get_value();
		}
		, set_value: function (value) {
			return this.nativeInput.set_value(value);
		}
		, set_maxLength: function (value) {
			return this.nativeInput.set_maxLength(value);
		}
		, set_disabled: function (value) {
			return this.nativeInput.set_disabled(value);
		}
		, set_readonly: function (value) {
			return this.nativeInput.set_readonly(value);
		}
		, get_checked: function () {
			return this.nativeInput.get_checked();
		}
		, set_checked: function (value) {
			return this.nativeInput.set_checked(value);
		}
		, get_intrinsicWidth: function () {
			return this.nativeInput.get_intrinsicWidth();
		}
		, get_intrinsicHeight: function () {
			return this.nativeInput.get_intrinsicHeight();
		}
		, __class__: cocktail_core_renderer_InputRenderer
		, __properties__: $extend(cocktail_core_renderer_BlockBoxRenderer.prototype.__properties__, { get_intrinsicHeight: "get_intrinsicHeight", get_intrinsicWidth: "get_intrinsicWidth", set_readonly: "set_readonly", set_disabled: "set_disabled", set_maxLength: "set_maxLength", set_checked: "set_checked", get_checked: "get_checked", set_value: "set_value", get_value: "get_value" })
	});
	var cocktail_core_renderer_CheckboxRenderer = function (domNode, coreStyle) {
		cocktail_core_renderer_InputRenderer.call(this, domNode, coreStyle);
	};
	$hxClasses["cocktail.core.renderer.CheckboxRenderer"] = cocktail_core_renderer_CheckboxRenderer;
	cocktail_core_renderer_CheckboxRenderer.__name__ = ["cocktail", "core", "renderer", "CheckboxRenderer"];
	cocktail_core_renderer_CheckboxRenderer.__super__ = cocktail_core_renderer_InputRenderer;
	cocktail_core_renderer_CheckboxRenderer.prototype = $extend(cocktail_core_renderer_InputRenderer.prototype, {
		createNativeInput: function () {
			this.nativeInput = new cocktail_port_base_NativeInputBase(this.domNode);
		}
		, __class__: cocktail_core_renderer_CheckboxRenderer
	});
	var cocktail_core_renderer_EmbeddedBoxRenderer = function (domNode, coreStyle) {
		cocktail_core_renderer_BoxRenderer.call(this, domNode, coreStyle);
		this.isReplaced = true;
	};
	$hxClasses["cocktail.core.renderer.EmbeddedBoxRenderer"] = cocktail_core_renderer_EmbeddedBoxRenderer;
	cocktail_core_renderer_EmbeddedBoxRenderer.__name__ = ["cocktail", "core", "renderer", "EmbeddedBoxRenderer"];
	cocktail_core_renderer_EmbeddedBoxRenderer.__super__ = cocktail_core_renderer_BoxRenderer;
	cocktail_core_renderer_EmbeddedBoxRenderer.prototype = $extend(cocktail_core_renderer_BoxRenderer.prototype, {
		renderSelf: function (graphicContext, clipRect, scrollOffset) {
			cocktail_core_renderer_BoxRenderer.prototype.renderSelf.call(this, graphicContext, clipRect, scrollOffset);
			this.renderEmbeddedAsset(graphicContext, clipRect, scrollOffset);
		}
		, renderEmbeddedAsset: function (graphicContext, clipRect, scrollOffset) {
		}
		, __class__: cocktail_core_renderer_EmbeddedBoxRenderer
	});
	var cocktail_core_renderer_ImageRenderer = function (domNode, coreStyle) {
		cocktail_core_renderer_EmbeddedBoxRenderer.call(this, domNode, coreStyle);
		this._paintBounds = new cocktail_core_geom_RectangleVO();
		this._destinationPoint = new cocktail_core_geom_PointVO(0.0, 0.0);
	};
	$hxClasses["cocktail.core.renderer.ImageRenderer"] = cocktail_core_renderer_ImageRenderer;
	cocktail_core_renderer_ImageRenderer.__name__ = ["cocktail", "core", "renderer", "ImageRenderer"];
	cocktail_core_renderer_ImageRenderer.__super__ = cocktail_core_renderer_EmbeddedBoxRenderer;
	cocktail_core_renderer_ImageRenderer.prototype = $extend(cocktail_core_renderer_EmbeddedBoxRenderer.prototype, {
		renderEmbeddedAsset: function (graphicContext, clipRect, scrollOffset) {
			var htmlElement = this.domNode;
			var src = htmlElement.getAttribute("src");
			if (src == null) return;
			var htmlDocument = this.domNode.ownerDocument;
			var resource = htmlDocument.resourceManager.getImageResource(src);
			if (resource.loaded == false || resource.loadedWithError == true) return;
			var usedValues = this.coreStyle.usedValues;
			this._paintBounds.x = this.globalBounds.x + usedValues.paddingLeft + usedValues.borderLeftWidth - scrollOffset.x;
			this._paintBounds.y = this.globalBounds.y + usedValues.paddingTop + usedValues.borderTopWidth - scrollOffset.y;
			this._paintBounds.width = usedValues.width;
			this._paintBounds.height = usedValues.height;
			this.paintResource(graphicContext, resource.nativeResource, this._paintBounds, resource.intrinsicWidth, resource.intrinsicHeight, clipRect);
		}
		, paintResource: function (graphicContext, nativeBitmapData, bounds, intrinsicWidth, intrinsicHeight, clipRect) {
			if (intrinsicWidth != bounds.width || intrinsicHeight != bounds.height) {
				var matrix = new cocktail_core_geom_Matrix();
				matrix.translate(bounds.x, bounds.y);
				matrix.scale(bounds.width / intrinsicWidth, bounds.height / intrinsicHeight);
				graphicContext.nativeLayer.graphics.drawImage(nativeBitmapData, matrix, bounds, clipRect);
			} else {
				var width = intrinsicWidth;
				var height = intrinsicHeight;
				this._destinationPoint.x = bounds.x;
				this._destinationPoint.y = bounds.y;
				bounds.width = width;
				bounds.height = height;
				bounds.x = 0.0;
				bounds.y = 0.0;
				graphicContext.nativeLayer.graphics.copyPixels(nativeBitmapData, bounds, this._destinationPoint, clipRect);
			}
		}
		, __class__: cocktail_core_renderer_ImageRenderer
	});
	var cocktail_core_renderer_InitialBlockRenderer = function (domNode, coreStyle) {
		cocktail_core_renderer_BlockBoxRenderer.call(this, domNode, coreStyle);
		this.containingBlock = this;
	};
	$hxClasses["cocktail.core.renderer.InitialBlockRenderer"] = cocktail_core_renderer_InitialBlockRenderer;
	cocktail_core_renderer_InitialBlockRenderer.__name__ = ["cocktail", "core", "renderer", "InitialBlockRenderer"];
	cocktail_core_renderer_InitialBlockRenderer.__super__ = cocktail_core_renderer_BlockBoxRenderer;
	cocktail_core_renderer_InitialBlockRenderer.prototype = $extend(cocktail_core_renderer_BlockBoxRenderer.prototype, {
		attachLayer: function () {
			this.layerRenderer = new cocktail_core_layer_InitialLayerRenderer(this);
			this._hasOwnLayer = true;
		}
		, detachLayer: function () {
			this.layerRenderer.removedFromLayerTree();
			this._hasOwnLayer = false;
			this.layerRenderer.dispose();
			this.layerRenderer = null;
		}
		, registerWithContaininingBlock: function () {
		}
		, unregisterWithContainingBlock: function () {
		}
		, invalidateContainingBlock: function (styleIndex) {
		}
		, layoutSelfIfNeeded: function (forceLayout) {
			var viewportData = this.getViewportData();
			this.coreStyle.usedValues.width = viewportData.width;
			this.coreStyle.usedValues.height = viewportData.height;
			this.bounds.x = 0;
			this.bounds.y = 0;
			this.bounds.width = viewportData.width;
			this.bounds.height = viewportData.height;
			this.globalBounds.x = 0;
			this.globalBounds.y = 0;
			this.globalBounds.width = viewportData.width;
			this.globalBounds.height = viewportData.height;
		}
		, applyShrinkToFitIfNeeded: function (layoutState) {
		}
		, isPositioned: function () {
			return true;
		}
		, establishesNewBlockFormattingContext: function () {
			return true;
		}
		, createOwnLayer: function () {
			return true;
		}
		, getContainerBlockData: function () {
			return this.getViewportData();
		}
		, getContainingBlock: function () {
			return this;
		}
		, __class__: cocktail_core_renderer_InitialBlockRenderer
	});
	var cocktail_core_renderer_InlineBoxRenderer = function (domNode, coreStyle) {
		cocktail_core_renderer_FlowBoxRenderer.call(this, domNode, coreStyle);
		this._renderRect = new cocktail_core_geom_RectangleVO();
	};
	$hxClasses["cocktail.core.renderer.InlineBoxRenderer"] = cocktail_core_renderer_InlineBoxRenderer;
	cocktail_core_renderer_InlineBoxRenderer.__name__ = ["cocktail", "core", "renderer", "InlineBoxRenderer"];
	cocktail_core_renderer_InlineBoxRenderer.__super__ = cocktail_core_renderer_FlowBoxRenderer;
	cocktail_core_renderer_InlineBoxRenderer.prototype = $extend(cocktail_core_renderer_FlowBoxRenderer.prototype, {
		render: function (graphicsContext, clipRect, scrollOffset) {
			var inlineBoxesLength = this.inlineBoxes.length;
			var _g = 0;
			while (_g < inlineBoxesLength) {
				var i = _g++;
				var inlineBox = this.inlineBoxes[i];
				this._renderRect.width = inlineBox.bounds.width;
				this._renderRect.height = inlineBox.bounds.height;
				this._renderRect.x = inlineBox.bounds.x + inlineBox.lineBox.bounds.x + this.globalBounds.x - scrollOffset.x;
				this._renderRect.y = inlineBox.bounds.y + inlineBox.lineBox.bounds.y + this.globalBounds.y - scrollOffset.y;
				if (this.coreStyle.hasBackgroundImage == true || this.coreStyle.hasBackgroundColor == true) cocktail_core_graphics_BackgroundDrawer.render(graphicsContext, this._renderRect, this.coreStyle, this, clipRect);
				cocktail_core_graphics_BorderDrawer.draw(graphicsContext, this._renderRect, this.coreStyle, clipRect);
			}
			if (this.firstChild != null) this.renderChildren(graphicsContext, clipRect, scrollOffset);
		}
		, updateInlineBoxes: function () {
			this.inlineBoxes = [];
			var child = this.firstChild;
			while (child != null) {
				child.updateInlineBoxes();
				child = child.nextSibling;
			}
		}
		, renderChildren: function (graphicContext, clipRect, scrollOffset) {
			cocktail_core_renderer_FlowBoxRenderer.prototype.renderChildren.call(this, graphicContext, clipRect, scrollOffset);
			if (this.createOwnLayer() == true) this.renderInlineChildren(this, this.layerRenderer, graphicContext, clipRect, scrollOffset);
		}
		, canHaveClearance: function () {
			return false;
		}
		, __class__: cocktail_core_renderer_InlineBoxRenderer
	});
	var cocktail_core_renderer_InputButtonRenderer = function (domNode, coreStyle) {
		cocktail_core_renderer_InputRenderer.call(this, domNode, coreStyle);
	};
	$hxClasses["cocktail.core.renderer.InputButtonRenderer"] = cocktail_core_renderer_InputButtonRenderer;
	cocktail_core_renderer_InputButtonRenderer.__name__ = ["cocktail", "core", "renderer", "InputButtonRenderer"];
	cocktail_core_renderer_InputButtonRenderer.__super__ = cocktail_core_renderer_InputRenderer;
	cocktail_core_renderer_InputButtonRenderer.prototype = $extend(cocktail_core_renderer_InputRenderer.prototype, {
		createNativeInput: function () {
			this.nativeInput = new cocktail_port_platform_flash_$player_NativeButton(this.domNode);
		}
		, __class__: cocktail_core_renderer_InputButtonRenderer
	});
	var cocktail_core_renderer_ObjectRenderer = function (domNode, coreStyle) {
		cocktail_core_renderer_EmbeddedBoxRenderer.call(this, domNode, coreStyle);
	};
	$hxClasses["cocktail.core.renderer.ObjectRenderer"] = cocktail_core_renderer_ObjectRenderer;
	cocktail_core_renderer_ObjectRenderer.__name__ = ["cocktail", "core", "renderer", "ObjectRenderer"];
	cocktail_core_renderer_ObjectRenderer.__super__ = cocktail_core_renderer_EmbeddedBoxRenderer;
	cocktail_core_renderer_ObjectRenderer.prototype = $extend(cocktail_core_renderer_EmbeddedBoxRenderer.prototype, {
		createOwnLayer: function () {
			return true;
		}
		, doCreateLayer: function () {
			this.layerRenderer = new cocktail_core_layer_PluginLayerRenderer(this);
		}
		, renderEmbeddedAsset: function (graphicContext, clipRect, scrollOffset) {
			var htmlObjectElement = this.domNode;
			htmlObjectElement.plugin.updateViewport(this.globalBounds.x + this.coreStyle.usedValues.paddingLeft + this.coreStyle.usedValues.borderLeftWidth, this.globalBounds.y + this.coreStyle.usedValues.paddingTop + this.coreStyle.usedValues.borderTopWidth, this.globalBounds.width, this.globalBounds.height);
		}
		, __class__: cocktail_core_renderer_ObjectRenderer
	});
	var cocktail_core_renderer_TextInputRenderer = function (domNode, coreStyle) {
		cocktail_core_renderer_InputRenderer.call(this, domNode, coreStyle);
	};
	$hxClasses["cocktail.core.renderer.TextInputRenderer"] = cocktail_core_renderer_TextInputRenderer;
	cocktail_core_renderer_TextInputRenderer.__name__ = ["cocktail", "core", "renderer", "TextInputRenderer"];
	cocktail_core_renderer_TextInputRenderer.__super__ = cocktail_core_renderer_InputRenderer;
	cocktail_core_renderer_TextInputRenderer.prototype = $extend(cocktail_core_renderer_InputRenderer.prototype, {
		createNativeInput: function () {
			this.nativeTextInput = new cocktail_port_platform_flash_$player_NativeTextInput(this.domNode);
			this.nativeInput = this.nativeTextInput;
		}
		, renderSelf: function (graphicContext, clipRect, scrollOffset) {
			cocktail_core_renderer_InputRenderer.prototype.renderSelf.call(this, graphicContext, clipRect, scrollOffset);
			this.updateNativeTextInput(scrollOffset, clipRect);
		}
		, updateNativeTextInput: function (scrollOffset, clipRect) {
			this.nativeTextInput.set_fontFamily(cocktail_core_css_CSSValueConverter.getFontFamilyAsStringArray(this.coreStyle.getComputedOrInitialProperty(37))[0]);
			this.nativeTextInput.set_letterSpacing(this.coreStyle.usedValues.letterSpacing);
			this.nativeTextInput.set_fontSize(this.coreStyle.getAbsoluteLength(this.coreStyle.getTransitionablePropertyValue(34)));
			var bold = false;
			{
				var _g = this.coreStyle.getComputedOrInitialProperty(35);
				switch (_g[1]) {
					case 4:
						var value = _g[2];
						switch (value[1]) {
							case 3: case 0:
								bold = false;
								break;
							case 2: case 1:
								bold = true;
								break;
							default:
								throw new js__$Boot_HaxeError("Illegal keyword for bold style");
						}
						break;
					case 0:
						var value1 = _g[2];
						bold = value1 > 400;
						break;
					default:
						throw new js__$Boot_HaxeError("Illegal value for bold style");
				}
			}
			this.nativeTextInput.set_bold(bold);
			this.nativeTextInput.set_italic(this.coreStyle.getKeyword(this.coreStyle.getComputedOrInitialProperty(36)) == cocktail_core_css_CSSKeywordValue.ITALIC);
			this.nativeTextInput.set_letterSpacing(this.coreStyle.usedValues.letterSpacing);
			this.nativeTextInput.set_color(this.coreStyle.usedValues.color.color);
		}
		, __class__: cocktail_core_renderer_TextInputRenderer
	});
	var cocktail_core_renderer_PasswordInputRenderer = function (domNode, coreStyle) {
		cocktail_core_renderer_TextInputRenderer.call(this, domNode, coreStyle);
	};
	$hxClasses["cocktail.core.renderer.PasswordInputRenderer"] = cocktail_core_renderer_PasswordInputRenderer;
	cocktail_core_renderer_PasswordInputRenderer.__name__ = ["cocktail", "core", "renderer", "PasswordInputRenderer"];
	cocktail_core_renderer_PasswordInputRenderer.__super__ = cocktail_core_renderer_TextInputRenderer;
	cocktail_core_renderer_PasswordInputRenderer.prototype = $extend(cocktail_core_renderer_TextInputRenderer.prototype, {
		createNativeInput: function () {
			this.nativeTextInput = new cocktail_port_platform_flash_$player_NativePasswordInput(this.domNode);
			this.nativeInput = this.nativeTextInput;
		}
		, __class__: cocktail_core_renderer_PasswordInputRenderer
	});
	var cocktail_core_renderer_RadioRenderer = function (domNode, coreStyle) {
		cocktail_core_renderer_InputRenderer.call(this, domNode, coreStyle);
	};
	$hxClasses["cocktail.core.renderer.RadioRenderer"] = cocktail_core_renderer_RadioRenderer;
	cocktail_core_renderer_RadioRenderer.__name__ = ["cocktail", "core", "renderer", "RadioRenderer"];
	cocktail_core_renderer_RadioRenderer.__super__ = cocktail_core_renderer_InputRenderer;
	cocktail_core_renderer_RadioRenderer.prototype = $extend(cocktail_core_renderer_InputRenderer.prototype, {
		createNativeInput: function () {
			this.nativeInput = new cocktail_port_base_NativeInputBase(this.domNode);
		}
		, __class__: cocktail_core_renderer_RadioRenderer
	});
	var cocktail_core_renderer_TextAreaRenderer = function (domNode, coreStyle) {
		cocktail_core_renderer_TextInputRenderer.call(this, domNode, coreStyle);
	};
	$hxClasses["cocktail.core.renderer.TextAreaRenderer"] = cocktail_core_renderer_TextAreaRenderer;
	cocktail_core_renderer_TextAreaRenderer.__name__ = ["cocktail", "core", "renderer", "TextAreaRenderer"];
	cocktail_core_renderer_TextAreaRenderer.__super__ = cocktail_core_renderer_TextInputRenderer;
	cocktail_core_renderer_TextAreaRenderer.prototype = $extend(cocktail_core_renderer_TextInputRenderer.prototype, {
		createNativeInput: function () {
			this.nativeTextInput = new cocktail_port_platform_flash_$player_NativeTextArea(this.domNode);
			this.nativeInput = this.nativeTextInput;
		}
		, getViewportY: function (scrollOffset) {
			return this.globalBounds.y + this.coreStyle.usedValues.borderTopWidth;
		}
		, renderChildren: function (graphicContext, clipRect, scrollOffset) {
		}
		, __class__: cocktail_core_renderer_TextAreaRenderer
	});
	var cocktail_core_renderer_TextRenderer = function (domNode, coreStyle) {
		cocktail_core_renderer_InvalidatingElementRenderer.call(this, domNode, coreStyle);
		this._text = domNode;
		this._textNeedsRendering = true;
		this._textTokensNeedParsing = true;
		this._hasUnderline = false;
		this._hasOverline = false;
		this._hasLineThrough = false;
		this._hasBlink = false;
		this.isText = true;
	};
	$hxClasses["cocktail.core.renderer.TextRenderer"] = cocktail_core_renderer_TextRenderer;
	cocktail_core_renderer_TextRenderer.__name__ = ["cocktail", "core", "renderer", "TextRenderer"];
	cocktail_core_renderer_TextRenderer.__super__ = cocktail_core_renderer_InvalidatingElementRenderer;
	cocktail_core_renderer_TextRenderer.prototype = $extend(cocktail_core_renderer_InvalidatingElementRenderer.prototype, {
		updateText: function () {
			var child = this.firstChild;
			while (child != null) {
				child.updateText();
				child = child.nextSibling;
			}
			if (this._textNeedsRendering == true) {
				this.createTextLines();
				this._textNeedsRendering = false;
			}
		}
		, render: function (graphicContext, clipRect, scrollOffset) {
			if (this.coreStyle.isVisible == false) return;
			cocktail_core_renderer_TextRenderer._intersectBounds.x = this.hitTestingBounds.x;
			cocktail_core_renderer_TextRenderer._intersectBounds.y = this.hitTestingBounds.y;
			cocktail_core_renderer_TextRenderer._intersectBounds.width = this.hitTestingBounds.width;
			cocktail_core_renderer_TextRenderer._intersectBounds.height = this.hitTestingBounds.height;
			cocktail_core_geom_GeomUtils.intersectBounds(cocktail_core_renderer_TextRenderer._intersectBounds, clipRect, cocktail_core_renderer_TextRenderer._intersectBounds);
			if (cocktail_core_renderer_TextRenderer._intersectBounds.width == 0 || cocktail_core_renderer_TextRenderer._intersectBounds.height == 0) return;
			cocktail_core_graphics_TextDrawer.draw(graphicContext, this, this._hasUnderline, this._hasOverline, this._hasLineThrough, this._hasBlink, scrollOffset, clipRect);
		}
		, updateTextDecorations: function (inheritUnderline, inheritOverline, inheritLineThrough, inheritBlink) {
			this._hasUnderline = inheritUnderline;
			this._hasOverline = inheritOverline;
			this._hasLineThrough = inheritLineThrough;
			this._hasBlink = inheritBlink;
		}
		, invalidate: function () {
			this._textNeedsRendering = true;
		}
		, createTextLines: function () {
			if (this._textTokensNeedParsing == true) {
				var processedText = this._text.get_nodeValue();
				processedText = cocktail_core_parser_PlainTextParser.applyWhiteSpaceProcessing(processedText, this.coreStyle.getKeyword(this.coreStyle.getComputedOrInitialProperty(45)));
				processedText = cocktail_core_parser_PlainTextParser.applyTextTransform(processedText, this.coreStyle.getKeyword(this.coreStyle.getComputedOrInitialProperty(42)));
				this._textTokens = cocktail_core_parser_PlainTextParser.parse(processedText);
			}
			this.inlineBoxes = [];
			var fontMetrics = this.coreStyle.fontMetrics;
			var htmlDocument = this.domNode.ownerDocument;
			var fontManager = htmlDocument.fontManager;
			var fontFamily = fontManager.getNativeFontFamily(cocktail_core_css_CSSValueConverter.getFontFamilyAsStringArray(this.coreStyle.getComputedOrInitialProperty(37)));
			var letterSpacing = this.coreStyle.usedValues.letterSpacing;
			var wordSpacing = this.coreStyle.getAbsoluteLength(this.coreStyle.getTransitionablePropertyValue(44));
			var spaceWidth = fontMetrics.spaceWidth + letterSpacing + wordSpacing;
			var leadedAscent = this.getLeadedAscent();
			var leadedDescent = this.getLeadedDescent();
			var length = this._textTokens.length;
			var _g = 0;
			while (_g < length) {
				var i = _g++;
				this.inlineBoxes.push(this.createInlineBoxFromTextToken(this._textTokens[i], leadedAscent, leadedDescent, fontMetrics, fontManager, fontFamily, spaceWidth));
			}
		}
		, createInlineBoxFromTextToken: function (textToken, leadedAscent, leadedDescent, fontMetrics, fontManager, fontFamily, spaceWidth) {
			switch (textToken[1]) {
				case 0:
					var value = textToken[2];
					return new cocktail_core_linebox_TextInlineBox(this, leadedAscent, leadedDescent, value, fontMetrics, fontManager, fontFamily);
				case 1:
					return new cocktail_core_linebox_SpaceInlineBox(this, leadedAscent, leadedDescent, spaceWidth);
				case 2:
					return new cocktail_core_linebox_TextInlineBox(this, leadedAscent, leadedDescent, "", fontMetrics, fontManager, fontFamily);
				case 3:
					return new cocktail_core_linebox_TextInlineBox(this, leadedAscent, leadedDescent, "", fontMetrics, fontManager, fontFamily);
			}
		}
		, isFloat: function () {
			return false;
		}
		, isPositioned: function () {
			return false;
		}
		, isInlineLevel: function () {
			return true;
		}
		, __class__: cocktail_core_renderer_TextRenderer
	});
	var cocktail_core_renderer_VideoRenderer = function (domNode, coreStyle) {
		cocktail_core_renderer_ImageRenderer.call(this, domNode, coreStyle);
		this._posterBounds = new cocktail_core_geom_RectangleVO();
		this._videoBounds = new cocktail_core_geom_RectangleVO();
	};
	$hxClasses["cocktail.core.renderer.VideoRenderer"] = cocktail_core_renderer_VideoRenderer;
	cocktail_core_renderer_VideoRenderer.__name__ = ["cocktail", "core", "renderer", "VideoRenderer"];
	cocktail_core_renderer_VideoRenderer.__super__ = cocktail_core_renderer_ImageRenderer;
	cocktail_core_renderer_VideoRenderer.prototype = $extend(cocktail_core_renderer_ImageRenderer.prototype, {
		createOwnLayer: function () {
			return true;
		}
		, doCreateLayer: function () {
			this.layerRenderer = new cocktail_core_layer_VideoLayerRenderer(this);
		}
		, renderEmbeddedAsset: function (graphicContext, clipRect, scrollOffset) {
			var htmlVideoElement = this.domNode;
			if (htmlVideoElement.shouldRenderPosterFrame() == true) this.renderPosterFrame(htmlVideoElement, graphicContext, clipRect, scrollOffset); else this.renderVideo(htmlVideoElement, graphicContext, scrollOffset);
		}
		, renderVideo: function (htmlVideoElement, graphicContext, scrollOffset) {
			cocktail_core_geom_GeomUtils.getCenteredBounds(this.coreStyle.usedValues.width, this.coreStyle.usedValues.height, htmlVideoElement.get_videoWidth(), htmlVideoElement.get_videoHeight(), this._videoBounds);
			var nativeVideo = htmlVideoElement.nativeMedia;
			var videoViewport = nativeVideo.get_viewport();
			videoViewport.x = this.globalBounds.x + this.coreStyle.usedValues.paddingLeft + this.coreStyle.usedValues.borderLeftWidth + this._videoBounds.x - scrollOffset.x;
			videoViewport.y = this.globalBounds.y + this.coreStyle.usedValues.paddingTop + this.coreStyle.usedValues.borderTopWidth + this._videoBounds.y - scrollOffset.y;
			videoViewport.width = this._videoBounds.width;
			videoViewport.height = this._videoBounds.height;
			nativeVideo.set_alpha(this.layerRenderer.alpha);
			nativeVideo.set_matrix(this.layerRenderer.matrix);
			nativeVideo.set_viewport(videoViewport);
		}
		, renderPosterFrame: function (htmlVideoElement, graphicContext, clipRect, scrollOffset) {
			var htmlDocument = this.domNode.ownerDocument;
			var htmlElement = this.domNode;
			var resource = htmlDocument.resourceManager.getImageResource(htmlElement.getAttribute("poster"));
			if (resource.loaded == false || resource.loadedWithError == true) return;
			cocktail_core_geom_GeomUtils.getCenteredBounds(this.coreStyle.usedValues.width, this.coreStyle.usedValues.height, resource.intrinsicWidth, resource.intrinsicHeight, this._posterBounds);
			var x = this.globalBounds.x + this.coreStyle.usedValues.paddingLeft + this.coreStyle.usedValues.borderLeftWidth + this._posterBounds.x - scrollOffset.x;
			var y = this.globalBounds.y + this.coreStyle.usedValues.paddingTop + this.coreStyle.usedValues.borderTopWidth + this._posterBounds.y - scrollOffset.y;
			var width = this._posterBounds.width;
			var height = this._posterBounds.height;
			var paintBounds = new cocktail_core_geom_RectangleVO();
			paintBounds.x = x;
			paintBounds.y = y;
			paintBounds.width = width;
			paintBounds.height = height;
			this.paintResource(graphicContext, resource.nativeResource, paintBounds, resource.intrinsicWidth, resource.intrinsicHeight, clipRect);
		}
		, __class__: cocktail_core_renderer_VideoRenderer
	});
	var cocktail_core_resource_ResourceManager = function (document) {
		this._document = document;
		this._resources = new haxe_ds_StringMap();
		this._binaryResources = new haxe_ds_StringMap();
	};
	$hxClasses["cocktail.core.resource.ResourceManager"] = cocktail_core_resource_ResourceManager;
	cocktail_core_resource_ResourceManager.__name__ = ["cocktail", "core", "resource", "ResourceManager"];
	cocktail_core_resource_ResourceManager.prototype = {
		dispose: function () {
			this._document = null;
			this._resources = null;
			this._binaryResources = null;
		}
		, getImageResource: function (url) {
			var resource = this._resources.get(url);
			if (resource == null) {
				resource = new cocktail_port_platform_flash_$player_ImageResource(this.cleanRelativePathes(url));
				this._resources.set(url, resource);
			}
			return resource;
		}
		, removeImageResource: function (url) {
			this._resources.remove(url);
		}
		, getBinaryResource: function (url) {
			var resource = this._binaryResources.get(url);
			if (resource == null) {
				resource = new cocktail_port_platform_flash_$player_NativeHttp(this._document.timer);
				resource.load(this.cleanRelativePathes(url), "GET", null, null, cocktail_core_http_DataFormatValue.BINARY);
				this._binaryResources.set(url, resource);
			}
			return resource;
		}
		, removeBinaryResource: function (url) {
			this._binaryResources.remove(url);
		}
		, cleanRelativePathes: function (url) {
			var splittedUrl = url.split("/");
			var rebuildUrl = [];
			while (splittedUrl.length > 0) {
				var d = splittedUrl.shift();
				if (d == "..") rebuildUrl.pop(); else if (d != ".") rebuildUrl.push(d);
			}
			return rebuildUrl.join("/");
		}
		, __class__: cocktail_core_resource_ResourceManager
	};
	var cocktail_core_stacking_StackingContext = function (layerRenderer) {
		cocktail_core_ds_FastNode.call(this);
		this.layerRenderer = layerRenderer;
	};
	$hxClasses["cocktail.core.stacking.StackingContext"] = cocktail_core_stacking_StackingContext;
	cocktail_core_stacking_StackingContext.__name__ = ["cocktail", "core", "stacking", "StackingContext"];
	cocktail_core_stacking_StackingContext.__super__ = cocktail_core_ds_FastNode;
	cocktail_core_stacking_StackingContext.prototype = $extend(cocktail_core_ds_FastNode.prototype, {
		render: function (dirtyRect) {
			this.layerRenderer.render(dirtyRect);
			var child = this.firstChild;
			var hasRenderedAutoAndZeroLayers = false;
			while (child != null) {
				{
					var _g = child.layerRenderer.rootElementRenderer.coreStyle.getComputedOrInitialProperty(4);
					switch (_g[1]) {
						case 0:
							var value = _g[2];
							if (value == 0) {
							} else {
								if (value > 0 && hasRenderedAutoAndZeroLayers == false) {
									this.renderChildrenInSameStackingContext(this.layerRenderer, dirtyRect);
									hasRenderedAutoAndZeroLayers = true;
								}
								child.render(dirtyRect);
							}
							break;
						default:
					}
				}
				child = child.nextSibling;
			}
			if (hasRenderedAutoAndZeroLayers == false) this.renderChildrenInSameStackingContext(this.layerRenderer, dirtyRect);
		}
		, renderChildrenInSameStackingContext: function (rootLayer, dirtyRect) {
			var child = rootLayer.firstChild;
			while (child != null) {
				if (child.hasOwnStackingContext == false) {
					child.render(dirtyRect);
					this.renderChildrenInSameStackingContext(child, dirtyRect);
				} else {
					var _g = child.rootElementRenderer.coreStyle.getComputedOrInitialProperty(4);
					switch (_g[1]) {
						case 0:
							var value = _g[2];
							if (value == 0) child.stackingContext.render(dirtyRect);
							break;
						default:
					}
				}
				child = child.nextSibling;
			}
		}
		, __class__: cocktail_core_stacking_StackingContext
	});
	var cocktail_core_timer_Timer = function () {
		this._pendingCallbacks = [];
		this._pendingCount = 0;
		this._platformTimer = new cocktail_port_platform_flash_$player_PlatformTimer($bind(this, this.onUpdate));
	};
	$hxClasses["cocktail.core.timer.Timer"] = cocktail_core_timer_Timer;
	cocktail_core_timer_Timer.__name__ = ["cocktail", "core", "timer", "Timer"];
	cocktail_core_timer_Timer.prototype = {
		dispose: function () {
			this._pendingCallbacks = null;
			this._platformTimer.dispose();
		}
		, delay: function (timerCallback, delay) {
			if (delay == null) delay = 0;
			this._pendingCount++;
			var callbackTime = this.getTimer() + delay;
			var length = this._pendingCallbacks.length;
			var _g = 0;
			while (_g < length) {
				var i = _g++;
				var pendingCallback = this._pendingCallbacks[i];
				if (pendingCallback.called == true) {
					pendingCallback.called = false;
					pendingCallback.callbackTime = callbackTime;
					pendingCallback.timerCallback = timerCallback;
					return;
				}
			}
			var newTimerCallback = new cocktail_core_timer_TimerCallbackVO();
			newTimerCallback.called = false;
			newTimerCallback.callbackTime = callbackTime;
			newTimerCallback.timerCallback = timerCallback;
			this._pendingCallbacks.push(newTimerCallback);
		}
		, getTimer: function () {
			return this._platformTimer.getTimer();
		}
		, onUpdate: function () {
			if (this._pendingCount > 0) {
				var time = this.getTimer();
				var length = this._pendingCallbacks.length;
				var _g = 0;
				while (_g < length) {
					var i = _g++;
					var pendingCallback = this._pendingCallbacks[i];
					if (pendingCallback.callbackTime < time && pendingCallback.called == false) {
						pendingCallback.timerCallback(time);
						pendingCallback.called = true;
						this._pendingCount--;
					}
				}
			}
		}
		, __class__: cocktail_core_timer_Timer
	};
	var cocktail_core_timer_TimerCallbackVO = function () {
		this.callbackTime = 0;
		this.called = false;
	};
	$hxClasses["cocktail.core.timer.TimerCallbackVO"] = cocktail_core_timer_TimerCallbackVO;
	cocktail_core_timer_TimerCallbackVO.__name__ = ["cocktail", "core", "timer", "TimerCallbackVO"];
	cocktail_core_timer_TimerCallbackVO.prototype = {
		__class__: cocktail_core_timer_TimerCallbackVO
	};
	var cocktail_core_transition_Transition = function (propertyIndex, target, transitionDuration, transitionDelay, transitionTimingFunction, startValue, endValue, onComplete, onUpdate) {
		this.transitionDelay = transitionDelay;
		this.transitionDuration = transitionDuration;
		this.transitionTimingFunction = transitionTimingFunction;
		this.startValue = startValue;
		this.endValue = endValue;
		this.target = target;
		this.propertyIndex = propertyIndex;
		this.onComplete = onComplete;
		this.onUpdate = onUpdate;
		this._elapsedTime = 0;
		this._cubicBezier = new cocktail_core_geom_CubicBezier();
	};
	$hxClasses["cocktail.core.transition.Transition"] = cocktail_core_transition_Transition;
	cocktail_core_transition_Transition.__name__ = ["cocktail", "core", "transition", "Transition"];
	cocktail_core_transition_Transition.prototype = {
		updateTime: function (delta) {
			this._elapsedTime += delta;
		}
		, dispose: function () {
			this.onComplete = null;
			this.onUpdate = null;
			this.transitionTimingFunction = null;
		}
		, revert: function () {
			this._elapsedTime = this.transitionDuration + this.transitionDelay - this._elapsedTime;
			var oldEndValue = this.endValue;
			this.endValue = this.startValue;
			this.startValue = oldEndValue;
		}
		, get_complete: function () {
			if (this._elapsedTime >= this.transitionDelay + this.transitionDuration) return true;
			return false;
		}
		, get_currentValue: function () {
			var transitionTime = this._elapsedTime - this.transitionDelay;
			if (transitionTime < 0) return this.startValue;
			var completePercent = transitionTime / this.transitionDuration;
			{
				var _g = this.transitionTimingFunction;
				switch (_g[1]) {
					case 4:
						var value = _g[2];
						switch (value[1]) {
							case 49:
								this._cubicBezier.init(0.25, 0.1, 0.25, 1.0);
								return (this.endValue - this.startValue) * this._cubicBezier.bezierY(completePercent) + this.startValue;
							case 51:
								this._cubicBezier.init(0.25, 0.1, 0.25, 1.0);
								return (this.endValue - this.startValue) * this._cubicBezier.bezierY(completePercent) + this.startValue;
							case 52:
								this._cubicBezier.init(0.25, 0.1, 0.25, 1.0);
								return (this.endValue - this.startValue) * this._cubicBezier.bezierY(completePercent) + this.startValue;
							case 53:
								this._cubicBezier.init(0.25, 0.1, 0.25, 1.0);
								return (this.endValue - this.startValue) * this._cubicBezier.bezierY(completePercent) + this.startValue;
							case 54:
								return this.endValue - this.startValue + this.startValue;
							case 55:
								return (this.endValue - this.startValue) * 0 + this.startValue;
							case 50:
								return (this.endValue - this.startValue) * completePercent + this.startValue;
							default:
								throw new js__$Boot_HaxeError("Illegal keyword value for transition timing function style");
						}
						break;
					case 20:
						var y2 = _g[5];
						var x2 = _g[4];
						var y1 = _g[3];
						var x1 = _g[2];
						this._cubicBezier.init(x1, y1, x2, y2);
						return (this.endValue - this.startValue) * this._cubicBezier.bezierY(completePercent) + this.startValue;
					case 19:
						var intervalChange = _g[3];
						var intervalNumbers = _g[2];
						return (this.endValue - this.startValue) * completePercent + this.startValue;
					default:
						throw new js__$Boot_HaxeError("Illegal value for transition timing function style");
				}
			}
		}
		, __class__: cocktail_core_transition_Transition
		, __properties__: { get_complete: "get_complete", get_currentValue: "get_currentValue" }
	};
	var cocktail_core_transition_PendingTransitionVO = function () {
	};
	$hxClasses["cocktail.core.transition.PendingTransitionVO"] = cocktail_core_transition_PendingTransitionVO;
	cocktail_core_transition_PendingTransitionVO.__name__ = ["cocktail", "core", "transition", "PendingTransitionVO"];
	cocktail_core_transition_PendingTransitionVO.prototype = {
		__class__: cocktail_core_transition_PendingTransitionVO
	};
	var cocktail_core_transition_TransitionManager = function (document) {
		this.initTransitions();
		this._document = document;
		this._currentTransitionsNumber = 0;
		this.hasTransitionsInProgress = false;
		this._lastTick = 0;
	};
	$hxClasses["cocktail.core.transition.TransitionManager"] = cocktail_core_transition_TransitionManager;
	cocktail_core_transition_TransitionManager.__name__ = ["cocktail", "core", "transition", "TransitionManager"];
	cocktail_core_transition_TransitionManager.prototype = {
		dispose: function () {
			this._transitions = null;
			this._document = null;
		}
		, initTransitions: function () {
			this._transitions = [];
			var _g = 0;
			while (_g < 87) {
				var i = _g++;
				this._transitions[i] = [];
			}
		}
		, getTransition: function (propertyIndex, style) {
			var transitionsForProperty = this._transitions[propertyIndex];
			if (transitionsForProperty.length == 0) return null;
			var length = transitionsForProperty.length;
			var _g = 0;
			while (_g < length) {
				var i = _g++;
				if (transitionsForProperty[i].target == style) return transitionsForProperty[i];
			}
			return null;
		}
		, startTransition: function (target, propertyIndex, startValue, endValue, transitionDuration, transitionDelay, transitionTimingFunction, onComplete, onUpdate) {
			var transition = new cocktail_core_transition_Transition(propertyIndex, target, transitionDuration, transitionDelay, transitionTimingFunction, startValue, endValue, onComplete, onUpdate);
			var transitionsForProperty = this._transitions[propertyIndex];
			transitionsForProperty.push(transition);
			if (this._currentTransitionsNumber == 0) {
				this.startTransitionUpdate();
				this.hasTransitionsInProgress = true;
			}
			this._currentTransitionsNumber++;
		}
		, stopTransition: function (transition) {
			var propertyTransitions = this._transitions[transition.propertyIndex];
			HxOverrides.remove(propertyTransitions, transition);
			transition.dispose();
			this._currentTransitionsNumber--;
		}
		, getTransitionsForProperty: function (propertyIndex) {
			return this._transitions[propertyIndex];
		}
		, startTransitionUpdate: function () {
			this._lastTick = this._document.timer.getTimer();
			this._document.timer.delay($bind(this, this.onTransitionTick));
		}
		, onTransitionTick: function (timeStamp) {
			var interval = timeStamp - this._lastTick;
			this._lastTick = timeStamp;
			var transitionsLength = this._transitions.length;
			var _g = 0;
			while (_g < transitionsLength) {
				var i = _g++;
				var completedTransitions = [];
				var transitionsForProperty = this._transitions[i];
				var length = transitionsForProperty.length;
				var _g1 = 0;
				while (_g1 < length) {
					var j = _g1++;
					var transition = transitionsForProperty[j];
					transition.updateTime(interval);
					if (transition.get_complete() == true) {
						transition.onComplete(transition);
						completedTransitions.push(transition);
					} else transition.onUpdate(transition);
				}
				var completedTransitionsLength = completedTransitions.length;
				var _g11 = 0;
				while (_g11 < completedTransitionsLength) {
					var i1 = _g11++;
					this.stopTransition(completedTransitions[i1]);
				}
			}
			if (this._currentTransitionsNumber > 0) this._document.timer.delay($bind(this, this.onTransitionTick)); else this.hasTransitionsInProgress = false;
		}
		, __class__: cocktail_core_transition_TransitionManager
	};
	var cocktail_core_transition_Transitioner = function (transitionManager) {
		this._transitionManager = transitionManager;
	};
	$hxClasses["cocktail.core.transition.Transitioner"] = cocktail_core_transition_Transitioner;
	cocktail_core_transition_Transitioner.__name__ = ["cocktail", "core", "transition", "Transitioner"];
	cocktail_core_transition_Transitioner.prototype = {
		startPendingTransitions: function (style) {
			if (this._pendingTransitions == null) return false;
			var atLeastOneTransitionStarted = false;
			var length = this._pendingTransitions.length;
			var _g = 0;
			while (_g < length) {
				var i = _g++;
				var transitionStarted = this.startTransitionIfNeeded(this._pendingTransitions[i], style);
				if (transitionStarted == true) atLeastOneTransitionStarted = true;
			}
			this._pendingTransitions = [];
			return atLeastOneTransitionStarted;
		}
		, registerPendingTransition: function (propertyIndex, startValue) {
			var pendingTransition = new cocktail_core_transition_PendingTransitionVO();
			pendingTransition.propertyIndex = propertyIndex;
			pendingTransition.startValue = startValue;
			if (this._pendingTransitions == null) this._pendingTransitions = [];
			this._pendingTransitions.push(pendingTransition);
		}
		, revertTransitionIfNeeded: function (currentTransition, currentValue, style) {
			if (currentTransition.startValue != currentValue) return false;
			var indexInTransitionProperty = this.getIndexOfPropertyInTransitionProperty(currentTransition.propertyIndex, style.getComputedOrInitialProperty(57));
			if (indexInTransitionProperty == -1) return false;
			var transitionDelays = this.getAsFloatArray(style.getComputedOrInitialProperty(56));
			var transitionDelay = transitionDelays[this.getRepeatedIndex(indexInTransitionProperty, transitionDelays.length)];
			if (currentTransition.transitionDelay != transitionDelay) return false;
			var transitionDurations = this.getAsFloatArray(style.getComputedOrInitialProperty(55));
			var transitionDuration = transitionDurations[this.getRepeatedIndex(indexInTransitionProperty, transitionDurations.length)];
			if (currentTransition.transitionDuration != transitionDuration) return false;
			var transitionTimingFunctionAsArray = this.getTransitionTimingFunctionsAsArray(style.getComputedOrInitialProperty(58));
			var transitionTimingFunction = transitionTimingFunctionAsArray[this.getRepeatedIndex(indexInTransitionProperty, transitionTimingFunctionAsArray.length)];
			if (currentTransition.transitionTimingFunction != transitionTimingFunction) return false;
			currentTransition.revert();
			return true;
		}
		, startTransitionIfNeeded: function (pendingTransition, style) {
			var usedValues = style.usedValues;
			var indexInTransitionProperty = this.getIndexOfPropertyInTransitionProperty(pendingTransition.propertyIndex, style.getComputedOrInitialProperty(57));
			if (indexInTransitionProperty == -1) return false;
			var combinedDuration = 0.0;
			var transitionDelays = this.getAsFloatArray(style.getComputedOrInitialProperty(56));
			var transitionDurations = this.getAsFloatArray(style.getComputedOrInitialProperty(55));
			var transitionDelay = transitionDelays[this.getRepeatedIndex(indexInTransitionProperty, transitionDelays.length)];
			var transitionDuration = transitionDurations[this.getRepeatedIndex(indexInTransitionProperty, transitionDurations.length)];
			combinedDuration = transitionDuration + transitionDelay;
			if (combinedDuration <= 0) return false;
			var transitionTimingFunctionAsArray = this.getTransitionTimingFunctionsAsArray(style.getComputedOrInitialProperty(58));
			var transitionTimingFunction = transitionTimingFunctionAsArray[this.getRepeatedIndex(indexInTransitionProperty, transitionTimingFunctionAsArray.length)];
			var transition = this._transitionManager.getTransition(pendingTransition.propertyIndex, style);
			if (transition != null) return false;
			var endValue = this.getEndValue(style, pendingTransition.propertyIndex);
			this._transitionManager.startTransition(style, pendingTransition.propertyIndex, pendingTransition.startValue, endValue, transitionDuration, transitionDelay, transitionTimingFunction, $bind(this, this.onTransitionComplete), $bind(this, this.onTransitionUpdate));
			return true;
		}
		, getIndexOfPropertyInTransitionProperty: function (propertyIndex, transitionProperty) {
			switch (transitionProperty[1]) {
				case 4:
					var value = transitionProperty[2];
					switch (value[1]) {
						case 18:
							return -1;
						case 48:
							return 0;
						default:
							throw new js__$Boot_HaxeError("Illegal keyword value for transition property");
					}
					break;
				case 3:
					var value1 = transitionProperty[2];
					if (value1 != cocktail_core_css_CSSConstants.getPropertyNameFromIndex(propertyIndex)) return -1; else return 0;
					break;
				case 15:
					var value2 = transitionProperty[2];
					var foundFlag = false;
					var _g1 = 0;
					var _g = value2.length;
					while (_g1 < _g) {
						var i = _g1++;
						{
							var _g2 = value2[i];
							switch (_g2[1]) {
								case 3:
									var value3 = _g2[2];
									if (value3 == cocktail_core_css_CSSConstants.getPropertyNameFromIndex(propertyIndex)) return i;
									break;
								default:
									throw new js__$Boot_HaxeError("Illegal value for transition property");
							}
						}
					}
					return -1;
				default:
					throw new js__$Boot_HaxeError("Illegal values for transition property style");
			}
		}
		, getEndValue: function (style, propertyIndex) {
			switch (propertyIndex) {
				case 53:
					{
						var _g = style.getTransitionablePropertyValue(53);
						switch (_g[1]) {
							case 1:
								var value = _g[2];
								return value;
							case 18:
								var value1 = _g[2];
								return value1;
							default:
								return 0;
						}
					}
					break;
				default:
					return Reflect.field(style.usedValues, cocktail_core_css_CSSConstants.getPropertyNameFromIndex(propertyIndex));
			}
		}
		, getTransitionTimingFunctionsAsArray: function (transitionTimingFunction) {
			switch (transitionTimingFunction[1]) {
				case 4:
					var value = transitionTimingFunction[2];
					return [transitionTimingFunction];
				case 15:
					var value1 = transitionTimingFunction[2];
					return value1;
				default:
					return null;
			}
		}
		, getAsFloatArray: function (value) {
			var floats = [];
			switch (value[1]) {
				case 15:
					var value1 = value[2];
					var _g1 = 0;
					var _g = value1.length;
					while (_g1 < _g) {
						var i = _g1++;
						floats.push(this.getTransitionDelayOrDurationAsFloat(value1[i]));
					}
					break;
				default:
					floats.push(this.getTransitionDelayOrDurationAsFloat(value));
			}
			return floats;
		}
		, getTransitionDelayOrDurationAsFloat: function (value) {
			switch (value[1]) {
				case 0:
					var value1 = value[2];
					return value1;
				case 9:
					var value2 = value[2];
					switch (value2[1]) {
						case 1:
							var value3 = value2[2];
							return value3;
						case 0:
							var value4 = value2[2];
							return value4 * 1000;
					}
					break;
				default:
			}
			return 0.0;
		}
		, getRepeatedIndex: function (index, length) {
			if (index < length) return index; else if (length == 1) return 0;
			return length % index;
		}
		, onTransitionComplete: function (transition) {
			this.onTransitionCompleteCallback(transition);
		}
		, onTransitionUpdate: function (transition) {
			this.onTransitionUpdateCallback(transition);
		}
		, __class__: cocktail_core_transition_Transitioner
	};
	var cocktail_core_url_URL = function () {
	};
	$hxClasses["cocktail.core.url.URL"] = cocktail_core_url_URL;
	cocktail_core_url_URL.__name__ = ["cocktail", "core", "url", "URL"];
	cocktail_core_url_URL.fromString = function (stringUrl) {
		var r = new EReg("^(?:(?![^:@]+:[^:@/]*@)([^:/?#.]+):)?(?://)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:/?#]*)(?::(\\d*))?)(((/(?:[^?#](?![^?#/]*\\.[^?#/.]+(?:[?#]|$)))*/?)?([^?#/]*))(?:\\?([^#]*))?(?:#(.*))?)", "");
		r.match(stringUrl);
		var url = new cocktail_core_url_URL();
		var _g1 = 0;
		var _g = cocktail_core_url_URL._parts.length;
		while (_g1 < _g) {
			var i = _g1++;
			Reflect.setField(url, cocktail_core_url_URL._parts[i], r.matched(i));
		}
		if (cocktail_core_url_URL.isRelative(url) == true) {
			if (url.directory == null && url.host != null) {
				url.file = url.host;
				url.host = null;
			}
		}
		return url;
	};
	cocktail_core_url_URL.toString = function (url) {
		var result = "";
		if (url.scheme != null) result += url.scheme + "://";
		if (url.user != null) result += url.user + ":";
		if (url.password != null) result += url.password + "@";
		if (url.host != null) result += url.host;
		if (url.port != null) result += ":" + url.port;
		if (url.directory != null) result += url.directory;
		if (url.file != null) result += url.file;
		if (url.query != null) result += "?" + url.query;
		if (url.fragment != null) result += "#" + url.fragment;
		return result;
	};
	cocktail_core_url_URL.appendURL = function (url, appendedURL) {
		if (cocktail_core_url_URL.isRelative(url) == true) return cocktail_core_url_URL.appendToRelativeURL(url, appendedURL); else return cocktail_core_url_URL.appendToAbsoluteURL(url, appendedURL);
	};
	cocktail_core_url_URL.isRelative = function (url) {
		return url.scheme == null;
	};
	cocktail_core_url_URL.appendToRelativeURL = function (url, appendedURL) {
		if (url.directory == null || url.host == null) return cocktail_core_url_URL.cloneURL(appendedURL);
		var resultURL = new cocktail_core_url_URL();
		resultURL.host = url.host;
		resultURL.directory = url.directory;
		if (appendedURL.host != null) resultURL.directory += appendedURL.host;
		if (appendedURL.directory != null) {
			var directory = appendedURL.directory;
			if (appendedURL.host == null) resultURL.directory += HxOverrides.substr(directory, 1, null); else resultURL.directory += directory;
		}
		if (appendedURL.file != null) resultURL.file = appendedURL.file;
		resultURL.path = resultURL.directory + resultURL.file;
		if (appendedURL.query != null) resultURL.query = appendedURL.query;
		if (appendedURL.fragment != null) resultURL.fragment = appendedURL.fragment;
		return resultURL;
	};
	cocktail_core_url_URL.appendToAbsoluteURL = function (url, appendedURL) {
		var resultURL = new cocktail_core_url_URL();
		if (url.scheme != null) resultURL.scheme = url.scheme;
		if (url.host != null) resultURL.host = url.host;
		var directory = "";
		if (url.directory != null) directory = url.directory;
		if (appendedURL.host != null) appendedURL.directory += appendedURL.host;
		if (appendedURL.directory != null) directory += appendedURL.directory;
		resultURL.directory = directory;
		if (appendedURL.file != null) resultURL.file = appendedURL.file;
		resultURL.path = resultURL.directory + resultURL.file;
		if (appendedURL.query != null) resultURL.query = appendedURL.query;
		if (appendedURL.fragment != null) resultURL.fragment = appendedURL.fragment;
		return resultURL;
	};
	cocktail_core_url_URL.cloneURL = function (url) {
		var clonedURL = new cocktail_core_url_URL();
		clonedURL.url = url.url;
		clonedURL.source = url.source;
		clonedURL.scheme = url.scheme;
		clonedURL.authority = url.authority;
		clonedURL.userInfo = url.userInfo;
		clonedURL.password = url.password;
		clonedURL.host = url.host;
		clonedURL.port = url.port;
		clonedURL.relative = url.relative;
		clonedURL.path = url.path;
		clonedURL.directory = url.directory;
		clonedURL.file = url.file;
		clonedURL.query = url.query;
		clonedURL.fragment = url.fragment;
		return clonedURL;
	};
	cocktail_core_url_URL.prototype = {
		__class__: cocktail_core_url_URL
	};
	var cocktail_core_window_Window = function (htmlDocument) {
		cocktail_core_event_EventCallback.call(this);
		this.init(htmlDocument);
	};
	$hxClasses["cocktail.core.window.Window"] = cocktail_core_window_Window;
	cocktail_core_window_Window.__name__ = ["cocktail", "core", "window", "Window"];
	cocktail_core_window_Window.__super__ = cocktail_core_event_EventCallback;
	cocktail_core_window_Window.prototype = $extend(cocktail_core_event_EventCallback.prototype, {
		dispose: function () {
			this.document = null;
			this.history.dispose();
			this.history = null;
		}
		, init: function (htmlDocument) {
			this.document = htmlDocument;
			this.setDocumentListener(this.document);
			this.history = new cocktail_core_history_History(htmlDocument);
		}
		, open: function (url, name) {
			if (name == null) name = "_blank";
			this.document.navigateToURL(url, name);
		}
		, setDocumentListener: function (document) {
			var _g = this;
			document.addEventListener("load", function (e) {
				_g.dispatchEvent(e);
			});
			document.addEventListener("resize", function (e1) {
				_g.dispatchEvent(e1);
			});
		}
		, get_innerHeight: function () {
			return Math.floor(this.document.getViewportHeight());
		}
		, get_innerWidth: function () {
			return Math.floor(this.document.getViewportWidth());
		}
		, __class__: cocktail_core_window_Window
		, __properties__: $extend(cocktail_core_event_EventCallback.prototype.__properties__, { get_innerWidth: "get_innerWidth", get_innerHeight: "get_innerHeight" })
	});
	var cocktail_plugin_Plugin = function (node, elementAttributes, params, loadComplete, loadError) {
		this.viewport = new cocktail_core_geom_RectangleVO();
		this._node = node;
		this._loadComplete = loadComplete;
		this._loadError = loadError;
		this._elementAttributes = elementAttributes;
		this._params = params;
	};
	$hxClasses["cocktail.plugin.Plugin"] = cocktail_plugin_Plugin;
	cocktail_plugin_Plugin.__name__ = ["cocktail", "plugin", "Plugin"];
	cocktail_plugin_Plugin.prototype = {
		updateViewport: function (x, y, width, height) {
		}
		, dispose: function () {
		}
		, isCompositedPlugin: function () {
			return false;
		}
		, attach: function (graphicsContext) {
		}
		, detach: function (graphicsContext) {
		}
		, __class__: cocktail_plugin_Plugin
	};
	var cocktail_plugin_swf_SWFPlugin = function (node, elementAttributes, params, loadComplete, loadError) {
		cocktail_plugin_Plugin.call(this, node, elementAttributes, params, loadComplete, loadError);
		this._swfBounds = new cocktail_core_geom_RectangleVO();
		this._swfAddedToStage = false;
		this._isAVM1swf = false;
		this.init();
	};
	$hxClasses["cocktail.plugin.swf.SWFPlugin"] = cocktail_plugin_swf_SWFPlugin;
	cocktail_plugin_swf_SWFPlugin.__name__ = ["cocktail", "plugin", "swf", "SWFPlugin"];
	cocktail_plugin_swf_SWFPlugin.__super__ = cocktail_plugin_Plugin;
	cocktail_plugin_swf_SWFPlugin.prototype = $extend(cocktail_plugin_Plugin.prototype, {
		init: function () {
			var _g = this;
			if (this._params.exists("scale")) this._scaleMode = this._params.get("scale"); else this._scaleMode = "showall";
			this._mask = new openfl_display_Sprite();
			var htmlDocument = this._node.ownerDocument;
			var loadedSWF = htmlDocument.resourceManager.getBinaryResource(this._elementAttributes.get("data"));
			if (js_Boot.__instanceof(loadedSWF.response, openfl_display_Loader)) {
				this._loader = loadedSWF.response;
				var htmlDocument1 = this._node.ownerDocument;
				htmlDocument1.timer.delay(function (e) {
					_g.onLoaderReady(_g._loader);
				});
				return;
			}
			this._loader = new openfl_display_Loader();
			this._loader.contentLoaderInfo.addEventListener(openfl_events_Event.INIT, $bind(this, this.onSWFLoadComplete));
			this._loader.loadBytes(loadedSWF.response);
		}
		, getLoaderContextParams: function () {
			var data = null;
			var swfUrl = this._elementAttributes.get("data");
			if (swfUrl.indexOf("?") != -1) {
				data = {};
				this.parseQueryString(data, (function ($this) {
					var $r;
					var pos = swfUrl.indexOf("?") + 1;
					$r = HxOverrides.substr(swfUrl, pos, null);
					return $r;
				}(this)));
			}
			if (this._params.exists("flashvars")) {
				if (data == null) data = {};
				this.parseQueryString(data, this._params.get("flashvars"));
			}
			return data;
		}
		, parseQueryString: function (data, queryString) {
			var params = queryString.split("&");
			var _g1 = 0;
			var _g = params.length;
			while (_g1 < _g) {
				var i = _g1++;
				var param = params[i].split("=");
				data[param[0]] = param[1];
			}
		}
		, attach: function (graphicsContext) {
			if (this._swfAddedToStage == false) {
				var containerGraphicContext = graphicsContext.nativeLayer.platformLayer;
				if (cocktail_core_config_Config.getInstance().enableCompositing == false && cocktail_core_config_Config.getInstance().objectBelowWhenNoCompositing == true) {
					if (this._isAVM1swf == false) containerGraphicContext.parent.addChildAt(this._swf, 0); else containerGraphicContext.parent.addChildAt(this._loader, 0);
				} else if (this._isAVM1swf == false) containerGraphicContext.addChild(this._swf); else containerGraphicContext.addChild(this._loader);
				this._swfAddedToStage = true;
			}
		}
		, detach: function (graphicsContext) {
			if (this._swfAddedToStage == true) {
				if (this._isAVM1swf == false) this._swf.parent.removeChild(this._swf); else this._loader.parent.removeChild(this._loader);
				this._swfAddedToStage = false;
			}
		}
		, dispose: function () {
			this._loader = null;
			this._swf = null;
			var htmlDocument = this._node.ownerDocument;
			var loadedSWF = htmlDocument.resourceManager.getBinaryResource(this._elementAttributes.get("data"));
			if (js_Boot.__instanceof(loadedSWF.response, openfl_display_Loader) == true) htmlDocument.resourceManager.removeBinaryResource(this._elementAttributes.get("data"));
		}
		, isCompositedPlugin: function () {
			return true;
		}
		, updateViewport: function (x, y, width, height) {
			if (x == this.viewport.x && y == this.viewport.y && width == this.viewport.width && height == this.viewport.height) return;
			this.viewport.x = x;
			this.viewport.y = y;
			this.viewport.width = width;
			this.viewport.height = height;
			this._swf.get_transform().get_matrix().identity();
			cocktail_core_geom_GeomUtils.getCenteredBounds(this.viewport.width, this.viewport.height, this._swfWidth, this._swfHeight, this._swfBounds);
			var _g = this._scaleMode;
			switch (_g) {
				case "noscale":
					this._swf.set_x(Math.round(this.viewport.x));
					this._swf.set_y(Math.round(this.viewport.y));
					break;
				case "exactfit":
					this._swf.set_x(Math.round(this.viewport.x));
					this._swf.set_y(Math.round(this.viewport.y));
					this._swf.set_scaleX(this.viewport.width / this._swfWidth);
					this._swf.set_scaleY(this.viewport.height / this._swfHeight);
					break;
				default:
					this._swf.set_x(Math.round(this.viewport.x + this._swfBounds.x));
					this._swf.set_y(Math.round(this.viewport.y + this._swfBounds.y));
					this._swf.set_scaleX(this._swfBounds.width / this._swfWidth);
					this._swf.set_scaleY(this._swfBounds.height / this._swfHeight);
			}
			this._mask.get_graphics().clear();
			this._mask.get_graphics().beginFill(16711680, 0.5);
			this._mask.get_graphics().drawRect(this.viewport.x, this.viewport.y, this.viewport.width, this.viewport.height);
			this._mask.get_graphics().endFill();
		}
		, onSWFLoadComplete: function (event) {
			this.onLoaderReady(this._loader);
		}
		, onLoaderReady: function (loader) {
			this._isAVM1swf = false;
			this._swfHeight = loader.contentLoaderInfo.height;
			this._swfWidth = loader.contentLoaderInfo.width;
			this._swf = loader.content;
			this._swf.set_mask(this._mask);
			this._loadComplete();
		}
		, __class__: cocktail_plugin_swf_SWFPlugin
	});
	var cocktail_port_base_FontBuilderBase = function () {
	};
	$hxClasses["cocktail.port.base.FontBuilderBase"] = cocktail_port_base_FontBuilderBase;
	cocktail_port_base_FontBuilderBase.__name__ = ["cocktail", "port", "base", "FontBuilderBase"];
	cocktail_port_base_FontBuilderBase.prototype = {
		dispose: function () {
		}
		, getFontMetrics: function (fontFamily, fontSize) {
			return new cocktail_core_font_FontMetricsVO(12.0, 12.0, 12.0, 12.0, 3.0, 3.0, 3.0, 5.0, 12.0);
		}
		, createNativeTextElement: function (text, style, fontFamily) {
			return null;
		}
		, getNativeFontFamily: function (fontFamily) {
			return null;
		}
		, __class__: cocktail_port_base_FontBuilderBase
	};
	var cocktail_port_base_GraphicsSurfaceBase = function () {
		this._useTransparency = false;
		this._useTransformations = false;
		this._alpha = 0.0;
	};
	$hxClasses["cocktail.port.base.GraphicsSurfaceBase"] = cocktail_port_base_GraphicsSurfaceBase;
	cocktail_port_base_GraphicsSurfaceBase.__name__ = ["cocktail", "port", "base", "GraphicsSurfaceBase"];
	cocktail_port_base_GraphicsSurfaceBase.prototype = {
		initBitmapData: function (width, height) {
		}
		, dispose: function () {
		}
		, clear: function (x, y, width, height) {
		}
		, beginTransparency: function (alpha) {
			this._useTransparency = true;
			this._alpha = alpha;
		}
		, copyRect: function (rect, x, y) {
		}
		, endTransparency: function () {
			this._useTransparency = false;
		}
		, beginTransformations: function (matrix) {
			this._useTransformations = true;
			this._matrix = matrix;
		}
		, endTransformations: function () {
			this._matrix = null;
			this._useTransformations = false;
		}
		, drawImage: function (bitmapData, matrix, sourceRect, clipRect) {
		}
		, copyPixels: function (bitmapData, sourceRect, destPoint, clipRect) {
		}
		, fillRect: function (rect, color, clipRect) {
		}
		, __class__: cocktail_port_base_GraphicsSurfaceBase
	};
	var cocktail_port_base_KeyboardListenerBase = function (platform) {
		this._platform = platform;
		this.setNativeListeners();
	};
	$hxClasses["cocktail.port.base.KeyboardListenerBase"] = cocktail_port_base_KeyboardListenerBase;
	cocktail_port_base_KeyboardListenerBase.__name__ = ["cocktail", "port", "base", "KeyboardListenerBase"];
	cocktail_port_base_KeyboardListenerBase.prototype = {
		dispose: function () {
			this.removeNativeListeners();
			this._platform = null;
		}
		, onNativeKeyDown: function (event) {
			if (this.onKeyDown != null) this.onKeyDown(this.getKeyData(event));
		}
		, onNativeKeyUp: function (event) {
			if (this.onKeyUp != null) this.onKeyUp(this.getKeyData(event));
		}
		, setNativeListeners: function () {
		}
		, removeNativeListeners: function () {
		}
		, getKeyData: function (event) {
			return null;
		}
		, __class__: cocktail_port_base_KeyboardListenerBase
	};
	var cocktail_port_base_MouseListenerBase = function (platform) {
		this._platform = platform;
		this.setNativeListeners();
	};
	$hxClasses["cocktail.port.base.MouseListenerBase"] = cocktail_port_base_MouseListenerBase;
	cocktail_port_base_MouseListenerBase.__name__ = ["cocktail", "port", "base", "MouseListenerBase"];
	cocktail_port_base_MouseListenerBase.prototype = {
		dispose: function () {
			this.removeNativeListeners();
			this._platform = null;
		}
		, setMouseCursor: function (cursor) {
		}
		, onNativeMouseDown: function (event) {
			if (this.onMouseDown != null) this.onMouseDown(this.getMouseEvent(event));
		}
		, onNativeMouseUp: function (event) {
			if (this.onMouseUp != null) this.onMouseUp(this.getMouseEvent(event));
		}
		, onNativeMouseMove: function (event) {
			if (this.onMouseMove != null) this.onMouseMove(this.getMouseEvent(event));
		}
		, onNativeMouseWheel: function (event) {
			if (this.onMouseWheel != null) this.onMouseWheel(this.getWheelEvent(event));
		}
		, onNativeMouseLeave: function (event) {
			if (this.onMouseLeave != null) this.onMouseLeave(this.getEvent(event));
		}
		, setNativeListeners: function () {
		}
		, removeNativeListeners: function () {
		}
		, getMouseEvent: function (event) {
			return null;
		}
		, getWheelEvent: function (event) {
			return null;
		}
		, getEvent: function (event) {
			return null;
		}
		, __class__: cocktail_port_base_MouseListenerBase
	};
	var cocktail_port_base_NativeHttpBase = function (timer) {
		cocktail_core_event_EventTarget.call(this);
		this._timer = timer;
	};
	$hxClasses["cocktail.port.base.NativeHttpBase"] = cocktail_port_base_NativeHttpBase;
	cocktail_port_base_NativeHttpBase.__name__ = ["cocktail", "port", "base", "NativeHttpBase"];
	cocktail_port_base_NativeHttpBase.__super__ = cocktail_core_event_EventTarget;
	cocktail_port_base_NativeHttpBase.prototype = $extend(cocktail_core_event_EventTarget.prototype, {
		load: function (url, method, data, authorRequestHeaders, dataFormat) {
			this.status = 0;
			this.total = 0;
			this.loaded = 0;
			this.responseHeaders = new haxe_ds_StringMap();
			this.responseHeadersLoaded = false;
			this.response = null;
			this.error = false;
			this.complete = false;
			this._closed = false;
			this._url = url;
			this.doLoad(url, method, data, authorRequestHeaders, dataFormat);
			this._timer.delay($bind(this, this.onLoadProgress), 50);
		}
		, close: function () {
			this._closed = true;
		}
		, doLoad: function (url, method, data, authorRequestHeaders, dataFormat) {
		}
		, onLoadProgress: function (time) {
			if (this.error == true) {
				var errorEvent = new cocktail_core_event_Event();
				errorEvent.initEvent("error", false, false);
				this.dispatchEvent(errorEvent);
			} else if (this.complete == true) {
				var loadEvent = new cocktail_core_event_Event();
				loadEvent.initEvent("load", false, false);
				this.dispatchEvent(loadEvent);
			} else if (this._closed == false) {
				var progressEvent = new cocktail_core_event_ProgressEvent();
				progressEvent.initProgressEvent("progress", false, false, false, this.get_loaded(), this.get_total());
				this.dispatchEvent(progressEvent);
				this._timer.delay($bind(this, this.onLoadProgress), 50);
			}
		}
		, get_total: function () {
			return -1;
		}
		, get_loaded: function () {
			return -1;
		}
		, __class__: cocktail_port_base_NativeHttpBase
		, __properties__: { get_loaded: "get_loaded", get_total: "get_total" }
	});
	var cocktail_port_base_NativeInputBase = function (node) {
		this._node = node;
	};
	$hxClasses["cocktail.port.base.NativeInputBase"] = cocktail_port_base_NativeInputBase;
	cocktail_port_base_NativeInputBase.__name__ = ["cocktail", "port", "base", "NativeInputBase"];
	cocktail_port_base_NativeInputBase.prototype = {
		attach: function (graphicContext) {
		}
		, detach: function (graphicContext) {
		}
		, focus: function () {
		}
		, blur: function () {
		}
		, dispose: function () {
		}
		, get_viewport: function () {
			return this.viewport;
		}
		, set_viewport: function (value) {
			return this.viewport = value;
		}
		, get_clipRect: function () {
			return this.clipRect;
		}
		, set_clipRect: function (value) {
			return this.clipRect = value;
		}
		, get_value: function () {
			return this.value;
		}
		, set_value: function (textValue) {
			return this.value = textValue;
		}
		, get_checked: function () {
			return this.checked;
		}
		, set_checked: function (value) {
			return this.checked = value;
		}
		, set_maxLength: function (value) {
			return this.maxLength = value;
		}
		, set_disabled: function (value) {
			return this.disabled = value;
		}
		, set_readonly: function (value) {
			return this.readonly = value;
		}
		, get_intrinsicWidth: function () {
			return 0;
		}
		, get_intrinsicHeight: function () {
			return 0;
		}
		, __class__: cocktail_port_base_NativeInputBase
		, __properties__: { set_clipRect: "set_clipRect", get_clipRect: "get_clipRect", set_viewport: "set_viewport", get_viewport: "get_viewport", get_intrinsicHeight: "get_intrinsicHeight", get_intrinsicWidth: "get_intrinsicWidth", set_readonly: "set_readonly", set_disabled: "set_disabled", set_maxLength: "set_maxLength", set_checked: "set_checked", get_checked: "get_checked", set_value: "set_value", get_value: "get_value" }
	};
	var cocktail_port_base_NativeLayerBase = function () {
		this.graphics = new cocktail_port_platform_flash_$player_GraphicsSurface();
	};
	$hxClasses["cocktail.port.base.NativeLayerBase"] = cocktail_port_base_NativeLayerBase;
	cocktail_port_base_NativeLayerBase.__name__ = ["cocktail", "port", "base", "NativeLayerBase"];
	cocktail_port_base_NativeLayerBase.prototype = {
		dispose: function () {
			this.graphics.dispose();
			this.graphics = null;
		}
		, attach: function (platformLayer, index) {
		}
		, detach: function (platformLayer) {
		}
		, initBitmapData: function (width, height) {
		}
		, __class__: cocktail_port_base_NativeLayerBase
	};
	var cocktail_port_base_NativeMedia = function () {
		this.set_alpha(1.0);
		this.set_matrix(new cocktail_core_geom_Matrix());
		this.set_viewport(new cocktail_core_geom_RectangleVO());
	};
	$hxClasses["cocktail.port.base.NativeMedia"] = cocktail_port_base_NativeMedia;
	cocktail_port_base_NativeMedia.__name__ = ["cocktail", "port", "base", "NativeMedia"];
	cocktail_port_base_NativeMedia.prototype = {
		play: function () {
		}
		, pause: function () {
		}
		, seek: function (time) {
		}
		, canPlayType: function (type) {
			return null;
		}
		, attach: function (graphicsContext) {
		}
		, detach: function (graphicsContext) {
		}
		, onNativeLoadedMetaData: function () {
			if (this.onLoadedMetaData != null) {
				var loaddedMetadataEvent = new cocktail_core_event_Event();
				loaddedMetadataEvent.initEvent("loadedmetadata", false, false);
				this.onLoadedMetaData(loaddedMetadataEvent);
			}
		}
		, get_bytesTotal: function () {
			return 0;
		}
		, get_bytesLoaded: function () {
			return 0;
		}
		, get_currentTime: function () {
			return 0;
		}
		, get_height: function () {
			return null;
		}
		, get_width: function () {
			return null;
		}
		, get_duration: function () {
			return 0;
		}
		, set_src: function (value) {
			return value;
		}
		, set_volume: function (value) {
			return value;
		}
		, get_viewport: function () {
			return this.viewport;
		}
		, set_viewport: function (value) {
			return this.viewport = value;
		}
		, get_matrix: function () {
			return this.matrix;
		}
		, set_matrix: function (value) {
			return this.matrix = value;
		}
		, get_alpha: function () {
			return this.alpha;
		}
		, set_alpha: function (value) {
			return this.alpha = value;
		}
		, __class__: cocktail_port_base_NativeMedia
		, __properties__: { set_alpha: "set_alpha", get_alpha: "get_alpha", set_matrix: "set_matrix", get_matrix: "get_matrix", set_viewport: "set_viewport", get_viewport: "get_viewport", get_bytesTotal: "get_bytesTotal", get_bytesLoaded: "get_bytesLoaded", get_currentTime: "get_currentTime", get_height: "get_height", get_width: "get_width", set_src: "set_src", set_volume: "set_volume", get_duration: "get_duration" }
	};
	var cocktail_port_base_NativeTextBase = function (nativeTextElement) {
		this._nativeTextElement = nativeTextElement;
	};
	$hxClasses["cocktail.port.base.NativeTextBase"] = cocktail_port_base_NativeTextBase;
	cocktail_port_base_NativeTextBase.__name__ = ["cocktail", "port", "base", "NativeTextBase"];
	cocktail_port_base_NativeTextBase.prototype = {
		dispose: function () {
			this._nativeTextElement = null;
		}
		, getBitmap: function (bounds) {
			return null;
		}
		, get_width: function () {
			return 0.0;
		}
		, __class__: cocktail_port_base_NativeTextBase
		, __properties__: { get_width: "get_width" }
	};
	var cocktail_port_base_NativeTextInputBase = function (node) {
		cocktail_port_base_NativeInputBase.call(this, node);
	};
	$hxClasses["cocktail.port.base.NativeTextInputBase"] = cocktail_port_base_NativeTextInputBase;
	cocktail_port_base_NativeTextInputBase.__name__ = ["cocktail", "port", "base", "NativeTextInputBase"];
	cocktail_port_base_NativeTextInputBase.__super__ = cocktail_port_base_NativeInputBase;
	cocktail_port_base_NativeTextInputBase.prototype = $extend(cocktail_port_base_NativeInputBase.prototype, {
		set_italic: function (value) {
			return this.italic = value;
		}
		, get_italic: function () {
			return this.italic;
		}
		, get_bold: function () {
			return this.bold;
		}
		, set_bold: function (value) {
			return this.bold = value;
		}
		, set_color: function (value) {
			return this.color = value;
		}
		, get_color: function () {
			return this.color;
		}
		, set_fontFamily: function (value) {
			return this.fontFamily = value;
		}
		, get_fontFamily: function () {
			return this.fontFamily;
		}
		, set_fontSize: function (value) {
			return this.fontSize = value;
		}
		, get_fontSize: function () {
			return this.fontSize;
		}
		, set_letterSpacing: function (value) {
			return this.letterSpacing = value;
		}
		, get_letterSpacing: function () {
			return this.letterSpacing;
		}
		, get_intrinsicWidth: function () {
			return 150;
		}
		, get_intrinsicHeight: function () {
			return 30;
		}
		, __class__: cocktail_port_base_NativeTextInputBase
		, __properties__: $extend(cocktail_port_base_NativeInputBase.prototype.__properties__, { set_fontSize: "set_fontSize", get_fontSize: "get_fontSize", set_letterSpacing: "set_letterSpacing", get_letterSpacing: "get_letterSpacing", set_fontFamily: "set_fontFamily", get_fontFamily: "get_fontFamily", set_color: "set_color", get_color: "get_color", set_bold: "set_bold", get_bold: "get_bold", set_italic: "set_italic", get_italic: "get_italic" })
	});
	var cocktail_port_base_PlatformBase = function () {
		this.setNativeListeners();
		this.mouseListener = new cocktail_port_platform_flash_$player_MouseListener(this);
		this.keyboardListener = new cocktail_port_platform_flash_$player_KeyboardListener(this);
		this.touchListener = new cocktail_port_platform_flash_$player_TouchListener(this);
	};
	$hxClasses["cocktail.port.base.PlatformBase"] = cocktail_port_base_PlatformBase;
	cocktail_port_base_PlatformBase.__name__ = ["cocktail", "port", "base", "PlatformBase"];
	cocktail_port_base_PlatformBase.prototype = {
		dispose: function () {
			this.removeNativeListeners();
			this.mouseListener.dispose();
			this.mouseListener = null;
			this.keyboardListener.dispose();
			this.keyboardListener = null;
			this.touchListener.dispose();
			this.touchListener = null;
		}
		, open: function (url, name) {
		}
		, enterFullscreen: function () {
		}
		, exitFullscreen: function () {
		}
		, fullScreenEnabled: function () {
			return false;
		}
		, fullscreen: function () {
			return false;
		}
		, getRootPlatformLayer: function () {
			return null;
		}
		, getTopPlatformLayer: function () {
			return null;
		}
		, getNativeViewportHeight: function () {
			return -1;
		}
		, getNativeViewportWidth: function () {
			return -1;
		}
		, getNativeViewportX: function () {
			return -1;
		}
		, getNativeViewportY: function () {
			return -1;
		}
		, onViewportUpdate: function () {
		}
		, onNativeResize: function (event) {
			if (this.onResize != null) this.onResize(this.getUIEvent(event));
		}
		, onNativeFullScreenChange: function (event) {
			if (this.onFullScreenChange != null) this.onFullScreenChange(this.getEvent(event));
		}
		, onNativeOrientationChange: function (event) {
			if (this.onOrientationChange != null) this.onOrientationChange(this.getEvent(event));
		}
		, triggerResizeEvent: function () {
			var resizeEvent = new cocktail_core_event_UIEvent();
			resizeEvent.initUIEvent("resize", false, false, null, 0.0);
			if (this.onResize != null) this.onResize(resizeEvent);
		}
		, setNativeListeners: function () {
		}
		, removeNativeListeners: function () {
		}
		, getUIEvent: function (event) {
			return null;
		}
		, getEvent: function (event) {
			return null;
		}
		, set_viewport: function (value) {
			this.viewport = value;
			this.onViewportUpdate();
			this.triggerResizeEvent();
			return this.viewport = value;
		}
		, get_viewportHeight: function () {
			if (this.viewport != null) return this.viewport.height; else return this.getNativeViewportHeight();
		}
		, get_viewportWidth: function () {
			if (this.viewport != null) return this.viewport.width; else return this.getNativeViewportWidth();
		}
		, get_viewportX: function () {
			if (this.viewport != null) return this.viewport.x; else return this.getNativeViewportX();
		}
		, get_viewportY: function () {
			if (this.viewport != null) return this.viewport.y; else return this.getNativeViewportY();
		}
		, __class__: cocktail_port_base_PlatformBase
		, __properties__: { set_viewport: "set_viewport", get_viewportY: "get_viewportY", get_viewportX: "get_viewportX", get_viewportWidth: "get_viewportWidth", get_viewportHeight: "get_viewportHeight" }
	};
	var cocktail_port_base_PlatformTimerBase = function (updateCallback) {
	};
	$hxClasses["cocktail.port.base.PlatformTimerBase"] = cocktail_port_base_PlatformTimerBase;
	cocktail_port_base_PlatformTimerBase.__name__ = ["cocktail", "port", "base", "PlatformTimerBase"];
	cocktail_port_base_PlatformTimerBase.prototype = {
		dispose: function () {
		}
		, getTimer: function () {
			return -1;
		}
		, __class__: cocktail_port_base_PlatformTimerBase
	};
	var cocktail_port_base_ResourceBase = function (url) {
		cocktail_core_event_EventTarget.call(this);
		this.loaded = false;
		this.loadedWithError = false;
		this.load(url);
	};
	$hxClasses["cocktail.port.base.ResourceBase"] = cocktail_port_base_ResourceBase;
	cocktail_port_base_ResourceBase.__name__ = ["cocktail", "port", "base", "ResourceBase"];
	cocktail_port_base_ResourceBase.__super__ = cocktail_core_event_EventTarget;
	cocktail_port_base_ResourceBase.prototype = $extend(cocktail_core_event_EventTarget.prototype, {
		load: function (url) {
		}
		, onLoadComplete: function () {
			this.loaded = true;
			var loadEvent = new cocktail_core_event_UIEvent();
			loadEvent.initUIEvent("load", false, false, null, 0.0);
			this.dispatchEvent(loadEvent);
		}
		, onLoadError: function () {
			this.loadedWithError = true;
			var errorEvent = new cocktail_core_event_UIEvent();
			errorEvent.initUIEvent("error", false, false, null, 0.0);
			this.dispatchEvent(errorEvent);
		}
		, __class__: cocktail_port_base_ResourceBase
	});
	var cocktail_port_base_TouchListenerBase = function (platform) {
		this._platform = platform;
		this.setNativeListeners();
	};
	$hxClasses["cocktail.port.base.TouchListenerBase"] = cocktail_port_base_TouchListenerBase;
	cocktail_port_base_TouchListenerBase.__name__ = ["cocktail", "port", "base", "TouchListenerBase"];
	cocktail_port_base_TouchListenerBase.prototype = {
		dispose: function () {
			this.removeNativeListeners();
			this._platform = null;
		}
		, onNativeTouchStart: function (event) {
			if (this.onTouchStart != null) this.onTouchStart(this.getTouchEvent(event));
		}
		, onNativeTouchEnd: function (event) {
			if (this.onTouchEnd != null) this.onTouchEnd(this.getTouchEvent(event));
		}
		, onNativeTouchMove: function (event) {
			if (this.onTouchMove != null) this.onTouchMove(this.getTouchEvent(event));
		}
		, setNativeListeners: function () {
		}
		, removeNativeListeners: function () {
		}
		, getTouchEvent: function (event) {
			return null;
		}
		, __class__: cocktail_port_base_TouchListenerBase
	};
	var cocktail_port_platform_flash_$player_FontBuilder = function () {
		cocktail_port_base_FontBuilderBase.call(this);
	};
	$hxClasses["cocktail.port.platform.flash_player.FontBuilder"] = cocktail_port_platform_flash_$player_FontBuilder;
	cocktail_port_platform_flash_$player_FontBuilder.__name__ = ["cocktail", "port", "platform", "flash_player", "FontBuilder"];
	cocktail_port_platform_flash_$player_FontBuilder.__super__ = cocktail_port_base_FontBuilderBase;
	cocktail_port_platform_flash_$player_FontBuilder.prototype = $extend(cocktail_port_base_FontBuilderBase.prototype, {
		getFontMetrics: function (fontFamily, fontSize) {
			var textField = new openfl_text_TextField();
			textField.set_autoSize(openfl_text_TextFieldAutoSize.LEFT);
			textField.set_text("X");
			var textFormat = new openfl_text_TextFormat();
			textFormat.size = fontSize;
			textFormat.font = fontFamily;
			textField.setTextFormat(textFormat);
			var fontMetricsVO = new cocktail_core_font_FontMetricsVO(fontSize, 0, 0, 0, 0, 0, 0, 0, 0);
			this.setAscentAndDescent(textField, fontMetricsVO, textFormat);
			textField.set_text("x");
			textField.setTextFormat(textFormat);
			fontMetricsVO.xHeight = textField.get_textHeight();
			textField.set_text(" ");
			textField.setTextFormat(textFormat);
			fontMetricsVO.spaceWidth = textField.get_width();
			return fontMetricsVO;
		}
		, createNativeTextElement: function (text, style, fontFamily) {
			var textField = new openfl_text_TextField();
			textField.set_text(text);
			textField.set_selectable(false);
			textField.set_autoSize(openfl_text_TextFieldAutoSize.LEFT);
			var embeddedFont = openfl_Assets.getFont(fontFamily);
			if (embeddedFont != null) {
				fontFamily = embeddedFont.name;
				textField.set_embedFonts(true);
			}
			textField.setTextFormat(this.getTextFormat(style, fontFamily));
			return textField;
		}
		, getNativeFontFamily: function (value) {
			var fontFamily = "";
			var length = value.length;
			var _g = 0;
			while (_g < length) {
				var i = _g++;
				var fontName = value[i];
				var _g1 = fontName.toUpperCase();
				switch (_g1) {
					case "SERIF":
						fontName = "_serif";
						break;
					case "SANS-SERIF":
						fontName = "_sans";
						break;
					case "MONOSPACE":
						fontName = "_typewriter";
						break;
				}
				fontFamily += fontName;
				if (i < value.length - 1) fontFamily += ",";
			}
			return fontFamily;
		}
		, setAscentAndDescent: function (textField, fontMetrics, textFormat) {
			var textLineMetrics = textField.getLineMetrics(0);
			fontMetrics.ascent = textLineMetrics.ascent;
			fontMetrics.descent = textLineMetrics.descent;
		}
		, getTextFormat: function (style, fontFamily) {
			var usedValues = style.usedValues;
			var textFormat = new openfl_text_TextFormat();
			textFormat.font = fontFamily;
			textFormat.letterSpacing = usedValues.letterSpacing;
			textFormat.size = style.getAbsoluteLength(style.getTransitionablePropertyValue(34));
			var bold = false;
			{
				var _g = style.getComputedOrInitialProperty(35);
				switch (_g[1]) {
					case 4:
						var value = _g[2];
						switch (value[1]) {
							case 1: case 2:
								bold = true;
								break;
							default:
						}
						break;
					case 0:
						var value1 = _g[2];
						if (value1 > 400) bold = true;
						break;
					default:
				}
			}
			textFormat.bold = bold;
			var fontStyle = style.getKeyword(style.getComputedOrInitialProperty(36));
			textFormat.italic = fontStyle == cocktail_core_css_CSSKeywordValue.ITALIC || fontStyle == cocktail_core_css_CSSKeywordValue.OBLIQUE;
			textFormat.color = usedValues.color.color;
			return textFormat;
		}
		, __class__: cocktail_port_platform_flash_$player_FontBuilder
	});
	var cocktail_port_platform_flash_$player_GraphicsSurface = function () {
		cocktail_port_base_GraphicsSurfaceBase.call(this);
		if (cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle == null) {
			cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle = new openfl_geom_Rectangle();
			cocktail_port_platform_flash_$player_GraphicsSurface._flashPoint = new openfl_geom_Point();
			cocktail_port_platform_flash_$player_GraphicsSurface._flashAlphaPoint = new openfl_geom_Point();
			cocktail_port_platform_flash_$player_GraphicsSurface._flashMatrix = new openfl_geom_Matrix();
			cocktail_port_platform_flash_$player_GraphicsSurface._fillRectRectangle = new cocktail_core_geom_RectangleVO();
			cocktail_port_platform_flash_$player_GraphicsSurface._fillRectPoint = new cocktail_core_geom_PointVO(0.0, 0.0);
			cocktail_port_platform_flash_$player_GraphicsSurface._flashColorTransform = new openfl_geom_ColorTransform();
			cocktail_port_platform_flash_$player_GraphicsSurface._clippedRectRectangle = new cocktail_core_geom_RectangleVO();
		}
	};
	$hxClasses["cocktail.port.platform.flash_player.GraphicsSurface"] = cocktail_port_platform_flash_$player_GraphicsSurface;
	cocktail_port_platform_flash_$player_GraphicsSurface.__name__ = ["cocktail", "port", "platform", "flash_player", "GraphicsSurface"];
	cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle = null;
	cocktail_port_platform_flash_$player_GraphicsSurface._flashPoint = null;
	cocktail_port_platform_flash_$player_GraphicsSurface._flashAlphaPoint = null;
	cocktail_port_platform_flash_$player_GraphicsSurface._flashMatrix = null;
	cocktail_port_platform_flash_$player_GraphicsSurface._flashColorTransform = null;
	cocktail_port_platform_flash_$player_GraphicsSurface._fillRectRectangle = null;
	cocktail_port_platform_flash_$player_GraphicsSurface._clippedRectRectangle = null;
	cocktail_port_platform_flash_$player_GraphicsSurface._fillRectPoint = null;
	cocktail_port_platform_flash_$player_GraphicsSurface.roundFlashRect = function () {
		cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.x = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.x);
		cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.y = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.y);
		cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.width = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.width);
		cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.height = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.height);
	};
	cocktail_port_platform_flash_$player_GraphicsSurface.roundFlashPoint = function () {
		cocktail_port_platform_flash_$player_GraphicsSurface._flashPoint.x = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashPoint.x);
		cocktail_port_platform_flash_$player_GraphicsSurface._flashPoint.y = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashPoint.y);
	};
	cocktail_port_platform_flash_$player_GraphicsSurface.__super__ = cocktail_port_base_GraphicsSurfaceBase;
	cocktail_port_platform_flash_$player_GraphicsSurface.prototype = $extend(cocktail_port_base_GraphicsSurfaceBase.prototype, {
		initBitmapData: function (width, height) {
			this.nativeBitmapData = new openfl_display_BitmapData(width, height, true, 0);
		}
		, clear: function (x, y, width, height) {
			if (this.nativeBitmapData != null) {
				cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.x = x;
				cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.y = y;
				cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.width = width;
				cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.height = height;
				this.nativeBitmapData.fillRect(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle, 0);
			}
		}
		, beginTransparency: function (alpha) {
			cocktail_port_base_GraphicsSurfaceBase.prototype.beginTransparency.call(this, alpha);
			cocktail_port_platform_flash_$player_GraphicsSurface._flashColorTransform.alphaMultiplier = alpha;
		}
		, dispose: function () {
			if (this.nativeBitmapData != null) {
				this.nativeBitmapData.dispose();
				this.nativeBitmapData = null;
			}
		}
		, drawImage: function (bitmapData, matrix, sourceRect, clipRect) {
			if (this.nativeBitmapData == null) return;
			cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.x = sourceRect.x + clipRect.x - matrix.e;
			cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.y = sourceRect.y + clipRect.y - matrix.f;
			cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.width = clipRect.width;
			cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.height = clipRect.height;
			cocktail_port_platform_flash_$player_GraphicsSurface._flashMatrix.a = matrix.a;
			cocktail_port_platform_flash_$player_GraphicsSurface._flashMatrix.b = matrix.b;
			cocktail_port_platform_flash_$player_GraphicsSurface._flashMatrix.c = matrix.c;
			cocktail_port_platform_flash_$player_GraphicsSurface._flashMatrix.d = matrix.d;
			cocktail_port_platform_flash_$player_GraphicsSurface._flashMatrix.tx = matrix.e;
			cocktail_port_platform_flash_$player_GraphicsSurface._flashMatrix.ty = matrix.f;
			if (this._useTransformations == true) {
				cocktail_port_platform_flash_$player_GraphicsSurface._flashMatrix.tx += this._matrix.e;
				cocktail_port_platform_flash_$player_GraphicsSurface._flashMatrix.ty += this._matrix.f;
				cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.width += this._matrix.e;
				cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.height += this._matrix.f;
			}
			cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.x = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.x);
			cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.y = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.y);
			cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.width = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.width);
			cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.height = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.height);
			if (this._useTransparency == true) this.nativeBitmapData.draw(bitmapData, cocktail_port_platform_flash_$player_GraphicsSurface._flashMatrix, cocktail_port_platform_flash_$player_GraphicsSurface._flashColorTransform, null, cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle, true); else this.nativeBitmapData.draw(bitmapData, cocktail_port_platform_flash_$player_GraphicsSurface._flashMatrix, null, null, cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle, true);
		}
		, copyPixels: function (bitmapData, sourceRect, destPoint, clipRect) {
			if (this.nativeBitmapData == null) return;
			cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.x = sourceRect.x;
			cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.y = sourceRect.y;
			cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.width = sourceRect.width;
			cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.height = sourceRect.height;
			cocktail_port_platform_flash_$player_GraphicsSurface._flashPoint.x = destPoint.x;
			cocktail_port_platform_flash_$player_GraphicsSurface._flashPoint.y = destPoint.y;
			if (destPoint.x + sourceRect.width > clipRect.x + clipRect.width) cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.width += clipRect.x + clipRect.width - (destPoint.x + sourceRect.width);
			if (destPoint.x < clipRect.x) {
				cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.x += clipRect.x - destPoint.x;
				cocktail_port_platform_flash_$player_GraphicsSurface._flashPoint.x += clipRect.x - destPoint.x;
				cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.width -= clipRect.x - destPoint.x;
			}
			if (destPoint.y + sourceRect.height > clipRect.y + clipRect.height) cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.height += clipRect.y + clipRect.height - (destPoint.y + sourceRect.height);
			if (destPoint.y < clipRect.y) {
				cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.y += clipRect.y - destPoint.y;
				cocktail_port_platform_flash_$player_GraphicsSurface._flashPoint.y += clipRect.y - destPoint.y;
				cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.height -= clipRect.y - destPoint.y;
			}
			if (this._useTransformations == true) {
				cocktail_port_platform_flash_$player_GraphicsSurface._flashPoint.x += this._matrix.e;
				cocktail_port_platform_flash_$player_GraphicsSurface._flashPoint.y += this._matrix.f;
			}
			cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.x = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.x);
			cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.y = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.y);
			cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.width = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.width);
			cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.height = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.height);
			cocktail_port_platform_flash_$player_GraphicsSurface._flashPoint.x = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashPoint.x);
			cocktail_port_platform_flash_$player_GraphicsSurface._flashPoint.y = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashPoint.y);
			if (this._useTransparency == true) {
				cocktail_port_platform_flash_$player_GraphicsSurface._flashMatrix.identity();
				cocktail_port_platform_flash_$player_GraphicsSurface._flashMatrix.tx = Math.floor(destPoint.x);
				cocktail_port_platform_flash_$player_GraphicsSurface._flashMatrix.ty = Math.floor(destPoint.y);
				this.nativeBitmapData.draw(bitmapData, cocktail_port_platform_flash_$player_GraphicsSurface._flashMatrix, cocktail_port_platform_flash_$player_GraphicsSurface._flashColorTransform, null, null, true);
			} else this.nativeBitmapData.copyPixels(bitmapData, cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle, cocktail_port_platform_flash_$player_GraphicsSurface._flashPoint, null, null, true);
		}
		, fillRect: function (rect, color, clipRect) {
			if (this.nativeBitmapData == null) return;
			var argbColor = color.color;
			var alpha = Math.round(255 * color.alpha);
			argbColor += alpha << 24;
			if (color.alpha != 1.0 || this._useTransparency == true) {
				cocktail_port_platform_flash_$player_GraphicsSurface._fillRectRectangle.width = rect.width;
				cocktail_port_platform_flash_$player_GraphicsSurface._fillRectRectangle.height = rect.height;
				cocktail_port_platform_flash_$player_GraphicsSurface._fillRectPoint.x = rect.x;
				cocktail_port_platform_flash_$player_GraphicsSurface._fillRectPoint.y = rect.y;
				cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.x = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.x);
				cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.y = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.y);
				cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.width = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.width);
				cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.height = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.height);
				var fillRectBitmapData = new openfl_display_BitmapData(Math.round(rect.width), Math.round(rect.height), true, argbColor);
				this.copyPixels(fillRectBitmapData, cocktail_port_platform_flash_$player_GraphicsSurface._fillRectRectangle, cocktail_port_platform_flash_$player_GraphicsSurface._fillRectPoint, clipRect);
				fillRectBitmapData.dispose();
			} else {
				cocktail_port_platform_flash_$player_GraphicsSurface._clippedRectRectangle.x = rect.x;
				cocktail_port_platform_flash_$player_GraphicsSurface._clippedRectRectangle.y = rect.y;
				cocktail_port_platform_flash_$player_GraphicsSurface._clippedRectRectangle.width = rect.width;
				cocktail_port_platform_flash_$player_GraphicsSurface._clippedRectRectangle.height = rect.height;
				if (this._useTransformations == true) {
					cocktail_port_platform_flash_$player_GraphicsSurface._clippedRectRectangle.x += this._matrix.e;
					cocktail_port_platform_flash_$player_GraphicsSurface._clippedRectRectangle.y += this._matrix.f;
				}
				cocktail_core_geom_GeomUtils.intersectBounds(cocktail_port_platform_flash_$player_GraphicsSurface._clippedRectRectangle, clipRect, cocktail_port_platform_flash_$player_GraphicsSurface._clippedRectRectangle);
				cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.x = cocktail_port_platform_flash_$player_GraphicsSurface._clippedRectRectangle.x;
				cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.y = cocktail_port_platform_flash_$player_GraphicsSurface._clippedRectRectangle.y;
				cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.width = cocktail_port_platform_flash_$player_GraphicsSurface._clippedRectRectangle.width;
				cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.height = cocktail_port_platform_flash_$player_GraphicsSurface._clippedRectRectangle.height;
				cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.x = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.x);
				cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.y = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.y);
				cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.width = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.width);
				cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.height = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.height);
				this.nativeBitmapData.fillRect(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle, argbColor);
			}
		}
		, copyRect: function (rect, x, y) {
			cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.x = rect.x;
			cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.y = rect.y;
			cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.width = rect.width;
			cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.height = rect.height;
			cocktail_port_platform_flash_$player_GraphicsSurface._flashPoint.x = x;
			cocktail_port_platform_flash_$player_GraphicsSurface._flashPoint.y = y;
			cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.x = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.x);
			cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.y = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.y);
			cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.width = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.width);
			cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.height = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle.height);
			cocktail_port_platform_flash_$player_GraphicsSurface._flashPoint.x = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashPoint.x);
			cocktail_port_platform_flash_$player_GraphicsSurface._flashPoint.y = Math.round(cocktail_port_platform_flash_$player_GraphicsSurface._flashPoint.y);
			this.nativeBitmapData.copyPixels(this.nativeBitmapData, cocktail_port_platform_flash_$player_GraphicsSurface._flashRectangle, cocktail_port_platform_flash_$player_GraphicsSurface._flashPoint, null, null, true);
		}
		, __class__: cocktail_port_platform_flash_$player_GraphicsSurface
	});
	var cocktail_port_platform_flash_$player_ImageResource = function (url) {
		this._loader = new openfl_display_Loader();
		cocktail_port_base_ResourceBase.call(this, url);
	};
	$hxClasses["cocktail.port.platform.flash_player.ImageResource"] = cocktail_port_platform_flash_$player_ImageResource;
	cocktail_port_platform_flash_$player_ImageResource.__name__ = ["cocktail", "port", "platform", "flash_player", "ImageResource"];
	cocktail_port_platform_flash_$player_ImageResource.__super__ = cocktail_port_base_ResourceBase;
	cocktail_port_platform_flash_$player_ImageResource.prototype = $extend(cocktail_port_base_ResourceBase.prototype, {
		load: function (url) {
			if (url.indexOf("http://") == -1 && url.indexOf("https://") == -1) {
				var asset = openfl_Assets.getBitmapData(url);
				if (asset != null) {
					this.nativeResource = asset;
					this.intrinsicHeight = asset.height;
					this.intrinsicWidth = asset.width;
					this.intrinsicRatio = this.intrinsicWidth / this.intrinsicHeight;
					this.onLoadComplete();
					return;
				}
			}
			this._loader.unload();
			this._loader.contentLoaderInfo.addEventListener(openfl_events_Event.COMPLETE, $bind(this, this.onNativeLoadComplete));
			this._loader.contentLoaderInfo.addEventListener(openfl_events_IOErrorEvent.IO_ERROR, $bind(this, this.onNativeLoadIOError));
			var request = new openfl_net_URLRequest(url);
			this._loader.load(request);
		}
		, onNativeLoadComplete: function (event) {
			this.removeLoaderListeners(this._loader);
			this.setIntrinsicDimensions(this._loader);
			this.setNativeResource(this._loader);
		}
		, onNativeLoadIOError: function (event) {
			this.removeLoaderListeners(this._loader);
			this.onLoadError();
		}
		, removeLoaderListeners: function (loader) {
			loader.contentLoaderInfo.removeEventListener(openfl_events_Event.COMPLETE, $bind(this, this.onNativeLoadComplete));
			loader.contentLoaderInfo.removeEventListener(openfl_events_IOErrorEvent.IO_ERROR, $bind(this, this.onNativeLoadIOError));
		}
		, setIntrinsicDimensions: function (loader) {
			this.intrinsicHeight = Math.round(loader.get_height());
			this.intrinsicWidth = Math.round(loader.get_width());
			this.intrinsicRatio = this.intrinsicWidth / this.intrinsicHeight;
		}
		, setNativeResource: function (loader) {
			if (loader.contentLoaderInfo.childAllowsParent == true) {
				this.getBitmapDataFromLoader(loader);
				this.onLoadComplete();
			} else {
			}
		}
		, getBitmapDataFromLoader: function (loader) {
			var bitmap = loader.content;
			this.nativeResource = bitmap.bitmapData;
		}
		, onChildAllowsParentTick: function () {
			var _g = this;
			if (this._loader.contentLoaderInfo.childAllowsParent == false) haxe_Timer.delay(function () {
				_g.onChildAllowsParentTick();
			}, 50); else {
				this.getBitmapDataFromLoader(this._loader);
				this.onLoadComplete();
			}
		}
		, __class__: cocktail_port_platform_flash_$player_ImageResource
	});
	var cocktail_port_platform_flash_$player_KeyboardListener = function (platform) {
		cocktail_port_base_KeyboardListenerBase.call(this, platform);
	};
	$hxClasses["cocktail.port.platform.flash_player.KeyboardListener"] = cocktail_port_platform_flash_$player_KeyboardListener;
	cocktail_port_platform_flash_$player_KeyboardListener.__name__ = ["cocktail", "port", "platform", "flash_player", "KeyboardListener"];
	cocktail_port_platform_flash_$player_KeyboardListener.__super__ = cocktail_port_base_KeyboardListenerBase;
	cocktail_port_platform_flash_$player_KeyboardListener.prototype = $extend(cocktail_port_base_KeyboardListenerBase.prototype, {
		setNativeListeners: function () {
			openfl_Lib.current.stage.addEventListener(openfl_events_KeyboardEvent.KEY_DOWN, $bind(this, this.onNativeKeyDown));
			openfl_Lib.current.stage.addEventListener(openfl_events_KeyboardEvent.KEY_UP, $bind(this, this.onNativeKeyUp));
		}
		, removeNativeListeners: function () {
			openfl_Lib.current.stage.removeEventListener(openfl_events_KeyboardEvent.KEY_DOWN, $bind(this, this.onNativeKeyDown));
			openfl_Lib.current.stage.removeEventListener(openfl_events_KeyboardEvent.KEY_UP, $bind(this, this.onNativeKeyUp));
		}
		, getKeyData: function (event) {
			var typedEvent = event;
			var eventType;
			var _g = typedEvent.type;
			switch (_g) {
				case "keyDown":
					eventType = "keydown";
					break;
				case "keyUp":
					eventType = "keyup";
					break;
				default:
					eventType = typedEvent.type;
			}
			var keyboardEvent = new cocktail_core_event_KeyboardEvent();
			keyboardEvent.initKeyboardEvent(eventType, true, true, null, typedEvent.charCode == null ? "null" : "" + typedEvent.charCode, typedEvent.keyCode == null ? "null" : "" + typedEvent.keyCode, 0, this.getModifersList(typedEvent), false, "");
			return keyboardEvent;
		}
		, getModifersList: function (keyboardEvent) {
			var modifiersList = "";
			if (keyboardEvent.shiftKey == true) modifiersList += "Shift ";
			if (keyboardEvent.ctrlKey == true) modifiersList += "Control ";
			if (keyboardEvent.altKey == true) modifiersList += "Alt";
			return modifiersList;
		}
		, __class__: cocktail_port_platform_flash_$player_KeyboardListener
	});
	var cocktail_port_platform_flash_$player_MouseListener = function (platform) {
		cocktail_port_base_MouseListenerBase.call(this, platform);
	};
	$hxClasses["cocktail.port.platform.flash_player.MouseListener"] = cocktail_port_platform_flash_$player_MouseListener;
	cocktail_port_platform_flash_$player_MouseListener.__name__ = ["cocktail", "port", "platform", "flash_player", "MouseListener"];
	cocktail_port_platform_flash_$player_MouseListener.__super__ = cocktail_port_base_MouseListenerBase;
	cocktail_port_platform_flash_$player_MouseListener.prototype = $extend(cocktail_port_base_MouseListenerBase.prototype, {
		setMouseCursor: function (cursor) {
		}
		, setBitmapCursor: function (nativeBitmapData, hotSpot) {
		}
		, setNativeListeners: function () {
			this._platform.hitTestingSprite.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN, $bind(this, this.onNativeMouseDown));
			this._platform.hitTestingSprite.addEventListener(openfl_events_MouseEvent.MOUSE_UP, $bind(this, this.onNativeMouseUp));
			this._platform.hitTestingSprite.addEventListener(openfl_events_MouseEvent.MOUSE_MOVE, $bind(this, this.onNativeMouseMove));
			this._platform.hitTestingSprite.addEventListener(openfl_events_MouseEvent.MOUSE_WHEEL, $bind(this, this.onNativeMouseWheel));
			this._platform.hitTestingSprite.addEventListener(openfl_events_MouseEvent.MOUSE_OUT, $bind(this, this.onNativeMouseLeave));
			openfl_Lib.current.stage.addEventListener(openfl_events_Event.MOUSE_LEAVE, $bind(this, this.onNativeMouseLeave));
		}
		, removeNativeListeners: function () {
			this._platform.hitTestingSprite.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN, $bind(this, this.onNativeMouseDown));
			this._platform.hitTestingSprite.removeEventListener(openfl_events_MouseEvent.MOUSE_UP, $bind(this, this.onNativeMouseUp));
			this._platform.hitTestingSprite.removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE, $bind(this, this.onNativeMouseMove));
			this._platform.hitTestingSprite.removeEventListener(openfl_events_MouseEvent.MOUSE_WHEEL, $bind(this, this.onNativeMouseWheel));
			this._platform.hitTestingSprite.removeEventListener(openfl_events_MouseEvent.MOUSE_OUT, $bind(this, this.onNativeMouseLeave));
			openfl_Lib.current.stage.removeEventListener(openfl_events_Event.MOUSE_LEAVE, $bind(this, this.onNativeMouseLeave));
		}
		, getMouseEvent: function (event) {
			var typedEvent = event;
			var eventType;
			var _g = typedEvent.type;
			switch (_g) {
				case "mouseDown":
					eventType = "mousedown";
					break;
				case "mouseUp":
					eventType = "mouseup";
					break;
				case "mouseMove":
					eventType = "mousemove";
					break;
				default:
					eventType = typedEvent.type;
			}
			var mouseEvent = new cocktail_core_event_MouseEvent();
			var localPoint = new openfl_geom_Point(typedEvent.localX, typedEvent.localY);
			mouseEvent.initMouseEvent(eventType, true, true, null, 0.0, Math.round(localPoint.x), Math.round(localPoint.y), Math.round(localPoint.x), Math.round(localPoint.y), typedEvent.ctrlKey, typedEvent.altKey, typedEvent.shiftKey, false, 0, null);
			return mouseEvent;
		}
		, getWheelEvent: function (event) {
			var typedEvent = event;
			var wheelEvent = new cocktail_core_event_WheelEvent();
			var offset = openfl_Lib.current.localToGlobal(new openfl_geom_Point());
			wheelEvent.initWheelEvent("wheel", true, true, null, 0.0, Math.round(typedEvent.stageX - offset.x), Math.round(typedEvent.stageY - offset.y), Math.round(typedEvent.stageX - offset.x), Math.round(typedEvent.stageY - offset.y), 0, null, "", 0, typedEvent.delta, 0, 0);
			return wheelEvent;
		}
		, getEvent: function (event) {
			var typedEvent = event;
			var event1 = new cocktail_core_event_Event();
			event1.initEvent("mouseleave", true, false);
			return event1;
		}
		, __class__: cocktail_port_platform_flash_$player_MouseListener
	});
	var cocktail_port_platform_flash_$player_NativeAudio = function () {
		cocktail_port_base_NativeMedia.call(this);
		this._currentTime = 0.0;
		this._isPlaying = false;
	};
	$hxClasses["cocktail.port.platform.flash_player.NativeAudio"] = cocktail_port_platform_flash_$player_NativeAudio;
	cocktail_port_platform_flash_$player_NativeAudio.__name__ = ["cocktail", "port", "platform", "flash_player", "NativeAudio"];
	cocktail_port_platform_flash_$player_NativeAudio.__super__ = cocktail_port_base_NativeMedia;
	cocktail_port_platform_flash_$player_NativeAudio.prototype = $extend(cocktail_port_base_NativeMedia.prototype, {
		play: function () {
			this._isPlaying = true;
			this.seek(this._currentTime / 1000);
		}
		, pause: function () {
			this._isPlaying = false;
			if (this._soundChannel != null) {
				this._currentTime = this._soundChannel.get_position();
				this._soundChannel.stop();
			}
		}
		, seek: function (time) {
			if (this._soundChannel != null) this._soundChannel.stop();
			if (this._isPlaying == true) this._soundChannel = this._sound.play(time * 1000, 0, new openfl_media_SoundTransform(this.volume, 0)); else this._currentTime = time;
		}
		, canPlayType: function (type) {
			if (type.indexOf("mp3") != -1) return "probably";
			return "maybe";
		}
		, onID3DataReceived: function (event) {
			this.onNativeLoadedMetaData();
			this._sound.removeEventListener(openfl_events_Event.ID3, $bind(this, this.onID3DataReceived));
			this._sound.removeEventListener(openfl_events_Event.COMPLETE, $bind(this, this.onID3DataReceived));
		}
		, initSound: function (src) {
			var asset = openfl_Assets.getSound(src);
			if (asset != null) {
				this._sound = asset;
				this.onNativeLoadedMetaData();
				return;
			}
			this._sound = new openfl_media_Sound();
			this._sound.addEventListener(openfl_events_Event.ID3, $bind(this, this.onID3DataReceived));
			this._sound.addEventListener(openfl_events_Event.COMPLETE, $bind(this, this.onID3DataReceived));
			this._sound.addEventListener(openfl_events_IOErrorEvent.IO_ERROR, $bind(this, this.onIOError));
			this._sound.load(new openfl_net_URLRequest(src));
		}
		, onIOError: function (e) {
		}
		, set_volume: function (value) {
			this.volume = value;
			if (this._soundChannel != null) this._soundChannel.set_soundTransform(new openfl_media_SoundTransform(value, 0));
			return value;
		}
		, get_bytesTotal: function () {
			return this._sound.bytesTotal;
		}
		, get_bytesLoaded: function () {
			return this._sound.bytesLoaded;
		}
		, get_duration: function () {
			return this._sound.get_length() / 1000;
		}
		, get_currentTime: function () {
			return this._soundChannel.get_position() / 1000;
		}
		, set_src: function (value) {
			this._currentTime = 0.0;
			this.initSound(value);
			return value;
		}
		, __class__: cocktail_port_platform_flash_$player_NativeAudio
	});
	var cocktail_port_platform_flash_$player_NativeButton = function (node) {
		cocktail_port_base_NativeInputBase.call(this, node);
	};
	$hxClasses["cocktail.port.platform.flash_player.NativeButton"] = cocktail_port_platform_flash_$player_NativeButton;
	cocktail_port_platform_flash_$player_NativeButton.__name__ = ["cocktail", "port", "platform", "flash_player", "NativeButton"];
	cocktail_port_platform_flash_$player_NativeButton.__super__ = cocktail_port_base_NativeInputBase;
	cocktail_port_platform_flash_$player_NativeButton.prototype = $extend(cocktail_port_base_NativeInputBase.prototype, {
		set_value: function (textValue) {
			this._node.set_innerHTML(textValue);
			return textValue;
		}
		, __class__: cocktail_port_platform_flash_$player_NativeButton
	});
	var cocktail_port_platform_flash_$player_NativeHttp = function (timer) {
		cocktail_port_base_NativeHttpBase.call(this, timer);
		this._urlLoader = new openfl_net_URLLoader();
	};
	$hxClasses["cocktail.port.platform.flash_player.NativeHttp"] = cocktail_port_platform_flash_$player_NativeHttp;
	cocktail_port_platform_flash_$player_NativeHttp.__name__ = ["cocktail", "port", "platform", "flash_player", "NativeHttp"];
	cocktail_port_platform_flash_$player_NativeHttp.__super__ = cocktail_port_base_NativeHttpBase;
	cocktail_port_platform_flash_$player_NativeHttp.prototype = $extend(cocktail_port_base_NativeHttpBase.prototype, {
		close: function () {
			this._urlLoader.close();
		}
		, doLoad: function (url, method, data, authorRequestHeaders, dataFormat) {
			cocktail_port_base_NativeHttpBase.prototype.doLoad.call(this, url, method, data, authorRequestHeaders, dataFormat);
			if (url.indexOf("http://") == -1 && url.indexOf("https://") == -1) {
				var asset = openfl_Assets.getText(url);
				if (asset != null) {
					this.response = asset;
					this.complete = true;
					this.responseHeadersLoaded = true;
					return;
				}
			}
			var urlRequest = new openfl_net_URLRequest(url);
			urlRequest.method = method;
			urlRequest.data = data;
			switch (dataFormat[1]) {
				case 1:
					this._urlLoader.set_dataFormat(openfl_net_URLLoaderDataFormat.TEXT);
					break;
				case 0:
					this._urlLoader.set_dataFormat(openfl_net_URLLoaderDataFormat.BINARY);
					break;
			}
			this._urlLoader.addEventListener(openfl_events_HTTPStatusEvent.HTTP_STATUS, $bind(this, this.onHttpStatus));
			this._urlLoader.addEventListener(openfl_events_IOErrorEvent.IO_ERROR, $bind(this, this.onIOError));
			this._urlLoader.addEventListener(openfl_events_Event.COMPLETE, $bind(this, this.onNativeLoadComplete));
			this._urlLoader.load(urlRequest);
			this.responseHeadersLoaded = true;
		}
		, onIOError: function (event) {
			this.error = true;
		}
		, onNativeLoadComplete: function (event) {
			this.response = this._urlLoader.data;
			this.complete = true;
		}
		, onHttpStatus: function (event) {
			this.status = event.status;
		}
		, get_total: function () {
			return this._urlLoader.bytesTotal;
		}
		, get_loaded: function () {
			return this._urlLoader.bytesLoaded;
		}
		, __class__: cocktail_port_platform_flash_$player_NativeHttp
	});
	var cocktail_port_platform_flash_$player_NativeLayer = function () {
		cocktail_port_base_NativeLayerBase.call(this);
		this._nativeLayer = new openfl_display_Sprite();
		this._nativeLayer.mouseEnabled = false;
		this._childrenNativeLayer = new openfl_display_Sprite();
		this._childrenNativeLayer.mouseEnabled = false;
		this._bitmapContainer = new openfl_display_Sprite();
		this._bitmapContainer.mouseEnabled = false;
		this._width = 0;
		this._height = 0;
		this._childrenNativeLayer.addChild(this._bitmapContainer);
		this._childrenNativeLayer.addChild(this._nativeLayer);
		this.platformLayer = this._nativeLayer;
	};
	$hxClasses["cocktail.port.platform.flash_player.NativeLayer"] = cocktail_port_platform_flash_$player_NativeLayer;
	cocktail_port_platform_flash_$player_NativeLayer.__name__ = ["cocktail", "port", "platform", "flash_player", "NativeLayer"];
	cocktail_port_platform_flash_$player_NativeLayer.__super__ = cocktail_port_base_NativeLayerBase;
	cocktail_port_platform_flash_$player_NativeLayer.prototype = $extend(cocktail_port_base_NativeLayerBase.prototype, {
		attach: function (platformLayer, index) {
			platformLayer.addChildAt(this._childrenNativeLayer, index);
		}
		, detach: function (platformLayer) {
			if (this._childrenNativeLayer.parent != null) platformLayer.removeChild(this._childrenNativeLayer);
		}
		, initBitmapData: function (width, height) {
			if (this._nativeBitmap == null) {
				this.graphics.initBitmapData(width, height);
				this._nativeBitmap = new openfl_display_Bitmap(this.graphics.nativeBitmapData, openfl_display_PixelSnapping.AUTO, false);
				this._bitmapContainer.addChild(this._nativeBitmap);
			} else {
				if (this._width == width && this._height == height) return;
				this.graphics.dispose();
				this.graphics.initBitmapData(width, height);
				this._nativeBitmap.bitmapData = this.graphics.nativeBitmapData;
			}
			this._width = width;
			this._height = height;
		}
		, __class__: cocktail_port_platform_flash_$player_NativeLayer
	});
	var cocktail_port_platform_flash_$player_NativeTextInput = function (node) {
		var _g = this;
		cocktail_port_base_NativeTextInputBase.call(this, node);
		this._textField = new openfl_text_TextField();
		this._mask = new openfl_display_Sprite();
		this._textField.set_mask(this._mask);
		this._textField.set_type(openfl_text_TextFieldType.INPUT);
		this._textField.addEventListener(openfl_events_Event.CHANGE, function (e) {
			_g.onInput();
		});
		this._textFormat = new openfl_text_TextFormat();
		this.updateTextFormat();
	};
	$hxClasses["cocktail.port.platform.flash_player.NativeTextInput"] = cocktail_port_platform_flash_$player_NativeTextInput;
	cocktail_port_platform_flash_$player_NativeTextInput.__name__ = ["cocktail", "port", "platform", "flash_player", "NativeTextInput"];
	cocktail_port_platform_flash_$player_NativeTextInput.__super__ = cocktail_port_base_NativeTextInputBase;
	cocktail_port_platform_flash_$player_NativeTextInput.prototype = $extend(cocktail_port_base_NativeTextInputBase.prototype, {
		attach: function (graphicContext) {
			var containerGraphicContext = graphicContext.nativeLayer.platformLayer;
			containerGraphicContext.addChild(this._textField);
			containerGraphicContext.addChild(this._mask);
		}
		, detach: function (graphicContext) {
			var containerGraphicContext = graphicContext.nativeLayer.platformLayer;
			containerGraphicContext.removeChild(this._textField);
			containerGraphicContext.removeChild(this._mask);
		}
		, focus: function () {
			openfl_Lib.current.stage.set_focus(this._textField);
		}
		, blur: function () {
			openfl_Lib.current.stage.set_focus(null);
		}
		, updateTextFormat: function () {
			this._textField.set_defaultTextFormat(this._textFormat);
			this._textField.setTextFormat(this._textFormat);
		}
		, get_viewport: function () {
			var rect = new cocktail_core_geom_RectangleVO();
			rect.x = this._textField.get_x();
			rect.y = this._textField.get_y();
			rect.width = this._textField.get_width();
			rect.height = this._textField.get_height();
			return rect;
		}
		, set_viewport: function (value) {
			this._textField.set_x(value.x);
			this._textField.set_y(value.y);
			this._textField.set_width(value.width);
			this._textField.set_height(value.height);
			return value;
		}
		, get_clipRect: function () {
			return this.clipRect;
		}
		, set_clipRect: function (value) {
			this._mask.get_graphics().clear();
			this._mask.get_graphics().beginFill(16711680, 0.5);
			this._mask.get_graphics().drawRect(value.x, value.y, value.width, value.height);
			this._mask.get_graphics().endFill();
			return value;
		}
		, set_fontSize: function (value) {
			this._textFormat.size = value;
			this.updateTextFormat();
			return value;
		}
		, get_fontSize: function () {
			return this._textFormat.size;
		}
		, set_italic: function (value) {
			this._textFormat.italic = value;
			this.updateTextFormat();
			return value;
		}
		, get_italic: function () {
			return this._textFormat.italic;
		}
		, get_bold: function () {
			return this._textFormat.bold;
		}
		, set_bold: function (value) {
			this._textFormat.bold = value;
			this.updateTextFormat();
			return value;
		}
		, set_color: function (value) {
			this._textFormat.color = value;
			this.updateTextFormat();
			return value;
		}
		, get_color: function () {
			return this._textFormat.color;
		}
		, set_fontFamily: function (value) {
			switch (value) {
				case "serif":
					value = "_serif";
					break;
				case "sans-serif":
					value = "_sans";
					break;
				case "typewriter":
					value = "_typewriter";
					break;
			}
			this._textFormat.font = value;
			this.updateTextFormat();
			return value;
		}
		, get_fontFamily: function () {
			return this._textFormat.font;
		}
		, get_value: function () {
			return this._textField.get_text();
		}
		, set_value: function (textValue) {
			return this._textField.set_text(textValue);
		}
		, set_maxLength: function (value) {
			if (value == -1) value = 0;
			return this._textField.set_maxChars(value);
		}
		, set_letterSpacing: function (value) {
			this._textFormat.letterSpacing = value;
			this.updateTextFormat();
			return value;
		}
		, get_letterSpacing: function () {
			return this._textFormat.letterSpacing;
		}
		, __class__: cocktail_port_platform_flash_$player_NativeTextInput
	});
	var cocktail_port_platform_flash_$player_NativePasswordInput = function (node) {
		cocktail_port_platform_flash_$player_NativeTextInput.call(this, node);
		this._textField.set_displayAsPassword(true);
	};
	$hxClasses["cocktail.port.platform.flash_player.NativePasswordInput"] = cocktail_port_platform_flash_$player_NativePasswordInput;
	cocktail_port_platform_flash_$player_NativePasswordInput.__name__ = ["cocktail", "port", "platform", "flash_player", "NativePasswordInput"];
	cocktail_port_platform_flash_$player_NativePasswordInput.__super__ = cocktail_port_platform_flash_$player_NativeTextInput;
	cocktail_port_platform_flash_$player_NativePasswordInput.prototype = $extend(cocktail_port_platform_flash_$player_NativeTextInput.prototype, {
		__class__: cocktail_port_platform_flash_$player_NativePasswordInput
	});
	var openfl_geom_Matrix = function (a, b, c, d, tx, ty) {
		if (ty == null) ty = 0;
		if (tx == null) tx = 0;
		if (d == null) d = 1;
		if (c == null) c = 0;
		if (b == null) b = 0;
		if (a == null) a = 1;
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	};
	$hxClasses["openfl.geom.Matrix"] = openfl_geom_Matrix;
	openfl_geom_Matrix.__name__ = ["openfl", "geom", "Matrix"];
	openfl_geom_Matrix.prototype = {
		clone: function () {
			return new openfl_geom_Matrix(this.a, this.b, this.c, this.d, this.tx, this.ty);
		}
		, concat: function (m) {
			var a1 = this.a * m.a + this.b * m.c;
			this.b = this.a * m.b + this.b * m.d;
			this.a = a1;
			var c1 = this.c * m.a + this.d * m.c;
			this.d = this.c * m.b + this.d * m.d;
			this.c = c1;
			var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
			this.ty = this.tx * m.b + this.ty * m.d + m.ty;
			this.tx = tx1;
		}
		, copyColumnFrom: function (column, vector3D) {
			if (column > 2) throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)"); else if (column == 0) {
				this.a = vector3D.x;
				this.c = vector3D.y;
			} else if (column == 1) {
				this.b = vector3D.x;
				this.d = vector3D.y;
			} else {
				this.tx = vector3D.x;
				this.ty = vector3D.y;
			}
		}
		, copyColumnTo: function (column, vector3D) {
			if (column > 2) throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)"); else if (column == 0) {
				vector3D.x = this.a;
				vector3D.y = this.c;
				vector3D.z = 0;
			} else if (column == 1) {
				vector3D.x = this.b;
				vector3D.y = this.d;
				vector3D.z = 0;
			} else {
				vector3D.x = this.tx;
				vector3D.y = this.ty;
				vector3D.z = 1;
			}
		}
		, copyFrom: function (sourceMatrix) {
			this.a = sourceMatrix.a;
			this.b = sourceMatrix.b;
			this.c = sourceMatrix.c;
			this.d = sourceMatrix.d;
			this.tx = sourceMatrix.tx;
			this.ty = sourceMatrix.ty;
		}
		, copyRowFrom: function (row, vector3D) {
			if (row > 2) throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)"); else if (row == 0) {
				this.a = vector3D.x;
				this.c = vector3D.y;
			} else if (row == 1) {
				this.b = vector3D.x;
				this.d = vector3D.y;
			} else {
				this.tx = vector3D.x;
				this.ty = vector3D.y;
			}
		}
		, copyRowTo: function (row, vector3D) {
			if (row > 2) throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)"); else if (row == 0) {
				vector3D.x = this.a;
				vector3D.y = this.b;
				vector3D.z = this.tx;
			} else if (row == 1) {
				vector3D.x = this.c;
				vector3D.y = this.d;
				vector3D.z = this.ty;
			} else {
				vector3D.x = 0;
				vector3D.y = 0;
				vector3D.z = 1;
			}
		}
		, createBox: function (scaleX, scaleY, rotation, tx, ty) {
			if (ty == null) ty = 0;
			if (tx == null) tx = 0;
			if (rotation == null) rotation = 0;
			if (rotation != 0) {
				var cos = Math.cos(rotation);
				var sin = Math.sin(rotation);
				this.a = cos * scaleX;
				this.b = sin * scaleY;
				this.c = -sin * scaleX;
				this.d = cos * scaleY;
			} else {
				this.a = scaleX;
				this.b = 0;
				this.c = 0;
				this.d = scaleY;
			}
			this.tx = tx;
			this.ty = ty;
		}
		, createGradientBox: function (width, height, rotation, tx, ty) {
			if (ty == null) ty = 0;
			if (tx == null) tx = 0;
			if (rotation == null) rotation = 0;
			this.a = width / 1638.4;
			this.d = height / 1638.4;
			if (rotation != 0) {
				var cos = Math.cos(rotation);
				var sin = Math.sin(rotation);
				this.b = sin * this.d;
				this.c = -sin * this.a;
				this.a *= cos;
				this.d *= cos;
			} else {
				this.b = 0;
				this.c = 0;
			}
			this.tx = tx + width / 2;
			this.ty = ty + height / 2;
		}
		, deltaTransformPoint: function (point) {
			return new openfl_geom_Point(point.x * this.a + point.y * this.c, point.x * this.b + point.y * this.d);
		}
		, equals: function (matrix) {
			return matrix != null && this.tx == matrix.tx && this.ty == matrix.ty && this.a == matrix.a && this.b == matrix.b && this.c == matrix.c && this.d == matrix.d;
		}
		, identity: function () {
			this.a = 1;
			this.b = 0;
			this.c = 0;
			this.d = 1;
			this.tx = 0;
			this.ty = 0;
		}
		, invert: function () {
			var norm = this.a * this.d - this.b * this.c;
			if (norm == 0) {
				this.a = this.b = this.c = this.d = 0;
				this.tx = -this.tx;
				this.ty = -this.ty;
			} else {
				norm = 1.0 / norm;
				var a1 = this.d * norm;
				this.d = this.a * norm;
				this.a = a1;
				this.b *= -norm;
				this.c *= -norm;
				var tx1 = -this.a * this.tx - this.c * this.ty;
				this.ty = -this.b * this.tx - this.d * this.ty;
				this.tx = tx1;
			}
			return this;
		}
		, rotate: function (theta) {
			var cos = Math.cos(theta);
			var sin = Math.sin(theta);
			var a1 = this.a * cos - this.b * sin;
			this.b = this.a * sin + this.b * cos;
			this.a = a1;
			var c1 = this.c * cos - this.d * sin;
			this.d = this.c * sin + this.d * cos;
			this.c = c1;
			var tx1 = this.tx * cos - this.ty * sin;
			this.ty = this.tx * sin + this.ty * cos;
			this.tx = tx1;
		}
		, scale: function (sx, sy) {
			this.a *= sx;
			this.b *= sy;
			this.c *= sx;
			this.d *= sy;
			this.tx *= sx;
			this.ty *= sy;
		}
		, setRotation: function (theta, scale) {
			if (scale == null) scale = 1;
			this.a = Math.cos(theta) * scale;
			this.c = Math.sin(theta) * scale;
			this.b = -this.c;
			this.d = this.a;
		}
		, setTo: function (a, b, c, d, tx, ty) {
			this.a = a;
			this.b = b;
			this.c = c;
			this.d = d;
			this.tx = tx;
			this.ty = ty;
		}
		, to3DString: function (roundPixels) {
			if (roundPixels == null) roundPixels = false;
			if (roundPixels) return "matrix3d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)"; else return "matrix3d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
		}
		, toMozString: function () {
			return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
		}
		, toString: function () {
			return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
		}
		, transformPoint: function (pos) {
			return new openfl_geom_Point(pos.x * this.a + pos.y * this.c + this.tx, pos.x * this.b + pos.y * this.d + this.ty);
		}
		, translate: function (dx, dy) {
			this.tx += dx;
			this.ty += dy;
		}
		, toArray: function (transpose) {
			if (transpose == null) transpose = false;
			if (this.__array == null) {
				var this1;
				this1 = new Float32Array(9);
				this.__array = this1;
			}
			if (transpose) {
				this.__array[0] = this.a;
				this.__array[1] = this.b;
				this.__array[2] = 0;
				this.__array[3] = this.c;
				this.__array[4] = this.d;
				this.__array[5] = 0;
				this.__array[6] = this.tx;
				this.__array[7] = this.ty;
				this.__array[8] = 1;
			} else {
				this.__array[0] = this.a;
				this.__array[1] = this.c;
				this.__array[2] = this.tx;
				this.__array[3] = this.b;
				this.__array[4] = this.d;
				this.__array[5] = this.ty;
				this.__array[6] = 0;
				this.__array[7] = 0;
				this.__array[8] = 1;
			}
			return this.__array;
		}
		, __cleanValues: function () {
			this.a = Math.round(this.a * 1000) / 1000;
			this.b = Math.round(this.b * 1000) / 1000;
			this.c = Math.round(this.c * 1000) / 1000;
			this.d = Math.round(this.d * 1000) / 1000;
			this.tx = Math.round(this.tx * 10) / 10;
			this.ty = Math.round(this.ty * 10) / 10;
		}
		, __toMatrix3: function () {
			return new lime_math_Matrix3(this.a, this.b, this.c, this.d, this.tx, this.ty);
		}
		, __transformInversePoint: function (point) {
			var norm = this.a * this.d - this.b * this.c;
			if (norm == 0) {
				point.x = -this.tx;
				point.y = -this.ty;
			} else {
				var px = 1.0 / norm * (this.c * (this.ty - point.y) + this.d * (point.x - this.tx));
				point.y = 1.0 / norm * (this.a * (point.y - this.ty) + this.b * (this.tx - point.x));
				point.x = px;
			}
		}
		, __transformInverseX: function (px, py) {
			var norm = this.a * this.d - this.b * this.c;
			if (norm == 0) return -this.tx; else return 1.0 / norm * (this.c * (this.ty - py) + this.d * (px - this.tx));
		}
		, __transformInverseY: function (px, py) {
			var norm = this.a * this.d - this.b * this.c;
			if (norm == 0) return -this.ty; else return 1.0 / norm * (this.a * (py - this.ty) + this.b * (this.tx - px));
		}
		, __transformPoint: function (point) {
			var px = point.x;
			var py = point.y;
			point.x = px * this.a + py * this.c + this.tx;
			point.y = px * this.b + py * this.d + this.ty;
		}
		, __transformX: function (px, py) {
			return px * this.a + py * this.c + this.tx;
		}
		, __transformY: function (px, py) {
			return px * this.b + py * this.d + this.ty;
		}
		, __translateTransformed: function (px, py) {
			this.tx = px * this.a + py * this.c + this.tx;
			this.ty = px * this.b + py * this.d + this.ty;
		}
		, __class__: openfl_geom_Matrix
	};
	var cocktail_port_platform_flash_$player_NativeText = function (nativeTextElement) {
		cocktail_port_base_NativeTextBase.call(this, nativeTextElement);
		this._textField = nativeTextElement;
	};
	$hxClasses["cocktail.port.platform.flash_player.NativeText"] = cocktail_port_platform_flash_$player_NativeText;
	cocktail_port_platform_flash_$player_NativeText.__name__ = ["cocktail", "port", "platform", "flash_player", "NativeText"];
	cocktail_port_platform_flash_$player_NativeText.__super__ = cocktail_port_base_NativeTextBase;
	cocktail_port_platform_flash_$player_NativeText.prototype = $extend(cocktail_port_base_NativeTextBase.prototype, {
		dispose: function () {
			this._textField = null;
			this._nativeBitmap.dispose();
			this._nativeBitmap = null;
		}
		, getBitmap: function (bounds) {
			var textYOffset = this._textField.get_textHeight() - this._textField.get_height();
			this._nativeBitmap = new openfl_display_BitmapData(Math.round(bounds.width), Math.round(bounds.height - textYOffset), true, 0);
			cocktail_port_platform_flash_$player_NativeText._matrix.identity();
			cocktail_port_platform_flash_$player_NativeText._matrix.translate(-2, textYOffset + 2);
			this._nativeBitmap.draw(this._textField, cocktail_port_platform_flash_$player_NativeText._matrix);
			return this._nativeBitmap;
		}
		, get_width: function () {
			return this._textField.get_textWidth();
		}
		, __class__: cocktail_port_platform_flash_$player_NativeText
	});
	var cocktail_port_platform_flash_$player_NativeTextArea = function (node) {
		cocktail_port_platform_flash_$player_NativeTextInput.call(this, node);
		this._textField.set_multiline(true);
		this._textField.set_wordWrap(true);
	};
	$hxClasses["cocktail.port.platform.flash_player.NativeTextArea"] = cocktail_port_platform_flash_$player_NativeTextArea;
	cocktail_port_platform_flash_$player_NativeTextArea.__name__ = ["cocktail", "port", "platform", "flash_player", "NativeTextArea"];
	cocktail_port_platform_flash_$player_NativeTextArea.__super__ = cocktail_port_platform_flash_$player_NativeTextInput;
	cocktail_port_platform_flash_$player_NativeTextArea.prototype = $extend(cocktail_port_platform_flash_$player_NativeTextInput.prototype, {
		__class__: cocktail_port_platform_flash_$player_NativeTextArea
	});
	var cocktail_port_platform_flash_$player_Platform = function () {
		this.initDisplayList();
		cocktail_port_base_PlatformBase.call(this);
	};
	$hxClasses["cocktail.port.platform.flash_player.Platform"] = cocktail_port_platform_flash_$player_Platform;
	cocktail_port_platform_flash_$player_Platform.__name__ = ["cocktail", "port", "platform", "flash_player", "Platform"];
	cocktail_port_platform_flash_$player_Platform.__super__ = cocktail_port_base_PlatformBase;
	cocktail_port_platform_flash_$player_Platform.prototype = $extend(cocktail_port_base_PlatformBase.prototype, {
		dispose: function () {
			cocktail_port_base_PlatformBase.prototype.dispose.call(this);
			if (this._rootSprite.parent != null) this._rootSprite.parent.removeChild(this._rootSprite);
			if (this._platformLayersRootSprite.parent != null) this._platformLayersRootSprite.parent.removeChild(this._platformLayersRootSprite);
			if (this.hitTestingSprite.parent != null) this.hitTestingSprite.parent.removeChild(this.hitTestingSprite);
		}
		, initDisplayList: function () {
			this._rootSprite = new openfl_display_Sprite();
			this._platformLayersRootSprite = new openfl_display_Sprite();
			this.hitTestingSprite = this._platformLayersRootSprite;
			this.updateHitTestingSprite();
			this._rootSprite.addChild(this._platformLayersRootSprite);
		}
		, open: function (url, name) {
			openfl_Lib.getURL(new openfl_net_URLRequest(url), name);
		}
		, enterFullscreen: function () {
			openfl_Lib.current.stage.set_displayState(openfl_display_StageDisplayState.FULL_SCREEN);
		}
		, exitFullscreen: function () {
			openfl_Lib.current.stage.set_displayState(openfl_display_StageDisplayState.NORMAL);
		}
		, fullScreenEnabled: function () {
			return Object.prototype.hasOwnProperty.call(openfl_Lib.current.stage, "allowsFullScreen");
		}
		, fullscreen: function () {
			return openfl_Lib.current.stage.__displayState == openfl_display_StageDisplayState.FULL_SCREEN;
		}
		, getRootPlatformLayer: function () {
			return this._rootSprite;
		}
		, getTopPlatformLayer: function () {
			return this._platformLayersRootSprite;
		}
		, convertToHitTestingSpriteSpace: function (point, target, hitTestingSprite) {
			if (target == hitTestingSprite) return point;
			point.x += target.get_x();
			point.y += target.get_y();
			var parent = target.parent;
			while (parent != hitTestingSprite) {
				point.x += parent.get_x();
				point.y += parent.get_y();
				parent = parent.parent;
				if (parent == null) return point;
			}
			return point;
		}
		, setNativeListeners: function () {
			openfl_Lib.current.stage.addEventListener(openfl_events_Event.RESIZE, $bind(this, this.onNativeResize));
		}
		, removeNativeListeners: function () {
			openfl_Lib.current.stage.removeEventListener(openfl_events_Event.RESIZE, $bind(this, this.onNativeResize));
		}
		, getUIEvent: function (event) {
			var resizeEvent = new cocktail_core_event_UIEvent();
			resizeEvent.initUIEvent("resize", false, false, null, 0.0);
			return resizeEvent;
		}
		, getEvent: function (event) {
			var fullScreenChangeEvent = new cocktail_core_event_Event();
			fullScreenChangeEvent.initEvent("fullscreenchange", false, false);
			return fullScreenChangeEvent;
		}
		, onNativeResize: function (event) {
			this.updateHitTestingSprite();
			cocktail_port_base_PlatformBase.prototype.onNativeResize.call(this, event);
		}
		, onNativeOrientationChange: function (event) {
			this.updateHitTestingSprite();
			cocktail_port_base_PlatformBase.prototype.onNativeOrientationChange.call(this, event);
		}
		, updateHitTestingSprite: function () {
			this.hitTestingSprite.get_graphics().clear();
			this.setupTransparentFill(this.hitTestingSprite.get_graphics());
			this.hitTestingSprite.get_graphics().drawRect(0, 0, this.get_viewportWidth(), this.get_viewportHeight());
			this.hitTestingSprite.get_graphics().endFill();
		}
		, setupTransparentFill: function (graphics) {
			graphics.beginFill(0, 0.01);
		}
		, getNativeViewportHeight: function () {
			return openfl_Lib.current.stage.stageHeight;
		}
		, getNativeViewportWidth: function () {
			return openfl_Lib.current.stage.stageWidth;
		}
		, getNativeViewportX: function () {
			return 0;
		}
		, getNativeViewportY: function () {
			return 0;
		}
		, onViewportUpdate: function () {
			this._rootSprite.set_x(this.get_viewportX());
			this._rootSprite.set_y(this.get_viewportY());
		}
		, __class__: cocktail_port_platform_flash_$player_Platform
	});
	var cocktail_port_platform_flash_$player_PlatformTimer = function (updateCallback) {
		cocktail_port_base_PlatformTimerBase.call(this, updateCallback);
		this._callback = $bind(this, this.onEnterFrame);
		this._updateCallback = updateCallback;
		openfl_Lib.current.stage.addEventListener(openfl_events_Event.ENTER_FRAME, this._callback);
	};
	$hxClasses["cocktail.port.platform.flash_player.PlatformTimer"] = cocktail_port_platform_flash_$player_PlatformTimer;
	cocktail_port_platform_flash_$player_PlatformTimer.__name__ = ["cocktail", "port", "platform", "flash_player", "PlatformTimer"];
	cocktail_port_platform_flash_$player_PlatformTimer.__super__ = cocktail_port_base_PlatformTimerBase;
	cocktail_port_platform_flash_$player_PlatformTimer.prototype = $extend(cocktail_port_base_PlatformTimerBase.prototype, {
		dispose: function () {
			cocktail_port_base_PlatformTimerBase.prototype.dispose.call(this);
			openfl_Lib.current.stage.removeEventListener(openfl_events_Event.ENTER_FRAME, this._callback);
			this._callback = null;
			this._updateCallback = null;
		}
		, getTimer: function () {
			return openfl_Lib.getTimer();
		}
		, onEnterFrame: function (e) {
			this._updateCallback();
		}
		, __class__: cocktail_port_platform_flash_$player_PlatformTimer
	});
	var cocktail_port_platform_flash_$player_TouchListener = function (platform) {
		cocktail_port_base_TouchListenerBase.call(this, platform);
	};
	$hxClasses["cocktail.port.platform.flash_player.TouchListener"] = cocktail_port_platform_flash_$player_TouchListener;
	cocktail_port_platform_flash_$player_TouchListener.__name__ = ["cocktail", "port", "platform", "flash_player", "TouchListener"];
	cocktail_port_platform_flash_$player_TouchListener.__super__ = cocktail_port_base_TouchListenerBase;
	cocktail_port_platform_flash_$player_TouchListener.prototype = $extend(cocktail_port_base_TouchListenerBase.prototype, {
		setNativeListeners: function () {
			this._platform.hitTestingSprite.addEventListener("touchBegin", $bind(this, this.onNativeTouchStart));
			this._platform.hitTestingSprite.addEventListener("touchMove", $bind(this, this.onNativeTouchMove));
			this._platform.hitTestingSprite.addEventListener("touchEnd", $bind(this, this.onNativeTouchEnd));
		}
		, removeNativeListeners: function () {
			this._platform.hitTestingSprite.removeEventListener("touchBegin", $bind(this, this.onNativeTouchStart));
			this._platform.hitTestingSprite.removeEventListener("touchMove", $bind(this, this.onNativeTouchMove));
			this._platform.hitTestingSprite.removeEventListener("touchEnd", $bind(this, this.onNativeTouchEnd));
		}
		, getTouchEvent: function (event) {
			var typedEvent = event;
			var touchType;
			var _g = typedEvent.type;
			switch (_g) {
				case "touchBegin":
					touchType = "touchstart";
					break;
				case "touchEnd":
					touchType = "touchend";
					break;
				case "touchMove":
					touchType = "touchmove";
					break;
				default:
					touchType = typedEvent.type;
			}
			var localPoint = new openfl_geom_Point(typedEvent.localX, typedEvent.localY);
			localPoint = this._platform.convertToHitTestingSpriteSpace(localPoint, event.target, this._platform.hitTestingSprite);
			var touch = new cocktail_core_event_Touch();
			touch.identifier = typedEvent.touchPointID;
			touch.screenX = Math.round(localPoint.x);
			touch.screenY = Math.round(localPoint.y);
			touch.clientX = Math.round(localPoint.x);
			touch.clientY = Math.round(localPoint.y);
			touch.pageX = 0;
			touch.pageY = 0;
			var touchEvent = new cocktail_core_event_TouchEvent();
			touchEvent.initTouchEvent(touchType, false, false, null, 0.0, new cocktail_core_event_TouchList([touch]), null, null, false, false, false, false);
			return touchEvent;
		}
		, __class__: cocktail_port_platform_flash_$player_TouchListener
	});
	var haxe_StackItem = $hxClasses["haxe.StackItem"] = { __ename__: ["haxe", "StackItem"], __constructs__: ["CFunction", "Module", "FilePos", "Method", "LocalFunction"] };
	haxe_StackItem.CFunction = ["CFunction", 0];
	haxe_StackItem.CFunction.toString = $estr;
	haxe_StackItem.CFunction.__enum__ = haxe_StackItem;
	haxe_StackItem.Module = function (m) { var $x = ["Module", 1, m]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
	haxe_StackItem.FilePos = function (s, file, line) { var $x = ["FilePos", 2, s, file, line]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
	haxe_StackItem.Method = function (classname, method) { var $x = ["Method", 3, classname, method]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
	haxe_StackItem.LocalFunction = function (v) { var $x = ["LocalFunction", 4, v]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
	var haxe_CallStack = function () { };
	$hxClasses["haxe.CallStack"] = haxe_CallStack;
	haxe_CallStack.__name__ = ["haxe", "CallStack"];
	haxe_CallStack.lastException = null;
	haxe_CallStack.getStack = function (e) {
		if (e == null) return [];
		var oldValue = Error.prepareStackTrace;
		Error.prepareStackTrace = function (error, callsites) {
			var stack = [];
			var _g = 0;
			while (_g < callsites.length) {
				var site = callsites[_g];
				++_g;
				if (haxe_CallStack.wrapCallSite != null) site = haxe_CallStack.wrapCallSite(site);
				var method = null;
				var fullName = site.getFunctionName();
				if (fullName != null) {
					var idx = fullName.lastIndexOf(".");
					if (idx >= 0) {
						var className = HxOverrides.substr(fullName, 0, idx);
						var methodName = HxOverrides.substr(fullName, idx + 1, null);
						method = haxe_StackItem.Method(className, methodName);
					}
				}
				stack.push(haxe_StackItem.FilePos(method, site.getFileName(), site.getLineNumber()));
			}
			return stack;
		};
		var a = haxe_CallStack.makeStack(e.stack);
		Error.prepareStackTrace = oldValue;
		return a;
	};
	haxe_CallStack.wrapCallSite = null;
	haxe_CallStack.callStack = function () {
		try {
			throw new Error();
		} catch (e) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			var a = haxe_CallStack.getStack(e);
			a.shift();
			return a;
		}
	};
	haxe_CallStack.exceptionStack = function () {
		return haxe_CallStack.getStack(haxe_CallStack.lastException);
	};
	haxe_CallStack.toString = function (stack) {
		var b = new StringBuf();
		var _g = 0;
		while (_g < stack.length) {
			var s = stack[_g];
			++_g;
			b.b += "\nCalled from ";
			haxe_CallStack.itemToString(b, s);
		}
		return b.b;
	};
	haxe_CallStack.itemToString = function (b, s) {
		switch (s[1]) {
			case 0:
				b.b += "a C function";
				break;
			case 1:
				var m = s[2];
				b.b += "module ";
				if (m == null) b.b += "null"; else b.b += "" + m;
				break;
			case 2:
				var line = s[4];
				var file = s[3];
				var s1 = s[2];
				if (s1 != null) {
					haxe_CallStack.itemToString(b, s1);
					b.b += " (";
				}
				if (file == null) b.b += "null"; else b.b += "" + file;
				b.b += " line ";
				if (line == null) b.b += "null"; else b.b += "" + line;
				if (s1 != null) b.b += ")";
				break;
			case 3:
				var meth = s[3];
				var cname = s[2];
				if (cname == null) b.b += "null"; else b.b += "" + cname;
				b.b += ".";
				if (meth == null) b.b += "null"; else b.b += "" + meth;
				break;
			case 4:
				var n = s[2];
				b.b += "local function #";
				if (n == null) b.b += "null"; else b.b += "" + n;
				break;
		}
	};
	haxe_CallStack.makeStack = function (s) {
		if (s == null) return []; else if (typeof (s) == "string") {
			var stack = s.split("\n");
			if (stack[0] == "Error") stack.shift();
			var m = [];
			var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$", "");
			var _g = 0;
			while (_g < stack.length) {
				var line = stack[_g];
				++_g;
				if (rie10.match(line)) {
					var path = rie10.matched(1).split(".");
					var meth = path.pop();
					var file = rie10.matched(2);
					var line1 = Std.parseInt(rie10.matched(3));
					m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."), meth), file, line1));
				} else m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
			return m;
		} else return s;
	};
	var haxe_IMap = function () { };
	$hxClasses["haxe.IMap"] = haxe_IMap;
	haxe_IMap.__name__ = ["haxe", "IMap"];
	var haxe__$Int64__$_$_$Int64 = function (high, low) {
		this.high = high;
		this.low = low;
	};
	$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
	haxe__$Int64__$_$_$Int64.__name__ = ["haxe", "_Int64", "___Int64"];
	haxe__$Int64__$_$_$Int64.prototype = {
		__class__: haxe__$Int64__$_$_$Int64
	};
	var haxe_Log = function () { };
	$hxClasses["haxe.Log"] = haxe_Log;
	haxe_Log.__name__ = ["haxe", "Log"];
	haxe_Log.trace = function (v, infos) {
		js_Boot.__trace(v, infos);
	};
	var haxe_Resource = function () { };
	$hxClasses["haxe.Resource"] = haxe_Resource;
	haxe_Resource.__name__ = ["haxe", "Resource"];
	haxe_Resource.content = null;
	haxe_Resource.getString = function (name) {
		var _g = 0;
		var _g1 = haxe_Resource.content;
		while (_g < _g1.length) {
			var x = _g1[_g];
			++_g;
			if (x.name == name) {
				if (x.str != null) return x.str;
				var b = haxe_crypto_Base64.decode(x.data);
				return b.toString();
			}
		}
		return null;
	};
	var haxe_Serializer = function () {
		this.buf = new StringBuf();
		this.cache = [];
		this.useCache = haxe_Serializer.USE_CACHE;
		this.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX;
		this.shash = new haxe_ds_StringMap();
		this.scount = 0;
	};
	$hxClasses["haxe.Serializer"] = haxe_Serializer;
	haxe_Serializer.__name__ = ["haxe", "Serializer"];
	haxe_Serializer.run = function (v) {
		var s = new haxe_Serializer();
		s.serialize(v);
		return s.toString();
	};
	haxe_Serializer.prototype = {
		toString: function () {
			return this.buf.b;
		}
		, serializeString: function (s) {
			var x = this.shash.get(s);
			if (x != null) {
				this.buf.b += "R";
				if (x == null) this.buf.b += "null"; else this.buf.b += "" + x;
				return;
			}
			this.shash.set(s, this.scount++);
			this.buf.b += "y";
			s = encodeURIComponent(s);
			if (s.length == null) this.buf.b += "null"; else this.buf.b += "" + s.length;
			this.buf.b += ":";
			if (s == null) this.buf.b += "null"; else this.buf.b += "" + s;
		}
		, serializeRef: function (v) {
			var vt = typeof (v);
			var _g1 = 0;
			var _g = this.cache.length;
			while (_g1 < _g) {
				var i = _g1++;
				var ci = this.cache[i];
				if (typeof (ci) == vt && ci == v) {
					this.buf.b += "r";
					if (i == null) this.buf.b += "null"; else this.buf.b += "" + i;
					return true;
				}
			}
			this.cache.push(v);
			return false;
		}
		, serializeFields: function (v) {
			var _g = 0;
			var _g1 = Reflect.fields(v);
			while (_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				this.serializeString(f);
				this.serialize(Reflect.field(v, f));
			}
			this.buf.b += "g";
		}
		, serialize: function (v) {
			{
				var _g = Type["typeof"](v);
				switch (_g[1]) {
					case 0:
						this.buf.b += "n";
						break;
					case 1:
						var v1 = v;
						if (v1 == 0) {
							this.buf.b += "z";
							return;
						}
						this.buf.b += "i";
						if (v1 == null) this.buf.b += "null"; else this.buf.b += "" + v1;
						break;
					case 2:
						var v2 = v;
						if (isNaN(v2)) this.buf.b += "k"; else if (!isFinite(v2)) if (v2 < 0) this.buf.b += "m"; else this.buf.b += "p"; else {
							this.buf.b += "d";
							if (v2 == null) this.buf.b += "null"; else this.buf.b += "" + v2;
						}
						break;
					case 3:
						if (v) this.buf.b += "t"; else this.buf.b += "f";
						break;
					case 6:
						var c = _g[2];
						if (c == String) {
							this.serializeString(v);
							return;
						}
						if (this.useCache && this.serializeRef(v)) return;
						switch (c) {
							case Array:
								var ucount = 0;
								this.buf.b += "a";
								var l = v.length;
								var _g1 = 0;
								while (_g1 < l) {
									var i = _g1++;
									if (v[i] == null) ucount++; else {
										if (ucount > 0) {
											if (ucount == 1) this.buf.b += "n"; else {
												this.buf.b += "u";
												if (ucount == null) this.buf.b += "null"; else this.buf.b += "" + ucount;
											}
											ucount = 0;
										}
										this.serialize(v[i]);
									}
								}
								if (ucount > 0) {
									if (ucount == 1) this.buf.b += "n"; else {
										this.buf.b += "u";
										if (ucount == null) this.buf.b += "null"; else this.buf.b += "" + ucount;
									}
								}
								this.buf.b += "h";
								break;
							case List:
								this.buf.b += "l";
								var v3 = v;
								var _g1_head = v3.h;
								var _g1_val = null;
								while (_g1_head != null) {
									var i1;
									_g1_val = _g1_head[0];
									_g1_head = _g1_head[1];
									i1 = _g1_val;
									this.serialize(i1);
								}
								this.buf.b += "h";
								break;
							case Date:
								var d = v;
								this.buf.b += "v";
								this.buf.add(d.getTime());
								break;
							case haxe_ds_StringMap:
								this.buf.b += "b";
								var v4 = v;
								var $it0 = v4.keys();
								while ($it0.hasNext()) {
									var k = $it0.next();
									this.serializeString(k);
									this.serialize(__map_reserved[k] != null ? v4.getReserved(k) : v4.h[k]);
								}
								this.buf.b += "h";
								break;
							case haxe_ds_IntMap:
								this.buf.b += "q";
								var v5 = v;
								var $it1 = v5.keys();
								while ($it1.hasNext()) {
									var k1 = $it1.next();
									this.buf.b += ":";
									if (k1 == null) this.buf.b += "null"; else this.buf.b += "" + k1;
									this.serialize(v5.h[k1]);
								}
								this.buf.b += "h";
								break;
							case haxe_ds_ObjectMap:
								this.buf.b += "M";
								var v6 = v;
								var $it2 = v6.keys();
								while ($it2.hasNext()) {
									var k2 = $it2.next();
									var id = Reflect.field(k2, "__id__");
									Reflect.deleteField(k2, "__id__");
									this.serialize(k2);
									k2.__id__ = id;
									this.serialize(v6.h[k2.__id__]);
								}
								this.buf.b += "h";
								break;
							case haxe_io_Bytes:
								var v7 = v;
								var i2 = 0;
								var max = v7.length - 2;
								var charsBuf = new StringBuf();
								var b64 = haxe_Serializer.BASE64;
								while (i2 < max) {
									var b1 = v7.get(i2++);
									var b2 = v7.get(i2++);
									var b3 = v7.get(i2++);
									charsBuf.add(b64.charAt(b1 >> 2));
									charsBuf.add(b64.charAt((b1 << 4 | b2 >> 4) & 63));
									charsBuf.add(b64.charAt((b2 << 2 | b3 >> 6) & 63));
									charsBuf.add(b64.charAt(b3 & 63));
								}
								if (i2 == max) {
									var b11 = v7.get(i2++);
									var b21 = v7.get(i2++);
									charsBuf.add(b64.charAt(b11 >> 2));
									charsBuf.add(b64.charAt((b11 << 4 | b21 >> 4) & 63));
									charsBuf.add(b64.charAt(b21 << 2 & 63));
								} else if (i2 == max + 1) {
									var b12 = v7.get(i2++);
									charsBuf.add(b64.charAt(b12 >> 2));
									charsBuf.add(b64.charAt(b12 << 4 & 63));
								}
								var chars = charsBuf.b;
								this.buf.b += "s";
								if (chars.length == null) this.buf.b += "null"; else this.buf.b += "" + chars.length;
								this.buf.b += ":";
								if (chars == null) this.buf.b += "null"; else this.buf.b += "" + chars;
								break;
							default:
								if (this.useCache) this.cache.pop();
								if (v.hxSerialize != null) {
									this.buf.b += "C";
									this.serializeString(Type.getClassName(c));
									if (this.useCache) this.cache.push(v);
									v.hxSerialize(this);
									this.buf.b += "g";
								} else {
									this.buf.b += "c";
									this.serializeString(Type.getClassName(c));
									if (this.useCache) this.cache.push(v);
									this.serializeFields(v);
								}
						}
						break;
					case 4:
						if (js_Boot.__instanceof(v, Class)) {
							var className = Type.getClassName(v);
							this.buf.b += "A";
							this.serializeString(className);
						} else if (js_Boot.__instanceof(v, Enum)) {
							this.buf.b += "B";
							this.serializeString(Type.getEnumName(v));
						} else {
							if (this.useCache && this.serializeRef(v)) return;
							this.buf.b += "o";
							this.serializeFields(v);
						}
						break;
					case 7:
						var e = _g[2];
						if (this.useCache) {
							if (this.serializeRef(v)) return;
							this.cache.pop();
						}
						if (this.useEnumIndex) this.buf.b += "j"; else this.buf.b += "w";
						this.serializeString(Type.getEnumName(e));
						if (this.useEnumIndex) {
							this.buf.b += ":";
							this.buf.b += Std.string(v[1]);
						} else this.serializeString(v[0]);
						this.buf.b += ":";
						var l1 = v.length;
						this.buf.b += Std.string(l1 - 2);
						var _g11 = 2;
						while (_g11 < l1) {
							var i3 = _g11++;
							this.serialize(v[i3]);
						}
						if (this.useCache) this.cache.push(v);
						break;
					case 5:
						throw new js__$Boot_HaxeError("Cannot serialize function");
						break;
					default:
						throw new js__$Boot_HaxeError("Cannot serialize " + Std.string(v));
				}
			}
		}
		, __class__: haxe_Serializer
	};
	var haxe_Timer = function (time_ms) {
		var me = this;
		this.id = setInterval(function () {
			me.run();
		}, time_ms);
	};
	$hxClasses["haxe.Timer"] = haxe_Timer;
	haxe_Timer.__name__ = ["haxe", "Timer"];
	haxe_Timer.delay = function (f, time_ms) {
		var t = new haxe_Timer(time_ms);
		t.run = function () {
			t.stop();
			f();
		};
		return t;
	};
	haxe_Timer.measure = function (f, pos) {
		var t0 = haxe_Timer.stamp();
		var r = f();
		haxe_Log.trace(haxe_Timer.stamp() - t0 + "s", pos);
		return r;
	};
	haxe_Timer.stamp = function () {
		return new Date().getTime() / 1000;
	};
	haxe_Timer.prototype = {
		stop: function () {
			if (this.id == null) return;
			clearInterval(this.id);
			this.id = null;
		}
		, run: function () {
		}
		, __class__: haxe_Timer
	};
	var haxe_Unserializer = function (buf) {
		this.buf = buf;
		this.length = buf.length;
		this.pos = 0;
		this.scache = [];
		this.cache = [];
		var r = haxe_Unserializer.DEFAULT_RESOLVER;
		if (r == null) {
			r = Type;
			haxe_Unserializer.DEFAULT_RESOLVER = r;
		}
		this.setResolver(r);
	};
	$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
	haxe_Unserializer.__name__ = ["haxe", "Unserializer"];
	haxe_Unserializer.initCodes = function () {
		var codes = [];
		var _g1 = 0;
		var _g = haxe_Unserializer.BASE64.length;
		while (_g1 < _g) {
			var i = _g1++;
			codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
		}
		return codes;
	};
	haxe_Unserializer.run = function (v) {
		return new haxe_Unserializer(v).unserialize();
	};
	haxe_Unserializer.prototype = {
		setResolver: function (r) {
			if (r == null) this.resolver = {
				resolveClass: function (_) {
					return null;
				}, resolveEnum: function (_1) {
					return null;
				}
			}; else this.resolver = r;
		}
		, get: function (p) {
			return this.buf.charCodeAt(p);
		}
		, readDigits: function () {
			var k = 0;
			var s = false;
			var fpos = this.pos;
			while (true) {
				var c = this.buf.charCodeAt(this.pos);
				if (c != c) break;
				if (c == 45) {
					if (this.pos != fpos) break;
					s = true;
					this.pos++;
					continue;
				}
				if (c < 48 || c > 57) break;
				k = k * 10 + (c - 48);
				this.pos++;
			}
			if (s) k *= -1;
			return k;
		}
		, readFloat: function () {
			var p1 = this.pos;
			while (true) {
				var c = this.buf.charCodeAt(this.pos);
				if (c >= 43 && c < 58 || c == 101 || c == 69) this.pos++; else break;
			}
			return Std.parseFloat(HxOverrides.substr(this.buf, p1, this.pos - p1));
		}
		, unserializeObject: function (o) {
			while (true) {
				if (this.pos >= this.length) throw new js__$Boot_HaxeError("Invalid object");
				if (this.buf.charCodeAt(this.pos) == 103) break;
				var k = this.unserialize();
				if (!(typeof (k) == "string")) throw new js__$Boot_HaxeError("Invalid object key");
				var v = this.unserialize();
				o[k] = v;
			}
			this.pos++;
		}
		, unserializeEnum: function (edecl, tag) {
			if (this.get(this.pos++) != 58) throw new js__$Boot_HaxeError("Invalid enum format");
			var nargs = this.readDigits();
			if (nargs == 0) return Type.createEnum(edecl, tag);
			var args = [];
			while (nargs-- > 0) args.push(this.unserialize());
			return Type.createEnum(edecl, tag, args);
		}
		, unserialize: function () {
			var _g = this.get(this.pos++);
			switch (_g) {
				case 110:
					return null;
				case 116:
					return true;
				case 102:
					return false;
				case 122:
					return 0;
				case 105:
					return this.readDigits();
				case 100:
					return this.readFloat();
				case 121:
					var len = this.readDigits();
					if (this.get(this.pos++) != 58 || this.length - this.pos < len) throw new js__$Boot_HaxeError("Invalid string length");
					var s = HxOverrides.substr(this.buf, this.pos, len);
					this.pos += len;
					s = decodeURIComponent(s.split("+").join(" "));
					this.scache.push(s);
					return s;
				case 107:
					return NaN;
				case 109:
					return -Infinity;
				case 112:
					return Infinity;
				case 97:
					var buf = this.buf;
					var a = [];
					this.cache.push(a);
					while (true) {
						var c = this.buf.charCodeAt(this.pos);
						if (c == 104) {
							this.pos++;
							break;
						}
						if (c == 117) {
							this.pos++;
							var n = this.readDigits();
							a[a.length + n - 1] = null;
						} else a.push(this.unserialize());
					}
					return a;
				case 111:
					var o = {};
					this.cache.push(o);
					this.unserializeObject(o);
					return o;
				case 114:
					var n1 = this.readDigits();
					if (n1 < 0 || n1 >= this.cache.length) throw new js__$Boot_HaxeError("Invalid reference");
					return this.cache[n1];
				case 82:
					var n2 = this.readDigits();
					if (n2 < 0 || n2 >= this.scache.length) throw new js__$Boot_HaxeError("Invalid string reference");
					return this.scache[n2];
				case 120:
					throw new js__$Boot_HaxeError(this.unserialize());
					break;
				case 99:
					var name = this.unserialize();
					var cl = this.resolver.resolveClass(name);
					if (cl == null) throw new js__$Boot_HaxeError("Class not found " + name);
					var o1 = Type.createEmptyInstance(cl);
					this.cache.push(o1);
					this.unserializeObject(o1);
					return o1;
				case 119:
					var name1 = this.unserialize();
					var edecl = this.resolver.resolveEnum(name1);
					if (edecl == null) throw new js__$Boot_HaxeError("Enum not found " + name1);
					var e = this.unserializeEnum(edecl, this.unserialize());
					this.cache.push(e);
					return e;
				case 106:
					var name2 = this.unserialize();
					var edecl1 = this.resolver.resolveEnum(name2);
					if (edecl1 == null) throw new js__$Boot_HaxeError("Enum not found " + name2);
					this.pos++;
					var index = this.readDigits();
					var tag = Type.getEnumConstructs(edecl1)[index];
					if (tag == null) throw new js__$Boot_HaxeError("Unknown enum index " + name2 + "@" + index);
					var e1 = this.unserializeEnum(edecl1, tag);
					this.cache.push(e1);
					return e1;
				case 108:
					var l = new List();
					this.cache.push(l);
					var buf1 = this.buf;
					while (this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
					this.pos++;
					return l;
				case 98:
					var h = new haxe_ds_StringMap();
					this.cache.push(h);
					var buf2 = this.buf;
					while (this.buf.charCodeAt(this.pos) != 104) {
						var s1 = this.unserialize();
						h.set(s1, this.unserialize());
					}
					this.pos++;
					return h;
				case 113:
					var h1 = new haxe_ds_IntMap();
					this.cache.push(h1);
					var buf3 = this.buf;
					var c1 = this.get(this.pos++);
					while (c1 == 58) {
						var i = this.readDigits();
						h1.set(i, this.unserialize());
						c1 = this.get(this.pos++);
					}
					if (c1 != 104) throw new js__$Boot_HaxeError("Invalid IntMap format");
					return h1;
				case 77:
					var h2 = new haxe_ds_ObjectMap();
					this.cache.push(h2);
					var buf4 = this.buf;
					while (this.buf.charCodeAt(this.pos) != 104) {
						var s2 = this.unserialize();
						h2.set(s2, this.unserialize());
					}
					this.pos++;
					return h2;
				case 118:
					var d;
					if (this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
						var s3 = HxOverrides.substr(this.buf, this.pos, 19);
						d = HxOverrides.strDate(s3);
						this.pos += 19;
					} else {
						var t = this.readFloat();
						var d1 = new Date();
						d1.setTime(t);
						d = d1;
					}
					this.cache.push(d);
					return d;
				case 115:
					var len1 = this.readDigits();
					var buf5 = this.buf;
					if (this.get(this.pos++) != 58 || this.length - this.pos < len1) throw new js__$Boot_HaxeError("Invalid bytes length");
					var codes = haxe_Unserializer.CODES;
					if (codes == null) {
						codes = haxe_Unserializer.initCodes();
						haxe_Unserializer.CODES = codes;
					}
					var i1 = this.pos;
					var rest = len1 & 3;
					var size;
					size = (len1 >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
					var max = i1 + (len1 - rest);
					var bytes = haxe_io_Bytes.alloc(size);
					var bpos = 0;
					while (i1 < max) {
						var c11 = codes[StringTools.fastCodeAt(buf5, i1++)];
						var c2 = codes[StringTools.fastCodeAt(buf5, i1++)];
						bytes.set(bpos++, c11 << 2 | c2 >> 4);
						var c3 = codes[StringTools.fastCodeAt(buf5, i1++)];
						bytes.set(bpos++, c2 << 4 | c3 >> 2);
						var c4 = codes[StringTools.fastCodeAt(buf5, i1++)];
						bytes.set(bpos++, c3 << 6 | c4);
					}
					if (rest >= 2) {
						var c12 = codes[StringTools.fastCodeAt(buf5, i1++)];
						var c21 = codes[StringTools.fastCodeAt(buf5, i1++)];
						bytes.set(bpos++, c12 << 2 | c21 >> 4);
						if (rest == 3) {
							var c31 = codes[StringTools.fastCodeAt(buf5, i1++)];
							bytes.set(bpos++, c21 << 4 | c31 >> 2);
						}
					}
					this.pos += len1;
					this.cache.push(bytes);
					return bytes;
				case 67:
					var name3 = this.unserialize();
					var cl1 = this.resolver.resolveClass(name3);
					if (cl1 == null) throw new js__$Boot_HaxeError("Class not found " + name3);
					var o2 = Type.createEmptyInstance(cl1);
					this.cache.push(o2);
					o2.hxUnserialize(this);
					if (this.get(this.pos++) != 103) throw new js__$Boot_HaxeError("Invalid custom data");
					return o2;
				case 65:
					var name4 = this.unserialize();
					var cl2 = this.resolver.resolveClass(name4);
					if (cl2 == null) throw new js__$Boot_HaxeError("Class not found " + name4);
					return cl2;
				case 66:
					var name5 = this.unserialize();
					var e2 = this.resolver.resolveEnum(name5);
					if (e2 == null) throw new js__$Boot_HaxeError("Enum not found " + name5);
					return e2;
				default:
			}
			this.pos--;
			throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
		}
		, __class__: haxe_Unserializer
	};
	var haxe_io_Bytes = function (data) {
		this.length = data.byteLength;
		this.b = new Uint8Array(data);
		this.b.bufferValue = data;
		data.hxBytes = this;
		data.bytes = this.b;
	};
	$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
	haxe_io_Bytes.__name__ = ["haxe", "io", "Bytes"];
	haxe_io_Bytes.alloc = function (length) {
		return new haxe_io_Bytes(new ArrayBuffer(length));
	};
	haxe_io_Bytes.ofString = function (s) {
		var a = [];
		var i = 0;
		while (i < s.length) {
			var c = StringTools.fastCodeAt(s, i++);
			if (55296 <= c && c <= 56319) c = c - 55232 << 10 | StringTools.fastCodeAt(s, i++) & 1023;
			if (c <= 127) a.push(c); else if (c <= 2047) {
				a.push(192 | c >> 6);
				a.push(128 | c & 63);
			} else if (c <= 65535) {
				a.push(224 | c >> 12);
				a.push(128 | c >> 6 & 63);
				a.push(128 | c & 63);
			} else {
				a.push(240 | c >> 18);
				a.push(128 | c >> 12 & 63);
				a.push(128 | c >> 6 & 63);
				a.push(128 | c & 63);
			}
		}
		return new haxe_io_Bytes(new Uint8Array(a).buffer);
	};
	haxe_io_Bytes.ofData = function (b) {
		var hb = b.hxBytes;
		if (hb != null) return hb;
		return new haxe_io_Bytes(b);
	};
	haxe_io_Bytes.prototype = {
		get: function (pos) {
			return this.b[pos];
		}
		, set: function (pos, v) {
			this.b[pos] = v & 255;
		}
		, getString: function (pos, len) {
			if (pos < 0 || len < 0 || pos + len > this.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
			var s = "";
			var b = this.b;
			var fcc = String.fromCharCode;
			var i = pos;
			var max = pos + len;
			while (i < max) {
				var c = b[i++];
				if (c < 128) {
					if (c == 0) break;
					s += fcc(c);
				} else if (c < 224) s += fcc((c & 63) << 6 | b[i++] & 127); else if (c < 240) {
					var c2 = b[i++];
					s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += fcc((u >> 10) + 55232);
					s += fcc(u & 1023 | 56320);
				}
			}
			return s;
		}
		, toString: function () {
			return this.getString(0, this.length);
		}
		, __class__: haxe_io_Bytes
	};
	var haxe_crypto_Base64 = function () { };
	$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
	haxe_crypto_Base64.__name__ = ["haxe", "crypto", "Base64"];
	haxe_crypto_Base64.decode = function (str, complement) {
		if (complement == null) complement = true;
		if (complement) while (HxOverrides.cca(str, str.length - 1) == 61) str = HxOverrides.substr(str, 0, -1);
		return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
	};
	var haxe_crypto_BaseCode = function (base) {
		var len = base.length;
		var nbits = 1;
		while (len > 1 << nbits) nbits++;
		if (nbits > 8 || len != 1 << nbits) throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
		this.base = base;
		this.nbits = nbits;
	};
	$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
	haxe_crypto_BaseCode.__name__ = ["haxe", "crypto", "BaseCode"];
	haxe_crypto_BaseCode.prototype = {
		encodeBytes: function (b) {
			var nbits = this.nbits;
			var base = this.base;
			var size = b.length * 8 / nbits | 0;
			var out = haxe_io_Bytes.alloc(size + (b.length * 8 % nbits == 0 ? 0 : 1));
			var buf = 0;
			var curbits = 0;
			var mask = (1 << nbits) - 1;
			var pin = 0;
			var pout = 0;
			while (pout < size) {
				while (curbits < nbits) {
					curbits += 8;
					buf <<= 8;
					buf |= b.get(pin++);
				}
				curbits -= nbits;
				out.set(pout++, base.b[buf >> curbits & mask]);
			}
			if (curbits > 0) out.set(pout++, base.b[buf << nbits - curbits & mask]);
			return out;
		}
		, initTable: function () {
			var tbl = [];
			var _g = 0;
			while (_g < 256) {
				var i = _g++;
				tbl[i] = -1;
			}
			var _g1 = 0;
			var _g2 = this.base.length;
			while (_g1 < _g2) {
				var i1 = _g1++;
				tbl[this.base.b[i1]] = i1;
			}
			this.tbl = tbl;
		}
		, decodeBytes: function (b) {
			var nbits = this.nbits;
			var base = this.base;
			if (this.tbl == null) this.initTable();
			var tbl = this.tbl;
			var size = b.length * nbits >> 3;
			var out = haxe_io_Bytes.alloc(size);
			var buf = 0;
			var curbits = 0;
			var pin = 0;
			var pout = 0;
			while (pout < size) {
				while (curbits < 8) {
					curbits += nbits;
					buf <<= nbits;
					var i = tbl[b.get(pin++)];
					if (i == -1) throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
					buf |= i;
				}
				curbits -= 8;
				out.set(pout++, buf >> curbits & 255);
			}
			return out;
		}
		, __class__: haxe_crypto_BaseCode
	};
	var haxe_crypto_Md5 = function () {
	};
	$hxClasses["haxe.crypto.Md5"] = haxe_crypto_Md5;
	haxe_crypto_Md5.__name__ = ["haxe", "crypto", "Md5"];
	haxe_crypto_Md5.encode = function (s) {
		var m = new haxe_crypto_Md5();
		var h = m.doEncode(haxe_crypto_Md5.str2blks(s));
		return m.hex(h);
	};
	haxe_crypto_Md5.str2blks = function (str) {
		var nblk = (str.length + 8 >> 6) + 1;
		var blks = [];
		var blksSize = nblk * 16;
		var _g = 0;
		while (_g < blksSize) {
			var i1 = _g++;
			blks[i1] = 0;
		}
		var i = 0;
		while (i < str.length) {
			blks[i >> 2] |= HxOverrides.cca(str, i) << (str.length * 8 + i) % 4 * 8;
			i++;
		}
		blks[i >> 2] |= 128 << (str.length * 8 + i) % 4 * 8;
		var l = str.length * 8;
		var k = nblk * 16 - 2;
		blks[k] = l & 255;
		blks[k] |= (l >>> 8 & 255) << 8;
		blks[k] |= (l >>> 16 & 255) << 16;
		blks[k] |= (l >>> 24 & 255) << 24;
		return blks;
	};
	haxe_crypto_Md5.prototype = {
		bitOR: function (a, b) {
			var lsb = a & 1 | b & 1;
			var msb31 = a >>> 1 | b >>> 1;
			return msb31 << 1 | lsb;
		}
		, bitXOR: function (a, b) {
			var lsb = a & 1 ^ b & 1;
			var msb31 = a >>> 1 ^ b >>> 1;
			return msb31 << 1 | lsb;
		}
		, bitAND: function (a, b) {
			var lsb = a & 1 & (b & 1);
			var msb31 = a >>> 1 & b >>> 1;
			return msb31 << 1 | lsb;
		}
		, addme: function (x, y) {
			var lsw = (x & 65535) + (y & 65535);
			var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
			return msw << 16 | lsw & 65535;
		}
		, hex: function (a) {
			var str = "";
			var hex_chr = "0123456789abcdef";
			var _g = 0;
			while (_g < a.length) {
				var num = a[_g];
				++_g;
				var _g1 = 0;
				while (_g1 < 4) {
					var j = _g1++;
					str += hex_chr.charAt(num >> j * 8 + 4 & 15) + hex_chr.charAt(num >> j * 8 & 15);
				}
			}
			return str;
		}
		, rol: function (num, cnt) {
			return num << cnt | num >>> 32 - cnt;
		}
		, cmn: function (q, a, b, x, s, t) {
			return this.addme(this.rol(this.addme(this.addme(a, q), this.addme(x, t)), s), b);
		}
		, ff: function (a, b, c, d, x, s, t) {
			return this.cmn(this.bitOR(this.bitAND(b, c), this.bitAND(~b, d)), a, b, x, s, t);
		}
		, gg: function (a, b, c, d, x, s, t) {
			return this.cmn(this.bitOR(this.bitAND(b, d), this.bitAND(c, ~d)), a, b, x, s, t);
		}
		, hh: function (a, b, c, d, x, s, t) {
			return this.cmn(this.bitXOR(this.bitXOR(b, c), d), a, b, x, s, t);
		}
		, ii: function (a, b, c, d, x, s, t) {
			return this.cmn(this.bitXOR(c, this.bitOR(b, ~d)), a, b, x, s, t);
		}
		, doEncode: function (x) {
			var a = 1732584193;
			var b = -271733879;
			var c = -1732584194;
			var d = 271733878;
			var step;
			var i = 0;
			while (i < x.length) {
				var olda = a;
				var oldb = b;
				var oldc = c;
				var oldd = d;
				step = 0;
				a = this.ff(a, b, c, d, x[i], 7, -680876936);
				d = this.ff(d, a, b, c, x[i + 1], 12, -389564586);
				c = this.ff(c, d, a, b, x[i + 2], 17, 606105819);
				b = this.ff(b, c, d, a, x[i + 3], 22, -1044525330);
				a = this.ff(a, b, c, d, x[i + 4], 7, -176418897);
				d = this.ff(d, a, b, c, x[i + 5], 12, 1200080426);
				c = this.ff(c, d, a, b, x[i + 6], 17, -1473231341);
				b = this.ff(b, c, d, a, x[i + 7], 22, -45705983);
				a = this.ff(a, b, c, d, x[i + 8], 7, 1770035416);
				d = this.ff(d, a, b, c, x[i + 9], 12, -1958414417);
				c = this.ff(c, d, a, b, x[i + 10], 17, -42063);
				b = this.ff(b, c, d, a, x[i + 11], 22, -1990404162);
				a = this.ff(a, b, c, d, x[i + 12], 7, 1804603682);
				d = this.ff(d, a, b, c, x[i + 13], 12, -40341101);
				c = this.ff(c, d, a, b, x[i + 14], 17, -1502002290);
				b = this.ff(b, c, d, a, x[i + 15], 22, 1236535329);
				a = this.gg(a, b, c, d, x[i + 1], 5, -165796510);
				d = this.gg(d, a, b, c, x[i + 6], 9, -1069501632);
				c = this.gg(c, d, a, b, x[i + 11], 14, 643717713);
				b = this.gg(b, c, d, a, x[i], 20, -373897302);
				a = this.gg(a, b, c, d, x[i + 5], 5, -701558691);
				d = this.gg(d, a, b, c, x[i + 10], 9, 38016083);
				c = this.gg(c, d, a, b, x[i + 15], 14, -660478335);
				b = this.gg(b, c, d, a, x[i + 4], 20, -405537848);
				a = this.gg(a, b, c, d, x[i + 9], 5, 568446438);
				d = this.gg(d, a, b, c, x[i + 14], 9, -1019803690);
				c = this.gg(c, d, a, b, x[i + 3], 14, -187363961);
				b = this.gg(b, c, d, a, x[i + 8], 20, 1163531501);
				a = this.gg(a, b, c, d, x[i + 13], 5, -1444681467);
				d = this.gg(d, a, b, c, x[i + 2], 9, -51403784);
				c = this.gg(c, d, a, b, x[i + 7], 14, 1735328473);
				b = this.gg(b, c, d, a, x[i + 12], 20, -1926607734);
				a = this.hh(a, b, c, d, x[i + 5], 4, -378558);
				d = this.hh(d, a, b, c, x[i + 8], 11, -2022574463);
				c = this.hh(c, d, a, b, x[i + 11], 16, 1839030562);
				b = this.hh(b, c, d, a, x[i + 14], 23, -35309556);
				a = this.hh(a, b, c, d, x[i + 1], 4, -1530992060);
				d = this.hh(d, a, b, c, x[i + 4], 11, 1272893353);
				c = this.hh(c, d, a, b, x[i + 7], 16, -155497632);
				b = this.hh(b, c, d, a, x[i + 10], 23, -1094730640);
				a = this.hh(a, b, c, d, x[i + 13], 4, 681279174);
				d = this.hh(d, a, b, c, x[i], 11, -358537222);
				c = this.hh(c, d, a, b, x[i + 3], 16, -722521979);
				b = this.hh(b, c, d, a, x[i + 6], 23, 76029189);
				a = this.hh(a, b, c, d, x[i + 9], 4, -640364487);
				d = this.hh(d, a, b, c, x[i + 12], 11, -421815835);
				c = this.hh(c, d, a, b, x[i + 15], 16, 530742520);
				b = this.hh(b, c, d, a, x[i + 2], 23, -995338651);
				a = this.ii(a, b, c, d, x[i], 6, -198630844);
				d = this.ii(d, a, b, c, x[i + 7], 10, 1126891415);
				c = this.ii(c, d, a, b, x[i + 14], 15, -1416354905);
				b = this.ii(b, c, d, a, x[i + 5], 21, -57434055);
				a = this.ii(a, b, c, d, x[i + 12], 6, 1700485571);
				d = this.ii(d, a, b, c, x[i + 3], 10, -1894986606);
				c = this.ii(c, d, a, b, x[i + 10], 15, -1051523);
				b = this.ii(b, c, d, a, x[i + 1], 21, -2054922799);
				a = this.ii(a, b, c, d, x[i + 8], 6, 1873313359);
				d = this.ii(d, a, b, c, x[i + 15], 10, -30611744);
				c = this.ii(c, d, a, b, x[i + 6], 15, -1560198380);
				b = this.ii(b, c, d, a, x[i + 13], 21, 1309151649);
				a = this.ii(a, b, c, d, x[i + 4], 6, -145523070);
				d = this.ii(d, a, b, c, x[i + 11], 10, -1120210379);
				c = this.ii(c, d, a, b, x[i + 2], 15, 718787259);
				b = this.ii(b, c, d, a, x[i + 9], 21, -343485551);
				a = this.addme(a, olda);
				b = this.addme(b, oldb);
				c = this.addme(c, oldc);
				d = this.addme(d, oldd);
				i += 16;
			}
			return [a, b, c, d];
		}
		, __class__: haxe_crypto_Md5
	};
	var haxe_ds_IntMap = function () {
		this.h = {};
	};
	$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
	haxe_ds_IntMap.__name__ = ["haxe", "ds", "IntMap"];
	haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
	haxe_ds_IntMap.prototype = {
		set: function (key, value) {
			this.h[key] = value;
		}
		, remove: function (key) {
			if (!this.h.hasOwnProperty(key)) return false;
			delete (this.h[key]);
			return true;
		}
		, keys: function () {
			var a = [];
			for (var key in this.h) {
				if (this.h.hasOwnProperty(key)) a.push(key | 0);
			}
			return HxOverrides.iter(a);
		}
		, __class__: haxe_ds_IntMap
	};
	var haxe_ds_ObjectMap = function () {
		this.h = {};
		this.h.__keys__ = {};
	};
	$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
	haxe_ds_ObjectMap.__name__ = ["haxe", "ds", "ObjectMap"];
	haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
	haxe_ds_ObjectMap.prototype = {
		set: function (key, value) {
			var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
			this.h[id] = value;
			this.h.__keys__[id] = key;
		}
		, remove: function (key) {
			var id = key.__id__;
			if (this.h.__keys__[id] == null) return false;
			delete (this.h[id]);
			delete (this.h.__keys__[id]);
			return true;
		}
		, keys: function () {
			var a = [];
			for (var key in this.h.__keys__) {
				if (this.h.hasOwnProperty(key)) a.push(this.h.__keys__[key]);
			}
			return HxOverrides.iter(a);
		}
		, iterator: function () {
			return {
				ref: this.h, it: this.keys(), hasNext: function () {
					return this.it.hasNext();
				}, next: function () {
					var i = this.it.next();
					return this.ref[i.__id__];
				}
			};
		}
		, __class__: haxe_ds_ObjectMap
	};
	var haxe_ds__$StringMap_StringMapIterator = function (map, keys) {
		this.map = map;
		this.keys = keys;
		this.index = 0;
		this.count = keys.length;
	};
	$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
	haxe_ds__$StringMap_StringMapIterator.__name__ = ["haxe", "ds", "_StringMap", "StringMapIterator"];
	haxe_ds__$StringMap_StringMapIterator.prototype = {
		hasNext: function () {
			return this.index < this.count;
		}
		, next: function () {
			return this.map.get(this.keys[this.index++]);
		}
		, __class__: haxe_ds__$StringMap_StringMapIterator
	};
	var haxe_ds_StringMap = function () {
		this.h = {};
	};
	$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
	haxe_ds_StringMap.__name__ = ["haxe", "ds", "StringMap"];
	haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
	haxe_ds_StringMap.prototype = {
		set: function (key, value) {
			if (__map_reserved[key] != null) this.setReserved(key, value); else this.h[key] = value;
		}
		, get: function (key) {
			if (__map_reserved[key] != null) return this.getReserved(key);
			return this.h[key];
		}
		, exists: function (key) {
			if (__map_reserved[key] != null) return this.existsReserved(key);
			return this.h.hasOwnProperty(key);
		}
		, setReserved: function (key, value) {
			if (this.rh == null) this.rh = {};
			this.rh["$" + key] = value;
		}
		, getReserved: function (key) {
			if (this.rh == null) return null; else return this.rh["$" + key];
		}
		, existsReserved: function (key) {
			if (this.rh == null) return false;
			return this.rh.hasOwnProperty("$" + key);
		}
		, remove: function (key) {
			if (__map_reserved[key] != null) {
				key = "$" + key;
				if (this.rh == null || !this.rh.hasOwnProperty(key)) return false;
				delete (this.rh[key]);
				return true;
			} else {
				if (!this.h.hasOwnProperty(key)) return false;
				delete (this.h[key]);
				return true;
			}
		}
		, keys: function () {
			var _this = this.arrayKeys();
			return HxOverrides.iter(_this);
		}
		, arrayKeys: function () {
			var out = [];
			for (var key in this.h) {
				if (this.h.hasOwnProperty(key)) out.push(key);
			}
			if (this.rh != null) {
				for (var key in this.rh) {
					if (key.charCodeAt(0) == 36) out.push(key.substr(1));
				}
			}
			return out;
		}
		, iterator: function () {
			return new haxe_ds__$StringMap_StringMapIterator(this, this.arrayKeys());
		}
		, __class__: haxe_ds_StringMap
	};
	var haxe_ds__$Vector_Vector_$Impl_$ = {};
	$hxClasses["haxe.ds._Vector.Vector_Impl_"] = haxe_ds__$Vector_Vector_$Impl_$;
	haxe_ds__$Vector_Vector_$Impl_$.__name__ = ["haxe", "ds", "_Vector", "Vector_Impl_"];
	haxe_ds__$Vector_Vector_$Impl_$.blit = function (src, srcPos, dest, destPos, len) {
		var _g = 0;
		while (_g < len) {
			var i = _g++;
			dest[destPos + i] = src[srcPos + i];
		}
	};
	haxe_ds__$Vector_Vector_$Impl_$.toArray = function (this1) {
		var a = [];
		var len = this1.length;
		var _g = 0;
		while (_g < len) {
			var i = _g++;
			a[i] = this1[i];
		}
		return a;
	};
	var haxe_io_Eof = function () { };
	$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
	haxe_io_Eof.__name__ = ["haxe", "io", "Eof"];
	haxe_io_Eof.prototype = {
		toString: function () {
			return "Eof";
		}
		, __class__: haxe_io_Eof
	};
	var haxe_io_Error = $hxClasses["haxe.io.Error"] = { __ename__: ["haxe", "io", "Error"], __constructs__: ["Blocked", "Overflow", "OutsideBounds", "Custom"] };
	haxe_io_Error.Blocked = ["Blocked", 0];
	haxe_io_Error.Blocked.toString = $estr;
	haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
	haxe_io_Error.Overflow = ["Overflow", 1];
	haxe_io_Error.Overflow.toString = $estr;
	haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
	haxe_io_Error.OutsideBounds = ["OutsideBounds", 2];
	haxe_io_Error.OutsideBounds.toString = $estr;
	haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
	haxe_io_Error.Custom = function (e) { var $x = ["Custom", 3, e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
	var haxe_io_FPHelper = function () { };
	$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
	haxe_io_FPHelper.__name__ = ["haxe", "io", "FPHelper"];
	haxe_io_FPHelper.i32ToFloat = function (i) {
		var sign = 1 - (i >>> 31 << 1);
		var exp = i >>> 23 & 255;
		var sig = i & 8388607;
		if (sig == 0 && exp == 0) return 0.0;
		return sign * (1 + Math.pow(2, -23) * sig) * Math.pow(2, exp - 127);
	};
	haxe_io_FPHelper.floatToI32 = function (f) {
		if (f == 0) return 0;
		var af;
		if (f < 0) af = -f; else af = f;
		var exp = Math.floor(Math.log(af) / 0.6931471805599453);
		if (exp < -127) exp = -127; else if (exp > 128) exp = 128;
		var sig = Math.round((af / Math.pow(2, exp) - 1) * 8388608) & 8388607;
		return (f < 0 ? -2147483648 : 0) | exp + 127 << 23 | sig;
	};
	haxe_io_FPHelper.i64ToDouble = function (low, high) {
		var sign = 1 - (high >>> 31 << 1);
		var exp = (high >> 20 & 2047) - 1023;
		var sig = (high & 1048575) * 4294967296. + (low >>> 31) * 2147483648. + (low & 2147483647);
		if (sig == 0 && exp == -1023) return 0.0;
		return sign * (1.0 + Math.pow(2, -52) * sig) * Math.pow(2, exp);
	};
	haxe_io_FPHelper.doubleToI64 = function (v) {
		var i64 = haxe_io_FPHelper.i64tmp;
		if (v == 0) {
			i64.low = 0;
			i64.high = 0;
		} else {
			var av;
			if (v < 0) av = -v; else av = v;
			var exp = Math.floor(Math.log(av) / 0.6931471805599453);
			var sig;
			var v1 = (av / Math.pow(2, exp) - 1) * 4503599627370496.;
			sig = Math.round(v1);
			var sig_l = sig | 0;
			var sig_h = sig / 4294967296.0 | 0;
			i64.low = sig_l;
			i64.high = (v < 0 ? -2147483648 : 0) | exp + 1023 << 20 | sig_h;
		}
		return i64;
	};
	var haxe_io_Path = function (path) {
		switch (path) {
			case ".": case "..":
				this.dir = path;
				this.file = "";
				return;
		}
		var c1 = path.lastIndexOf("/");
		var c2 = path.lastIndexOf("\\");
		if (c1 < c2) {
			this.dir = HxOverrides.substr(path, 0, c2);
			path = HxOverrides.substr(path, c2 + 1, null);
			this.backslash = true;
		} else if (c2 < c1) {
			this.dir = HxOverrides.substr(path, 0, c1);
			path = HxOverrides.substr(path, c1 + 1, null);
		} else this.dir = null;
		var cp = path.lastIndexOf(".");
		if (cp != -1) {
			this.ext = HxOverrides.substr(path, cp + 1, null);
			this.file = HxOverrides.substr(path, 0, cp);
		} else {
			this.ext = null;
			this.file = path;
		}
	};
	$hxClasses["haxe.io.Path"] = haxe_io_Path;
	haxe_io_Path.__name__ = ["haxe", "io", "Path"];
	haxe_io_Path.withoutExtension = function (path) {
		var s = new haxe_io_Path(path);
		s.ext = null;
		return s.toString();
	};
	haxe_io_Path.prototype = {
		toString: function () {
			return (this.dir == null ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (this.ext == null ? "" : "." + this.ext);
		}
		, __class__: haxe_io_Path
	};
	var haxe_xml_Parser = function () { };
	$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
	haxe_xml_Parser.__name__ = ["haxe", "xml", "Parser"];
	haxe_xml_Parser.parse = function (str, strict) {
		if (strict == null) strict = false;
		var doc = Xml.createDocument();
		haxe_xml_Parser.doParse(str, strict, 0, doc);
		return doc;
	};
	haxe_xml_Parser.doParse = function (str, strict, p, parent) {
		if (p == null) p = 0;
		var xml = null;
		var state = 1;
		var next = 1;
		var aname = null;
		var start = 0;
		var nsubs = 0;
		var nbrackets = 0;
		var c = str.charCodeAt(p);
		var buf = new StringBuf();
		var escapeNext = 1;
		var attrValQuote = -1;
		while (!(c != c)) {
			switch (state) {
				case 0:
					switch (c) {
						case 10: case 13: case 9: case 32:
							break;
						default:
							state = next;
							continue;
					}
					break;
				case 1:
					switch (c) {
						case 60:
							state = 0;
							next = 2;
							break;
						default:
							start = p;
							state = 13;
							continue;
					}
					break;
				case 13:
					if (c == 60) {
						buf.addSub(str, start, p - start);
						var child = Xml.createPCData(buf.b);
						buf = new StringBuf();
						parent.addChild(child);
						nsubs++;
						state = 0;
						next = 2;
					} else if (c == 38) {
						buf.addSub(str, start, p - start);
						state = 18;
						escapeNext = 13;
						start = p + 1;
					}
					break;
				case 17:
					if (c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
						var child1 = Xml.createCData(HxOverrides.substr(str, start, p - start));
						parent.addChild(child1);
						nsubs++;
						p += 2;
						state = 1;
					}
					break;
				case 2:
					switch (c) {
						case 33:
							if (str.charCodeAt(p + 1) == 91) {
								p += 2;
								if (HxOverrides.substr(str, p, 6).toUpperCase() != "CDATA[") throw new js__$Boot_HaxeError("Expected <![CDATA[");
								p += 5;
								state = 17;
								start = p + 1;
							} else if (str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
								if (HxOverrides.substr(str, p + 2, 6).toUpperCase() != "OCTYPE") throw new js__$Boot_HaxeError("Expected <!DOCTYPE");
								p += 8;
								state = 16;
								start = p + 1;
							} else if (str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) throw new js__$Boot_HaxeError("Expected <!--"); else {
								p += 2;
								state = 15;
								start = p + 1;
							}
							break;
						case 63:
							state = 14;
							start = p;
							break;
						case 47:
							if (parent == null) throw new js__$Boot_HaxeError("Expected node name");
							start = p + 1;
							state = 0;
							next = 10;
							break;
						default:
							state = 3;
							start = p;
							continue;
					}
					break;
				case 3:
					if (!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
						if (p == start) throw new js__$Boot_HaxeError("Expected node name");
						xml = Xml.createElement(HxOverrides.substr(str, start, p - start));
						parent.addChild(xml);
						nsubs++;
						state = 0;
						next = 4;
						continue;
					}
					break;
				case 4:
					switch (c) {
						case 47:
							state = 11;
							break;
						case 62:
							state = 9;
							break;
						default:
							state = 5;
							start = p;
							continue;
					}
					break;
				case 5:
					if (!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
						var tmp;
						if (start == p) throw new js__$Boot_HaxeError("Expected attribute name");
						tmp = HxOverrides.substr(str, start, p - start);
						aname = tmp;
						if (xml.exists(aname)) throw new js__$Boot_HaxeError("Duplicate attribute");
						state = 0;
						next = 6;
						continue;
					}
					break;
				case 6:
					switch (c) {
						case 61:
							state = 0;
							next = 7;
							break;
						default:
							throw new js__$Boot_HaxeError("Expected =");
					}
					break;
				case 7:
					switch (c) {
						case 34: case 39:
							buf = new StringBuf();
							state = 8;
							start = p + 1;
							attrValQuote = c;
							break;
						default:
							throw new js__$Boot_HaxeError("Expected \"");
					}
					break;
				case 8:
					switch (c) {
						case 38:
							buf.addSub(str, start, p - start);
							state = 18;
							escapeNext = 8;
							start = p + 1;
							break;
						case 62:
							if (strict) throw new js__$Boot_HaxeError("Invalid unescaped " + String.fromCharCode(c) + " in attribute value"); else if (c == attrValQuote) {
								buf.addSub(str, start, p - start);
								var val = buf.b;
								buf = new StringBuf();
								xml.set(aname, val);
								state = 0;
								next = 4;
							}
							break;
						case 60:
							if (strict) throw new js__$Boot_HaxeError("Invalid unescaped " + String.fromCharCode(c) + " in attribute value"); else if (c == attrValQuote) {
								buf.addSub(str, start, p - start);
								var val1 = buf.b;
								buf = new StringBuf();
								xml.set(aname, val1);
								state = 0;
								next = 4;
							}
							break;
						default:
							if (c == attrValQuote) {
								buf.addSub(str, start, p - start);
								var val2 = buf.b;
								buf = new StringBuf();
								xml.set(aname, val2);
								state = 0;
								next = 4;
							}
					}
					break;
				case 9:
					p = haxe_xml_Parser.doParse(str, strict, p, xml);
					start = p;
					state = 1;
					break;
				case 11:
					switch (c) {
						case 62:
							state = 1;
							break;
						default:
							throw new js__$Boot_HaxeError("Expected >");
					}
					break;
				case 12:
					switch (c) {
						case 62:
							if (nsubs == 0) parent.addChild(Xml.createPCData(""));
							return p;
						default:
							throw new js__$Boot_HaxeError("Expected >");
					}
					break;
				case 10:
					if (!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
						if (start == p) throw new js__$Boot_HaxeError("Expected node name");
						var v = HxOverrides.substr(str, start, p - start);
						if (v != (function ($this) {
							var $r;
							if (parent.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
							$r = parent.nodeName;
							return $r;
						}(this))) throw new js__$Boot_HaxeError("Expected </" + (function ($this) {
							var $r;
							if (parent.nodeType != Xml.Element) throw "Bad node type, expected Element but found " + parent.nodeType;
							$r = parent.nodeName;
							return $r;
						}(this)) + ">");
						state = 0;
						next = 12;
						continue;
					}
					break;
				case 15:
					if (c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
						var xml1 = Xml.createComment(HxOverrides.substr(str, start, p - start));
						parent.addChild(xml1);
						nsubs++;
						p += 2;
						state = 1;
					}
					break;
				case 16:
					if (c == 91) nbrackets++; else if (c == 93) nbrackets--; else if (c == 62 && nbrackets == 0) {
						var xml2 = Xml.createDocType(HxOverrides.substr(str, start, p - start));
						parent.addChild(xml2);
						nsubs++;
						state = 1;
					}
					break;
				case 14:
					if (c == 63 && str.charCodeAt(p + 1) == 62) {
						p++;
						var str1 = HxOverrides.substr(str, start + 1, p - start - 2);
						var xml3 = Xml.createProcessingInstruction(str1);
						parent.addChild(xml3);
						nsubs++;
						state = 1;
					}
					break;
				case 18:
					if (c == 59) {
						var s = HxOverrides.substr(str, start, p - start);
						if (s.charCodeAt(0) == 35) {
							var c1;
							if (s.charCodeAt(1) == 120) c1 = Std.parseInt("0" + HxOverrides.substr(s, 1, s.length - 1)); else c1 = Std.parseInt(HxOverrides.substr(s, 1, s.length - 1));
							buf.b += String.fromCharCode(c1);
						} else if (!haxe_xml_Parser.escapes.exists(s)) {
							if (strict) throw new js__$Boot_HaxeError("Undefined entity: " + s);
							buf.b += Std.string("&" + s + ";");
						} else buf.add(haxe_xml_Parser.escapes.get(s));
						start = p + 1;
						state = escapeNext;
					} else if (!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
						if (strict) throw new js__$Boot_HaxeError("Invalid character in entity: " + String.fromCharCode(c));
						buf.b += "&";
						buf.addSub(str, start, p - start);
						p--;
						start = p + 1;
						state = escapeNext;
					}
					break;
			}
			c = StringTools.fastCodeAt(str, ++p);
		}
		if (state == 1) {
			start = p;
			state = 13;
		}
		if (state == 13) {
			if (p != start || nsubs == 0) {
				buf.addSub(str, start, p - start);
				var xml4 = Xml.createPCData(buf.b);
				parent.addChild(xml4);
				nsubs++;
			}
			return p;
		}
		if (!strict && state == 18 && escapeNext == 13) {
			buf.b += "&";
			buf.addSub(str, start, p - start);
			var xml5 = Xml.createPCData(buf.b);
			parent.addChild(xml5);
			nsubs++;
			return p;
		}
		throw new js__$Boot_HaxeError("Unexpected end");
	};
	var haxe_xml_Printer = function (pretty) {
		this.output = new StringBuf();
		this.pretty = pretty;
	};
	$hxClasses["haxe.xml.Printer"] = haxe_xml_Printer;
	haxe_xml_Printer.__name__ = ["haxe", "xml", "Printer"];
	haxe_xml_Printer.print = function (xml, pretty) {
		if (pretty == null) pretty = false;
		var printer = new haxe_xml_Printer(pretty);
		printer.writeNode(xml, "");
		return printer.output.b;
	};
	haxe_xml_Printer.prototype = {
		writeNode: function (value, tabs) {
			var _g = value.nodeType;
			switch (_g) {
				case 2:
					this.output.b += Std.string(tabs + "<![CDATA[");
					this.write(StringTools.trim((function ($this) {
						var $r;
						if (value.nodeType == Xml.Document || value.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
						$r = value.nodeValue;
						return $r;
					}(this))));
					this.output.b += "]]>";
					if (this.pretty) this.output.b += "";
					break;
				case 3:
					var commentContent;
					if (value.nodeType == Xml.Document || value.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
					commentContent = value.nodeValue;
					commentContent = new EReg("[\n\r\t]+", "g").replace(commentContent, "");
					commentContent = "<!--" + commentContent + "-->";
					if (tabs == null) this.output.b += "null"; else this.output.b += "" + tabs;
					this.write(StringTools.trim(commentContent));
					if (this.pretty) this.output.b += "";
					break;
				case 6:
					var $it0 = (function ($this) {
						var $r;
						if (value.nodeType != Xml.Document && value.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + value.nodeType);
						$r = HxOverrides.iter(value.children);
						return $r;
					}(this));
					while ($it0.hasNext()) {
						var child = $it0.next();
						this.writeNode(child, tabs);
					}
					break;
				case 0:
					this.output.b += Std.string(tabs + "<");
					this.write((function ($this) {
						var $r;
						if (value.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + value.nodeType);
						$r = value.nodeName;
						return $r;
					}(this)));
					var $it1 = value.attributes();
					while ($it1.hasNext()) {
						var attribute = $it1.next();
						this.output.b += Std.string(" " + attribute + "=\"");
						this.write(StringTools.htmlEscape(value.get(attribute), true));
						this.output.b += "\"";
					}
					if (this.hasChildren(value)) {
						this.output.b += ">";
						if (this.pretty) this.output.b += "";
						var $it2 = (function ($this) {
							var $r;
							if (value.nodeType != Xml.Document && value.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + value.nodeType);
							$r = HxOverrides.iter(value.children);
							return $r;
						}(this));
						while ($it2.hasNext()) {
							var child1 = $it2.next();
							this.writeNode(child1, this.pretty ? tabs + "\t" : tabs);
						}
						this.output.b += Std.string(tabs + "</");
						this.write((function ($this) {
							var $r;
							if (value.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + value.nodeType);
							$r = value.nodeName;
							return $r;
						}(this)));
						this.output.b += ">";
						if (this.pretty) this.output.b += "";
					} else {
						this.output.b += "/>";
						if (this.pretty) this.output.b += "";
					}
					break;
				case 1:
					var nodeValue;
					if (value.nodeType == Xml.Document || value.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
					nodeValue = value.nodeValue;
					if (nodeValue.length != 0) {
						this.write(tabs + StringTools.htmlEscape(nodeValue));
						if (this.pretty) this.output.b += "";
					}
					break;
				case 5:
					this.write("<?" + (function ($this) {
						var $r;
						if (value.nodeType == Xml.Document || value.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
						$r = value.nodeValue;
						return $r;
					}(this)) + "?>");
					break;
				case 4:
					this.write("<!DOCTYPE " + (function ($this) {
						var $r;
						if (value.nodeType == Xml.Document || value.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
						$r = value.nodeValue;
						return $r;
					}(this)) + ">");
					break;
			}
		}
		, write: function (input) {
			if (input == null) this.output.b += "null"; else this.output.b += "" + input;
		}
		, hasChildren: function (value) {
			var $it0 = (function ($this) {
				var $r;
				if (value.nodeType != Xml.Document && value.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + value.nodeType);
				$r = HxOverrides.iter(value.children);
				return $r;
			}(this));
			while ($it0.hasNext()) {
				var child = $it0.next();
				var _g = child.nodeType;
				switch (_g) {
					case 0: case 1:
						return true;
					case 2: case 3:
						if (StringTools.ltrim((function ($this) {
							var $r;
							if (child.nodeType == Xml.Document || child.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + child.nodeType);
							$r = child.nodeValue;
							return $r;
						}(this))).length != 0) return true;
						break;
					default:
				}
			}
			return false;
		}
		, __class__: haxe_xml_Printer
	};
	var js__$Boot_HaxeError = function (val) {
		Error.call(this);
		this.val = val;
		if (Object.prototype.hasOwnProperty.call(val, "name")) this.name = Reflect.field(val, "name"); else this.name = "Error";
		if (Object.prototype.hasOwnProperty.call(val, "message")) this.message = Reflect.field(val, "message"); else this.message = Std.string(val);
		if (Error.captureStackTrace) Error.captureStackTrace(this, js__$Boot_HaxeError);
	};
	$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
	js__$Boot_HaxeError.__name__ = ["js", "_Boot", "HaxeError"];
	js__$Boot_HaxeError.__super__ = Error;
	js__$Boot_HaxeError.prototype = $extend(Error.prototype, {
		__class__: js__$Boot_HaxeError
	});
	var js_Boot = function () { };
	$hxClasses["js.Boot"] = js_Boot;
	js_Boot.__name__ = ["js", "Boot"];
	js_Boot.__unhtml = function (s) {
		return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
	};
	js_Boot.__trace = function (v, i) {
		var msg;
		if (i != null) msg = i.fileName + ":" + i.lineNumber + ": "; else msg = "";
		msg += js_Boot.__string_rec(v, "");
		if (i != null && i.customParams != null) {
			var _g = 0;
			var _g1 = i.customParams;
			while (_g < _g1.length) {
				var v1 = _g1[_g];
				++_g;
				msg += "," + js_Boot.__string_rec(v1, "");
			}
		}
		var d;
		if (typeof (document) != "undefined" && (d = document.getElementById("haxe:trace")) != null) d.innerHTML += js_Boot.__unhtml(msg) + "<br/>"; else if (typeof console != "undefined" && console.log != null) console.log(msg);
	};
	js_Boot.__clear_trace = function () {
		var d = document.getElementById("haxe:trace");
		if (d != null) d.innerHTML = "";
	};
	js_Boot.isClass = function (o) {
		return o.__name__;
	};
	js_Boot.isEnum = function (e) {
		return e.__ename__;
	};
	js_Boot.getClass = function (o) {
		if ((o instanceof Array) && o.__enum__ == null) return Array; else {
			var cl = o.__class__;
			if (cl != null) return cl;
			var name = js_Boot.__nativeClassName(o);
			if (name != null) return js_Boot.__resolveNativeClass(name);
			return null;
		}
	};
	js_Boot.__string_rec = function (o, s) {
		if (o == null) return "null";
		if (s.length >= 5) return "<...>";
		var t = typeof (o);
		if (t == "function" && (o.__name__ || o.__ename__)) t = "object";
		switch (t) {
			case "object":
				if (o instanceof Array) {
					if (o.__enum__) {
						if (o.length == 2) return o[0];
						var str2 = o[0] + "(";
						s += "\t";
						var _g1 = 2;
						var _g = o.length;
						while (_g1 < _g) {
							var i1 = _g1++;
							if (i1 != 2) str2 += "," + js_Boot.__string_rec(o[i1], s); else str2 += js_Boot.__string_rec(o[i1], s);
						}
						return str2 + ")";
					}
					var l = o.length;
					var i;
					var str1 = "[";
					s += "\t";
					var _g2 = 0;
					while (_g2 < l) {
						var i2 = _g2++;
						str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2], s);
					}
					str1 += "]";
					return str1;
				}
				var tostr;
				try {
					tostr = o.toString;
				} catch (e) {
					haxe_CallStack.lastException = e;
					if (e instanceof js__$Boot_HaxeError) e = e.val;
					return "???";
				}
				if (tostr != null && tostr != Object.toString && typeof (tostr) == "function") {
					var s2 = o.toString();
					if (s2 != "[object Object]") return s2;
				}
				var k = null;
				var str = "{\n";
				s += "\t";
				var hasp = o.hasOwnProperty != null;
				for (var k in o) {
					if (hasp && !o.hasOwnProperty(k)) {
						continue;
					}
					if (k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
						continue;
					}
					if (str.length != 2) str += ", \n";
					str += s + k + " : " + js_Boot.__string_rec(o[k], s);
				}
				s = s.substring(1);
				str += "\n" + s + "}";
				return str;
			case "function":
				return "<function>";
			case "string":
				return o;
			default:
				return String(o);
		}
	};
	js_Boot.__interfLoop = function (cc, cl) {
		if (cc == null) return false;
		if (cc == cl) return true;
		var intf = cc.__interfaces__;
		if (intf != null) {
			var _g1 = 0;
			var _g = intf.length;
			while (_g1 < _g) {
				var i = _g1++;
				var i1 = intf[i];
				if (i1 == cl || js_Boot.__interfLoop(i1, cl)) return true;
			}
		}
		return js_Boot.__interfLoop(cc.__super__, cl);
	};
	js_Boot.__instanceof = function (o, cl) {
		if (cl == null) return false;
		switch (cl) {
			case Int:
				return (o | 0) === o;
			case Float:
				return typeof (o) == "number";
			case Bool:
				return typeof (o) == "boolean";
			case String:
				return typeof (o) == "string";
			case Array:
				return (o instanceof Array) && o.__enum__ == null;
			case Dynamic:
				return true;
			default:
				if (o != null) {
					if (typeof (cl) == "function") {
						if (o instanceof cl) return true;
						if (js_Boot.__interfLoop(js_Boot.getClass(o), cl)) return true;
					} else if (typeof (cl) == "object" && js_Boot.__isNativeObj(cl)) {
						if (o instanceof cl) return true;
					}
				} else return false;
				if (cl == Class && o.__name__ != null) return true;
				if (cl == Enum && o.__ename__ != null) return true;
				return o.__enum__ == cl;
		}
	};
	js_Boot.__cast = function (o, t) {
		if (js_Boot.__instanceof(o, t)) return o; else throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	};
	js_Boot.__nativeClassName = function (o) {
		var name = js_Boot.__toStr.call(o).slice(8, -1);
		if (name == "Object" || name == "Function" || name == "Math" || name == "JSON") return null;
		return name;
	};
	js_Boot.__isNativeObj = function (o) {
		return js_Boot.__nativeClassName(o) != null;
	};
	js_Boot.__resolveNativeClass = function (name) {
		return (Function("return typeof " + name + " != \"undefined\" ? " + name + " : null"))();
	};
	var js_Browser = function () { };
	$hxClasses["js.Browser"] = js_Browser;
	js_Browser.__name__ = ["js", "Browser"];
	js_Browser.alert = function (v) {
		window.alert(js_Boot.__string_rec(v, ""));
	};
	var js_html_compat_ArrayBuffer = function (a) {
		if ((a instanceof Array) && a.__enum__ == null) {
			this.a = a;
			this.byteLength = a.length;
		} else {
			var len = a;
			this.a = [];
			var _g = 0;
			while (_g < len) {
				var i = _g++;
				this.a[i] = 0;
			}
			this.byteLength = len;
		}
	};
	$hxClasses["js.html.compat.ArrayBuffer"] = js_html_compat_ArrayBuffer;
	js_html_compat_ArrayBuffer.__name__ = ["js", "html", "compat", "ArrayBuffer"];
	js_html_compat_ArrayBuffer.sliceImpl = function (begin, end) {
		var u = new Uint8Array(this, begin, end == null ? null : end - begin);
		var result = new ArrayBuffer(u.byteLength);
		var resultArray = new Uint8Array(result);
		resultArray.set(u);
		return result;
	};
	js_html_compat_ArrayBuffer.prototype = {
		slice: function (begin, end) {
			return new js_html_compat_ArrayBuffer(this.a.slice(begin, end));
		}
		, __class__: js_html_compat_ArrayBuffer
	};
	var js_html_compat_DataView = function (buffer, byteOffset, byteLength) {
		this.buf = buffer;
		if (byteOffset == null) this.offset = 0; else this.offset = byteOffset;
		if (byteLength == null) this.length = buffer.byteLength - this.offset; else this.length = byteLength;
		if (this.offset < 0 || this.length < 0 || this.offset + this.length > buffer.byteLength) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	};
	$hxClasses["js.html.compat.DataView"] = js_html_compat_DataView;
	js_html_compat_DataView.__name__ = ["js", "html", "compat", "DataView"];
	js_html_compat_DataView.prototype = {
		getInt8: function (byteOffset) {
			var v = this.buf.a[this.offset + byteOffset];
			if (v >= 128) return v - 256; else return v;
		}
		, getUint8: function (byteOffset) {
			return this.buf.a[this.offset + byteOffset];
		}
		, getInt16: function (byteOffset, littleEndian) {
			var v = this.getUint16(byteOffset, littleEndian);
			if (v >= 32768) return v - 65536; else return v;
		}
		, getUint16: function (byteOffset, littleEndian) {
			if (littleEndian) return this.buf.a[this.offset + byteOffset] | this.buf.a[this.offset + byteOffset + 1] << 8; else return this.buf.a[this.offset + byteOffset] << 8 | this.buf.a[this.offset + byteOffset + 1];
		}
		, getInt32: function (byteOffset, littleEndian) {
			var p = this.offset + byteOffset;
			var a = this.buf.a[p++];
			var b = this.buf.a[p++];
			var c = this.buf.a[p++];
			var d = this.buf.a[p++];
			if (littleEndian) return a | b << 8 | c << 16 | d << 24; else return d | c << 8 | b << 16 | a << 24;
		}
		, getUint32: function (byteOffset, littleEndian) {
			var v = this.getInt32(byteOffset, littleEndian);
			if (v < 0) return v + 4294967296.; else return v;
		}
		, getFloat32: function (byteOffset, littleEndian) {
			return haxe_io_FPHelper.i32ToFloat(this.getInt32(byteOffset, littleEndian));
		}
		, getFloat64: function (byteOffset, littleEndian) {
			var a = this.getInt32(byteOffset, littleEndian);
			var b = this.getInt32(byteOffset + 4, littleEndian);
			return haxe_io_FPHelper.i64ToDouble(littleEndian ? a : b, littleEndian ? b : a);
		}
		, setInt8: function (byteOffset, value) {
			if (value < 0) this.buf.a[byteOffset + this.offset] = value + 128 & 255; else this.buf.a[byteOffset + this.offset] = value & 255;
		}
		, setUint8: function (byteOffset, value) {
			this.buf.a[byteOffset + this.offset] = value & 255;
		}
		, setInt16: function (byteOffset, value, littleEndian) {
			this.setUint16(byteOffset, value < 0 ? value + 65536 : value, littleEndian);
		}
		, setUint16: function (byteOffset, value, littleEndian) {
			var p = byteOffset + this.offset;
			if (littleEndian) {
				this.buf.a[p] = value & 255;
				this.buf.a[p++] = value >> 8 & 255;
			} else {
				this.buf.a[p++] = value >> 8 & 255;
				this.buf.a[p] = value & 255;
			}
		}
		, setInt32: function (byteOffset, value, littleEndian) {
			this.setUint32(byteOffset, value, littleEndian);
		}
		, setUint32: function (byteOffset, value, littleEndian) {
			var p = byteOffset + this.offset;
			if (littleEndian) {
				this.buf.a[p++] = value & 255;
				this.buf.a[p++] = value >> 8 & 255;
				this.buf.a[p++] = value >> 16 & 255;
				this.buf.a[p++] = value >>> 24;
			} else {
				this.buf.a[p++] = value >>> 24;
				this.buf.a[p++] = value >> 16 & 255;
				this.buf.a[p++] = value >> 8 & 255;
				this.buf.a[p++] = value & 255;
			}
		}
		, setFloat32: function (byteOffset, value, littleEndian) {
			this.setUint32(byteOffset, haxe_io_FPHelper.floatToI32(value), littleEndian);
		}
		, setFloat64: function (byteOffset, value, littleEndian) {
			var i64 = haxe_io_FPHelper.doubleToI64(value);
			if (littleEndian) {
				this.setUint32(byteOffset, i64.low);
				this.setUint32(byteOffset, i64.high);
			} else {
				this.setUint32(byteOffset, i64.high);
				this.setUint32(byteOffset, i64.low);
			}
		}
		, __class__: js_html_compat_DataView
	};
	var js_html_compat_Uint8Array = function () { };
	$hxClasses["js.html.compat.Uint8Array"] = js_html_compat_Uint8Array;
	js_html_compat_Uint8Array.__name__ = ["js", "html", "compat", "Uint8Array"];
	js_html_compat_Uint8Array._new = function (arg1, offset, length) {
		var arr;
		if (typeof (arg1) == "number") {
			arr = [];
			var _g = 0;
			while (_g < arg1) {
				var i = _g++;
				arr[i] = 0;
			}
			arr.byteLength = arr.length;
			arr.byteOffset = 0;
			arr.buffer = new js_html_compat_ArrayBuffer(arr);
		} else if (js_Boot.__instanceof(arg1, js_html_compat_ArrayBuffer)) {
			var buffer = arg1;
			if (offset == null) offset = 0;
			if (length == null) length = buffer.byteLength - offset;
			if (offset == 0) arr = buffer.a; else arr = buffer.a.slice(offset, offset + length);
			arr.byteLength = arr.length;
			arr.byteOffset = offset;
			arr.buffer = buffer;
		} else if ((arg1 instanceof Array) && arg1.__enum__ == null) {
			arr = arg1.slice();
			arr.byteLength = arr.length;
			arr.byteOffset = 0;
			arr.buffer = new js_html_compat_ArrayBuffer(arr);
		} else throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
		arr.subarray = js_html_compat_Uint8Array._subarray;
		arr.set = js_html_compat_Uint8Array._set;
		return arr;
	};
	js_html_compat_Uint8Array._set = function (arg, offset) {
		var t = this;
		if (js_Boot.__instanceof(arg.buffer, js_html_compat_ArrayBuffer)) {
			var a = arg;
			if (arg.byteLength + offset > t.byteLength) throw new js__$Boot_HaxeError("set() outside of range");
			var _g1 = 0;
			var _g = arg.byteLength;
			while (_g1 < _g) {
				var i = _g1++;
				t[i + offset] = a[i];
			}
		} else if ((arg instanceof Array) && arg.__enum__ == null) {
			var a1 = arg;
			if (a1.length + offset > t.byteLength) throw new js__$Boot_HaxeError("set() outside of range");
			var _g11 = 0;
			var _g2 = a1.length;
			while (_g11 < _g2) {
				var i1 = _g11++;
				t[i1 + offset] = a1[i1];
			}
		} else throw new js__$Boot_HaxeError("TODO");
	};
	js_html_compat_Uint8Array._subarray = function (start, end) {
		var t = this;
		var a = js_html_compat_Uint8Array._new(t.slice(start, end));
		a.byteOffset = start;
		return a;
	};
	var lime_AssetCache = function () {
		this.enabled = true;
		this.audio = new haxe_ds_StringMap();
		this.font = new haxe_ds_StringMap();
		this.image = new haxe_ds_StringMap();
	};
	$hxClasses["lime.AssetCache"] = lime_AssetCache;
	lime_AssetCache.__name__ = ["lime", "AssetCache"];
	lime_AssetCache.prototype = {
		clear: function (prefix) {
			if (prefix == null) {
				this.audio = new haxe_ds_StringMap();
				this.font = new haxe_ds_StringMap();
				this.image = new haxe_ds_StringMap();
			} else {
				var keys = this.audio.keys();
				while (keys.hasNext()) {
					var key = keys.next();
					if (StringTools.startsWith(key, prefix)) this.audio.remove(key);
				}
				var keys1 = this.font.keys();
				while (keys1.hasNext()) {
					var key1 = keys1.next();
					if (StringTools.startsWith(key1, prefix)) this.font.remove(key1);
				}
				var keys2 = this.image.keys();
				while (keys2.hasNext()) {
					var key2 = keys2.next();
					if (StringTools.startsWith(key2, prefix)) this.image.remove(key2);
				}
			}
		}
		, __class__: lime_AssetCache
	};
	var lime_app_Event_$Void_$Void = function () {
		this.listeners = [];
		this.priorities = [];
		this.repeat = [];
	};
	$hxClasses["lime.app.Event_Void_Void"] = lime_app_Event_$Void_$Void;
	lime_app_Event_$Void_$Void.__name__ = ["lime", "app", "Event_Void_Void"];
	lime_app_Event_$Void_$Void.prototype = {
		add: function (listener, once, priority) {
			if (priority == null) priority = 0;
			if (once == null) once = false;
			var _g1 = 0;
			var _g = this.priorities.length;
			while (_g1 < _g) {
				var i = _g1++;
				if (priority > this.priorities[i]) {
					this.listeners.splice(i, 0, listener);
					this.priorities.splice(i, 0, priority);
					this.repeat.splice(i, 0, !once);
					return;
				}
			}
			this.listeners.push(listener);
			this.priorities.push(priority);
			this.repeat.push(!once);
		}
		, has: function (listener) {
			var _g = 0;
			var _g1 = this.listeners;
			while (_g < _g1.length) {
				var l = _g1[_g];
				++_g;
				if (Reflect.compareMethods(l, listener)) return true;
			}
			return false;
		}
		, remove: function (listener) {
			var i = this.listeners.length;
			while (--i >= 0) if (Reflect.compareMethods(this.listeners[i], listener)) {
				this.listeners.splice(i, 1);
				this.priorities.splice(i, 1);
				this.repeat.splice(i, 1);
			}
		}
		, dispatch: function () {
			var listeners = this.listeners;
			var repeat = this.repeat;
			var i = 0;
			while (i < listeners.length) {
				listeners[i]();
				if (!repeat[i]) this.remove(listeners[i]); else i++;
			}
		}
		, __class__: lime_app_Event_$Void_$Void
	};
	var lime_Assets = function () { };
	$hxClasses["lime.Assets"] = lime_Assets;
	lime_Assets.__name__ = ["lime", "Assets"];
	lime_Assets.exists = function (id, type) {
		lime_Assets.initialize();
		if (type == null) type = "BINARY";
		var libraryName = id.substring(0, id.indexOf(":"));
		var symbolName;
		var pos = id.indexOf(":") + 1;
		symbolName = HxOverrides.substr(id, pos, null);
		var library = lime_Assets.getLibrary(libraryName);
		if (library != null) return library.exists(symbolName, type);
		return false;
	};
	lime_Assets.getAudioBuffer = function (id, useCache) {
		if (useCache == null) useCache = true;
		lime_Assets.initialize();
		if (useCache && lime_Assets.cache.enabled && lime_Assets.cache.audio.exists(id)) {
			var audio = lime_Assets.cache.audio.get(id);
			if (lime_Assets.isValidAudio(audio)) return audio;
		}
		var libraryName = id.substring(0, id.indexOf(":"));
		var symbolName;
		var pos = id.indexOf(":") + 1;
		symbolName = HxOverrides.substr(id, pos, null);
		var library = lime_Assets.getLibrary(libraryName);
		if (library != null) {
			if (library.exists(symbolName, "SOUND")) {
				if (library.isLocal(symbolName, "SOUND")) {
					var audio1 = library.getAudioBuffer(symbolName);
					if (useCache && lime_Assets.cache.enabled) lime_Assets.cache.audio.set(id, audio1);
					return audio1;
				} else haxe_Log.trace("[Assets] Audio asset \"" + id + "\" exists, but only asynchronously", { fileName: "Assets.hx", lineNumber: 122, className: "lime.Assets", methodName: "getAudioBuffer" });
			} else haxe_Log.trace("[Assets] There is no audio asset with an ID of \"" + id + "\"", { fileName: "Assets.hx", lineNumber: 128, className: "lime.Assets", methodName: "getAudioBuffer" });
		} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"", { fileName: "Assets.hx", lineNumber: 134, className: "lime.Assets", methodName: "getAudioBuffer" });
		return null;
	};
	lime_Assets.getBytes = function (id) {
		lime_Assets.initialize();
		var libraryName = id.substring(0, id.indexOf(":"));
		var symbolName;
		var pos = id.indexOf(":") + 1;
		symbolName = HxOverrides.substr(id, pos, null);
		var library = lime_Assets.getLibrary(libraryName);
		if (library != null) {
			if (library.exists(symbolName, "BINARY")) {
				if (library.isLocal(symbolName, "BINARY")) return library.getBytes(symbolName); else haxe_Log.trace("[Assets] String or ByteArray asset \"" + id + "\" exists, but only asynchronously", { fileName: "Assets.hx", lineNumber: 171, className: "lime.Assets", methodName: "getBytes" });
			} else haxe_Log.trace("[Assets] There is no String or ByteArray asset with an ID of \"" + id + "\"", { fileName: "Assets.hx", lineNumber: 177, className: "lime.Assets", methodName: "getBytes" });
		} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"", { fileName: "Assets.hx", lineNumber: 183, className: "lime.Assets", methodName: "getBytes" });
		return null;
	};
	lime_Assets.getFont = function (id, useCache) {
		if (useCache == null) useCache = true;
		lime_Assets.initialize();
		if (useCache && lime_Assets.cache.enabled && lime_Assets.cache.font.exists(id)) return lime_Assets.cache.font.get(id);
		var libraryName = id.substring(0, id.indexOf(":"));
		var symbolName;
		var pos = id.indexOf(":") + 1;
		symbolName = HxOverrides.substr(id, pos, null);
		var library = lime_Assets.getLibrary(libraryName);
		if (library != null) {
			if (library.exists(symbolName, "FONT")) {
				if (library.isLocal(symbolName, "FONT")) {
					var font = library.getFont(symbolName);
					if (useCache && lime_Assets.cache.enabled) lime_Assets.cache.font.set(id, font);
					return font;
				} else haxe_Log.trace("[Assets] Font asset \"" + id + "\" exists, but only asynchronously", { fileName: "Assets.hx", lineNumber: 234, className: "lime.Assets", methodName: "getFont" });
			} else haxe_Log.trace("[Assets] There is no Font asset with an ID of \"" + id + "\"", { fileName: "Assets.hx", lineNumber: 240, className: "lime.Assets", methodName: "getFont" });
		} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"", { fileName: "Assets.hx", lineNumber: 246, className: "lime.Assets", methodName: "getFont" });
		return null;
	};
	lime_Assets.getImage = function (id, useCache) {
		if (useCache == null) useCache = true;
		lime_Assets.initialize();
		if (useCache && lime_Assets.cache.enabled && lime_Assets.cache.image.exists(id)) {
			var image = lime_Assets.cache.image.get(id);
			if (lime_Assets.isValidImage(image)) return image;
		}
		var libraryName = id.substring(0, id.indexOf(":"));
		var symbolName;
		var pos = id.indexOf(":") + 1;
		symbolName = HxOverrides.substr(id, pos, null);
		var library = lime_Assets.getLibrary(libraryName);
		if (library != null) {
			if (library.exists(symbolName, "IMAGE")) {
				if (library.isLocal(symbolName, "IMAGE")) {
					var image1 = library.getImage(symbolName);
					if (useCache && lime_Assets.cache.enabled) lime_Assets.cache.image.set(id, image1);
					return image1;
				} else haxe_Log.trace("[Assets] Image asset \"" + id + "\" exists, but only asynchronously", { fileName: "Assets.hx", lineNumber: 304, className: "lime.Assets", methodName: "getImage" });
			} else haxe_Log.trace("[Assets] There is no Image asset with an ID of \"" + id + "\"", { fileName: "Assets.hx", lineNumber: 310, className: "lime.Assets", methodName: "getImage" });
		} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"", { fileName: "Assets.hx", lineNumber: 316, className: "lime.Assets", methodName: "getImage" });
		return null;
	};
	lime_Assets.getLibrary = function (name) {
		if (name == null || name == "") name = "default";
		return lime_Assets.libraries.get(name);
	};
	lime_Assets.getPath = function (id) {
		lime_Assets.initialize();
		var libraryName = id.substring(0, id.indexOf(":"));
		var symbolName;
		var pos = id.indexOf(":") + 1;
		symbolName = HxOverrides.substr(id, pos, null);
		var library = lime_Assets.getLibrary(libraryName);
		if (library != null) {
			if (library.exists(symbolName, null)) return library.getPath(symbolName); else haxe_Log.trace("[Assets] There is no asset with an ID of \"" + id + "\"", { fileName: "Assets.hx", lineNumber: 364, className: "lime.Assets", methodName: "getPath" });
		} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"", { fileName: "Assets.hx", lineNumber: 370, className: "lime.Assets", methodName: "getPath" });
		return null;
	};
	lime_Assets.getText = function (id) {
		lime_Assets.initialize();
		var libraryName = id.substring(0, id.indexOf(":"));
		var symbolName;
		var pos = id.indexOf(":") + 1;
		symbolName = HxOverrides.substr(id, pos, null);
		var library = lime_Assets.getLibrary(libraryName);
		if (library != null) {
			if (library.exists(symbolName, "TEXT")) {
				if (library.isLocal(symbolName, "TEXT")) return library.getText(symbolName); else haxe_Log.trace("[Assets] String asset \"" + id + "\" exists, but only asynchronously", { fileName: "Assets.hx", lineNumber: 407, className: "lime.Assets", methodName: "getText" });
			} else haxe_Log.trace("[Assets] There is no String asset with an ID of \"" + id + "\"", { fileName: "Assets.hx", lineNumber: 413, className: "lime.Assets", methodName: "getText" });
		} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"", { fileName: "Assets.hx", lineNumber: 419, className: "lime.Assets", methodName: "getText" });
		return null;
	};
	lime_Assets.initialize = function () {
		if (!lime_Assets.initialized) {
			lime_Assets.registerLibrary("default", new DefaultAssetLibrary());
			lime_Assets.initialized = true;
		}
	};
	lime_Assets.isLocal = function (id, type, useCache) {
		if (useCache == null) useCache = true;
		lime_Assets.initialize();
		if (useCache && lime_Assets.cache.enabled) {
			if (type == "IMAGE" || type == null) {
				if (lime_Assets.cache.image.exists(id)) return true;
			}
			if (type == "FONT" || type == null) {
				if (lime_Assets.cache.font.exists(id)) return true;
			}
			if (type == "SOUND" || type == "MUSIC" || type == null) {
				if (lime_Assets.cache.audio.exists(id)) return true;
			}
		}
		var libraryName = id.substring(0, id.indexOf(":"));
		var symbolName;
		var pos = id.indexOf(":") + 1;
		symbolName = HxOverrides.substr(id, pos, null);
		var library = lime_Assets.getLibrary(libraryName);
		if (library != null) return library.isLocal(symbolName, type);
		return false;
	};
	lime_Assets.isValidAudio = function (buffer) {
		return buffer != null;
	};
	lime_Assets.isValidImage = function (buffer) {
		return true;
	};
	lime_Assets.list = function (type) {
		lime_Assets.initialize();
		var items = [];
		var $it0 = lime_Assets.libraries.iterator();
		while ($it0.hasNext()) {
			var library = $it0.next();
			var libraryItems = library.list(type);
			if (libraryItems != null) items = items.concat(libraryItems);
		}
		return items;
	};
	lime_Assets.loadAudioBuffer = function (id, useCache) {
		if (useCache == null) useCache = true;
		lime_Assets.initialize();
		var promise = new lime_app_Promise();
		if (useCache && lime_Assets.cache.enabled && lime_Assets.cache.audio.exists(id)) {
			var audio = lime_Assets.cache.audio.get(id);
			if (lime_Assets.isValidAudio(audio)) {
				promise.complete(audio);
				return promise.future;
			}
		}
		var libraryName = id.substring(0, id.indexOf(":"));
		var symbolName;
		var pos = id.indexOf(":") + 1;
		symbolName = HxOverrides.substr(id, pos, null);
		var library = lime_Assets.getLibrary(libraryName);
		if (library != null) {
			if (library.exists(symbolName, "SOUND")) {
				var future = library.loadAudioBuffer(symbolName);
				if (useCache && lime_Assets.cache.enabled) future.onComplete(function (audio1) {
					lime_Assets.cache.audio.set(id, audio1);
				});
				promise.completeWith(future);
			} else promise.error("[Assets] There is no audio asset with an ID of \"" + id + "\"");
		} else promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
		return promise.future;
	};
	lime_Assets.loadBytes = function (id) {
		lime_Assets.initialize();
		var promise = new lime_app_Promise();
		var libraryName = id.substring(0, id.indexOf(":"));
		var symbolName;
		var pos = id.indexOf(":") + 1;
		symbolName = HxOverrides.substr(id, pos, null);
		var library = lime_Assets.getLibrary(libraryName);
		if (library != null) {
			if (library.exists(symbolName, "BINARY")) promise.completeWith(library.loadBytes(symbolName)); else promise.error("[Assets] There is no String or ByteArray asset with an ID of \"" + id + "\"");
		} else promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
		return promise.future;
	};
	lime_Assets.loadFont = function (id) {
		lime_Assets.initialize();
		var promise = new lime_app_Promise();
		var libraryName = id.substring(0, id.indexOf(":"));
		var symbolName;
		var pos = id.indexOf(":") + 1;
		symbolName = HxOverrides.substr(id, pos, null);
		var library = lime_Assets.getLibrary(libraryName);
		if (library != null) {
			if (library.exists(symbolName, "FONT")) promise.completeWith(library.loadFont(symbolName)); else promise.error("[Assets] There is no Font asset with an ID of \"" + id + "\"");
		} else promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
		return promise.future;
	};
	lime_Assets.loadImage = function (id, useCache) {
		if (useCache == null) useCache = true;
		lime_Assets.initialize();
		var promise = new lime_app_Promise();
		if (useCache && lime_Assets.cache.enabled && lime_Assets.cache.image.exists(id)) {
			var image = lime_Assets.cache.image.get(id);
			if (lime_Assets.isValidImage(image)) {
				promise.complete(image);
				return promise.future;
			}
		}
		var libraryName = id.substring(0, id.indexOf(":"));
		var symbolName;
		var pos = id.indexOf(":") + 1;
		symbolName = HxOverrides.substr(id, pos, null);
		var library = lime_Assets.getLibrary(libraryName);
		if (library != null) {
			if (library.exists(symbolName, "IMAGE")) {
				var future = library.loadImage(symbolName);
				if (useCache && lime_Assets.cache.enabled) future.onComplete(function (image1) {
					lime_Assets.cache.image.set(id, image1);
				});
				promise.completeWith(future);
			} else promise.error("[Assets] There is no Image asset with an ID of \"" + id + "\"");
		} else promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
		return promise.future;
	};
	lime_Assets.loadLibrary = function (name) {
		lime_Assets.initialize();
		var promise = new lime_app_Promise();
		var data = lime_Assets.getText("libraries/" + name + ".json");
		if (data != null && data != "") {
			var info = JSON.parse(data);
			var library = Type.createInstance(Type.resolveClass(info.type), info.args);
			lime_Assets.libraries.set(name, library);
			library.onChange.add(($_ = lime_Assets.onChange, $bind($_, $_.dispatch)));
			promise.completeWith(library.load());
		} else promise.error("[Assets] There is no asset library named \"" + name + "\"");
		return promise.future;
	};
	lime_Assets.loadText = function (id) {
		lime_Assets.initialize();
		var promise = new lime_app_Promise();
		var libraryName = id.substring(0, id.indexOf(":"));
		var symbolName;
		var pos = id.indexOf(":") + 1;
		symbolName = HxOverrides.substr(id, pos, null);
		var library = lime_Assets.getLibrary(libraryName);
		if (library != null) {
			if (library.exists(symbolName, "TEXT")) promise.completeWith(library.loadText(symbolName)); else promise.error("[Assets] There is no String asset with an ID of \"" + id + "\"");
		} else promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
		return promise.future;
	};
	lime_Assets.registerLibrary = function (name, library) {
		if (lime_Assets.libraries.exists(name)) {
			if (lime_Assets.libraries.get(name) == library) return; else lime_Assets.unloadLibrary(name);
		}
		if (library != null) library.onChange.add(lime_Assets.library_onChange);
		lime_Assets.libraries.set(name, library);
	};
	lime_Assets.unloadLibrary = function (name) {
		lime_Assets.initialize();
		var library = lime_Assets.libraries.get(name);
		if (library != null) {
			lime_Assets.cache.clear(name + ":");
			library.onChange.remove(lime_Assets.library_onChange);
			library.unload();
		}
		lime_Assets.libraries.remove(name);
	};
	lime_Assets.library_onChange = function () {
		lime_Assets.cache.clear();
		lime_Assets.onChange.dispatch();
	};
	var lime__$backend_html5_HTML5Application = function (parent) {
		this.parent = parent;
		this.currentUpdate = 0;
		this.lastUpdate = 0;
		this.nextUpdate = 0;
		this.framePeriod = -1;
		lime_audio_AudioManager.init();
	};
	$hxClasses["lime._backend.html5.HTML5Application"] = lime__$backend_html5_HTML5Application;
	lime__$backend_html5_HTML5Application.__name__ = ["lime", "_backend", "html5", "HTML5Application"];
	lime__$backend_html5_HTML5Application.prototype = {
		convertKeyCode: function (keyCode) {
			if (keyCode >= 65 && keyCode <= 90) return keyCode + 32;
			switch (keyCode) {
				case 16:
					return 1073742049;
				case 17:
					return 1073742048;
				case 18:
					return 1073742050;
				case 20:
					return 1073741881;
				case 144:
					return 1073741907;
				case 37:
					return 1073741904;
				case 38:
					return 1073741906;
				case 39:
					return 1073741903;
				case 40:
					return 1073741905;
				case 45:
					return 1073741897;
				case 46:
					return 127;
				case 36:
					return 1073741898;
				case 35:
					return 1073741901;
				case 33:
					return 1073741899;
				case 34:
					return 1073741902;
				case 112:
					return 1073741882;
				case 113:
					return 1073741883;
				case 114:
					return 1073741884;
				case 115:
					return 1073741885;
				case 116:
					return 1073741886;
				case 117:
					return 1073741887;
				case 118:
					return 1073741888;
				case 119:
					return 1073741889;
				case 120:
					return 1073741890;
				case 121:
					return 1073741891;
				case 122:
					return 1073741892;
				case 123:
					return 1073741893;
				case 124:
					return 1073741928;
				case 125:
					return 1073741929;
				case 126:
					return 1073741930;
				case 186:
					return 59;
				case 187:
					return 61;
				case 188:
					return 44;
				case 189:
					return 45;
				case 190:
					return 46;
				case 191:
					return 47;
				case 192:
					return 96;
				case 219:
					return 91;
				case 220:
					return 92;
				case 221:
					return 93;
				case 222:
					return 39;
			}
			return keyCode;
		}
		, create: function (config) {
		}
		, exec: function () {
			window.addEventListener("keydown", $bind(this, this.handleKeyEvent), false);
			window.addEventListener("keyup", $bind(this, this.handleKeyEvent), false);
			window.addEventListener("focus", $bind(this, this.handleWindowEvent), false);
			window.addEventListener("blur", $bind(this, this.handleWindowEvent), false);
			window.addEventListener("resize", $bind(this, this.handleWindowEvent), false);
			window.addEventListener("beforeunload", $bind(this, this.handleWindowEvent), false);

			var lastTime = 0;
			var vendors = ['ms', 'moz', 'webkit', 'o'];
			for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
				window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
				window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];
			}

			if (!window.requestAnimationFrame)
				window.requestAnimationFrame = function (callback, element) {
					var currTime = new Date().getTime();
					var timeToCall = Math.max(0, 16 - (currTime - lastTime));
					var id = window.setTimeout(function () { callback(currTime + timeToCall); },
						timeToCall);
					lastTime = currTime + timeToCall;
					return id;
				};

			if (!window.cancelAnimationFrame)
				window.cancelAnimationFrame = function (id) {
					clearTimeout(id);
				};

			window.requestAnimFrame = window.requestAnimationFrame;
			;
			this.lastUpdate = new Date().getTime();
			this.handleApplicationEvent();
			return 0;
		}
		, exit: function () {
		}
		, getFrameRate: function () {
			if (this.framePeriod < 0) return 60; else if (this.framePeriod == 1000) return 0; else return 1000 / this.framePeriod;
		}
		, handleApplicationEvent: function (__) {
			this.currentUpdate = new Date().getTime();
			if (this.currentUpdate >= this.nextUpdate) {
				this.deltaTime = this.currentUpdate - this.lastUpdate;
				this.parent.onUpdate.dispatch(this.deltaTime | 0);
				if (this.parent.renderers[0] != null) {
					this.parent.renderers[0].onRender.dispatch();
					this.parent.renderers[0].flip();
				}
				if (this.framePeriod < 0) {
					this.nextUpdate = this.currentUpdate;
					this.nextUpdate = this.currentUpdate;
				} else this.nextUpdate = this.currentUpdate + this.framePeriod;
				this.lastUpdate = this.currentUpdate;
			}
			window.requestAnimationFrame($bind(this, this.handleApplicationEvent));
		}
		, handleKeyEvent: function (event) {
			if (this.parent.windows[0] != null) {
				var keyCode = this.convertKeyCode(event.keyCode != null ? event.keyCode : event.which);
				var modifier;
				modifier = (event.shiftKey ? 3 : 0) | (event.ctrlKey ? 192 : 0) | (event.altKey ? 768 : 0) | (event.metaKey ? 3072 : 0);
				if (event.type == "keydown") this.parent.windows[0].onKeyDown.dispatch(keyCode, modifier); else this.parent.windows[0].onKeyUp.dispatch(keyCode, modifier);
			}
		}
		, handleWindowEvent: function (event) {
			if (this.parent.windows[0] != null) {
				var _g = event.type;
				switch (_g) {
					case "focus":
						this.parent.windows[0].onFocusIn.dispatch();
						this.parent.windows[0].onActivate.dispatch();
						break;
					case "blur":
						this.parent.windows[0].onFocusOut.dispatch();
						this.parent.windows[0].onDeactivate.dispatch();
						break;
					case "resize":
						var cacheWidth = this.parent.windows[0].__width;
						var cacheHeight = this.parent.windows[0].__height;
						this.parent.windows[0].backend.handleResize();
						if (this.parent.windows[0].__width != cacheWidth || this.parent.windows[0].__height != cacheHeight) this.parent.windows[0].onResize.dispatch(this.parent.windows[0].__width, this.parent.windows[0].__height);
						break;
					case "beforeunload":
						this.parent.windows[0].onClose.dispatch();
						break;
				}
			}
		}
		, setFrameRate: function (value) {
			if (value >= 60) this.framePeriod = -1; else if (value > 0) this.framePeriod = 1000 / value; else this.framePeriod = 1000;
			return value;
		}
		, __class__: lime__$backend_html5_HTML5Application
	};
	var lime__$backend_html5_HTML5Mouse = function () { };
	$hxClasses["lime._backend.html5.HTML5Mouse"] = lime__$backend_html5_HTML5Mouse;
	lime__$backend_html5_HTML5Mouse.__name__ = ["lime", "_backend", "html5", "HTML5Mouse"];
	lime__$backend_html5_HTML5Mouse.__cursor = null;
	lime__$backend_html5_HTML5Mouse.__hidden = null;
	lime__$backend_html5_HTML5Mouse.hide = function () {
		if (!lime__$backend_html5_HTML5Mouse.__hidden) {
			lime__$backend_html5_HTML5Mouse.__hidden = true;
			var _g = 0;
			var _g1 = lime_app_Application.current.windows;
			while (_g < _g1.length) {
				var $window = _g1[_g];
				++_g;
				$window.backend.element.style.cursor = "none";
			}
		}
	};
	lime__$backend_html5_HTML5Mouse.show = function () {
		if (lime__$backend_html5_HTML5Mouse.__hidden) {
			lime__$backend_html5_HTML5Mouse.__hidden = false;
			var cacheValue = lime__$backend_html5_HTML5Mouse.__cursor;
			lime__$backend_html5_HTML5Mouse.__cursor = null;
			lime__$backend_html5_HTML5Mouse.set_cursor(cacheValue);
		}
	};
	lime__$backend_html5_HTML5Mouse.warp = function (x, y, window) {
	};
	lime__$backend_html5_HTML5Mouse.get_cursor = function () {
		if (lime__$backend_html5_HTML5Mouse.__cursor == null) return lime_ui_MouseCursor.DEFAULT;
		return lime__$backend_html5_HTML5Mouse.__cursor;
	};
	lime__$backend_html5_HTML5Mouse.set_cursor = function (value) {
		if (lime__$backend_html5_HTML5Mouse.__cursor != value) {
			if (!lime__$backend_html5_HTML5Mouse.__hidden) {
				var _g = 0;
				var _g1 = lime_app_Application.current.windows;
				while (_g < _g1.length) {
					var $window = _g1[_g];
					++_g;
					switch (value[1]) {
						case 0:
							$window.backend.element.style.cursor = "default";
							break;
						case 1:
							$window.backend.element.style.cursor = "crosshair";
							break;
						case 3:
							$window.backend.element.style.cursor = "move";
							break;
						case 4:
							$window.backend.element.style.cursor = "pointer";
							break;
						case 5:
							$window.backend.element.style.cursor = "nesw-resize";
							break;
						case 6:
							$window.backend.element.style.cursor = "ns-resize";
							break;
						case 7:
							$window.backend.element.style.cursor = "nwse-resize";
							break;
						case 8:
							$window.backend.element.style.cursor = "ew-resize";
							break;
						case 9:
							$window.backend.element.style.cursor = "text";
							break;
						case 10:
							$window.backend.element.style.cursor = "wait";
							break;
						case 11:
							$window.backend.element.style.cursor = "wait";
							break;
						default:
							$window.backend.element.style.cursor = "auto";
					}
				}
			}
			lime__$backend_html5_HTML5Mouse.__cursor = value;
		}
		return lime__$backend_html5_HTML5Mouse.__cursor;
	};
	lime__$backend_html5_HTML5Mouse.get_lock = function () {
		return false;
	};
	lime__$backend_html5_HTML5Mouse.set_lock = function (value) {
		return value;
	};
	var lime__$backend_html5_HTML5Renderer = function (parent) {
		this.parent = parent;
	};
	$hxClasses["lime._backend.html5.HTML5Renderer"] = lime__$backend_html5_HTML5Renderer;
	lime__$backend_html5_HTML5Renderer.__name__ = ["lime", "_backend", "html5", "HTML5Renderer"];
	lime__$backend_html5_HTML5Renderer.prototype = {
		create: function () {
			this.createContext();
			{
				var _g = this.parent.context;
				switch (_g[1]) {
					case 0:
						this.parent.window.backend.canvas.addEventListener("webglcontextlost", $bind(this, this.handleEvent), false);
						this.parent.window.backend.canvas.addEventListener("webglcontextrestored", $bind(this, this.handleEvent), false);
						break;
					default:
				}
			}
		}
		, createContext: function () {
			if (this.parent.window.backend.div != null) {
				this.parent.context = lime_graphics_RenderContext.DOM(this.parent.window.backend.div);
				this.parent.type = lime_graphics_RendererType.DOM;
			} else if (this.parent.window.backend.canvas != null) {
				var webgl = null;
				if (webgl == null) {
					this.parent.context = lime_graphics_RenderContext.CANVAS(this.parent.window.backend.canvas.getContext("2d"));
					this.parent.type = lime_graphics_RendererType.CANVAS;
				} else {
					webgl = WebGLDebugUtils.makeDebugContext(webgl);
					lime_graphics_opengl_GL.context = webgl;
					this.parent.context = lime_graphics_RenderContext.OPENGL(lime_graphics_opengl_GL.context);
					this.parent.type = lime_graphics_RendererType.OPENGL;
				}
			}
		}
		, flip: function () {
		}
		, handleEvent: function (event) {
			var _g = event.type;
			switch (_g) {
				case "webglcontextlost":
					event.preventDefault();
					this.parent.context = null;
					this.parent.onContextLost.dispatch();
					break;
				case "webglcontextrestored":
					this.createContext();
					this.parent.onContextRestored.dispatch(this.parent.context);
					break;
				default:
			}
		}
		, render: function () {
		}
		, __class__: lime__$backend_html5_HTML5Renderer
	};
	var lime__$backend_html5_HTML5Window = function (parent) {
		this.unusedTouchesPool = new List();
		this.currentTouches = new haxe_ds_IntMap();
		this.parent = parent;
		if (parent.config != null && Object.prototype.hasOwnProperty.call(parent.config, "element")) this.element = parent.config.element;
	};
	$hxClasses["lime._backend.html5.HTML5Window"] = lime__$backend_html5_HTML5Window;
	lime__$backend_html5_HTML5Window.__name__ = ["lime", "_backend", "html5", "HTML5Window"];
	lime__$backend_html5_HTML5Window.textInput = null;
	lime__$backend_html5_HTML5Window.prototype = {
		alert: function (message, title) {
			if (message != null) js_Browser.alert(message);
		}
		, close: function () {
			this.parent.application.removeWindow(this.parent);
		}
		, create: function (application) {
			this.setWidth = this.parent.__width;
			this.setHeight = this.parent.__height;
			this.parent.id = lime__$backend_html5_HTML5Window.windowID++;
			if (js_Boot.__instanceof(this.element, HTMLCanvasElement)) this.canvas = this.element; else this.canvas = window.document.createElement("canvas");
			if (this.canvas != null) {
				var style = this.canvas.style;
				style.setProperty("-webkit-transform", "translateZ(0)", null);
				style.setProperty("transform", "translateZ(0)", null);
			} else if (this.div != null) {
				var style1 = this.div.style;
				style1.setProperty("-webkit-transform", "translate3D(0,0,0)", null);
				style1.setProperty("transform", "translate3D(0,0,0)", null);
				style1.position = "relative";
				style1.overflow = "hidden";
				style1.setProperty("-webkit-user-select", "none", null);
				style1.setProperty("-moz-user-select", "none", null);
				style1.setProperty("-ms-user-select", "none", null);
				style1.setProperty("-o-user-select", "none", null);
			}
			if (this.parent.__width == 0 && this.parent.__height == 0) {
				if (this.element != null) {
					this.parent.set_width(this.element.clientWidth);
					this.parent.set_height(this.element.clientHeight);
				} else {
					this.parent.set_width(window.innerWidth);
					this.parent.set_height(window.innerHeight);
				}
				this.parent.set_fullscreen(true);
			}
			if (this.canvas != null) {
				this.canvas.width = this.parent.__width;
				this.canvas.height = this.parent.__height;
			} else {
				this.div.style.width = this.parent.__width + "px";
				this.div.style.height = this.parent.__height + "px";
			}
			this.handleResize();
			if (this.element != null) {
				if (this.canvas != null) {
					if (this.element != this.canvas) this.element.appendChild(this.canvas);
				} else this.element.appendChild(this.div);
				var events = ["mousedown", "mouseenter", "mouseleave", "mousemove", "mouseup", "wheel"];
				var _g = 0;
				while (_g < events.length) {
					var event = events[_g];
					++_g;
					this.element.addEventListener(event, $bind(this, this.handleMouseEvent), true);
				}
				window.document.addEventListener("dragstart", function (e) {
					if (e.target.nodeName.toLowerCase() == "img") {
						e.preventDefault();
						return false;
					}
					return true;
				}, false);
				this.element.addEventListener("touchstart", $bind(this, this.handleTouchEvent), true);
				this.element.addEventListener("touchmove", $bind(this, this.handleTouchEvent), true);
				this.element.addEventListener("touchend", $bind(this, this.handleTouchEvent), true);
			}
		}
		, focus: function () {
		}
		, getDisplay: function () {
			return lime_system_System.getDisplay(0);
		}
		, getEnableTextEvents: function () {
			return this.enableTextEvents;
		}
		, handleFocusEvent: function (event) {
			if (this.enableTextEvents) haxe_Timer.delay(function () {
				lime__$backend_html5_HTML5Window.textInput.focus();
			}, 20);
		}
		, handleInputEvent: function (event) {
			if (lime__$backend_html5_HTML5Window.textInput.value != "") {
				this.parent.onTextInput.dispatch(lime__$backend_html5_HTML5Window.textInput.value);
				lime__$backend_html5_HTML5Window.textInput.value = "";
			}
		}
		, handleMouseEvent: function (event) {
			var x = 0.0;
			var y = 0.0;
			if (event.type != "wheel") {
				if (this.element != null) {
					if (this.canvas != null) {
						var rect = this.canvas.getBoundingClientRect();
						x = (event.clientX - rect.left) * (this.parent.__width / rect.width);
						y = (event.clientY - rect.top) * (this.parent.__height / rect.height);
					} else if (this.div != null) {
						var rect1 = this.div.getBoundingClientRect();
						x = event.clientX - rect1.left;
						y = event.clientY - rect1.top;
					} else {
						var rect2 = this.element.getBoundingClientRect();
						x = (event.clientX - rect2.left) * (this.parent.__width / rect2.width);
						y = (event.clientY - rect2.top) * (this.parent.__height / rect2.height);
					}
				} else {
					x = event.clientX;
					y = event.clientY;
				}
				var _g = event.type;
				switch (_g) {
					case "mousedown":
						this.parent.onMouseDown.dispatch(x, y, event.button);
						break;
					case "mouseenter":
						this.parent.onEnter.dispatch();
						break;
					case "mouseleave":
						this.parent.onLeave.dispatch();
						break;
					case "mouseup":
						this.parent.onMouseUp.dispatch(x, y, event.button);
						break;
					case "mousemove":
						this.parent.onMouseMove.dispatch(x, y);
						break;
					default:
				}
			} else this.parent.onMouseWheel.dispatch(event.deltaX, -event.deltaY);
		}
		, handleResize: function () {
			var stretch = this.parent.__fullscreen || this.setWidth == 0 && this.setHeight == 0;
			if (this.element != null && (this.div == null || this.div != null && stretch)) {
				if (stretch) {
					if (this.parent.__width != this.element.clientWidth || this.parent.__height != this.element.clientHeight) {
						this.parent.set_width(this.element.clientWidth);
						this.parent.set_height(this.element.clientHeight);
						if (this.canvas != null) {
							if (this.element != this.canvas) {
								this.canvas.width = this.element.clientWidth;
								this.canvas.height = this.element.clientHeight;
							}
						} else {
							this.div.style.width = this.element.clientWidth + "px";
							this.div.style.height = this.element.clientHeight + "px";
						}
					}
				} else {
					var scaleX = this.element.clientWidth / this.setWidth;
					var scaleY = this.element.clientHeight / this.setHeight;
					var currentRatio = scaleX / scaleY;
					var targetRatio = Math.min(scaleX, scaleY);
					if (this.canvas != null) {
						if (this.element != this.canvas) {
							this.canvas.style.width = this.setWidth * targetRatio + "px";
							this.canvas.style.height = this.setHeight * targetRatio + "px";
							this.canvas.style.marginLeft = (this.element.clientWidth - this.setWidth * targetRatio) / 2 + "px";
							this.canvas.style.marginTop = (this.element.clientHeight - this.setHeight * targetRatio) / 2 + "px";
						}
					} else {
						this.div.style.width = this.setWidth * targetRatio + "px";
						this.div.style.height = this.setHeight * targetRatio + "px";
						this.div.style.marginLeft = (this.element.clientWidth - this.setWidth * targetRatio) / 2 + "px";
						this.div.style.marginTop = (this.element.clientHeight - this.setHeight * targetRatio) / 2 + "px";
					}
				}
			}
		}
		, handleTouchEvent: function (event) {
			event.preventDefault();
			var rect = null;
			if (this.element != null) {
				if (this.canvas != null) rect = this.canvas.getBoundingClientRect(); else if (this.div != null) rect = this.div.getBoundingClientRect(); else rect = this.element.getBoundingClientRect();
			}
			var _g = 0;
			var _g1 = event.changedTouches;
			while (_g < _g1.length) {
				var data = _g1[_g];
				++_g;
				var x = 0.0;
				var y = 0.0;
				if (rect != null) {
					x = (data.clientX - rect.left) * (this.parent.__width / rect.width);
					y = (data.clientY - rect.top) * (this.parent.__height / rect.height);
				} else {
					x = data.clientX;
					y = data.clientY;
				}
				var _g2 = event.type;
				switch (_g2) {
					case "touchstart":
						var touch = this.unusedTouchesPool.pop();
						if (touch == null) touch = new lime_ui_Touch(x / this.setWidth, y / this.setHeight, data.identifier, 0, 0, data.force, this.parent.id); else {
							touch.x = x / this.setWidth;
							touch.y = y / this.setHeight;
							touch.id = data.identifier;
							touch.dx = 0;
							touch.dy = 0;
							touch.pressure = data.force;
							touch.device = this.parent.id;
						}
						this.currentTouches.h[data.identifier] = touch;
						lime_ui_Touch.onStart.dispatch(touch);
						if (this.primaryTouch == null) this.primaryTouch = touch;
						if (touch == this.primaryTouch) this.parent.onMouseDown.dispatch(x, y, 0);
						break;
					case "touchend":
						var touch1 = this.currentTouches.h[data.identifier];
						if (touch1 != null) {
							var cacheX = touch1.x;
							var cacheY = touch1.y;
							touch1.x = x / this.setWidth;
							touch1.y = y / this.setHeight;
							touch1.dx = touch1.x - cacheX;
							touch1.dy = touch1.y - cacheY;
							touch1.pressure = data.force;
							lime_ui_Touch.onEnd.dispatch(touch1);
							this.currentTouches.remove(data.identifier);
							this.unusedTouchesPool.add(touch1);
							if (touch1 == this.primaryTouch) {
								this.parent.onMouseUp.dispatch(x, y, 0);
								this.primaryTouch = null;
							}
						}
						break;
					case "touchmove":
						var touch2 = this.currentTouches.h[data.identifier];
						if (touch2 != null) {
							var cacheX1 = touch2.x;
							var cacheY1 = touch2.y;
							touch2.x = x / this.setWidth;
							touch2.y = y / this.setHeight;
							touch2.dx = touch2.x - cacheX1;
							touch2.dy = touch2.y - cacheY1;
							touch2.pressure = data.force;
							lime_ui_Touch.onMove.dispatch(touch2);
							if (touch2 == this.primaryTouch) this.parent.onMouseMove.dispatch(x, y);
						}
						break;
					default:
				}
			}
		}
		, move: function (x, y) {
		}
		, resize: function (width, height) {
		}
		, setEnableTextEvents: function (value) {
			if (value) {
				if (lime__$backend_html5_HTML5Window.textInput == null) {
					lime__$backend_html5_HTML5Window.textInput = window.document.createElement("input");
					lime__$backend_html5_HTML5Window.textInput.type = "text";
					lime__$backend_html5_HTML5Window.textInput.style.position = "absolute";
					lime__$backend_html5_HTML5Window.textInput.style.opacity = "0";
					lime__$backend_html5_HTML5Window.textInput.style.color = "transparent";
					lime__$backend_html5_HTML5Window.textInput.value = "";
					lime__$backend_html5_HTML5Window.textInput.autocapitalize = "off";
					lime__$backend_html5_HTML5Window.textInput.autocorrect = "off";
					lime__$backend_html5_HTML5Window.textInput.autocomplete = "off";
					lime__$backend_html5_HTML5Window.textInput.style.left = "0px";
					lime__$backend_html5_HTML5Window.textInput.style.top = "50%";
					if (new EReg("(iPad|iPhone|iPod).*OS 8_", "gi").match(window.navigator.userAgent)) {
						lime__$backend_html5_HTML5Window.textInput.style.fontSize = "0px";
						lime__$backend_html5_HTML5Window.textInput.style.width = "0px";
						lime__$backend_html5_HTML5Window.textInput.style.height = "0px";
					} else {
						lime__$backend_html5_HTML5Window.textInput.style.width = "1px";
						lime__$backend_html5_HTML5Window.textInput.style.height = "1px";
					}
					lime__$backend_html5_HTML5Window.textInput.style.pointerEvents = "none";
					lime__$backend_html5_HTML5Window.textInput.style.zIndex = "-10000000";
					window.document.body.appendChild(lime__$backend_html5_HTML5Window.textInput);
				}
				if (!this.enableTextEvents) {
					lime__$backend_html5_HTML5Window.textInput.addEventListener("input", $bind(this, this.handleInputEvent), true);
					lime__$backend_html5_HTML5Window.textInput.addEventListener("blur", $bind(this, this.handleFocusEvent), true);
				}
				lime__$backend_html5_HTML5Window.textInput.focus();
			} else if (lime__$backend_html5_HTML5Window.textInput != null) {
				lime__$backend_html5_HTML5Window.textInput.removeEventListener("input", $bind(this, this.handleInputEvent), true);
				lime__$backend_html5_HTML5Window.textInput.removeEventListener("blur", $bind(this, this.handleFocusEvent), true);
				lime__$backend_html5_HTML5Window.textInput.blur();
			}
			return this.enableTextEvents = value;
		}
		, setFullscreen: function (value) {
			return false;
		}
		, setIcon: function (image) {
		}
		, setMinimized: function (value) {
			return false;
		}
		, setTitle: function (value) {
			return value;
		}
		, __class__: lime__$backend_html5_HTML5Window
	};
	var lime_app_IModule = function () { };
	$hxClasses["lime.app.IModule"] = lime_app_IModule;
	lime_app_IModule.__name__ = ["lime", "app", "IModule"];
	lime_app_IModule.prototype = {
		__class__: lime_app_IModule
	};
	var lime_app_Module = function () {
		this.onExit = new lime_app_Event_$Int_$Void();
	};
	$hxClasses["lime.app.Module"] = lime_app_Module;
	lime_app_Module.__name__ = ["lime", "app", "Module"];
	lime_app_Module.__interfaces__ = [lime_app_IModule];
	lime_app_Module.prototype = {
		onGamepadAxisMove: function (gamepad, axis, value) {
		}
		, onGamepadButtonDown: function (gamepad, button) {
		}
		, onGamepadButtonUp: function (gamepad, button) {
		}
		, onGamepadConnect: function (gamepad) {
		}
		, onGamepadDisconnect: function (gamepad) {
		}
		, onJoystickAxisMove: function (joystick, axis, value) {
		}
		, onJoystickButtonDown: function (joystick, button) {
		}
		, onJoystickButtonUp: function (joystick, button) {
		}
		, onJoystickConnect: function (joystick) {
		}
		, onJoystickDisconnect: function (joystick) {
		}
		, onJoystickHatMove: function (joystick, hat, position) {
		}
		, onJoystickTrackballMove: function (joystick, trackball, value) {
		}
		, onKeyDown: function (window, keyCode, modifier) {
		}
		, onKeyUp: function (window, keyCode, modifier) {
		}
		, onModuleExit: function (code) {
		}
		, onMouseDown: function (window, x, y, button) {
		}
		, onMouseMove: function (window, x, y) {
		}
		, onMouseMoveRelative: function (window, x, y) {
		}
		, onMouseUp: function (window, x, y, button) {
		}
		, onMouseWheel: function (window, deltaX, deltaY) {
		}
		, onPreloadComplete: function () {
		}
		, onPreloadProgress: function (loaded, total) {
		}
		, onRenderContextLost: function (renderer) {
		}
		, onRenderContextRestored: function (renderer, context) {
		}
		, onTextEdit: function (window, text, start, length) {
		}
		, onTextInput: function (window, text) {
		}
		, onTouchEnd: function (touch) {
		}
		, onTouchMove: function (touch) {
		}
		, onTouchStart: function (touch) {
		}
		, onWindowActivate: function (window) {
		}
		, onWindowClose: function (window) {
		}
		, onWindowCreate: function (window) {
		}
		, onWindowDeactivate: function (window) {
		}
		, onWindowEnter: function (window) {
		}
		, onWindowFocusIn: function (window) {
		}
		, onWindowFocusOut: function (window) {
		}
		, onWindowFullscreen: function (window) {
		}
		, onWindowLeave: function (window) {
		}
		, onWindowMove: function (window, x, y) {
		}
		, onWindowMinimize: function (window) {
		}
		, onWindowResize: function (window, width, height) {
		}
		, onWindowRestore: function (window) {
		}
		, render: function (renderer) {
		}
		, update: function (deltaTime) {
		}
		, __class__: lime_app_Module
	};
	var lime_app_Application = function () {
		this.onUpdate = new lime_app_Event_$Int_$Void();
		lime_app_Module.call(this);
		if (lime_app_Application.current == null) lime_app_Application.current = this;
		this.modules = [];
		this.renderers = [];
		this.windows = [];
		this.windowByID = new haxe_ds_IntMap();
		this.backend = new lime__$backend_html5_HTML5Application(this);
		this.onExit.add($bind(this, this.onModuleExit));
		this.onUpdate.add($bind(this, this.update));
		lime_ui_Gamepad.onConnect.add($bind(this, this.onGamepadConnect));
		lime_ui_Joystick.onConnect.add($bind(this, this.onJoystickConnect));
		lime_ui_Touch.onStart.add($bind(this, this.onTouchStart));
		lime_ui_Touch.onMove.add($bind(this, this.onTouchMove));
		lime_ui_Touch.onEnd.add($bind(this, this.onTouchEnd));
	};
	$hxClasses["lime.app.Application"] = lime_app_Application;
	lime_app_Application.__name__ = ["lime", "app", "Application"];
	lime_app_Application.current = null;
	lime_app_Application.__super__ = lime_app_Module;
	lime_app_Application.prototype = $extend(lime_app_Module.prototype, {
		addModule: function (module) {
			this.modules.push(module);
			if (this.windows.length > 0) {
				var _g = 0;
				var _g1 = this.windows;
				while (_g < _g1.length) {
					var $window = _g1[_g];
					++_g;
					module.onWindowCreate($window);
				}
				if (this.preloader == null || this.preloader.complete) module.onPreloadComplete();
			}
		}
		, addRenderer: function (renderer) {
			renderer.onRender.add((function (f, a1) {
				return function () {
					f(a1);
				};
			})($bind(this, this.render), renderer));
			renderer.onContextLost.add((function (f1, a11) {
				return function () {
					f1(a11);
				};
			})($bind(this, this.onRenderContextLost), renderer));
			renderer.onContextRestored.add((function (f2, a12) {
				return function (a2) {
					f2(a12, a2);
				};
			})($bind(this, this.onRenderContextRestored), renderer));
			this.renderers.push(renderer);
		}
		, create: function (config) {
			this.config = config;
			this.backend.create(config);
			if (config != null) {
				if (Object.prototype.hasOwnProperty.call(config, "fps")) this.backend.setFrameRate(config.fps);
				if (Object.prototype.hasOwnProperty.call(config, "windows")) {
					var _g = 0;
					var _g1 = config.windows;
					while (_g < _g1.length) {
						var windowConfig = _g1[_g];
						++_g;
						var $window = new lime_ui_Window(windowConfig);
						this.createWindow($window);
						break;
					}
				}
				if (this.preloader == null || this.preloader.complete) this.onPreloadComplete();
			}
		}
		, createWindow: function (window) {
			window.onActivate.add((function (f, a1) {
				return function () {
					f(a1);
				};
			})($bind(this, this.onWindowActivate), window));
			window.onClose.add((function (f1, a11) {
				return function () {
					f1(a11);
				};
			})($bind(this, this.onWindowClose), window));
			window.onCreate.add((function (f2, a12) {
				return function () {
					f2(a12);
				};
			})($bind(this, this.onWindowCreate), window));
			window.onDeactivate.add((function (f3, a13) {
				return function () {
					f3(a13);
				};
			})($bind(this, this.onWindowDeactivate), window));
			window.onEnter.add((function (f4, a14) {
				return function () {
					f4(a14);
				};
			})($bind(this, this.onWindowEnter), window));
			window.onFocusIn.add((function (f5, a15) {
				return function () {
					f5(a15);
				};
			})($bind(this, this.onWindowFocusIn), window));
			window.onFocusOut.add((function (f6, a16) {
				return function () {
					f6(a16);
				};
			})($bind(this, this.onWindowFocusOut), window));
			window.onFullscreen.add((function (f7, a17) {
				return function () {
					f7(a17);
				};
			})($bind(this, this.onWindowFullscreen), window));
			window.onKeyDown.add((function (f8, a18) {
				return function (a2, a3) {
					f8(a18, a2, a3);
				};
			})($bind(this, this.onKeyDown), window));
			window.onKeyUp.add((function (f9, a19) {
				return function (a21, a31) {
					f9(a19, a21, a31);
				};
			})($bind(this, this.onKeyUp), window));
			window.onLeave.add((function (f10, a110) {
				return function () {
					f10(a110);
				};
			})($bind(this, this.onWindowLeave), window));
			window.onMinimize.add((function (f11, a111) {
				return function () {
					f11(a111);
				};
			})($bind(this, this.onWindowMinimize), window));
			window.onMouseDown.add((function (f12, a112) {
				return function (x, y, a22) {
					f12(a112, x, y, a22);
				};
			})($bind(this, this.onMouseDown), window));
			window.onMouseMove.add((function (f13, a113) {
				return function (x1, y1) {
					f13(a113, x1, y1);
				};
			})($bind(this, this.onMouseMove), window));
			window.onMouseMoveRelative.add((function (f14, a114) {
				return function (x2, y2) {
					f14(a114, x2, y2);
				};
			})($bind(this, this.onMouseMoveRelative), window));
			window.onMouseUp.add((function (f15, a115) {
				return function (x3, y3, a23) {
					f15(a115, x3, y3, a23);
				};
			})($bind(this, this.onMouseUp), window));
			window.onMouseWheel.add((function (f16, a116) {
				return function (a24, a32) {
					f16(a116, a24, a32);
				};
			})($bind(this, this.onMouseWheel), window));
			window.onMove.add((function (f17, a117) {
				return function (x4, y4) {
					f17(a117, x4, y4);
				};
			})($bind(this, this.onWindowMove), window));
			window.onResize.add((function (f18, a118) {
				return function (a25, a33) {
					f18(a118, a25, a33);
				};
			})($bind(this, this.onWindowResize), window));
			window.onRestore.add((function (f19, a119) {
				return function () {
					f19(a119);
				};
			})($bind(this, this.onWindowRestore), window));
			window.onTextEdit.add((function (f20, a120) {
				return function (a26, a34, a4) {
					f20(a120, a26, a34, a4);
				};
			})($bind(this, this.onTextEdit), window));
			window.onTextInput.add((function (f21, a121) {
				return function (a27) {
					f21(a121, a27);
				};
			})($bind(this, this.onTextInput), window));
			if (window.renderer == null) {
				var renderer = new lime_graphics_Renderer(window);
				this.addRenderer(renderer);
			}
			window.create(this);
			this.windows.push(window);
			this.windowByID.h[window.id] = window;
			window.onCreate.dispatch();
		}
		, exec: function () {
			lime_app_Application.current = this;
			return this.backend.exec();
		}
		, onGamepadAxisMove: function (gamepad, axis, value) {
			var _g = 0;
			var _g1 = this.modules;
			while (_g < _g1.length) {
				var module = _g1[_g];
				++_g;
				module.onGamepadAxisMove(gamepad, axis, value);
			}
		}
		, onGamepadButtonDown: function (gamepad, button) {
			var _g = 0;
			var _g1 = this.modules;
			while (_g < _g1.length) {
				var module = _g1[_g];
				++_g;
				module.onGamepadButtonDown(gamepad, button);
			}
		}
		, onGamepadButtonUp: function (gamepad, button) {
			var _g = 0;
			var _g1 = this.modules;
			while (_g < _g1.length) {
				var module = _g1[_g];
				++_g;
				module.onGamepadButtonUp(gamepad, button);
			}
		}
		, onGamepadConnect: function (gamepad) {
			var _g = 0;
			var _g1 = this.modules;
			while (_g < _g1.length) {
				var module = _g1[_g];
				++_g;
				module.onGamepadConnect(gamepad);
			}
			gamepad.onAxisMove.add((function (f, a1) {
				return function (a2, a3) {
					f(a1, a2, a3);
				};
			})($bind(this, this.onGamepadAxisMove), gamepad));
			gamepad.onButtonDown.add((function (f1, a11) {
				return function (a21) {
					f1(a11, a21);
				};
			})($bind(this, this.onGamepadButtonDown), gamepad));
			gamepad.onButtonUp.add((function (f2, a12) {
				return function (a22) {
					f2(a12, a22);
				};
			})($bind(this, this.onGamepadButtonUp), gamepad));
			gamepad.onDisconnect.add((function (f3, a13) {
				return function () {
					f3(a13);
				};
			})($bind(this, this.onGamepadDisconnect), gamepad));
		}
		, onGamepadDisconnect: function (gamepad) {
			var _g = 0;
			var _g1 = this.modules;
			while (_g < _g1.length) {
				var module = _g1[_g];
				++_g;
				module.onGamepadDisconnect(gamepad);
			}
		}
		, onJoystickAxisMove: function (joystick, axis, value) {
			var _g = 0;
			var _g1 = this.modules;
			while (_g < _g1.length) {
				var module = _g1[_g];
				++_g;
				module.onJoystickAxisMove(joystick, axis, value);
			}
		}
		, onJoystickButtonDown: function (joystick, button) {
			var _g = 0;
			var _g1 = this.modules;
			while (_g < _g1.length) {
				var module = _g1[_g];
				++_g;
				module.onJoystickButtonDown(joystick, button);
			}
		}
		, onJoystickButtonUp: function (joystick, button) {
			var _g = 0;
			var _g1 = this.modules;
			while (_g < _g1.length) {
				var module = _g1[_g];
				++_g;
				module.onJoystickButtonUp(joystick, button);
			}
		}
		, onJoystickConnect: function (joystick) {
			var _g = 0;
			var _g1 = this.modules;
			while (_g < _g1.length) {
				var module = _g1[_g];
				++_g;
				module.onJoystickConnect(joystick);
			}
			joystick.onAxisMove.add((function (f, a1) {
				return function (a2, a3) {
					f(a1, a2, a3);
				};
			})($bind(this, this.onJoystickAxisMove), joystick));
			joystick.onButtonDown.add((function (f1, a11) {
				return function (a21) {
					f1(a11, a21);
				};
			})($bind(this, this.onJoystickButtonDown), joystick));
			joystick.onButtonUp.add((function (f2, a12) {
				return function (a22) {
					f2(a12, a22);
				};
			})($bind(this, this.onJoystickButtonUp), joystick));
			joystick.onDisconnect.add((function (f3, a13) {
				return function () {
					f3(a13);
				};
			})($bind(this, this.onJoystickDisconnect), joystick));
			joystick.onHatMove.add((function (f4, a14) {
				return function (a23, a31) {
					f4(a14, a23, a31);
				};
			})($bind(this, this.onJoystickHatMove), joystick));
			joystick.onTrackballMove.add((function (f5, a15) {
				return function (a24, a32) {
					f5(a15, a24, a32);
				};
			})($bind(this, this.onJoystickTrackballMove), joystick));
		}
		, onJoystickDisconnect: function (joystick) {
			var _g = 0;
			var _g1 = this.modules;
			while (_g < _g1.length) {
				var module = _g1[_g];
				++_g;
				module.onJoystickDisconnect(joystick);
			}
		}
		, onJoystickHatMove: function (joystick, hat, position) {
			var _g = 0;
			var _g1 = this.modules;
			while (_g < _g1.length) {
				var module = _g1[_g];
				++_g;
				module.onJoystickHatMove(joystick, hat, position);
			}
		}
		, onJoystickTrackballMove: function (joystick, trackball, value) {
			var _g = 0;
			var _g1 = this.modules;
			while (_g < _g1.length) {
				var module = _g1[_g];
				++_g;
				module.onJoystickTrackballMove(joystick, trackball, value);
			}
		}
		, onKeyDown: function (window, keyCode, modifier) {
			var _g = 0;
			var _g1 = this.modules;
			while (_g < _g1.length) {
				var module = _g1[_g];
				++_g;
				module.onKeyDown(window, keyCode, modifier);
			}
		}
		, onKeyUp: function (window, keyCode, modifier) {
			var _g = 0;
			var _g1 = this.modules;
			while (_g < _g1.length) {
				var module = _g1[_g];
				++_g;
				module.onKeyUp(window, keyCode, modifier);
			}
		}
		, onModuleExit: function (code) {
			var _g = 0;
			var _g1 = this.modules;
			while (_g < _g1.length) {
				var module = _g1[_g];
				++_g;
				module.onModuleExit(code);
			}
			this.backend.exit();
		}
		, onMouseDown: function (window, x, y, button) {
			var _g = 0;
			var _g1 = this.modules;
			while (_g < _g1.length) {
				var module = _g1[_g];
				++_g;
				module.onMouseDown(window, x, y, button);
			}
		}
		, onMouseMove: function (window, x, y) {
			var _g = 0;
			var _g1 = this.modules;
			while (_g < _g1.length) {
				var module = _g1[_g];
				++_g;
				module.onMouseMove(window, x, y);
			}
		}
		, onMouseMoveRelative: function (window, x, y) {
			var _g = 0;
			var _g1 = this.modules;
			while (_g < _g1.length) {
				var module = _g1[_g];
				++_g;
				module.onMouseMoveRelative(window, x, y);
			}
		}
		, onMouseUp: function (window, x, y, button) {
			var _g = 0;
			var _g1 = this.modules;
			while (_g < _g1.length) {
				var module = _g1[_g];
				++_g;
				module.onMouseUp(window, x, y, button);
			}
		}
		, onMouseWheel: function (window, deltaX, deltaY) {
			var _g = 0;
			var _g1 = this.modules;
			while (_g < _g1.length) {
				var module = _g1[_g];
				++_g;
				module.onMouseWheel(window, deltaX, deltaY);
			}
		}
		, onPreloadComplete: function () {
			var _g = 0;
			var _g1 = this.modules;
			while (_g < _g1.length) {
				var module = _g1[_g];
				++_g;
				module.onPreloadComplete();
			}
		}
		, onPreloadProgress: function (loaded, total) {
			var _g = 0;
			var _g1 = this.modules;
			while (_g < _g1.length) {
				var module = _g1[_g];
				++_g;
				module.onPreloadProgress(loaded, total);
			}
		}
		, onRenderContextLost: function (renderer) {
			var _g = 0;
			var _g1 = this.modules;
			while (_g < _g1.length) {
				var module = _g1[_g];
				++_g;
				module.onRenderContextLost(renderer);
			}
		}
		, onRenderContextRestored: function (renderer, context) {
			var _g = 0;
			var _g1 = this.modules;
			while (_g < _g1.length) {
				var module = _g1[_g];
				++_g;
				module.onRenderContextRestored(renderer, context);
			}
		}
		, onTextEdit: function (window, text, start, length) {
			var _g = 0;
			var _g1 = this.modules;
			while (_g < _g1.length) {
				var module = _g1[_g];
				++_g;
				module.onTextEdit(window, text, start, length);
			}
		}
		, onTextInput: function (window, text) {
			var _g = 0;
			var _g1 = this.modules;
			while (_g < _g1.length) {
				var module = _g1[_g];
				++_g;
				module.onTextInput(window, text);
			}
		}
		, onTouchEnd: function (touch) {
			var _g = 0;
			var _g1 = this.modules;
			while (_g < _g1.length) {
				var module = _g1[_g];
				++_g;
				module.onTouchEnd(touch);
			}
		}
		, onTouchMove: function (touch) {
			var _g = 0;
			var _g1 = this.modules;
			while (_g < _g1.length) {
				var module = _g1[_g];
				++_g;
				module.onTouchMove(touch);
			}
		}
		, onTouchStart: function (touch) {
			var _g = 0;
			var _g1 = this.modules;
			while (_g < _g1.length) {
				var module = _g1[_g];
				++_g;
				module.onTouchStart(touch);
			}
		}
		, onWindowActivate: function (window) {
			var _g = 0;
			var _g1 = this.modules;
			while (_g < _g1.length) {
				var module = _g1[_g];
				++_g;
				module.onWindowActivate(window);
			}
		}
		, onWindowClose: function (window) {
			var _g = 0;
			var _g1 = this.modules;
			while (_g < _g1.length) {
				var module = _g1[_g];
				++_g;
				module.onWindowClose(window);
			}
			this.removeWindow(window);
		}
		, onWindowCreate: function (window) {
			var _g = 0;
			var _g1 = this.modules;
			while (_g < _g1.length) {
				var module = _g1[_g];
				++_g;
				module.onWindowCreate(window);
			}
		}
		, onWindowDeactivate: function (window) {
			var _g = 0;
			var _g1 = this.modules;
			while (_g < _g1.length) {
				var module = _g1[_g];
				++_g;
				module.onWindowDeactivate(window);
			}
		}
		, onWindowEnter: function (window) {
			var _g = 0;
			var _g1 = this.modules;
			while (_g < _g1.length) {
				var module = _g1[_g];
				++_g;
				module.onWindowEnter(window);
			}
		}
		, onWindowFocusIn: function (window) {
			var _g = 0;
			var _g1 = this.modules;
			while (_g < _g1.length) {
				var module = _g1[_g];
				++_g;
				module.onWindowFocusIn(window);
			}
		}
		, onWindowFocusOut: function (window) {
			var _g = 0;
			var _g1 = this.modules;
			while (_g < _g1.length) {
				var module = _g1[_g];
				++_g;
				module.onWindowFocusOut(window);
			}
		}
		, onWindowFullscreen: function (window) {
			var _g = 0;
			var _g1 = this.modules;
			while (_g < _g1.length) {
				var module = _g1[_g];
				++_g;
				module.onWindowFullscreen(window);
			}
		}
		, onWindowLeave: function (window) {
			var _g = 0;
			var _g1 = this.modules;
			while (_g < _g1.length) {
				var module = _g1[_g];
				++_g;
				module.onWindowLeave(window);
			}
		}
		, onWindowMinimize: function (window) {
			var _g = 0;
			var _g1 = this.modules;
			while (_g < _g1.length) {
				var module = _g1[_g];
				++_g;
				module.onWindowMinimize(window);
			}
		}
		, onWindowMove: function (window, x, y) {
			var _g = 0;
			var _g1 = this.modules;
			while (_g < _g1.length) {
				var module = _g1[_g];
				++_g;
				module.onWindowMove(window, x, y);
			}
		}
		, onWindowResize: function (window, width, height) {
			var _g = 0;
			var _g1 = this.modules;
			while (_g < _g1.length) {
				var module = _g1[_g];
				++_g;
				module.onWindowResize(window, width, height);
			}
		}
		, onWindowRestore: function (window) {
			var _g = 0;
			var _g1 = this.modules;
			while (_g < _g1.length) {
				var module = _g1[_g];
				++_g;
				module.onWindowRestore(window);
			}
		}
		, removeModule: function (module) {
			if (module != null) {
				module.onModuleExit(0);
				HxOverrides.remove(this.modules, module);
			}
		}
		, removeRenderer: function (renderer) {
			if (renderer != null && HxOverrides.indexOf(this.renderers, renderer, 0) > -1) HxOverrides.remove(this.renderers, renderer);
		}
		, removeWindow: function (window) {
			if (window != null && this.windowByID.h.hasOwnProperty(window.id)) {
				HxOverrides.remove(this.windows, window);
				this.windowByID.remove(window.id);
				window.close();
				if (this.windows[0] == window) this.window = null;
			}
		}
		, render: function (renderer) {
			var _g = 0;
			var _g1 = this.modules;
			while (_g < _g1.length) {
				var module = _g1[_g];
				++_g;
				module.render(renderer);
			}
		}
		, setPreloader: function (preloader) {
			if (this.preloader != null) {
				this.preloader.onProgress.remove($bind(this, this.onPreloadProgress));
				this.preloader.onComplete.remove($bind(this, this.onPreloadComplete));
			}
			this.preloader = preloader;
			if (preloader.complete) this.onPreloadComplete(); else {
				preloader.onProgress.add($bind(this, this.onPreloadProgress));
				preloader.onComplete.add($bind(this, this.onPreloadComplete));
			}
		}
		, update: function (deltaTime) {
			var _g = 0;
			var _g1 = this.modules;
			while (_g < _g1.length) {
				var module = _g1[_g];
				++_g;
				module.update(deltaTime);
			}
		}
		, get_frameRate: function () {
			return this.backend.getFrameRate();
		}
		, set_frameRate: function (value) {
			return this.backend.setFrameRate(value);
		}
		, get_renderer: function () {
			return this.renderers[0];
		}
		, get_window: function () {
			return this.windows[0];
		}
		, __class__: lime_app_Application
		, __properties__: { get_window: "get_window", get_renderer: "get_renderer", set_frameRate: "set_frameRate", get_frameRate: "get_frameRate" }
	});
	var lime_app_Event = function () {
		this.listeners = [];
		this.priorities = [];
		this.repeat = [];
	};
	$hxClasses["lime.app.Event"] = lime_app_Event;
	lime_app_Event.__name__ = ["lime", "app", "Event"];
	lime_app_Event.prototype = {
		add: function (listener, once, priority) {
			if (priority == null) priority = 0;
			if (once == null) once = false;
			var _g1 = 0;
			var _g = this.priorities.length;
			while (_g1 < _g) {
				var i = _g1++;
				if (priority > this.priorities[i]) {
					this.listeners.splice(i, 0, listener);
					this.priorities.splice(i, 0, priority);
					this.repeat.splice(i, 0, !once);
					return;
				}
			}
			this.listeners.push(listener);
			this.priorities.push(priority);
			this.repeat.push(!once);
		}
		, has: function (listener) {
			var _g = 0;
			var _g1 = this.listeners;
			while (_g < _g1.length) {
				var l = _g1[_g];
				++_g;
				if (Reflect.compareMethods(l, listener)) return true;
			}
			return false;
		}
		, remove: function (listener) {
			var i = this.listeners.length;
			while (--i >= 0) if (Reflect.compareMethods(this.listeners[i], listener)) {
				this.listeners.splice(i, 1);
				this.priorities.splice(i, 1);
				this.repeat.splice(i, 1);
			}
		}
		, __class__: lime_app_Event
	};
	var lime_app_Event_$Dynamic_$Void = function () {
		this.listeners = [];
		this.priorities = [];
		this.repeat = [];
	};
	$hxClasses["lime.app.Event_Dynamic_Void"] = lime_app_Event_$Dynamic_$Void;
	lime_app_Event_$Dynamic_$Void.__name__ = ["lime", "app", "Event_Dynamic_Void"];
	lime_app_Event_$Dynamic_$Void.prototype = {
		add: function (listener, once, priority) {
			if (priority == null) priority = 0;
			if (once == null) once = false;
			var _g1 = 0;
			var _g = this.priorities.length;
			while (_g1 < _g) {
				var i = _g1++;
				if (priority > this.priorities[i]) {
					this.listeners.splice(i, 0, listener);
					this.priorities.splice(i, 0, priority);
					this.repeat.splice(i, 0, !once);
					return;
				}
			}
			this.listeners.push(listener);
			this.priorities.push(priority);
			this.repeat.push(!once);
		}
		, has: function (listener) {
			var _g = 0;
			var _g1 = this.listeners;
			while (_g < _g1.length) {
				var l = _g1[_g];
				++_g;
				if (Reflect.compareMethods(l, listener)) return true;
			}
			return false;
		}
		, remove: function (listener) {
			var i = this.listeners.length;
			while (--i >= 0) if (Reflect.compareMethods(this.listeners[i], listener)) {
				this.listeners.splice(i, 1);
				this.priorities.splice(i, 1);
				this.repeat.splice(i, 1);
			}
		}
		, dispatch: function (a) {
			var listeners = this.listeners;
			var repeat = this.repeat;
			var i = 0;
			while (i < listeners.length) {
				listeners[i](a);
				if (!repeat[i]) this.remove(listeners[i]); else i++;
			}
		}
		, __class__: lime_app_Event_$Dynamic_$Void
	};
	var lime_app_Event_$Float_$Float_$Int_$Void = function () {
		this.listeners = [];
		this.priorities = [];
		this.repeat = [];
	};
	$hxClasses["lime.app.Event_Float_Float_Int_Void"] = lime_app_Event_$Float_$Float_$Int_$Void;
	lime_app_Event_$Float_$Float_$Int_$Void.__name__ = ["lime", "app", "Event_Float_Float_Int_Void"];
	lime_app_Event_$Float_$Float_$Int_$Void.prototype = {
		add: function (listener, once, priority) {
			if (priority == null) priority = 0;
			if (once == null) once = false;
			var _g1 = 0;
			var _g = this.priorities.length;
			while (_g1 < _g) {
				var i = _g1++;
				if (priority > this.priorities[i]) {
					this.listeners.splice(i, 0, listener);
					this.priorities.splice(i, 0, priority);
					this.repeat.splice(i, 0, !once);
					return;
				}
			}
			this.listeners.push(listener);
			this.priorities.push(priority);
			this.repeat.push(!once);
		}
		, has: function (listener) {
			var _g = 0;
			var _g1 = this.listeners;
			while (_g < _g1.length) {
				var l = _g1[_g];
				++_g;
				if (Reflect.compareMethods(l, listener)) return true;
			}
			return false;
		}
		, remove: function (listener) {
			var i = this.listeners.length;
			while (--i >= 0) if (Reflect.compareMethods(this.listeners[i], listener)) {
				this.listeners.splice(i, 1);
				this.priorities.splice(i, 1);
				this.repeat.splice(i, 1);
			}
		}
		, dispatch: function (a, a1, a2) {
			var listeners = this.listeners;
			var repeat = this.repeat;
			var i = 0;
			while (i < listeners.length) {
				listeners[i](a, a1, a2);
				if (!repeat[i]) this.remove(listeners[i]); else i++;
			}
		}
		, __class__: lime_app_Event_$Float_$Float_$Int_$Void
	};
	var lime_app_Event_$Float_$Float_$Void = function () {
		this.listeners = [];
		this.priorities = [];
		this.repeat = [];
	};
	$hxClasses["lime.app.Event_Float_Float_Void"] = lime_app_Event_$Float_$Float_$Void;
	lime_app_Event_$Float_$Float_$Void.__name__ = ["lime", "app", "Event_Float_Float_Void"];
	lime_app_Event_$Float_$Float_$Void.prototype = {
		add: function (listener, once, priority) {
			if (priority == null) priority = 0;
			if (once == null) once = false;
			var _g1 = 0;
			var _g = this.priorities.length;
			while (_g1 < _g) {
				var i = _g1++;
				if (priority > this.priorities[i]) {
					this.listeners.splice(i, 0, listener);
					this.priorities.splice(i, 0, priority);
					this.repeat.splice(i, 0, !once);
					return;
				}
			}
			this.listeners.push(listener);
			this.priorities.push(priority);
			this.repeat.push(!once);
		}
		, has: function (listener) {
			var _g = 0;
			var _g1 = this.listeners;
			while (_g < _g1.length) {
				var l = _g1[_g];
				++_g;
				if (Reflect.compareMethods(l, listener)) return true;
			}
			return false;
		}
		, remove: function (listener) {
			var i = this.listeners.length;
			while (--i >= 0) if (Reflect.compareMethods(this.listeners[i], listener)) {
				this.listeners.splice(i, 1);
				this.priorities.splice(i, 1);
				this.repeat.splice(i, 1);
			}
		}
		, dispatch: function (a, a1) {
			var listeners = this.listeners;
			var repeat = this.repeat;
			var i = 0;
			while (i < listeners.length) {
				listeners[i](a, a1);
				if (!repeat[i]) this.remove(listeners[i]); else i++;
			}
		}
		, __class__: lime_app_Event_$Float_$Float_$Void
	};
	var lime_app_Event_$Int_$Float_$Void = function () {
		this.listeners = [];
		this.priorities = [];
		this.repeat = [];
	};
	$hxClasses["lime.app.Event_Int_Float_Void"] = lime_app_Event_$Int_$Float_$Void;
	lime_app_Event_$Int_$Float_$Void.__name__ = ["lime", "app", "Event_Int_Float_Void"];
	lime_app_Event_$Int_$Float_$Void.prototype = {
		add: function (listener, once, priority) {
			if (priority == null) priority = 0;
			if (once == null) once = false;
			var _g1 = 0;
			var _g = this.priorities.length;
			while (_g1 < _g) {
				var i = _g1++;
				if (priority > this.priorities[i]) {
					this.listeners.splice(i, 0, listener);
					this.priorities.splice(i, 0, priority);
					this.repeat.splice(i, 0, !once);
					return;
				}
			}
			this.listeners.push(listener);
			this.priorities.push(priority);
			this.repeat.push(!once);
		}
		, has: function (listener) {
			var _g = 0;
			var _g1 = this.listeners;
			while (_g < _g1.length) {
				var l = _g1[_g];
				++_g;
				if (Reflect.compareMethods(l, listener)) return true;
			}
			return false;
		}
		, remove: function (listener) {
			var i = this.listeners.length;
			while (--i >= 0) if (Reflect.compareMethods(this.listeners[i], listener)) {
				this.listeners.splice(i, 1);
				this.priorities.splice(i, 1);
				this.repeat.splice(i, 1);
			}
		}
		, dispatch: function (a, a1) {
			var listeners = this.listeners;
			var repeat = this.repeat;
			var i = 0;
			while (i < listeners.length) {
				listeners[i](a, a1);
				if (!repeat[i]) this.remove(listeners[i]); else i++;
			}
		}
		, __class__: lime_app_Event_$Int_$Float_$Void
	};
	var lime_app_Event_$Int_$Int_$Void = function () {
		this.listeners = [];
		this.priorities = [];
		this.repeat = [];
	};
	$hxClasses["lime.app.Event_Int_Int_Void"] = lime_app_Event_$Int_$Int_$Void;
	lime_app_Event_$Int_$Int_$Void.__name__ = ["lime", "app", "Event_Int_Int_Void"];
	lime_app_Event_$Int_$Int_$Void.prototype = {
		add: function (listener, once, priority) {
			if (priority == null) priority = 0;
			if (once == null) once = false;
			var _g1 = 0;
			var _g = this.priorities.length;
			while (_g1 < _g) {
				var i = _g1++;
				if (priority > this.priorities[i]) {
					this.listeners.splice(i, 0, listener);
					this.priorities.splice(i, 0, priority);
					this.repeat.splice(i, 0, !once);
					return;
				}
			}
			this.listeners.push(listener);
			this.priorities.push(priority);
			this.repeat.push(!once);
		}
		, has: function (listener) {
			var _g = 0;
			var _g1 = this.listeners;
			while (_g < _g1.length) {
				var l = _g1[_g];
				++_g;
				if (Reflect.compareMethods(l, listener)) return true;
			}
			return false;
		}
		, remove: function (listener) {
			var i = this.listeners.length;
			while (--i >= 0) if (Reflect.compareMethods(this.listeners[i], listener)) {
				this.listeners.splice(i, 1);
				this.priorities.splice(i, 1);
				this.repeat.splice(i, 1);
			}
		}
		, dispatch: function (a, a1) {
			var listeners = this.listeners;
			var repeat = this.repeat;
			var i = 0;
			while (i < listeners.length) {
				listeners[i](a, a1);
				if (!repeat[i]) this.remove(listeners[i]); else i++;
			}
		}
		, __class__: lime_app_Event_$Int_$Int_$Void
	};
	var lime_app_Event_$Int_$Void = function () {
		this.listeners = [];
		this.priorities = [];
		this.repeat = [];
	};
	$hxClasses["lime.app.Event_Int_Void"] = lime_app_Event_$Int_$Void;
	lime_app_Event_$Int_$Void.__name__ = ["lime", "app", "Event_Int_Void"];
	lime_app_Event_$Int_$Void.prototype = {
		add: function (listener, once, priority) {
			if (priority == null) priority = 0;
			if (once == null) once = false;
			var _g1 = 0;
			var _g = this.priorities.length;
			while (_g1 < _g) {
				var i = _g1++;
				if (priority > this.priorities[i]) {
					this.listeners.splice(i, 0, listener);
					this.priorities.splice(i, 0, priority);
					this.repeat.splice(i, 0, !once);
					return;
				}
			}
			this.listeners.push(listener);
			this.priorities.push(priority);
			this.repeat.push(!once);
		}
		, has: function (listener) {
			var _g = 0;
			var _g1 = this.listeners;
			while (_g < _g1.length) {
				var l = _g1[_g];
				++_g;
				if (Reflect.compareMethods(l, listener)) return true;
			}
			return false;
		}
		, remove: function (listener) {
			var i = this.listeners.length;
			while (--i >= 0) if (Reflect.compareMethods(this.listeners[i], listener)) {
				this.listeners.splice(i, 1);
				this.priorities.splice(i, 1);
				this.repeat.splice(i, 1);
			}
		}
		, dispatch: function (a) {
			var listeners = this.listeners;
			var repeat = this.repeat;
			var i = 0;
			while (i < listeners.length) {
				listeners[i](a);
				if (!repeat[i]) this.remove(listeners[i]); else i++;
			}
		}
		, __class__: lime_app_Event_$Int_$Void
	};
	var lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void = function () {
		this.listeners = [];
		this.priorities = [];
		this.repeat = [];
	};
	$hxClasses["lime.app.Event_Int_lime_ui_JoystickHatPosition_Void"] = lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void;
	lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.__name__ = ["lime", "app", "Event_Int_lime_ui_JoystickHatPosition_Void"];
	lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.prototype = {
		add: function (listener, once, priority) {
			if (priority == null) priority = 0;
			if (once == null) once = false;
			var _g1 = 0;
			var _g = this.priorities.length;
			while (_g1 < _g) {
				var i = _g1++;
				if (priority > this.priorities[i]) {
					this.listeners.splice(i, 0, listener);
					this.priorities.splice(i, 0, priority);
					this.repeat.splice(i, 0, !once);
					return;
				}
			}
			this.listeners.push(listener);
			this.priorities.push(priority);
			this.repeat.push(!once);
		}
		, has: function (listener) {
			var _g = 0;
			var _g1 = this.listeners;
			while (_g < _g1.length) {
				var l = _g1[_g];
				++_g;
				if (Reflect.compareMethods(l, listener)) return true;
			}
			return false;
		}
		, remove: function (listener) {
			var i = this.listeners.length;
			while (--i >= 0) if (Reflect.compareMethods(this.listeners[i], listener)) {
				this.listeners.splice(i, 1);
				this.priorities.splice(i, 1);
				this.repeat.splice(i, 1);
			}
		}
		, dispatch: function (a, a1) {
			var listeners = this.listeners;
			var repeat = this.repeat;
			var i = 0;
			while (i < listeners.length) {
				listeners[i](a, a1);
				if (!repeat[i]) this.remove(listeners[i]); else i++;
			}
		}
		, __class__: lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void
	};
	var lime_app_Event_$String_$Int_$Int_$Void = function () {
		this.listeners = [];
		this.priorities = [];
		this.repeat = [];
	};
	$hxClasses["lime.app.Event_String_Int_Int_Void"] = lime_app_Event_$String_$Int_$Int_$Void;
	lime_app_Event_$String_$Int_$Int_$Void.__name__ = ["lime", "app", "Event_String_Int_Int_Void"];
	lime_app_Event_$String_$Int_$Int_$Void.prototype = {
		add: function (listener, once, priority) {
			if (priority == null) priority = 0;
			if (once == null) once = false;
			var _g1 = 0;
			var _g = this.priorities.length;
			while (_g1 < _g) {
				var i = _g1++;
				if (priority > this.priorities[i]) {
					this.listeners.splice(i, 0, listener);
					this.priorities.splice(i, 0, priority);
					this.repeat.splice(i, 0, !once);
					return;
				}
			}
			this.listeners.push(listener);
			this.priorities.push(priority);
			this.repeat.push(!once);
		}
		, has: function (listener) {
			var _g = 0;
			var _g1 = this.listeners;
			while (_g < _g1.length) {
				var l = _g1[_g];
				++_g;
				if (Reflect.compareMethods(l, listener)) return true;
			}
			return false;
		}
		, remove: function (listener) {
			var i = this.listeners.length;
			while (--i >= 0) if (Reflect.compareMethods(this.listeners[i], listener)) {
				this.listeners.splice(i, 1);
				this.priorities.splice(i, 1);
				this.repeat.splice(i, 1);
			}
		}
		, dispatch: function (a, a1, a2) {
			var listeners = this.listeners;
			var repeat = this.repeat;
			var i = 0;
			while (i < listeners.length) {
				listeners[i](a, a1, a2);
				if (!repeat[i]) this.remove(listeners[i]); else i++;
			}
		}
		, __class__: lime_app_Event_$String_$Int_$Int_$Void
	};
	var lime_app_Event_$String_$Void = function () {
		this.listeners = [];
		this.priorities = [];
		this.repeat = [];
	};
	$hxClasses["lime.app.Event_String_Void"] = lime_app_Event_$String_$Void;
	lime_app_Event_$String_$Void.__name__ = ["lime", "app", "Event_String_Void"];
	lime_app_Event_$String_$Void.prototype = {
		add: function (listener, once, priority) {
			if (priority == null) priority = 0;
			if (once == null) once = false;
			var _g1 = 0;
			var _g = this.priorities.length;
			while (_g1 < _g) {
				var i = _g1++;
				if (priority > this.priorities[i]) {
					this.listeners.splice(i, 0, listener);
					this.priorities.splice(i, 0, priority);
					this.repeat.splice(i, 0, !once);
					return;
				}
			}
			this.listeners.push(listener);
			this.priorities.push(priority);
			this.repeat.push(!once);
		}
		, has: function (listener) {
			var _g = 0;
			var _g1 = this.listeners;
			while (_g < _g1.length) {
				var l = _g1[_g];
				++_g;
				if (Reflect.compareMethods(l, listener)) return true;
			}
			return false;
		}
		, remove: function (listener) {
			var i = this.listeners.length;
			while (--i >= 0) if (Reflect.compareMethods(this.listeners[i], listener)) {
				this.listeners.splice(i, 1);
				this.priorities.splice(i, 1);
				this.repeat.splice(i, 1);
			}
		}
		, dispatch: function (a) {
			var listeners = this.listeners;
			var repeat = this.repeat;
			var i = 0;
			while (i < listeners.length) {
				listeners[i](a);
				if (!repeat[i]) this.remove(listeners[i]); else i++;
			}
		}
		, __class__: lime_app_Event_$String_$Void
	};
	var lime_app_Event_$lime_$graphics_$RenderContext_$Void = function () {
		this.listeners = [];
		this.priorities = [];
		this.repeat = [];
	};
	$hxClasses["lime.app.Event_lime_graphics_RenderContext_Void"] = lime_app_Event_$lime_$graphics_$RenderContext_$Void;
	lime_app_Event_$lime_$graphics_$RenderContext_$Void.__name__ = ["lime", "app", "Event_lime_graphics_RenderContext_Void"];
	lime_app_Event_$lime_$graphics_$RenderContext_$Void.prototype = {
		add: function (listener, once, priority) {
			if (priority == null) priority = 0;
			if (once == null) once = false;
			var _g1 = 0;
			var _g = this.priorities.length;
			while (_g1 < _g) {
				var i = _g1++;
				if (priority > this.priorities[i]) {
					this.listeners.splice(i, 0, listener);
					this.priorities.splice(i, 0, priority);
					this.repeat.splice(i, 0, !once);
					return;
				}
			}
			this.listeners.push(listener);
			this.priorities.push(priority);
			this.repeat.push(!once);
		}
		, has: function (listener) {
			var _g = 0;
			var _g1 = this.listeners;
			while (_g < _g1.length) {
				var l = _g1[_g];
				++_g;
				if (Reflect.compareMethods(l, listener)) return true;
			}
			return false;
		}
		, remove: function (listener) {
			var i = this.listeners.length;
			while (--i >= 0) if (Reflect.compareMethods(this.listeners[i], listener)) {
				this.listeners.splice(i, 1);
				this.priorities.splice(i, 1);
				this.repeat.splice(i, 1);
			}
		}
		, dispatch: function (a) {
			var listeners = this.listeners;
			var repeat = this.repeat;
			var i = 0;
			while (i < listeners.length) {
				listeners[i](a);
				if (!repeat[i]) this.remove(listeners[i]); else i++;
			}
		}
		, __class__: lime_app_Event_$lime_$graphics_$RenderContext_$Void
	};
	var lime_app_Event_$lime_$net_$URLLoader_$Int_$Int_$Void = function () {
		this.listeners = [];
		this.priorities = [];
		this.repeat = [];
	};
	$hxClasses["lime.app.Event_lime_net_URLLoader_Int_Int_Void"] = lime_app_Event_$lime_$net_$URLLoader_$Int_$Int_$Void;
	lime_app_Event_$lime_$net_$URLLoader_$Int_$Int_$Void.__name__ = ["lime", "app", "Event_lime_net_URLLoader_Int_Int_Void"];
	lime_app_Event_$lime_$net_$URLLoader_$Int_$Int_$Void.prototype = {
		add: function (listener, once, priority) {
			if (priority == null) priority = 0;
			if (once == null) once = false;
			var _g1 = 0;
			var _g = this.priorities.length;
			while (_g1 < _g) {
				var i = _g1++;
				if (priority > this.priorities[i]) {
					this.listeners.splice(i, 0, listener);
					this.priorities.splice(i, 0, priority);
					this.repeat.splice(i, 0, !once);
					return;
				}
			}
			this.listeners.push(listener);
			this.priorities.push(priority);
			this.repeat.push(!once);
		}
		, has: function (listener) {
			var _g = 0;
			var _g1 = this.listeners;
			while (_g < _g1.length) {
				var l = _g1[_g];
				++_g;
				if (Reflect.compareMethods(l, listener)) return true;
			}
			return false;
		}
		, remove: function (listener) {
			var i = this.listeners.length;
			while (--i >= 0) if (Reflect.compareMethods(this.listeners[i], listener)) {
				this.listeners.splice(i, 1);
				this.priorities.splice(i, 1);
				this.repeat.splice(i, 1);
			}
		}
		, dispatch: function (a, a1, a2) {
			var listeners = this.listeners;
			var repeat = this.repeat;
			var i = 0;
			while (i < listeners.length) {
				listeners[i](a, a1, a2);
				if (!repeat[i]) this.remove(listeners[i]); else i++;
			}
		}
		, __class__: lime_app_Event_$lime_$net_$URLLoader_$Int_$Int_$Void
	};
	var lime_app_Event_$lime_$net_$URLLoader_$Int_$Void = function () {
		this.listeners = [];
		this.priorities = [];
		this.repeat = [];
	};
	$hxClasses["lime.app.Event_lime_net_URLLoader_Int_Void"] = lime_app_Event_$lime_$net_$URLLoader_$Int_$Void;
	lime_app_Event_$lime_$net_$URLLoader_$Int_$Void.__name__ = ["lime", "app", "Event_lime_net_URLLoader_Int_Void"];
	lime_app_Event_$lime_$net_$URLLoader_$Int_$Void.prototype = {
		add: function (listener, once, priority) {
			if (priority == null) priority = 0;
			if (once == null) once = false;
			var _g1 = 0;
			var _g = this.priorities.length;
			while (_g1 < _g) {
				var i = _g1++;
				if (priority > this.priorities[i]) {
					this.listeners.splice(i, 0, listener);
					this.priorities.splice(i, 0, priority);
					this.repeat.splice(i, 0, !once);
					return;
				}
			}
			this.listeners.push(listener);
			this.priorities.push(priority);
			this.repeat.push(!once);
		}
		, has: function (listener) {
			var _g = 0;
			var _g1 = this.listeners;
			while (_g < _g1.length) {
				var l = _g1[_g];
				++_g;
				if (Reflect.compareMethods(l, listener)) return true;
			}
			return false;
		}
		, remove: function (listener) {
			var i = this.listeners.length;
			while (--i >= 0) if (Reflect.compareMethods(this.listeners[i], listener)) {
				this.listeners.splice(i, 1);
				this.priorities.splice(i, 1);
				this.repeat.splice(i, 1);
			}
		}
		, dispatch: function (a, a1) {
			var listeners = this.listeners;
			var repeat = this.repeat;
			var i = 0;
			while (i < listeners.length) {
				listeners[i](a, a1);
				if (!repeat[i]) this.remove(listeners[i]); else i++;
			}
		}
		, __class__: lime_app_Event_$lime_$net_$URLLoader_$Int_$Void
	};
	var lime_app_Event_$lime_$net_$URLLoader_$String_$Void = function () {
		this.listeners = [];
		this.priorities = [];
		this.repeat = [];
	};
	$hxClasses["lime.app.Event_lime_net_URLLoader_String_Void"] = lime_app_Event_$lime_$net_$URLLoader_$String_$Void;
	lime_app_Event_$lime_$net_$URLLoader_$String_$Void.__name__ = ["lime", "app", "Event_lime_net_URLLoader_String_Void"];
	lime_app_Event_$lime_$net_$URLLoader_$String_$Void.prototype = {
		add: function (listener, once, priority) {
			if (priority == null) priority = 0;
			if (once == null) once = false;
			var _g1 = 0;
			var _g = this.priorities.length;
			while (_g1 < _g) {
				var i = _g1++;
				if (priority > this.priorities[i]) {
					this.listeners.splice(i, 0, listener);
					this.priorities.splice(i, 0, priority);
					this.repeat.splice(i, 0, !once);
					return;
				}
			}
			this.listeners.push(listener);
			this.priorities.push(priority);
			this.repeat.push(!once);
		}
		, has: function (listener) {
			var _g = 0;
			var _g1 = this.listeners;
			while (_g < _g1.length) {
				var l = _g1[_g];
				++_g;
				if (Reflect.compareMethods(l, listener)) return true;
			}
			return false;
		}
		, remove: function (listener) {
			var i = this.listeners.length;
			while (--i >= 0) if (Reflect.compareMethods(this.listeners[i], listener)) {
				this.listeners.splice(i, 1);
				this.priorities.splice(i, 1);
				this.repeat.splice(i, 1);
			}
		}
		, dispatch: function (a, a1) {
			var listeners = this.listeners;
			var repeat = this.repeat;
			var i = 0;
			while (i < listeners.length) {
				listeners[i](a, a1);
				if (!repeat[i]) this.remove(listeners[i]); else i++;
			}
		}
		, __class__: lime_app_Event_$lime_$net_$URLLoader_$String_$Void
	};
	var lime_app_Event_$lime_$net_$URLLoader_$Void = function () {
		this.listeners = [];
		this.priorities = [];
		this.repeat = [];
	};
	$hxClasses["lime.app.Event_lime_net_URLLoader_Void"] = lime_app_Event_$lime_$net_$URLLoader_$Void;
	lime_app_Event_$lime_$net_$URLLoader_$Void.__name__ = ["lime", "app", "Event_lime_net_URLLoader_Void"];
	lime_app_Event_$lime_$net_$URLLoader_$Void.prototype = {
		add: function (listener, once, priority) {
			if (priority == null) priority = 0;
			if (once == null) once = false;
			var _g1 = 0;
			var _g = this.priorities.length;
			while (_g1 < _g) {
				var i = _g1++;
				if (priority > this.priorities[i]) {
					this.listeners.splice(i, 0, listener);
					this.priorities.splice(i, 0, priority);
					this.repeat.splice(i, 0, !once);
					return;
				}
			}
			this.listeners.push(listener);
			this.priorities.push(priority);
			this.repeat.push(!once);
		}
		, has: function (listener) {
			var _g = 0;
			var _g1 = this.listeners;
			while (_g < _g1.length) {
				var l = _g1[_g];
				++_g;
				if (Reflect.compareMethods(l, listener)) return true;
			}
			return false;
		}
		, remove: function (listener) {
			var i = this.listeners.length;
			while (--i >= 0) if (Reflect.compareMethods(this.listeners[i], listener)) {
				this.listeners.splice(i, 1);
				this.priorities.splice(i, 1);
				this.repeat.splice(i, 1);
			}
		}
		, dispatch: function (a) {
			var listeners = this.listeners;
			var repeat = this.repeat;
			var i = 0;
			while (i < listeners.length) {
				listeners[i](a);
				if (!repeat[i]) this.remove(listeners[i]); else i++;
			}
		}
		, __class__: lime_app_Event_$lime_$net_$URLLoader_$Void
	};
	var lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void = function () {
		this.listeners = [];
		this.priorities = [];
		this.repeat = [];
	};
	$hxClasses["lime.app.Event_lime_ui_GamepadAxis_Float_Void"] = lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void;
	lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void.__name__ = ["lime", "app", "Event_lime_ui_GamepadAxis_Float_Void"];
	lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void.prototype = {
		add: function (listener, once, priority) {
			if (priority == null) priority = 0;
			if (once == null) once = false;
			var _g1 = 0;
			var _g = this.priorities.length;
			while (_g1 < _g) {
				var i = _g1++;
				if (priority > this.priorities[i]) {
					this.listeners.splice(i, 0, listener);
					this.priorities.splice(i, 0, priority);
					this.repeat.splice(i, 0, !once);
					return;
				}
			}
			this.listeners.push(listener);
			this.priorities.push(priority);
			this.repeat.push(!once);
		}
		, has: function (listener) {
			var _g = 0;
			var _g1 = this.listeners;
			while (_g < _g1.length) {
				var l = _g1[_g];
				++_g;
				if (Reflect.compareMethods(l, listener)) return true;
			}
			return false;
		}
		, remove: function (listener) {
			var i = this.listeners.length;
			while (--i >= 0) if (Reflect.compareMethods(this.listeners[i], listener)) {
				this.listeners.splice(i, 1);
				this.priorities.splice(i, 1);
				this.repeat.splice(i, 1);
			}
		}
		, dispatch: function (a, a1) {
			var listeners = this.listeners;
			var repeat = this.repeat;
			var i = 0;
			while (i < listeners.length) {
				listeners[i](a, a1);
				if (!repeat[i]) this.remove(listeners[i]); else i++;
			}
		}
		, __class__: lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void
	};
	var lime_app_Event_$lime_$ui_$GamepadButton_$Void = function () {
		this.listeners = [];
		this.priorities = [];
		this.repeat = [];
	};
	$hxClasses["lime.app.Event_lime_ui_GamepadButton_Void"] = lime_app_Event_$lime_$ui_$GamepadButton_$Void;
	lime_app_Event_$lime_$ui_$GamepadButton_$Void.__name__ = ["lime", "app", "Event_lime_ui_GamepadButton_Void"];
	lime_app_Event_$lime_$ui_$GamepadButton_$Void.prototype = {
		add: function (listener, once, priority) {
			if (priority == null) priority = 0;
			if (once == null) once = false;
			var _g1 = 0;
			var _g = this.priorities.length;
			while (_g1 < _g) {
				var i = _g1++;
				if (priority > this.priorities[i]) {
					this.listeners.splice(i, 0, listener);
					this.priorities.splice(i, 0, priority);
					this.repeat.splice(i, 0, !once);
					return;
				}
			}
			this.listeners.push(listener);
			this.priorities.push(priority);
			this.repeat.push(!once);
		}
		, has: function (listener) {
			var _g = 0;
			var _g1 = this.listeners;
			while (_g < _g1.length) {
				var l = _g1[_g];
				++_g;
				if (Reflect.compareMethods(l, listener)) return true;
			}
			return false;
		}
		, remove: function (listener) {
			var i = this.listeners.length;
			while (--i >= 0) if (Reflect.compareMethods(this.listeners[i], listener)) {
				this.listeners.splice(i, 1);
				this.priorities.splice(i, 1);
				this.repeat.splice(i, 1);
			}
		}
		, dispatch: function (a) {
			var listeners = this.listeners;
			var repeat = this.repeat;
			var i = 0;
			while (i < listeners.length) {
				listeners[i](a);
				if (!repeat[i]) this.remove(listeners[i]); else i++;
			}
		}
		, __class__: lime_app_Event_$lime_$ui_$GamepadButton_$Void
	};
	var lime_app_Event_$lime_$ui_$Gamepad_$Void = function () {
		this.listeners = [];
		this.priorities = [];
		this.repeat = [];
	};
	$hxClasses["lime.app.Event_lime_ui_Gamepad_Void"] = lime_app_Event_$lime_$ui_$Gamepad_$Void;
	lime_app_Event_$lime_$ui_$Gamepad_$Void.__name__ = ["lime", "app", "Event_lime_ui_Gamepad_Void"];
	lime_app_Event_$lime_$ui_$Gamepad_$Void.prototype = {
		add: function (listener, once, priority) {
			if (priority == null) priority = 0;
			if (once == null) once = false;
			var _g1 = 0;
			var _g = this.priorities.length;
			while (_g1 < _g) {
				var i = _g1++;
				if (priority > this.priorities[i]) {
					this.listeners.splice(i, 0, listener);
					this.priorities.splice(i, 0, priority);
					this.repeat.splice(i, 0, !once);
					return;
				}
			}
			this.listeners.push(listener);
			this.priorities.push(priority);
			this.repeat.push(!once);
		}
		, has: function (listener) {
			var _g = 0;
			var _g1 = this.listeners;
			while (_g < _g1.length) {
				var l = _g1[_g];
				++_g;
				if (Reflect.compareMethods(l, listener)) return true;
			}
			return false;
		}
		, remove: function (listener) {
			var i = this.listeners.length;
			while (--i >= 0) if (Reflect.compareMethods(this.listeners[i], listener)) {
				this.listeners.splice(i, 1);
				this.priorities.splice(i, 1);
				this.repeat.splice(i, 1);
			}
		}
		, dispatch: function (a) {
			var listeners = this.listeners;
			var repeat = this.repeat;
			var i = 0;
			while (i < listeners.length) {
				listeners[i](a);
				if (!repeat[i]) this.remove(listeners[i]); else i++;
			}
		}
		, __class__: lime_app_Event_$lime_$ui_$Gamepad_$Void
	};
	var lime_app_Event_$lime_$ui_$Joystick_$Void = function () {
		this.listeners = [];
		this.priorities = [];
		this.repeat = [];
	};
	$hxClasses["lime.app.Event_lime_ui_Joystick_Void"] = lime_app_Event_$lime_$ui_$Joystick_$Void;
	lime_app_Event_$lime_$ui_$Joystick_$Void.__name__ = ["lime", "app", "Event_lime_ui_Joystick_Void"];
	lime_app_Event_$lime_$ui_$Joystick_$Void.prototype = {
		add: function (listener, once, priority) {
			if (priority == null) priority = 0;
			if (once == null) once = false;
			var _g1 = 0;
			var _g = this.priorities.length;
			while (_g1 < _g) {
				var i = _g1++;
				if (priority > this.priorities[i]) {
					this.listeners.splice(i, 0, listener);
					this.priorities.splice(i, 0, priority);
					this.repeat.splice(i, 0, !once);
					return;
				}
			}
			this.listeners.push(listener);
			this.priorities.push(priority);
			this.repeat.push(!once);
		}
		, has: function (listener) {
			var _g = 0;
			var _g1 = this.listeners;
			while (_g < _g1.length) {
				var l = _g1[_g];
				++_g;
				if (Reflect.compareMethods(l, listener)) return true;
			}
			return false;
		}
		, remove: function (listener) {
			var i = this.listeners.length;
			while (--i >= 0) if (Reflect.compareMethods(this.listeners[i], listener)) {
				this.listeners.splice(i, 1);
				this.priorities.splice(i, 1);
				this.repeat.splice(i, 1);
			}
		}
		, dispatch: function (a) {
			var listeners = this.listeners;
			var repeat = this.repeat;
			var i = 0;
			while (i < listeners.length) {
				listeners[i](a);
				if (!repeat[i]) this.remove(listeners[i]); else i++;
			}
		}
		, __class__: lime_app_Event_$lime_$ui_$Joystick_$Void
	};
	var lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void = function () {
		this.listeners = [];
		this.priorities = [];
		this.repeat = [];
	};
	$hxClasses["lime.app.Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"] = lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void;
	lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.__name__ = ["lime", "app", "Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"];
	lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.prototype = {
		add: function (listener, once, priority) {
			if (priority == null) priority = 0;
			if (once == null) once = false;
			var _g1 = 0;
			var _g = this.priorities.length;
			while (_g1 < _g) {
				var i = _g1++;
				if (priority > this.priorities[i]) {
					this.listeners.splice(i, 0, listener);
					this.priorities.splice(i, 0, priority);
					this.repeat.splice(i, 0, !once);
					return;
				}
			}
			this.listeners.push(listener);
			this.priorities.push(priority);
			this.repeat.push(!once);
		}
		, has: function (listener) {
			var _g = 0;
			var _g1 = this.listeners;
			while (_g < _g1.length) {
				var l = _g1[_g];
				++_g;
				if (Reflect.compareMethods(l, listener)) return true;
			}
			return false;
		}
		, remove: function (listener) {
			var i = this.listeners.length;
			while (--i >= 0) if (Reflect.compareMethods(this.listeners[i], listener)) {
				this.listeners.splice(i, 1);
				this.priorities.splice(i, 1);
				this.repeat.splice(i, 1);
			}
		}
		, dispatch: function (a, a1) {
			var listeners = this.listeners;
			var repeat = this.repeat;
			var i = 0;
			while (i < listeners.length) {
				listeners[i](a, a1);
				if (!repeat[i]) this.remove(listeners[i]); else i++;
			}
		}
		, __class__: lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void
	};
	var lime_app_Event_$lime_$ui_$Touch_$Void = function () {
		this.listeners = [];
		this.priorities = [];
		this.repeat = [];
	};
	$hxClasses["lime.app.Event_lime_ui_Touch_Void"] = lime_app_Event_$lime_$ui_$Touch_$Void;
	lime_app_Event_$lime_$ui_$Touch_$Void.__name__ = ["lime", "app", "Event_lime_ui_Touch_Void"];
	lime_app_Event_$lime_$ui_$Touch_$Void.prototype = {
		add: function (listener, once, priority) {
			if (priority == null) priority = 0;
			if (once == null) once = false;
			var _g1 = 0;
			var _g = this.priorities.length;
			while (_g1 < _g) {
				var i = _g1++;
				if (priority > this.priorities[i]) {
					this.listeners.splice(i, 0, listener);
					this.priorities.splice(i, 0, priority);
					this.repeat.splice(i, 0, !once);
					return;
				}
			}
			this.listeners.push(listener);
			this.priorities.push(priority);
			this.repeat.push(!once);
		}
		, has: function (listener) {
			var _g = 0;
			var _g1 = this.listeners;
			while (_g < _g1.length) {
				var l = _g1[_g];
				++_g;
				if (Reflect.compareMethods(l, listener)) return true;
			}
			return false;
		}
		, remove: function (listener) {
			var i = this.listeners.length;
			while (--i >= 0) if (Reflect.compareMethods(this.listeners[i], listener)) {
				this.listeners.splice(i, 1);
				this.priorities.splice(i, 1);
				this.repeat.splice(i, 1);
			}
		}
		, dispatch: function (a) {
			var listeners = this.listeners;
			var repeat = this.repeat;
			var i = 0;
			while (i < listeners.length) {
				listeners[i](a);
				if (!repeat[i]) this.remove(listeners[i]); else i++;
			}
		}
		, __class__: lime_app_Event_$lime_$ui_$Touch_$Void
	};
	var lime_app_Future = function (work) {
		if (work != null) {
			if (lime_app_Future.__threadPool == null) {
				lime_app_Future.__threadPool = new lime_system_ThreadPool();
				lime_app_Future.__threadPool.doWork.add(lime_app_Future.threadPool_doWork);
				lime_app_Future.__threadPool.onComplete.add(lime_app_Future.threadPool_onComplete);
				lime_app_Future.__threadPool.onError.add(lime_app_Future.threadPool_onError);
			}
			var promise = new lime_app_Promise();
			promise.future = this;
			lime_app_Future.__threadPool.queue({ promise: promise, work: work });
		}
	};
	$hxClasses["lime.app.Future"] = lime_app_Future;
	lime_app_Future.__name__ = ["lime", "app", "Future"];
	lime_app_Future.__threadPool = null;
	lime_app_Future.threadPool_doWork = function (state) {
		try {
			var result = state.work();
			lime_app_Future.__threadPool.sendComplete({ promise: state.promise, result: result });
		} catch (e) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			lime_app_Future.__threadPool.sendError({ promise: state.promise, error: e });
		}
	};
	lime_app_Future.threadPool_onComplete = function (state) {
		state.promise.complete(state.result);
	};
	lime_app_Future.threadPool_onError = function (state) {
		state.promise.error(state.error);
	};
	lime_app_Future.prototype = {
		onComplete: function (listener) {
			if (listener != null) {
				if (this.__completed) listener(this.value); else if (!this.__errored) {
					if (this.__completeListeners == null) this.__completeListeners = [];
					this.__completeListeners.push(listener);
				}
			}
			return this;
		}
		, onError: function (listener) {
			if (listener != null) {
				if (this.__errored) listener(this.__errorMessage); else if (!this.__completed) {
					if (this.__errorListeners == null) this.__errorListeners = [];
					this.__errorListeners.push(listener);
				}
			}
			return this;
		}
		, onProgress: function (listener) {
			if (listener != null) {
				if (this.__progressListeners == null) this.__progressListeners = [];
				this.__progressListeners.push(listener);
			}
			return this;
		}
		, then: function (next) {
			if (this.__completed) return next(this.value); else if (this.__errored) {
				var future = new lime_app_Future();
				future.onError(this.__errorMessage);
				return future;
			} else {
				var promise = new lime_app_Promise();
				this.onError($bind(promise, promise.error));
				this.onProgress($bind(promise, promise.progress));
				this.onComplete(function (val) {
					var future1 = next(val);
					future1.onError($bind(promise, promise.error));
					future1.onComplete($bind(promise, promise.complete));
				});
				return promise.future;
			}
		}
		, get_isCompleted: function () {
			return this.__completed || this.__errored;
		}
		, __class__: lime_app_Future
		, __properties__: { get_isCompleted: "get_isCompleted" }
	};
	var lime_app_Preloader = function () {
		this.total = 0;
		this.loaded = 0;
		this.onProgress = new lime_app_Event_$Int_$Int_$Void();
		this.onComplete = new lime_app_Event_$Void_$Void();
		this.onProgress.add($bind(this, this.update));
	};
	$hxClasses["lime.app.Preloader"] = lime_app_Preloader;
	lime_app_Preloader.__name__ = ["lime", "app", "Preloader"];
	lime_app_Preloader.prototype = {
		create: function (config) {
		}
		, load: function (urls, types) {
			var url = null;
			var _g1 = 0;
			var _g = urls.length;
			while (_g1 < _g) {
				var i = _g1++;
				url = urls[i];
				var _g2 = types[i];
				switch (_g2) {
					case "IMAGE":
						if (!lime_app_Preloader.images.exists(url)) {
							var image = new Image();
							lime_app_Preloader.images.set(url, image);
							image.onload = $bind(this, this.image_onLoad);
							image.src = url;
							this.total++;
						}
						break;
					case "BINARY":
						if (!lime_app_Preloader.loaders.exists(url)) {
							var loader = new lime_net_URLLoader();
							loader.set_dataFormat(lime_net_URLLoaderDataFormat.BINARY);
							lime_app_Preloader.loaders.set(url, loader);
							this.total++;
						}
						break;
					case "TEXT":
						if (!lime_app_Preloader.loaders.exists(url)) {
							var loader1 = new lime_net_URLLoader();
							lime_app_Preloader.loaders.set(url, loader1);
							this.total++;
						}
						break;
					case "FONT":
						this.total++;
						this.loadFont(url);
						break;
					default:
				}
			}
			var $it0 = lime_app_Preloader.loaders.keys();
			while ($it0.hasNext()) {
				var url1 = $it0.next();
				var loader2 = lime_app_Preloader.loaders.get(url1);
				loader2.onComplete.add($bind(this, this.loader_onComplete));
				loader2.load(new lime_net_URLRequest(url1));
			}
			if (this.total == 0) this.start();
		}
		, loadFont: function (font) {
			var _g = this;
			if (window.document.fonts && ($_ = window.document.fonts, $bind($_, $_.load))) window.document.fonts.load("1em '" + font + "'").then(function (_) {
				_g.loaded++;
				_g.onProgress.dispatch(_g.loaded, _g.total);
				if (_g.loaded == _g.total) _g.start();
			}); else {
				var node = window.document.createElement("span");
				node.innerHTML = "giItT1WQy@!-/#";
				var style = node.style;
				style.position = "absolute";
				style.left = "-10000px";
				style.top = "-10000px";
				style.fontSize = "300px";
				style.fontFamily = "sans-serif";
				style.fontVariant = "normal";
				style.fontStyle = "normal";
				style.fontWeight = "normal";
				style.letterSpacing = "0";
				window.document.body.appendChild(node);
				var width = node.offsetWidth;
				style.fontFamily = "'" + font + "', sans-serif";
				var interval = null;
				var found = false;
				var checkFont = function () {
					if (node.offsetWidth != width) {
						if (!found) {
							found = true;
							return false;
						}
						_g.loaded++;
						if (interval != null) window.clearInterval(interval);
						node.parentNode.removeChild(node);
						node = null;
						_g.onProgress.dispatch(_g.loaded, _g.total);
						if (_g.loaded == _g.total) _g.start();
						return true;
					}
					return false;
				};
				if (!checkFont()) interval = window.setInterval(checkFont, 50);
			}
		}
		, start: function () {
			this.complete = true;
			this.onComplete.dispatch();
		}
		, update: function (loaded, total) {
		}
		, image_onLoad: function (_) {
			this.loaded++;
			this.onProgress.dispatch(this.loaded, this.total);
			if (this.loaded == this.total) this.start();
		}
		, loader_onComplete: function (loader) {
			this.loaded++;
			this.onProgress.dispatch(this.loaded, this.total);
			if (this.loaded == this.total) this.start();
		}
		, __class__: lime_app_Preloader
	};
	var lime_app_Promise = function () {
		this.future = new lime_app_Future();
	};
	$hxClasses["lime.app.Promise"] = lime_app_Promise;
	lime_app_Promise.__name__ = ["lime", "app", "Promise"];
	lime_app_Promise.prototype = {
		complete: function (data) {
			if (!this.future.__errored) {
				this.future.__completed = true;
				this.future.value = data;
				if (this.future.__completeListeners != null) {
					var _g = 0;
					var _g1 = this.future.__completeListeners;
					while (_g < _g1.length) {
						var listener = _g1[_g];
						++_g;
						listener(data);
					}
					this.future.__completeListeners = null;
				}
			}
			return this;
		}
		, completeWith: function (future) {
			future.onComplete($bind(this, this.complete));
			future.onError($bind(this, this.error));
			future.onProgress($bind(this, this.progress));
			return this;
		}
		, error: function (msg) {
			if (!this.future.__completed) {
				this.future.__errored = true;
				this.future.__errorMessage = msg;
				if (this.future.__errorListeners != null) {
					var _g = 0;
					var _g1 = this.future.__errorListeners;
					while (_g < _g1.length) {
						var listener = _g1[_g];
						++_g;
						listener(msg);
					}
					this.future.__errorListeners = null;
				}
			}
			return this;
		}
		, progress: function (progress) {
			if (!this.future.__errored && !this.future.__completed) {
				if (this.future.__progressListeners != null) {
					var _g = 0;
					var _g1 = this.future.__progressListeners;
					while (_g < _g1.length) {
						var listener = _g1[_g];
						++_g;
						listener(progress);
					}
				}
			}
			return this;
		}
		, get_isCompleted: function () {
			return this.future.get_isCompleted();
		}
		, __class__: lime_app_Promise
		, __properties__: { get_isCompleted: "get_isCompleted" }
	};
	var lime_audio_ALAudioContext = function () {
		this.EXPONENT_DISTANCE_CLAMPED = 53254;
		this.EXPONENT_DISTANCE = 53253;
		this.LINEAR_DISTANCE_CLAMPED = 53252;
		this.LINEAR_DISTANCE = 53251;
		this.INVERSE_DISTANCE_CLAMPED = 53250;
		this.INVERSE_DISTANCE = 53249;
		this.DISTANCE_MODEL = 53248;
		this.DOPPLER_VELOCITY = 49153;
		this.SPEED_OF_SOUND = 49155;
		this.DOPPLER_FACTOR = 49152;
		this.EXTENSIONS = 45060;
		this.RENDERER = 45059;
		this.VERSION = 45058;
		this.VENDOR = 45057;
		this.OUT_OF_MEMORY = 40965;
		this.INVALID_OPERATION = 40964;
		this.INVALID_VALUE = 40963;
		this.INVALID_ENUM = 40962;
		this.INVALID_NAME = 40961;
		this.NO_ERROR = 0;
		this.SIZE = 8196;
		this.CHANNELS = 8195;
		this.BITS = 8194;
		this.FREQUENCY = 8193;
		this.FORMAT_STEREO16 = 4355;
		this.FORMAT_STEREO8 = 4354;
		this.FORMAT_MONO16 = 4353;
		this.FORMAT_MONO8 = 4352;
		this.UNDETERMINED = 4144;
		this.STREAMING = 4137;
		this.STATIC = 4136;
		this.SOURCE_TYPE = 4135;
		this.BYTE_OFFSET = 4134;
		this.SAMPLE_OFFSET = 4133;
		this.SEC_OFFSET = 4132;
		this.MAX_DISTANCE = 4131;
		this.CONE_OUTER_GAIN = 4130;
		this.ROLLOFF_FACTOR = 4129;
		this.REFERENCE_DISTANCE = 4128;
		this.BUFFERS_PROCESSED = 4118;
		this.BUFFERS_QUEUED = 4117;
		this.STOPPED = 4116;
		this.PAUSED = 4115;
		this.PLAYING = 4114;
		this.INITIAL = 4113;
		this.SOURCE_STATE = 4112;
		this.ORIENTATION = 4111;
		this.MAX_GAIN = 4110;
		this.MIN_GAIN = 4109;
		this.GAIN = 4106;
		this.BUFFER = 4105;
		this.LOOPING = 4103;
		this.VELOCITY = 4102;
		this.DIRECTION = 4101;
		this.POSITION = 4100;
		this.PITCH = 4099;
		this.CONE_OUTER_ANGLE = 4098;
		this.CONE_INNER_ANGLE = 4097;
		this.SOURCE_RELATIVE = 514;
		this.TRUE = 1;
		this.FALSE = 0;
		this.NONE = 0;
	};
	$hxClasses["lime.audio.ALAudioContext"] = lime_audio_ALAudioContext;
	lime_audio_ALAudioContext.__name__ = ["lime", "audio", "ALAudioContext"];
	lime_audio_ALAudioContext.prototype = {
		bufferData: function (buffer, format, data, size, freq) {
			lime_audio_openal_AL.bufferData(buffer, format, data, size, freq);
		}
		, buffer3f: function (buffer, param, value1, value2, value3) {
			lime_audio_openal_AL.buffer3f(buffer, param, value1, value2, value3);
		}
		, buffer3i: function (buffer, param, value1, value2, value3) {
			lime_audio_openal_AL.buffer3i(buffer, param, value1, value2, value3);
		}
		, bufferf: function (buffer, param, value) {
			lime_audio_openal_AL.bufferf(buffer, param, value);
		}
		, bufferfv: function (buffer, param, values) {
			lime_audio_openal_AL.bufferfv(buffer, param, values);
		}
		, bufferi: function (buffer, param, value) {
			lime_audio_openal_AL.bufferi(buffer, param, value);
		}
		, bufferiv: function (buffer, param, values) {
			lime_audio_openal_AL.bufferiv(buffer, param, values);
		}
		, deleteBuffer: function (buffer) {
			lime_audio_openal_AL.deleteBuffer(buffer);
		}
		, deleteBuffers: function (buffers) {
			lime_audio_openal_AL.deleteBuffers(buffers);
		}
		, deleteSource: function (source) {
			lime_audio_openal_AL.deleteSource(source);
		}
		, deleteSources: function (sources) {
			lime_audio_openal_AL.deleteSources(sources);
		}
		, disable: function (capability) {
			lime_audio_openal_AL.disable(capability);
		}
		, distanceModel: function (distanceModel) {
			lime_audio_openal_AL.distanceModel(distanceModel);
		}
		, dopplerFactor: function (value) {
			lime_audio_openal_AL.dopplerFactor(value);
		}
		, dopplerVelocity: function (value) {
			lime_audio_openal_AL.dopplerVelocity(value);
		}
		, enable: function (capability) {
			lime_audio_openal_AL.enable(capability);
		}
		, genSource: function () {
			return lime_audio_openal_AL.genSource();
		}
		, genSources: function (n) {
			return lime_audio_openal_AL.genSources(n);
		}
		, genBuffer: function () {
			return lime_audio_openal_AL.genBuffer();
		}
		, genBuffers: function (n) {
			return lime_audio_openal_AL.genBuffers(n);
		}
		, getBoolean: function (param) {
			return lime_audio_openal_AL.getBoolean(param);
		}
		, getBooleanv: function (param, count) {
			if (count == null) count = 1;
			return lime_audio_openal_AL.getBooleanv(param, count);
		}
		, getBuffer3f: function (buffer, param) {
			return lime_audio_openal_AL.getBuffer3f(buffer, param);
		}
		, getBuffer3i: function (buffer, param) {
			return lime_audio_openal_AL.getBuffer3i(buffer, param);
		}
		, getBufferf: function (buffer, param) {
			return lime_audio_openal_AL.getBufferf(buffer, param);
		}
		, getBufferfv: function (buffer, param, count) {
			if (count == null) count = 1;
			return lime_audio_openal_AL.getBufferfv(buffer, param, count);
		}
		, getBufferi: function (buffer, param) {
			return lime_audio_openal_AL.getBufferi(buffer, param);
		}
		, getBufferiv: function (buffer, param, count) {
			if (count == null) count = 1;
			return lime_audio_openal_AL.getBufferiv(buffer, param, count);
		}
		, getDouble: function (param) {
			return lime_audio_openal_AL.getDouble(param);
		}
		, getDoublev: function (param, count) {
			if (count == null) count = 1;
			return lime_audio_openal_AL.getDoublev(param, count);
		}
		, getEnumValue: function (ename) {
			return lime_audio_openal_AL.getEnumValue(ename);
		}
		, getError: function () {
			return lime_audio_openal_AL.getError();
		}
		, getErrorString: function () {
			return lime_audio_openal_AL.getErrorString();
		}
		, getFloat: function (param) {
			return lime_audio_openal_AL.getFloat(param);
		}
		, getFloatv: function (param, count) {
			if (count == null) count = 1;
			return lime_audio_openal_AL.getFloatv(param, count);
		}
		, getInteger: function (param) {
			return lime_audio_openal_AL.getInteger(param);
		}
		, getIntegerv: function (param, count) {
			if (count == null) count = 1;
			return lime_audio_openal_AL.getIntegerv(param, count);
		}
		, getListener3f: function (param) {
			return lime_audio_openal_AL.getListener3f(param);
		}
		, getListener3i: function (param) {
			return lime_audio_openal_AL.getListener3i(param);
		}
		, getListenerf: function (param) {
			return lime_audio_openal_AL.getListenerf(param);
		}
		, getListenerfv: function (param, count) {
			if (count == null) count = 1;
			return lime_audio_openal_AL.getListenerfv(param, count);
		}
		, getListeneri: function (param) {
			return lime_audio_openal_AL.getListeneri(param);
		}
		, getListeneriv: function (param, count) {
			if (count == null) count = 1;
			return lime_audio_openal_AL.getListeneriv(param, count);
		}
		, getProcAddress: function (fname) {
			return lime_audio_openal_AL.getProcAddress(fname);
		}
		, getSource3f: function (source, param) {
			return lime_audio_openal_AL.getSource3f(source, param);
		}
		, getSourcef: function (source, param) {
			return lime_audio_openal_AL.getSourcef(source, param);
		}
		, getSource3i: function (source, param) {
			return lime_audio_openal_AL.getSource3i(source, param);
		}
		, getSourcefv: function (source, param, count) {
			if (count == null) count = 1;
			return lime_audio_openal_AL.getSourcefv(source, param);
		}
		, getSourcei: function (source, param) {
			return lime_audio_openal_AL.getSourcei(source, param);
		}
		, getSourceiv: function (source, param, count) {
			if (count == null) count = 1;
			return lime_audio_openal_AL.getSourceiv(source, param, count);
		}
		, getString: function (param) {
			return lime_audio_openal_AL.getString(param);
		}
		, isBuffer: function (buffer) {
			return lime_audio_openal_AL.isBuffer(buffer);
		}
		, isEnabled: function (capability) {
			return lime_audio_openal_AL.isEnabled(capability);
		}
		, isExtensionPresent: function (extname) {
			return lime_audio_openal_AL.isExtensionPresent(extname);
		}
		, isSource: function (source) {
			return lime_audio_openal_AL.isSource(source);
		}
		, listener3f: function (param, value1, value2, value3) {
			lime_audio_openal_AL.listener3f(param, value1, value2, value3);
		}
		, listener3i: function (param, value1, value2, value3) {
			lime_audio_openal_AL.listener3i(param, value1, value2, value3);
		}
		, listenerf: function (param, value) {
			lime_audio_openal_AL.listenerf(param, value);
		}
		, listenerfv: function (param, values) {
			lime_audio_openal_AL.listenerfv(param, values);
		}
		, listeneri: function (param, value) {
			lime_audio_openal_AL.listeneri(param, value);
		}
		, listeneriv: function (param, values) {
			lime_audio_openal_AL.listeneriv(param, values);
		}
		, source3f: function (source, param, value1, value2, value3) {
			lime_audio_openal_AL.source3f(source, param, value1, value2, value3);
		}
		, source3i: function (source, param, value1, value2, value3) {
			lime_audio_openal_AL.source3i(source, param, value1, value2, value3);
		}
		, sourcef: function (source, param, value) {
			lime_audio_openal_AL.sourcef(source, param, value);
		}
		, sourcefv: function (source, param, values) {
			lime_audio_openal_AL.sourcefv(source, param, values);
		}
		, sourcei: function (source, param, value) {
			lime_audio_openal_AL.sourcei(source, param, value);
		}
		, sourceiv: function (source, param, values) {
			lime_audio_openal_AL.sourceiv(source, param, values);
		}
		, sourcePlay: function (source) {
			lime_audio_openal_AL.sourcePlay(source);
		}
		, sourcePlayv: function (sources) {
			lime_audio_openal_AL.sourcePlayv(sources);
		}
		, sourceStop: function (source) {
			lime_audio_openal_AL.sourceStop(source);
		}
		, sourceStopv: function (sources) {
			lime_audio_openal_AL.sourceStopv(sources);
		}
		, sourceRewind: function (source) {
			lime_audio_openal_AL.sourceRewind(source);
		}
		, sourceRewindv: function (sources) {
			lime_audio_openal_AL.sourceRewindv(sources);
		}
		, sourcePause: function (source) {
			lime_audio_openal_AL.sourcePause(source);
		}
		, sourcePausev: function (sources) {
			lime_audio_openal_AL.sourcePausev(sources);
		}
		, sourceQueueBuffer: function (source, buffer) {
			lime_audio_openal_AL.sourceQueueBuffer(source, buffer);
		}
		, sourceQueueBuffers: function (source, nb, buffers) {
			lime_audio_openal_AL.sourceQueueBuffers(source, nb, buffers);
		}
		, sourceUnqueueBuffer: function (source) {
			return lime_audio_openal_AL.sourceUnqueueBuffer(source);
		}
		, sourceUnqueueBuffers: function (source, nb) {
			return lime_audio_openal_AL.sourceUnqueueBuffers(source, nb);
		}
		, speedOfSound: function (value) {
			lime_audio_openal_AL.speedOfSound(value);
		}
		, __class__: lime_audio_ALAudioContext
	};
	var lime_audio_ALCAudioContext = function () {
		this.ALL_DEVICES_SPECIFIER = 4115;
		this.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
		this.ENUMERATE_ALL_EXT = 1;
		this.EXTENSIONS = 4102;
		this.DEVICE_SPECIFIER = 4101;
		this.DEFAULT_DEVICE_SPECIFIER = 4100;
		this.ALL_ATTRIBUTES = 4099;
		this.ATTRIBUTES_SIZE = 4098;
		this.OUT_OF_MEMORY = 40965;
		this.INVALID_VALUE = 40964;
		this.INVALID_ENUM = 40963;
		this.INVALID_CONTEXT = 40962;
		this.INVALID_DEVICE = 40961;
		this.NO_ERROR = 0;
		this.STEREO_SOURCES = 4113;
		this.MONO_SOURCES = 4112;
		this.SYNC = 4105;
		this.REFRESH = 4104;
		this.FREQUENCY = 4103;
		this.TRUE = 1;
		this.FALSE = 0;
	};
	$hxClasses["lime.audio.ALCAudioContext"] = lime_audio_ALCAudioContext;
	lime_audio_ALCAudioContext.__name__ = ["lime", "audio", "ALCAudioContext"];
	lime_audio_ALCAudioContext.prototype = {
		closeDevice: function (device) {
			return lime_audio_openal_ALC.closeDevice(device);
		}
		, createContext: function (device, attrlist) {
			return lime_audio_openal_ALC.createContext(device, attrlist);
		}
		, destroyContext: function (context) {
			lime_audio_openal_ALC.destroyContext(context);
		}
		, getContextsDevice: function (context) {
			return lime_audio_openal_ALC.getContextsDevice(context);
		}
		, getCurrentContext: function () {
			return lime_audio_openal_ALC.getCurrentContext();
		}
		, getError: function (device) {
			return lime_audio_openal_ALC.getError(device);
		}
		, getErrorString: function (device) {
			return lime_audio_openal_ALC.getErrorString(device);
		}
		, getIntegerv: function (device, param, count) {
			if (count == null) count = 1;
			return lime_audio_openal_ALC.getIntegerv(device, param, count);
		}
		, getString: function (device, param) {
			return lime_audio_openal_ALC.getString(device, param);
		}
		, makeContextCurrent: function (context) {
			return lime_audio_openal_ALC.makeContextCurrent(context);
		}
		, openDevice: function (deviceName) {
			return lime_audio_openal_ALC.openDevice(deviceName);
		}
		, processContext: function (context) {
			lime_audio_openal_ALC.processContext(context);
		}
		, suspendContext: function (context) {
			lime_audio_openal_ALC.suspendContext(context);
		}
		, __class__: lime_audio_ALCAudioContext
	};
	var lime_audio_AudioBuffer = function () {
		this.id = 0;
	};
	$hxClasses["lime.audio.AudioBuffer"] = lime_audio_AudioBuffer;
	lime_audio_AudioBuffer.__name__ = ["lime", "audio", "AudioBuffer"];
	lime_audio_AudioBuffer.fromBytes = function (bytes) {
		return null;
	};
	lime_audio_AudioBuffer.fromFile = function (path) {
		return null;
	};
	lime_audio_AudioBuffer.fromURL = function (url, handler) {
		if (url != null && url.indexOf("http://") == -1 && url.indexOf("https://") == -1) handler(lime_audio_AudioBuffer.fromFile(url)); else {
			var loader = new lime_net_URLLoader();
			loader.onComplete.add(function (_) {
				var bytes = haxe_io_Bytes.ofString(loader.data);
				handler(lime_audio_AudioBuffer.fromBytes(lime_utils_ByteArray.fromBytes(bytes)));
			});
			loader.onIOError.add(function (_1, msg) {
				handler(null);
			});
			loader.load(new lime_net_URLRequest(url));
		}
	};
	lime_audio_AudioBuffer.prototype = {
		dispose: function () {
		}
		, __class__: lime_audio_AudioBuffer
	};
	var lime_audio_AudioContext = $hxClasses["lime.audio.AudioContext"] = { __ename__: ["lime", "audio", "AudioContext"], __constructs__: ["OPENAL", "HTML5", "WEB", "FLASH", "CUSTOM"] };
	lime_audio_AudioContext.OPENAL = function (alc, al) { var $x = ["OPENAL", 0, alc, al]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
	lime_audio_AudioContext.HTML5 = function (context) { var $x = ["HTML5", 1, context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
	lime_audio_AudioContext.WEB = function (context) { var $x = ["WEB", 2, context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
	lime_audio_AudioContext.FLASH = function (context) { var $x = ["FLASH", 3, context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
	lime_audio_AudioContext.CUSTOM = function (data) { var $x = ["CUSTOM", 4, data]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
	var lime_audio_AudioManager = function () { };
	$hxClasses["lime.audio.AudioManager"] = lime_audio_AudioManager;
	lime_audio_AudioManager.__name__ = ["lime", "audio", "AudioManager"];
	lime_audio_AudioManager.context = null;
	lime_audio_AudioManager.init = function (context) {
		if (lime_audio_AudioManager.context == null) {
			if (context == null) try {
				window.AudioContext = window.AudioContext || window.webkitAudioContext;;
				lime_audio_AudioManager.context = lime_audio_AudioContext.WEB(new AudioContext());
			} catch (e) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				lime_audio_AudioManager.context = lime_audio_AudioContext.HTML5(new lime_audio_HTML5AudioContext());
			} else lime_audio_AudioManager.context = context;
		}
	};
	lime_audio_AudioManager.resume = function () {
		if (lime_audio_AudioManager.context != null) {
			var _g = lime_audio_AudioManager.context;
			switch (_g[1]) {
				case 0:
					var al = _g[3];
					var alc = _g[2];
					alc.processContext(alc.getCurrentContext());
					break;
				default:
			}
		}
	};
	lime_audio_AudioManager.shutdown = function () {
		if (lime_audio_AudioManager.context != null) {
			var _g = lime_audio_AudioManager.context;
			switch (_g[1]) {
				case 0:
					var al = _g[3];
					var alc = _g[2];
					var currentContext = alc.getCurrentContext();
					if (currentContext != null) {
						var device = alc.getContextsDevice(currentContext);
						alc.makeContextCurrent(null);
						alc.destroyContext(currentContext);
						alc.closeDevice(device);
					}
					break;
				default:
			}
		}
	};
	lime_audio_AudioManager.suspend = function () {
		if (lime_audio_AudioManager.context != null) {
			var _g = lime_audio_AudioManager.context;
			switch (_g[1]) {
				case 0:
					var al = _g[3];
					var alc = _g[2];
					alc.suspendContext(alc.getCurrentContext());
					break;
				default:
			}
		}
	};
	var lime_audio_AudioSource = function (buffer, offset, length, loops) {
		if (loops == null) loops = 0;
		if (offset == null) offset = 0;
		this.onComplete = new lime_app_Event_$Void_$Void();
		this.buffer = buffer;
		this.offset = offset;
		if (length != null && length != 0) this.set_length(length);
		this.__loops = loops;
		this.id = 0;
		if (buffer != null) this.init();
	};
	$hxClasses["lime.audio.AudioSource"] = lime_audio_AudioSource;
	lime_audio_AudioSource.__name__ = ["lime", "audio", "AudioSource"];
	lime_audio_AudioSource.prototype = {
		dispose: function () {
			{
				var _g = lime_audio_AudioManager.context;
				switch (_g[1]) {
					case 0:
						var al = _g[3];
						var alc = _g[2];
						if (this.id != 0) al.deleteSource(this.id);
						break;
					default:
				}
			}
		}
		, init: function () {
			{
				var _g = lime_audio_AudioManager.context;
				switch (_g[1]) {
					case 0:
						var al = _g[3];
						var alc = _g[2];
						if (this.buffer.id == 0) {
							this.buffer.id = al.genBuffer();
							var format = 0;
							if (this.buffer.channels == 1) {
								if (this.buffer.bitsPerSample == 8) format = al.FORMAT_MONO8; else if (this.buffer.bitsPerSample == 16) format = al.FORMAT_MONO16;
							} else if (this.buffer.channels == 2) {
								if (this.buffer.bitsPerSample == 8) format = al.FORMAT_STEREO8; else if (this.buffer.bitsPerSample == 16) format = al.FORMAT_STEREO16;
							}
							al.bufferData(this.buffer.id, format, this.buffer.data, this.buffer.data.length, this.buffer.sampleRate);
						}
						this.id = al.genSource();
						al.sourcei(this.id, al.BUFFER, this.buffer.id);
						break;
					default:
				}
			}
		}
		, play: function () {
		}
		, pause: function () {
		}
		, stop: function () {
		}
		, timer_onRun: function () {
		}
		, get_currentTime: function () {
			return 0;
		}
		, set_currentTime: function (value) {
			return this.pauseTime = value;
		}
		, get_gain: function () {
			return 1;
		}
		, set_gain: function (value) {
			return 1;
		}
		, get_loops: function () {
			return this.__loops;
		}
		, set_loops: function (loops) {
			return this.__loops = loops;
		}
		, get_length: function () {
			if (this.__length != null) return this.__length;
			return 0;
		}
		, set_length: function (value) {
			return this.__length = value;
		}
		, __class__: lime_audio_AudioSource
		, __properties__: { set_loops: "set_loops", get_loops: "get_loops", set_length: "set_length", get_length: "get_length", set_gain: "set_gain", get_gain: "get_gain", set_currentTime: "set_currentTime", get_currentTime: "get_currentTime" }
	};
	var lime_audio_FlashAudioContext = function () {
	};
	$hxClasses["lime.audio.FlashAudioContext"] = lime_audio_FlashAudioContext;
	lime_audio_FlashAudioContext.__name__ = ["lime", "audio", "FlashAudioContext"];
	lime_audio_FlashAudioContext.prototype = {
		createBuffer: function (stream, context) {
			return null;
		}
		, getBytesLoaded: function (buffer) {
			return 0;
		}
		, getBytesTotal: function (buffer) {
			return 0;
		}
		, getID3: function (buffer) {
			return null;
		}
		, getIsBuffering: function (buffer) {
			return false;
		}
		, getIsURLInaccessible: function (buffer) {
			return false;
		}
		, getLength: function (buffer) {
			return 0;
		}
		, getURL: function (buffer) {
			return null;
		}
		, close: function (buffer) {
		}
		, extract: function (buffer, target, length, startPosition) {
			if (startPosition == null) startPosition = -1;
			return 0;
		}
		, load: function (buffer, stream, context) {
		}
		, loadCompressedDataFromByteArray: function (buffer, bytes, bytesLength) {
		}
		, loadPCMFromByteArray: function (buffer, bytes, samples, format, stereo, sampleRate) {
			if (sampleRate == null) sampleRate = 44100;
			if (stereo == null) stereo = true;
		}
		, play: function (buffer, startTime, loops, sndTransform) {
			if (loops == null) loops = 0;
			if (startTime == null) startTime = 0;
			return null;
		}
		, __class__: lime_audio_FlashAudioContext
	};
	var lime_audio_HTML5AudioContext = function () {
		this.NETWORK_NO_SOURCE = 3;
		this.NETWORK_LOADING = 2;
		this.NETWORK_IDLE = 1;
		this.NETWORK_EMPTY = 0;
		this.HAVE_NOTHING = 0;
		this.HAVE_METADATA = 1;
		this.HAVE_FUTURE_DATA = 3;
		this.HAVE_ENOUGH_DATA = 4;
		this.HAVE_CURRENT_DATA = 2;
	};
	$hxClasses["lime.audio.HTML5AudioContext"] = lime_audio_HTML5AudioContext;
	lime_audio_HTML5AudioContext.__name__ = ["lime", "audio", "HTML5AudioContext"];
	lime_audio_HTML5AudioContext.prototype = {
		canPlayType: function (buffer, type) {
			if (buffer.src != null) return buffer.src.canPlayType(type);
			return null;
		}
		, createBuffer: function (urlString) {
			var buffer = new lime_audio_AudioBuffer();
			buffer.src = new Audio();
			buffer.src.src = urlString;
			return buffer;
		}
		, getAutoplay: function (buffer) {
			if (buffer.src != null) return buffer.src.autoplay;
			return false;
		}
		, getBuffered: function (buffer) {
			if (buffer.src != null) return buffer.src.buffered;
			return null;
		}
		, getCurrentSrc: function (buffer) {
			if (buffer.src != null) return buffer.src.currentSrc;
			return null;
		}
		, getCurrentTime: function (buffer) {
			if (buffer.src != null) return buffer.src.currentTime;
			return 0;
		}
		, getDefaultPlaybackRate: function (buffer) {
			if (buffer.src != null) return buffer.src.defaultPlaybackRate;
			return 1;
		}
		, getDuration: function (buffer) {
			if (buffer.src != null) return buffer.src.duration;
			return 0;
		}
		, getEnded: function (buffer) {
			if (buffer.src != null) return buffer.src.ended;
			return false;
		}
		, getError: function (buffer) {
			if (buffer.src != null) return buffer.src.error;
			return null;
		}
		, getLoop: function (buffer) {
			if (buffer.src != null) return buffer.src.loop;
			return false;
		}
		, getMuted: function (buffer) {
			if (buffer.src != null) return buffer.src.muted;
			return false;
		}
		, getNetworkState: function (buffer) {
			if (buffer.src != null) return buffer.src.networkState;
			return 0;
		}
		, getPaused: function (buffer) {
			if (buffer.src != null) return buffer.src.paused;
			return false;
		}
		, getPlaybackRate: function (buffer) {
			if (buffer.src != null) return buffer.src.playbackRate;
			return 1;
		}
		, getPlayed: function (buffer) {
			if (buffer.src != null) return buffer.src.played;
			return null;
		}
		, getPreload: function (buffer) {
			if (buffer.src != null) return buffer.src.preload;
			return null;
		}
		, getReadyState: function (buffer) {
			if (buffer.src != null) return buffer.src.readyState;
			return 0;
		}
		, getSeekable: function (buffer) {
			if (buffer.src != null) return buffer.src.seekable;
			return null;
		}
		, getSeeking: function (buffer) {
			if (buffer.src != null) return buffer.src.seeking;
			return false;
		}
		, getSrc: function (buffer) {
			if (buffer.src != null) return buffer.src.src;
			return null;
		}
		, getStartTime: function (buffer) {
			if (buffer.src != null) return buffer.src.playbackRate;
			return 0;
		}
		, getVolume: function (buffer) {
			if (buffer.src != null) return buffer.src.volume;
			return 1;
		}
		, load: function (buffer) {
			if (buffer.src != null) return buffer.src.load();
		}
		, pause: function (buffer) {
			if (buffer.src != null) return buffer.src.pause();
		}
		, play: function (buffer) {
			if (buffer.src != null) return buffer.src.play();
		}
		, setAutoplay: function (buffer, value) {
			if (buffer.src != null) buffer.src.autoplay = value;
		}
		, setCurrentTime: function (buffer, value) {
			if (buffer.src != null) buffer.src.currentTime = value;
		}
		, setDefaultPlaybackRate: function (buffer, value) {
			if (buffer.src != null) buffer.src.defaultPlaybackRate = value;
		}
		, setLoop: function (buffer, value) {
			if (buffer.src != null) buffer.src.loop = value;
		}
		, setMuted: function (buffer, value) {
			if (buffer.src != null) buffer.src.muted = value;
		}
		, setPlaybackRate: function (buffer, value) {
			if (buffer.src != null) buffer.src.playbackRate = value;
		}
		, setPreload: function (buffer, value) {
			if (buffer.src != null) buffer.src.preload = value;
		}
		, setSrc: function (buffer, value) {
			if (buffer.src != null) buffer.src.src = value;
		}
		, setVolume: function (buffer, value) {
			if (buffer.src != null) buffer.src.volume = value;
		}
		, __class__: lime_audio_HTML5AudioContext
	};
	var lime_audio_openal_AL = function () { };
	$hxClasses["lime.audio.openal.AL"] = lime_audio_openal_AL;
	lime_audio_openal_AL.__name__ = ["lime", "audio", "openal", "AL"];
	lime_audio_openal_AL.bufferData = function (buffer, format, data, size, freq) {
	};
	lime_audio_openal_AL.buffer3f = function (buffer, param, value1, value2, value3) {
	};
	lime_audio_openal_AL.buffer3i = function (buffer, param, value1, value2, value3) {
	};
	lime_audio_openal_AL.bufferf = function (buffer, param, value) {
	};
	lime_audio_openal_AL.bufferfv = function (buffer, param, values) {
	};
	lime_audio_openal_AL.bufferi = function (buffer, param, value) {
	};
	lime_audio_openal_AL.bufferiv = function (buffer, param, values) {
	};
	lime_audio_openal_AL.deleteBuffer = function (buffer) {
	};
	lime_audio_openal_AL.deleteBuffers = function (buffers) {
	};
	lime_audio_openal_AL.deleteSource = function (source) {
	};
	lime_audio_openal_AL.deleteSources = function (sources) {
	};
	lime_audio_openal_AL.disable = function (capability) {
	};
	lime_audio_openal_AL.distanceModel = function (distanceModel) {
	};
	lime_audio_openal_AL.dopplerFactor = function (value) {
	};
	lime_audio_openal_AL.dopplerVelocity = function (value) {
	};
	lime_audio_openal_AL.enable = function (capability) {
	};
	lime_audio_openal_AL.genSource = function () {
		return 0;
	};
	lime_audio_openal_AL.genSources = function (n) {
		return null;
	};
	lime_audio_openal_AL.genBuffer = function () {
		return 0;
	};
	lime_audio_openal_AL.genBuffers = function (n) {
		return null;
	};
	lime_audio_openal_AL.getBoolean = function (param) {
		return false;
	};
	lime_audio_openal_AL.getBooleanv = function (param, count) {
		if (count == null) count = 1;
		return null;
	};
	lime_audio_openal_AL.getBuffer3f = function (buffer, param) {
		return null;
	};
	lime_audio_openal_AL.getBuffer3i = function (buffer, param) {
		return null;
	};
	lime_audio_openal_AL.getBufferf = function (buffer, param) {
		return 0;
	};
	lime_audio_openal_AL.getBufferfv = function (buffer, param, count) {
		if (count == null) count = 1;
		return null;
	};
	lime_audio_openal_AL.getBufferi = function (buffer, param) {
		return 0;
	};
	lime_audio_openal_AL.getBufferiv = function (buffer, param, count) {
		if (count == null) count = 1;
		return null;
	};
	lime_audio_openal_AL.getDouble = function (param) {
		return 0;
	};
	lime_audio_openal_AL.getDoublev = function (param, count) {
		if (count == null) count = 1;
		return null;
	};
	lime_audio_openal_AL.getEnumValue = function (ename) {
		return 0;
	};
	lime_audio_openal_AL.getError = function () {
		return 0;
	};
	lime_audio_openal_AL.getErrorString = function () {
		var _g = lime_audio_openal_AL.getError();
		switch (_g) {
			case 40961:
				return "INVALID_NAME: Invalid parameter name";
			case 40962:
				return "INVALID_ENUM: Invalid enum value";
			case 40963:
				return "INVALID_VALUE: Invalid parameter value";
			case 40964:
				return "INVALID_OPERATION: Illegal operation or call";
			case 40965:
				return "OUT_OF_MEMORY: OpenAL has run out of memory";
			default:
				return "";
		}
	};
	lime_audio_openal_AL.getFloat = function (param) {
		return 0;
	};
	lime_audio_openal_AL.getFloatv = function (param, count) {
		if (count == null) count = 1;
		return null;
	};
	lime_audio_openal_AL.getInteger = function (param) {
		return 0;
	};
	lime_audio_openal_AL.getIntegerv = function (param, count) {
		if (count == null) count = 1;
		return null;
	};
	lime_audio_openal_AL.getListener3f = function (param) {
		return null;
	};
	lime_audio_openal_AL.getListener3i = function (param) {
		return null;
	};
	lime_audio_openal_AL.getListenerf = function (param) {
		return 0;
	};
	lime_audio_openal_AL.getListenerfv = function (param, count) {
		if (count == null) count = 1;
		return null;
	};
	lime_audio_openal_AL.getListeneri = function (param) {
		return 0;
	};
	lime_audio_openal_AL.getListeneriv = function (param, count) {
		if (count == null) count = 1;
		return null;
	};
	lime_audio_openal_AL.getProcAddress = function (fname) {
		return null;
	};
	lime_audio_openal_AL.getSource3f = function (source, param) {
		return null;
	};
	lime_audio_openal_AL.getSourcef = function (source, param) {
		return 0;
	};
	lime_audio_openal_AL.getSource3i = function (source, param) {
		return null;
	};
	lime_audio_openal_AL.getSourcefv = function (source, param, count) {
		if (count == null) count = 1;
		return null;
	};
	lime_audio_openal_AL.getSourcei = function (source, param) {
		return 0;
	};
	lime_audio_openal_AL.getSourceiv = function (source, param, count) {
		if (count == null) count = 1;
		return null;
	};
	lime_audio_openal_AL.getString = function (param) {
		return null;
	};
	lime_audio_openal_AL.isBuffer = function (buffer) {
		return false;
	};
	lime_audio_openal_AL.isEnabled = function (capability) {
		return false;
	};
	lime_audio_openal_AL.isExtensionPresent = function (extname) {
		return false;
	};
	lime_audio_openal_AL.isSource = function (source) {
		return false;
	};
	lime_audio_openal_AL.listener3f = function (param, value1, value2, value3) {
	};
	lime_audio_openal_AL.listener3i = function (param, value1, value2, value3) {
	};
	lime_audio_openal_AL.listenerf = function (param, value) {
	};
	lime_audio_openal_AL.listenerfv = function (param, values) {
	};
	lime_audio_openal_AL.listeneri = function (param, value) {
	};
	lime_audio_openal_AL.listeneriv = function (param, values) {
	};
	lime_audio_openal_AL.source3f = function (source, param, value1, value2, value3) {
	};
	lime_audio_openal_AL.source3i = function (source, param, value1, value2, value3) {
	};
	lime_audio_openal_AL.sourcef = function (source, param, value) {
	};
	lime_audio_openal_AL.sourcefv = function (source, param, values) {
	};
	lime_audio_openal_AL.sourcei = function (source, param, value) {
	};
	lime_audio_openal_AL.sourceiv = function (source, param, values) {
	};
	lime_audio_openal_AL.sourcePlay = function (source) {
	};
	lime_audio_openal_AL.sourcePlayv = function (sources) {
	};
	lime_audio_openal_AL.sourceStop = function (source) {
	};
	lime_audio_openal_AL.sourceStopv = function (sources) {
	};
	lime_audio_openal_AL.sourceRewind = function (source) {
	};
	lime_audio_openal_AL.sourceRewindv = function (sources) {
	};
	lime_audio_openal_AL.sourcePause = function (source) {
	};
	lime_audio_openal_AL.sourcePausev = function (sources) {
	};
	lime_audio_openal_AL.sourceQueueBuffer = function (source, buffer) {
	};
	lime_audio_openal_AL.sourceQueueBuffers = function (source, nb, buffers) {
	};
	lime_audio_openal_AL.sourceUnqueueBuffer = function (source) {
		return 0;
	};
	lime_audio_openal_AL.sourceUnqueueBuffers = function (source, nb) {
		return null;
	};
	lime_audio_openal_AL.speedOfSound = function (value) {
	};
	var lime_audio_openal_ALC = function () { };
	$hxClasses["lime.audio.openal.ALC"] = lime_audio_openal_ALC;
	lime_audio_openal_ALC.__name__ = ["lime", "audio", "openal", "ALC"];
	lime_audio_openal_ALC.closeDevice = function (device) {
		return false;
	};
	lime_audio_openal_ALC.createContext = function (device, attrlist) {
		return null;
	};
	lime_audio_openal_ALC.destroyContext = function (context) {
	};
	lime_audio_openal_ALC.getContextsDevice = function (context) {
		return null;
	};
	lime_audio_openal_ALC.getCurrentContext = function () {
		return null;
	};
	lime_audio_openal_ALC.getError = function (device) {
		return 0;
	};
	lime_audio_openal_ALC.getErrorString = function (device) {
		var _g = lime_audio_openal_ALC.getError(device);
		switch (_g) {
			case 40961:
				return "INVALID_DEVICE: Invalid device (or no device?)";
			case 40962:
				return "INVALID_CONTEXT: Invalid context (or no context?)";
			case 40963:
				return "INVALID_ENUM: Invalid enum value";
			case 40964:
				return "INVALID_VALUE: Invalid param value";
			case 40965:
				return "OUT_OF_MEMORY: OpenAL has run out of memory";
			default:
				return "";
		}
	};
	lime_audio_openal_ALC.getIntegerv = function (device, param, size) {
		return null;
	};
	lime_audio_openal_ALC.getString = function (device, param) {
		return null;
	};
	lime_audio_openal_ALC.makeContextCurrent = function (context) {
		return false;
	};
	lime_audio_openal_ALC.openDevice = function (deviceName) {
		return null;
	};
	lime_audio_openal_ALC.processContext = function (context) {
	};
	lime_audio_openal_ALC.suspendContext = function (context) {
	};
	var lime_audio_openal__$ALContext_ALContext_$Impl_$ = {};
	$hxClasses["lime.audio.openal._ALContext.ALContext_Impl_"] = lime_audio_openal__$ALContext_ALContext_$Impl_$;
	lime_audio_openal__$ALContext_ALContext_$Impl_$.__name__ = ["lime", "audio", "openal", "_ALContext", "ALContext_Impl_"];
	lime_audio_openal__$ALContext_ALContext_$Impl_$._new = function (handle) {
		return handle;
	};
	var lime_audio_openal__$ALDevice_ALDevice_$Impl_$ = {};
	$hxClasses["lime.audio.openal._ALDevice.ALDevice_Impl_"] = lime_audio_openal__$ALDevice_ALDevice_$Impl_$;
	lime_audio_openal__$ALDevice_ALDevice_$Impl_$.__name__ = ["lime", "audio", "openal", "_ALDevice", "ALDevice_Impl_"];
	lime_audio_openal__$ALDevice_ALDevice_$Impl_$._new = function (handle) {
		return handle;
	};
	var lime_graphics_ConsoleRenderContext = function () {
	};
	$hxClasses["lime.graphics.ConsoleRenderContext"] = lime_graphics_ConsoleRenderContext;
	lime_graphics_ConsoleRenderContext.__name__ = ["lime", "graphics", "ConsoleRenderContext"];
	lime_graphics_ConsoleRenderContext.prototype = {
		createIndexBuffer: function (indices, count) {
			return new lime_graphics_console_IndexBuffer();
		}
		, createVertexBuffer: function (decl, count) {
			return new lime_graphics_console_VertexBuffer();
		}
		, lookupShader: function (name) {
			return new lime_graphics_console_Shader();
		}
		, clear: function (r, g, b, a, depth, stencil) {
			if (stencil == null) stencil = 0;
			if (depth == null) depth = 1.0;
		}
		, bindShader: function (shader) {
		}
		, setViewport: function (x, y, width, height, nearPlane, farPlane) {
			if (farPlane == null) farPlane = 1.0;
			if (nearPlane == null) nearPlane = 0.0;
		}
		, setVertexShaderConstantF: function (startRegister, vec4, vec4count) {
		}
		, setVertexSource: function (vb) {
		}
		, setIndexSource: function (ib) {
		}
		, draw: function (primitive, startVertex, primitiveCount) {
		}
		, drawIndexed: function (primitive, vertexCount, startIndex, primitiveCount) {
		}
		, get_width: function () {
			return 0;
		}
		, get_height: function () {
			return 0;
		}
		, __class__: lime_graphics_ConsoleRenderContext
		, __properties__: { get_height: "get_height", get_width: "get_width" }
	};
	var lime_graphics_FlashRenderContext = function () {
	};
	$hxClasses["lime.graphics.FlashRenderContext"] = lime_graphics_FlashRenderContext;
	lime_graphics_FlashRenderContext.__name__ = ["lime", "graphics", "FlashRenderContext"];
	lime_graphics_FlashRenderContext.prototype = {
		addChild: function (child) {
			return null;
		}
		, addChildAt: function (child, index) {
			return null;
		}
		, addEventListener: function (type, listener, useCapture, priority, useWeakReference) {
			if (useWeakReference == null) useWeakReference = false;
			if (priority == null) priority = 0;
			if (useCapture == null) useCapture = false;
		}
		, areInaccessibleObjectsUnderPoint: function (point) {
			return false;
		}
		, contains: function (child) {
			return false;
		}
		, dispatchEvent: function (event) {
			return false;
		}
		, getBounds: function (targetCoordinateSpace) {
			return null;
		}
		, getChildAt: function (index) {
			return null;
		}
		, getChildByName: function (name) {
			return null;
		}
		, getChildIndex: function (child) {
			return 0;
		}
		, getObjectsUnderPoint: function (point) {
			return null;
		}
		, getRect: function (targetCoordinateSpace) {
			return null;
		}
		, globalToLocal: function (point) {
			return null;
		}
		, globalToLocal3D: function (point) {
			return null;
		}
		, hasEventListener: function (type) {
			return false;
		}
		, hitTestObject: function (obj) {
			return false;
		}
		, hitTestPoint: function (x, y, shapeFlag) {
			if (shapeFlag == null) shapeFlag = false;
			return false;
		}
		, local3DToGlobal: function (point3d) {
			return null;
		}
		, localToGlobal: function (point) {
			return null;
		}
		, removeChild: function (child) {
			return null;
		}
		, removeChildAt: function (index) {
			return null;
		}
		, removeChildren: function (beginIndex, endIndex) {
			if (endIndex == null) endIndex = 2147483647;
			if (beginIndex == null) beginIndex = 0;
		}
		, removeEventListener: function (type, listener, useCapture) {
			if (useCapture == null) useCapture = false;
		}
		, requestSoftKeyboard: function () {
			return false;
		}
		, setChildIndex: function (child, index) {
		}
		, startDrag: function (lockCenter, bounds) {
			if (lockCenter == null) lockCenter = false;
		}
		, startTouchDrag: function (touchPointID, lockCenter, bounds) {
			if (lockCenter == null) lockCenter = false;
		}
		, stopAllMovieClips: function () {
		}
		, stopDrag: function () {
		}
		, stopTouchDrag: function (touchPointID) {
		}
		, swapChildren: function (child1, child2) {
		}
		, swapChildrenAt: function (index1, index2) {
		}
		, toString: function () {
			return null;
		}
		, willTrigger: function (type) {
			return false;
		}
		, __class__: lime_graphics_FlashRenderContext
	};
	var lime_graphics_Image = function (buffer, offsetX, offsetY, width, height, color, type) {
		if (height == null) height = -1;
		if (width == null) width = -1;
		if (offsetY == null) offsetY = 0;
		if (offsetX == null) offsetX = 0;
		this.offsetX = offsetX;
		this.offsetY = offsetY;
		this.width = width;
		this.height = height;
		if (type == null) {
			if (lime_app_Application.current != null && lime_app_Application.current.renderers[0] != null) {
				var _g = lime_app_Application.current.renderers[0].context;
				switch (_g[1]) {
					case 2: case 1:
						this.type = lime_graphics_ImageType.CANVAS;
						break;
					case 3:
						this.type = lime_graphics_ImageType.FLASH;
						break;
					default:
						this.type = lime_graphics_ImageType.DATA;
				}
			} else this.type = lime_graphics_ImageType.DATA;
		} else this.type = type;
		if (buffer == null) {
			if (width > 0 && height > 0) {
				var _g1 = this.type;
				switch (_g1[1]) {
					case 0:
						this.buffer = new lime_graphics_ImageBuffer(null, width, height);
						lime_graphics_utils_ImageCanvasUtil.createCanvas(this, width, height);
						if (color != null) this.fillRect(new lime_math_Rectangle(0, 0, width, height), color);
						break;
					case 1:
						this.buffer = new lime_graphics_ImageBuffer((function ($this) {
							var $r;
							var elements = width * height * 4;
							var this1;
							if (elements != null) this1 = new Uint8Array(elements); else this1 = null;
							$r = this1;
							return $r;
						}(this)), width, height);
						if (color != null) this.fillRect(new lime_math_Rectangle(0, 0, width, height), color);
						break;
					case 2:
						break;
					default:
				}
			}
		} else this.__fromImageBuffer(buffer);
	};
	$hxClasses["lime.graphics.Image"] = lime_graphics_Image;
	lime_graphics_Image.__name__ = ["lime", "graphics", "Image"];
	lime_graphics_Image.__base64Encoder = null;
	lime_graphics_Image.fromBase64 = function (base64, type, onload) {
		if (base64 == null) return null;
		var image = new lime_graphics_Image();
		image.__fromBase64(base64, type, onload);
		return image;
	};
	lime_graphics_Image.fromBitmapData = function (bitmapData) {
		if (bitmapData == null) return null;
		return bitmapData.image;
	};
	lime_graphics_Image.fromBytes = function (bytes, onload) {
		if (bytes == null) return null;
		var image = new lime_graphics_Image();
		image.__fromBytes(bytes, onload);
		return image;
	};
	lime_graphics_Image.fromCanvas = function (canvas) {
		if (canvas == null) return null;
		var buffer = new lime_graphics_ImageBuffer(null, canvas.width, canvas.height);
		buffer.set_src(canvas);
		return new lime_graphics_Image(buffer);
	};
	lime_graphics_Image.fromFile = function (path, onload, onerror) {
		var image = new lime_graphics_Image();
		image.__fromFile(path, onload, onerror);
		return image;
	};
	lime_graphics_Image.fromImageElement = function (image) {
		if (image == null) return null;
		var buffer = new lime_graphics_ImageBuffer(null, image.width, image.height);
		buffer.set_src(image);
		return new lime_graphics_Image(buffer);
	};
	lime_graphics_Image.__base64Encode = function (bytes) {
		var extension;
		var _g = bytes.length % 3;
		switch (_g) {
			case 1:
				extension = "==";
				break;
			case 2:
				extension = "=";
				break;
			default:
				extension = "";
		}
		if (lime_graphics_Image.__base64Encoder == null) lime_graphics_Image.__base64Encoder = new haxe_crypto_BaseCode(haxe_io_Bytes.ofString(lime_graphics_Image.__base64Chars));
		return lime_graphics_Image.__base64Encoder.encodeBytes(haxe_io_Bytes.ofData(bytes.byteView)).toString() + extension;
	};
	lime_graphics_Image.__isJPG = function (bytes) {
		bytes.position = 0;
		return bytes.readUnsignedByte() == 255 && bytes.readUnsignedByte() == 216;
	};
	lime_graphics_Image.__isPNG = function (bytes) {
		bytes.position = 0;
		return bytes.readUnsignedByte() == 137 && bytes.readUnsignedByte() == 80 && bytes.readUnsignedByte() == 78 && bytes.readUnsignedByte() == 71 && bytes.readUnsignedByte() == 13 && bytes.readUnsignedByte() == 10 && bytes.readUnsignedByte() == 26 && bytes.readUnsignedByte() == 10;
	};
	lime_graphics_Image.__isGIF = function (bytes) {
		bytes.position = 0;
		if (bytes.readUnsignedByte() == 71 && bytes.readUnsignedByte() == 73 && bytes.readUnsignedByte() == 70 && bytes.readUnsignedByte() == 56) {
			var b = bytes.readUnsignedByte();
			return (b == 55 || b == 57) && bytes.readUnsignedByte() == 97;
		}
		return false;
	};
	lime_graphics_Image.prototype = {
		clone: function () {
			if (this.buffer != null) {
				if (this.type == lime_graphics_ImageType.CANVAS && this.buffer.__srcImage == null) {
					lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
					lime_graphics_utils_ImageCanvasUtil.sync(this, true);
				}
				var image = new lime_graphics_Image(this.buffer.clone(), this.offsetX, this.offsetY, this.width, this.height, null, this.type);
				image.dirty = this.dirty;
				return image;
			} else return new lime_graphics_Image(null, this.offsetX, this.offsetY, this.width, this.height, null, this.type);
		}
		, colorTransform: function (rect, colorMatrix) {
			rect = this.__clipRect(rect);
			if (this.buffer == null || rect == null) return;
			var _g = this.type;
			switch (_g[1]) {
				case 0:
					lime_graphics_utils_ImageCanvasUtil.colorTransform(this, rect, colorMatrix);
					break;
				case 1:
					lime_graphics_utils_ImageCanvasUtil.convertToData(this);
					lime_graphics_utils_ImageDataUtil.colorTransform(this, rect, colorMatrix);
					break;
				case 2:
					rect.offset(this.offsetX, this.offsetY);
					this.buffer.__srcBitmapData.colorTransform(rect.__toFlashRectangle(), lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform(colorMatrix));
					break;
				default:
			}
		}
		, copyChannel: function (sourceImage, sourceRect, destPoint, sourceChannel, destChannel) {
			sourceRect = this.__clipRect(sourceRect);
			if (this.buffer == null || sourceRect == null) return;
			if (destChannel == lime_graphics_ImageChannel.ALPHA && !this.get_transparent()) return;
			if (sourceRect.width <= 0 || sourceRect.height <= 0) return;
			if (sourceRect.x + sourceRect.width > sourceImage.width) sourceRect.width = sourceImage.width - sourceRect.x;
			if (sourceRect.y + sourceRect.height > sourceImage.height) sourceRect.height = sourceImage.height - sourceRect.y;
			var _g = this.type;
			switch (_g[1]) {
				case 0:
					lime_graphics_utils_ImageCanvasUtil.copyChannel(this, sourceImage, sourceRect, destPoint, sourceChannel, destChannel);
					break;
				case 1:
					lime_graphics_utils_ImageCanvasUtil.convertToData(this);
					lime_graphics_utils_ImageDataUtil.copyChannel(this, sourceImage, sourceRect, destPoint, sourceChannel, destChannel);
					break;
				case 2:
					var srcChannel;
					switch (sourceChannel[1]) {
						case 0:
							srcChannel = 1;
							break;
						case 1:
							srcChannel = 2;
							break;
						case 2:
							srcChannel = 4;
							break;
						case 3:
							srcChannel = 8;
							break;
					}
					var dstChannel;
					switch (destChannel[1]) {
						case 0:
							dstChannel = 1;
							break;
						case 1:
							dstChannel = 2;
							break;
						case 2:
							dstChannel = 4;
							break;
						case 3:
							dstChannel = 8;
							break;
					}
					sourceRect.offset(sourceImage.offsetX, sourceImage.offsetY);
					destPoint.offset(this.offsetX, this.offsetY);
					this.buffer.__srcBitmapData.copyChannel(sourceImage.buffer.get_src(), sourceRect.__toFlashRectangle(), destPoint.__toFlashPoint(), srcChannel, dstChannel);
					break;
				default:
			}
		}
		, copyPixels: function (sourceImage, sourceRect, destPoint, alphaImage, alphaPoint, mergeAlpha) {
			if (mergeAlpha == null) mergeAlpha = false;
			if (this.buffer == null || sourceImage == null) return;
			if (sourceRect.width <= 0 || sourceRect.height <= 0) return;
			if (this.width <= 0 || this.height <= 0) return;
			if (sourceRect.x + sourceRect.width > sourceImage.width) sourceRect.width = sourceImage.width - sourceRect.x;
			if (sourceRect.y + sourceRect.height > sourceImage.height) sourceRect.height = sourceImage.height - sourceRect.y;
			if (sourceRect.x < 0) {
				sourceRect.width += sourceRect.x;
				sourceRect.x = 0;
			}
			if (sourceRect.y < 0) {
				sourceRect.height += sourceRect.y;
				sourceRect.y = 0;
			}
			if (destPoint.x + sourceRect.width > this.width) sourceRect.width = this.width - destPoint.x;
			if (destPoint.y + sourceRect.height > this.height) sourceRect.height = this.height - destPoint.y;
			if (destPoint.x < 0) {
				sourceRect.width += destPoint.x;
				sourceRect.x = -destPoint.x;
				destPoint.x = 0;
			}
			if (destPoint.y < 0) {
				sourceRect.height += destPoint.y;
				sourceRect.y = -destPoint.y;
				destPoint.y = 0;
			}
			var _g = this.type;
			switch (_g[1]) {
				case 0:
					lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
					lime_graphics_utils_ImageCanvasUtil.copyPixels(this, sourceImage, sourceRect, destPoint, alphaImage, alphaPoint, mergeAlpha);
					break;
				case 1:
					lime_graphics_utils_ImageCanvasUtil.convertToData(this);
					lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
					lime_graphics_utils_ImageDataUtil.copyPixels(this, sourceImage, sourceRect, destPoint, alphaImage, alphaPoint, mergeAlpha);
					break;
				case 2:
					sourceRect.offset(sourceImage.offsetX, sourceImage.offsetY);
					destPoint.offset(this.offsetX, this.offsetY);
					if (alphaImage != null && alphaPoint != null) alphaPoint.offset(alphaImage.offsetX, alphaImage.offsetY);
					this.buffer.__srcBitmapData.copyPixels(sourceImage.buffer.__srcBitmapData, sourceRect.__toFlashRectangle(), destPoint.__toFlashPoint(), alphaImage != null ? alphaImage.buffer.get_src() : null, alphaPoint != null ? alphaPoint.__toFlashPoint() : null, mergeAlpha);
					break;
				default:
			}
		}
		, encode: function (format, quality) {
			if (quality == null) quality = 90;
			if (format == null) format = "png";
			switch (format) {
				case "png":
					return lime_graphics_format_PNG.encode(this);
				case "jpg": case "jpeg":
					return lime_graphics_format_JPEG.encode(this, quality);
				case "bmp":
					return lime_graphics_format_BMP.encode(this);
				default:
			}
			return null;
		}
		, fillRect: function (rect, color, format) {
			rect = this.__clipRect(rect);
			if (this.buffer == null || rect == null) return;
			var _g = this.type;
			switch (_g[1]) {
				case 0:
					lime_graphics_utils_ImageCanvasUtil.fillRect(this, rect, color, format);
					break;
				case 1:
					lime_graphics_utils_ImageCanvasUtil.convertToData(this);
					if (this.buffer.data.length == 0) return;
					lime_graphics_utils_ImageDataUtil.fillRect(this, rect, color, format);
					break;
				case 2:
					rect.offset(this.offsetX, this.offsetY);
					var argb;
					if (format != null) switch (format) {
						case 1:
							argb = color;
							break;
						case 2:
							{
								var bgra = color;
								var argb1 = 0;
								argb1 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
								argb = argb1;
							}
							break;
						default:
							{
								var rgba = color;
								var argb2 = 0;
								argb2 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
								argb = argb2;
							}
					} else {
						var rgba1 = color;
						var argb3 = 0;
						argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
						argb = argb3;
					}
					this.buffer.__srcBitmapData.fillRect(rect.__toFlashRectangle(), argb);
					break;
				default:
			}
		}
		, floodFill: function (x, y, color, format) {
			if (this.buffer == null) return;
			var _g = this.type;
			switch (_g[1]) {
				case 0:
					lime_graphics_utils_ImageCanvasUtil.floodFill(this, x, y, color, format);
					break;
				case 1:
					lime_graphics_utils_ImageCanvasUtil.convertToData(this);
					lime_graphics_utils_ImageDataUtil.floodFill(this, x, y, color, format);
					break;
				case 2:
					var argb;
					if (format != null) switch (format) {
						case 1:
							argb = color;
							break;
						case 2:
							{
								var bgra = color;
								var argb1 = 0;
								argb1 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
								argb = argb1;
							}
							break;
						default:
							{
								var rgba = color;
								var argb2 = 0;
								argb2 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
								argb = argb2;
							}
					} else {
						var rgba1 = color;
						var argb3 = 0;
						argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
						argb = argb3;
					}
					this.buffer.__srcBitmapData.floodFill(x + this.offsetX, y + this.offsetY, argb);
					break;
				default:
			}
		}
		, getColorBoundsRect: function (mask, color, findColor, format) {
			if (findColor == null) findColor = true;
			if (this.buffer == null) return null;
			var _g = this.type;
			switch (_g[1]) {
				case 0:
					lime_graphics_utils_ImageCanvasUtil.convertToData(this);
					return lime_graphics_utils_ImageDataUtil.getColorBoundsRect(this, mask, color, findColor, format);
				case 1:
					return lime_graphics_utils_ImageDataUtil.getColorBoundsRect(this, mask, color, findColor, format);
				case 2:
					var rect = this.buffer.__srcBitmapData.getColorBoundsRect(mask, color, findColor);
					return new lime_math_Rectangle(rect.x, rect.y, rect.width, rect.height);
				default:
					return null;
			}
		}
		, getPixel: function (x, y, format) {
			if (this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return 0;
			var _g = this.type;
			switch (_g[1]) {
				case 0:
					return lime_graphics_utils_ImageCanvasUtil.getPixel(this, x, y, format);
				case 1:
					lime_graphics_utils_ImageCanvasUtil.convertToData(this);
					return lime_graphics_utils_ImageDataUtil.getPixel(this, x, y, format);
				case 2:
					var color = this.buffer.__srcBitmapData.getPixel(x + this.offsetX, y + this.offsetY);
					if (format != null) switch (format) {
						case 1:
							return color;
						case 2:
							var bgra;
							{
								var bgra1 = 0;
								bgra1 = (color & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color >> 16 & 255 & 255) << 8 | color >> 24 & 255 & 255;
								bgra = bgra1;
							}
							return bgra;
						default:
							var rgba;
							{
								var rgba1 = 0;
								rgba1 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
								rgba = rgba1;
							}
							return rgba;
					} else {
						var rgba2;
						{
							var rgba3 = 0;
							rgba3 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
							rgba2 = rgba3;
						}
						return rgba2;
					}
					break;
				default:
					return 0;
			}
		}
		, getPixel32: function (x, y, format) {
			if (this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return 0;
			var _g = this.type;
			switch (_g[1]) {
				case 0:
					return lime_graphics_utils_ImageCanvasUtil.getPixel32(this, x, y, format);
				case 1:
					lime_graphics_utils_ImageCanvasUtil.convertToData(this);
					return lime_graphics_utils_ImageDataUtil.getPixel32(this, x, y, format);
				case 2:
					var color = this.buffer.__srcBitmapData.getPixel32(x + this.offsetX, y + this.offsetY);
					if (format != null) switch (format) {
						case 1:
							return color;
						case 2:
							var bgra;
							{
								var bgra1 = 0;
								bgra1 = (color & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color >> 16 & 255 & 255) << 8 | color >> 24 & 255 & 255;
								bgra = bgra1;
							}
							return bgra;
						default:
							var rgba;
							{
								var rgba1 = 0;
								rgba1 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
								rgba = rgba1;
							}
							return rgba;
					} else {
						var rgba2;
						{
							var rgba3 = 0;
							rgba3 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
							rgba2 = rgba3;
						}
						return rgba2;
					}
					break;
				default:
					return 0;
			}
		}
		, getPixels: function (rect, format) {
			if (this.buffer == null) return null;
			var _g = this.type;
			switch (_g[1]) {
				case 0:
					return lime_graphics_utils_ImageCanvasUtil.getPixels(this, rect, format);
				case 1:
					lime_graphics_utils_ImageCanvasUtil.convertToData(this);
					return lime_graphics_utils_ImageDataUtil.getPixels(this, rect, format);
				case 2:
					rect.offset(this.offsetX, this.offsetY);
					var byteArray = this.buffer.__srcBitmapData.getPixels(rect.__toFlashRectangle());
					if (format != null) switch (format) {
						case 1:
							break;
						case 2:
							var color;
							var length = byteArray.length / 4 | 0;
							var _g1 = 0;
							while (_g1 < length) {
								var i = _g1++;
								{
									var argb = byteArray.readUnsignedInt();
									var bgra = 0;
									bgra = (argb & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb >> 16 & 255 & 255) << 8 | argb >> 24 & 255 & 255;
									color = bgra;
								}
								byteArray.position -= 4;
								byteArray.writeUnsignedInt(color);
							}
							byteArray.position = 0;
							break;
						default:
							var color1;
							var length1 = byteArray.length / 4 | 0;
							var _g11 = 0;
							while (_g11 < length1) {
								var i1 = _g11++;
								{
									var argb1 = byteArray.readUnsignedInt();
									var rgba = 0;
									rgba = (argb1 >> 16 & 255 & 255) << 24 | (argb1 >> 8 & 255 & 255) << 16 | (argb1 & 255 & 255) << 8 | argb1 >> 24 & 255 & 255;
									color1 = rgba;
								}
								byteArray.position -= 4;
								byteArray.writeUnsignedInt((function ($this) {
									var $r;
									var bgra1 = 0;
									bgra1 = (color1 >> 8 & 255 & 255) << 24 | (color1 >> 16 & 255 & 255) << 16 | (color1 >> 24 & 255 & 255) << 8 | color1 & 255 & 255;
									$r = bgra1;
									return $r;
								}(this)));
							}
							byteArray.position = 0;
					} else {
						var color2;
						var length2 = byteArray.length / 4 | 0;
						var _g12 = 0;
						while (_g12 < length2) {
							var i2 = _g12++;
							{
								var argb2 = byteArray.readUnsignedInt();
								var rgba1 = 0;
								rgba1 = (argb2 >> 16 & 255 & 255) << 24 | (argb2 >> 8 & 255 & 255) << 16 | (argb2 & 255 & 255) << 8 | argb2 >> 24 & 255 & 255;
								color2 = rgba1;
							}
							byteArray.position -= 4;
							byteArray.writeUnsignedInt((function ($this) {
								var $r;
								var bgra2 = 0;
								bgra2 = (color2 >> 8 & 255 & 255) << 24 | (color2 >> 16 & 255 & 255) << 16 | (color2 >> 24 & 255 & 255) << 8 | color2 & 255 & 255;
								$r = bgra2;
								return $r;
							}(this)));
						}
						byteArray.position = 0;
					}
					return byteArray;
				default:
					return null;
			}
		}
		, merge: function (sourceImage, sourceRect, destPoint, redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier) {
			if (this.buffer == null || sourceImage == null) return;
			var _g = this.type;
			switch (_g[1]) {
				case 0:
					lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
					lime_graphics_utils_ImageCanvasUtil.merge(this, sourceImage, sourceRect, destPoint, redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier);
					break;
				case 1:
					lime_graphics_utils_ImageCanvasUtil.convertToData(this);
					lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
					lime_graphics_utils_ImageDataUtil.merge(this, sourceImage, sourceRect, destPoint, redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier);
					break;
				case 2:
					sourceRect.offset(this.offsetX, this.offsetY);
					this.buffer.__srcBitmapData.merge(sourceImage.buffer.__srcBitmapData, sourceRect.__toFlashRectangle(), destPoint.__toFlashPoint(), redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier);
					break;
				default:
					return null;
			}
		}
		, resize: function (newWidth, newHeight) {
			var _g = this.type;
			switch (_g[1]) {
				case 0:
					lime_graphics_utils_ImageCanvasUtil.resize(this, newWidth, newHeight);
					break;
				case 1:
					lime_graphics_utils_ImageDataUtil.resize(this, newWidth, newHeight);
					break;
				case 2:
					break;
				default:
			}
			this.buffer.width = newWidth;
			this.buffer.height = newHeight;
			this.offsetX = 0;
			this.offsetY = 0;
			this.width = newWidth;
			this.height = newHeight;
		}
		, scroll: function (x, y) {
			if (this.buffer == null) return;
			var _g = this.type;
			switch (_g[1]) {
				case 0:
					lime_graphics_utils_ImageCanvasUtil.scroll(this, x, y);
					break;
				case 1:
					this.copyPixels(this, this.get_rect(), new lime_math_Vector2(x, y));
					break;
				case 2:
					this.buffer.__srcBitmapData.scroll(x + this.offsetX, y + this.offsetX);
					break;
				default:
			}
		}
		, setPixel: function (x, y, color, format) {
			if (this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return;
			var _g = this.type;
			switch (_g[1]) {
				case 0:
					lime_graphics_utils_ImageCanvasUtil.setPixel(this, x, y, color, format);
					break;
				case 1:
					lime_graphics_utils_ImageCanvasUtil.convertToData(this);
					lime_graphics_utils_ImageDataUtil.setPixel(this, x, y, color, format);
					break;
				case 2:
					var argb;
					if (format != null) switch (format) {
						case 1:
							argb = color;
							break;
						case 2:
							{
								var bgra = color;
								var argb1 = 0;
								argb1 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
								argb = argb1;
							}
							break;
						default:
							{
								var rgba = color;
								var argb2 = 0;
								argb2 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
								argb = argb2;
							}
					} else {
						var rgba1 = color;
						var argb3 = 0;
						argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
						argb = argb3;
					}
					this.buffer.__srcBitmapData.setPixel(x + this.offsetX, y + this.offsetX, argb);
					break;
				default:
			}
		}
		, setPixel32: function (x, y, color, format) {
			if (this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return;
			var _g = this.type;
			switch (_g[1]) {
				case 0:
					lime_graphics_utils_ImageCanvasUtil.setPixel32(this, x, y, color, format);
					break;
				case 1:
					lime_graphics_utils_ImageCanvasUtil.convertToData(this);
					lime_graphics_utils_ImageDataUtil.setPixel32(this, x, y, color, format);
					break;
				case 2:
					var argb;
					if (format != null) switch (format) {
						case 1:
							argb = color;
							break;
						case 2:
							{
								var bgra = color;
								var argb1 = 0;
								argb1 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
								argb = argb1;
							}
							break;
						default:
							{
								var rgba = color;
								var argb2 = 0;
								argb2 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
								argb = argb2;
							}
					} else {
						var rgba1 = color;
						var argb3 = 0;
						argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
						argb = argb3;
					}
					this.buffer.__srcBitmapData.setPixel32(x + this.offsetX, y + this.offsetY, argb);
					break;
				default:
			}
		}
		, setPixels: function (rect, byteArray, format) {
			rect = this.__clipRect(rect);
			if (this.buffer == null || rect == null) return;
			var _g = this.type;
			switch (_g[1]) {
				case 0:
					lime_graphics_utils_ImageCanvasUtil.setPixels(this, rect, byteArray, format);
					break;
				case 1:
					lime_graphics_utils_ImageCanvasUtil.convertToData(this);
					lime_graphics_utils_ImageDataUtil.setPixels(this, rect, byteArray, format);
					break;
				case 2:
					rect.offset(this.offsetX, this.offsetY);
					if (format != null) switch (format) {
						case 1:
							break;
						case 2:
							var srcData = byteArray;
							byteArray = new lime_utils_ByteArray();
							var color;
							var length = byteArray.length / 4 | 0;
							var _g1 = 0;
							while (_g1 < length) {
								var i = _g1++;
								color = srcData.readUnsignedInt();
								byteArray.writeUnsignedInt(js_Boot.__cast(color, Int));
							}
							srcData.position = 0;
							byteArray.position = 0;
							break;
						default:
							var srcData1 = byteArray;
							byteArray = new lime_utils_ByteArray();
							var color1;
							var length1 = byteArray.length / 4 | 0;
							var _g11 = 0;
							while (_g11 < length1) {
								var i1 = _g11++;
								color1 = srcData1.readUnsignedInt();
								byteArray.writeUnsignedInt(js_Boot.__cast(color1, Int));
							}
							srcData1.position = 0;
							byteArray.position = 0;
					} else {
						var srcData2 = byteArray;
						byteArray = new lime_utils_ByteArray();
						var color2;
						var length2 = byteArray.length / 4 | 0;
						var _g12 = 0;
						while (_g12 < length2) {
							var i2 = _g12++;
							color2 = srcData2.readUnsignedInt();
							byteArray.writeUnsignedInt(js_Boot.__cast(color2, Int));
						}
						srcData2.position = 0;
						byteArray.position = 0;
					}
					this.buffer.__srcBitmapData.setPixels(rect.__toFlashRectangle(), byteArray);
					break;
				default:
			}
		}
		, __clipRect: function (r) {
			if (r == null) return null;
			if (r.x < 0) {
				r.width -= -r.x;
				r.x = 0;
				if (r.x + r.width <= 0) return null;
			}
			if (r.y < 0) {
				r.height -= -r.y;
				r.y = 0;
				if (r.y + r.height <= 0) return null;
			}
			if (r.x + r.width >= this.width) {
				r.width -= r.x + r.width - this.width;
				if (r.width <= 0) return null;
			}
			if (r.y + r.height >= this.height) {
				r.height -= r.y + r.height - this.height;
				if (r.height <= 0) return null;
			}
			return r;
		}
		, __fromBase64: function (base64, type, onload) {
			var _g = this;
			var image = new Image();
			var image_onLoaded = function (event) {
				_g.buffer = new lime_graphics_ImageBuffer(null, image.width, image.height);
				_g.buffer.__srcImage = image;
				_g.offsetX = 0;
				_g.offsetY = 0;
				_g.width = _g.buffer.width;
				_g.height = _g.buffer.height;
				if (onload != null) onload(_g);
			};
			image.addEventListener("load", image_onLoaded, false);
			image.src = "data:" + type + ";base64," + base64;
		}
		, __fromBytes: function (bytes, onload) {
			var type = "";
			if (lime_graphics_Image.__isPNG(bytes)) type = "image/png"; else if (lime_graphics_Image.__isJPG(bytes)) type = "image/jpeg"; else if (lime_graphics_Image.__isGIF(bytes)) type = "image/gif"; else throw new js__$Boot_HaxeError("Image tried to read a PNG/JPG ByteArray, but found an invalid header.");
			this.__fromBase64(lime_graphics_Image.__base64Encode(bytes), type, onload);
		}
		, __fromFile: function (path, onload, onerror) {
			var _g = this;
			var image = new Image();
			image.onload = function (_) {
				_g.buffer = new lime_graphics_ImageBuffer(null, image.width, image.height);
				_g.buffer.__srcImage = image;
				_g.width = image.width;
				_g.height = image.height;
				if (onload != null) onload(_g);
			};
			image.onerror = function (_1) {
				if (onerror != null) onerror();
			};
			image.src = path;
			if (image.complete) {
			}
		}
		, __fromImageBuffer: function (buffer) {
			this.buffer = buffer;
			if (buffer != null) {
				if (this.width == -1) this.width = buffer.width;
				if (this.height == -1) this.height = buffer.height;
			}
		}
		, get_data: function () {
			if (this.buffer.data == null && this.buffer.width > 0 && this.buffer.height > 0) {
				lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
				lime_graphics_utils_ImageCanvasUtil.sync(this, false);
				lime_graphics_utils_ImageCanvasUtil.createImageData(this);
			}
			return this.buffer.data;
		}
		, set_data: function (value) {
			return this.buffer.data = value;
		}
		, get_format: function () {
			return this.buffer.format;
		}
		, set_format: function (value) {
			if (this.buffer.format != value) {
				var _g = this.type;
				switch (_g[1]) {
					case 1:
						lime_graphics_utils_ImageDataUtil.setFormat(this, value);
						break;
					default:
				}
			}
			return this.buffer.format = value;
		}
		, get_powerOfTwo: function () {
			return this.buffer.width != 0 && (this.buffer.width & ~this.buffer.width + 1) == this.buffer.width && (this.buffer.height != 0 && (this.buffer.height & ~this.buffer.height + 1) == this.buffer.height);
		}
		, set_powerOfTwo: function (value) {
			if (value != this.get_powerOfTwo()) {
				var newWidth = 1;
				var newHeight = 1;
				while (newWidth < this.buffer.width) newWidth <<= 1;
				while (newHeight < this.buffer.height) newHeight <<= 1;
				var _g = this.type;
				switch (_g[1]) {
					case 0:
						break;
					case 1:
						lime_graphics_utils_ImageDataUtil.resizeBuffer(this, newWidth, newHeight);
						break;
					case 2:
						break;
					default:
				}
			}
			return value;
		}
		, get_premultiplied: function () {
			return this.buffer.premultiplied;
		}
		, set_premultiplied: function (value) {
			if (value && !this.buffer.premultiplied) {
				var _g = this.type;
				switch (_g[1]) {
					case 1:
						lime_graphics_utils_ImageCanvasUtil.convertToData(this);
						lime_graphics_utils_ImageDataUtil.multiplyAlpha(this);
						break;
					default:
				}
			} else if (!value && this.buffer.premultiplied) {
				var _g1 = this.type;
				switch (_g1[1]) {
					case 1:
						lime_graphics_utils_ImageCanvasUtil.convertToData(this);
						lime_graphics_utils_ImageDataUtil.unmultiplyAlpha(this);
						break;
					default:
				}
			}
			return value;
		}
		, get_rect: function () {
			return new lime_math_Rectangle(0, 0, this.width, this.height);
		}
		, get_src: function () {
			if (this.buffer.__srcCanvas == null) lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			return this.buffer.get_src();
		}
		, set_src: function (value) {
			return this.buffer.set_src(value);
		}
		, get_transparent: function () {
			if (this.buffer == null) return false;
			return this.buffer.transparent;
		}
		, set_transparent: function (value) {
			if (this.buffer == null) return false;
			return this.buffer.transparent = value;
		}
		, __class__: lime_graphics_Image
		, __properties__: { set_transparent: "set_transparent", get_transparent: "get_transparent", set_src: "set_src", get_src: "get_src", get_rect: "get_rect", set_premultiplied: "set_premultiplied", get_premultiplied: "get_premultiplied", set_powerOfTwo: "set_powerOfTwo", get_powerOfTwo: "get_powerOfTwo", set_format: "set_format", get_format: "get_format", set_data: "set_data", get_data: "get_data" }
	};
	var lime_graphics_ImageBuffer = function (data, width, height, bitsPerPixel, format) {
		if (bitsPerPixel == null) bitsPerPixel = 32;
		if (height == null) height = 0;
		if (width == null) width = 0;
		this.data = data;
		this.width = width;
		this.height = height;
		this.bitsPerPixel = bitsPerPixel;
		if (format == null) this.format = 0; else this.format = format;
		this.transparent = true;
	};
	$hxClasses["lime.graphics.ImageBuffer"] = lime_graphics_ImageBuffer;
	lime_graphics_ImageBuffer.__name__ = ["lime", "graphics", "ImageBuffer"];
	lime_graphics_ImageBuffer.prototype = {
		clone: function () {
			var buffer = new lime_graphics_ImageBuffer(this.data, this.width, this.height, this.bitsPerPixel);
			if (this.data != null) {
				var elements = this.data.byteLength;
				var this1;
				if (elements != null) this1 = new Uint8Array(elements); else this1 = null;
				buffer.data = this1;
				var copy;
				var view = this.data;
				var this2;
				if (view != null) this2 = new Uint8Array(view); else this2 = null;
				copy = this2;
				buffer.data.set(copy);
			} else if (this.__srcImageData != null) {
				buffer.__srcCanvas = window.document.createElement("canvas");
				buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
				buffer.__srcCanvas.width = this.__srcImageData.width;
				buffer.__srcCanvas.height = this.__srcImageData.height;
				buffer.__srcImageData = buffer.__srcContext.createImageData(this.__srcImageData.width, this.__srcImageData.height);
				var copy1 = new Uint8ClampedArray(this.__srcImageData.data);
				buffer.__srcImageData.data.set(copy1);
			} else if (this.__srcCanvas != null) {
				buffer.__srcCanvas = window.document.createElement("canvas");
				buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
				buffer.__srcCanvas.width = this.__srcCanvas.width;
				buffer.__srcCanvas.height = this.__srcCanvas.height;
				buffer.__srcContext.drawImage(this.__srcCanvas, 0, 0);
			} else buffer.__srcImage = this.__srcImage;
			buffer.bitsPerPixel = this.bitsPerPixel;
			buffer.format = this.format;
			buffer.premultiplied = this.premultiplied;
			buffer.transparent = this.transparent;
			return buffer;
		}
		, get_src: function () {
			if (this.__srcImage != null) return this.__srcImage;
			return this.__srcCanvas;
		}
		, set_src: function (value) {
			if (js_Boot.__instanceof(value, Image)) this.__srcImage = value; else if (js_Boot.__instanceof(value, HTMLCanvasElement)) {
				this.__srcCanvas = value;
				this.__srcContext = this.__srcCanvas.getContext("2d");
			}
			return value;
		}
		, get_stride: function () {
			return this.width * 4;
		}
		, __class__: lime_graphics_ImageBuffer
		, __properties__: { get_stride: "get_stride", set_src: "set_src", get_src: "get_src" }
	};
	var lime_graphics_ImageChannel = $hxClasses["lime.graphics.ImageChannel"] = { __ename__: ["lime", "graphics", "ImageChannel"], __constructs__: ["RED", "GREEN", "BLUE", "ALPHA"] };
	lime_graphics_ImageChannel.RED = ["RED", 0];
	lime_graphics_ImageChannel.RED.toString = $estr;
	lime_graphics_ImageChannel.RED.__enum__ = lime_graphics_ImageChannel;
	lime_graphics_ImageChannel.GREEN = ["GREEN", 1];
	lime_graphics_ImageChannel.GREEN.toString = $estr;
	lime_graphics_ImageChannel.GREEN.__enum__ = lime_graphics_ImageChannel;
	lime_graphics_ImageChannel.BLUE = ["BLUE", 2];
	lime_graphics_ImageChannel.BLUE.toString = $estr;
	lime_graphics_ImageChannel.BLUE.__enum__ = lime_graphics_ImageChannel;
	lime_graphics_ImageChannel.ALPHA = ["ALPHA", 3];
	lime_graphics_ImageChannel.ALPHA.toString = $estr;
	lime_graphics_ImageChannel.ALPHA.__enum__ = lime_graphics_ImageChannel;
	var lime_graphics_ImageType = $hxClasses["lime.graphics.ImageType"] = { __ename__: ["lime", "graphics", "ImageType"], __constructs__: ["CANVAS", "DATA", "FLASH", "CUSTOM"] };
	lime_graphics_ImageType.CANVAS = ["CANVAS", 0];
	lime_graphics_ImageType.CANVAS.toString = $estr;
	lime_graphics_ImageType.CANVAS.__enum__ = lime_graphics_ImageType;
	lime_graphics_ImageType.DATA = ["DATA", 1];
	lime_graphics_ImageType.DATA.toString = $estr;
	lime_graphics_ImageType.DATA.__enum__ = lime_graphics_ImageType;
	lime_graphics_ImageType.FLASH = ["FLASH", 2];
	lime_graphics_ImageType.FLASH.toString = $estr;
	lime_graphics_ImageType.FLASH.__enum__ = lime_graphics_ImageType;
	lime_graphics_ImageType.CUSTOM = ["CUSTOM", 3];
	lime_graphics_ImageType.CUSTOM.toString = $estr;
	lime_graphics_ImageType.CUSTOM.__enum__ = lime_graphics_ImageType;
	var lime_graphics_RenderContext = $hxClasses["lime.graphics.RenderContext"] = { __ename__: ["lime", "graphics", "RenderContext"], __constructs__: ["OPENGL", "CANVAS", "DOM", "FLASH", "CAIRO", "CONSOLE", "CUSTOM", "NONE"] };
	lime_graphics_RenderContext.OPENGL = function (gl) { var $x = ["OPENGL", 0, gl]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
	lime_graphics_RenderContext.CANVAS = function (context) { var $x = ["CANVAS", 1, context]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
	lime_graphics_RenderContext.DOM = function (element) { var $x = ["DOM", 2, element]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
	lime_graphics_RenderContext.FLASH = function (stage) { var $x = ["FLASH", 3, stage]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
	lime_graphics_RenderContext.CAIRO = function (cairo) { var $x = ["CAIRO", 4, cairo]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
	lime_graphics_RenderContext.CONSOLE = function (context) { var $x = ["CONSOLE", 5, context]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
	lime_graphics_RenderContext.CUSTOM = function (data) { var $x = ["CUSTOM", 6, data]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
	lime_graphics_RenderContext.NONE = ["NONE", 7];
	lime_graphics_RenderContext.NONE.toString = $estr;
	lime_graphics_RenderContext.NONE.__enum__ = lime_graphics_RenderContext;
	var lime_graphics_Renderer = function (window) {
		this.onRender = new lime_app_Event_$Void_$Void();
		this.onContextRestored = new lime_app_Event_$lime_$graphics_$RenderContext_$Void();
		this.onContextLost = new lime_app_Event_$Void_$Void();
		this.window = window;
		this.backend = new lime__$backend_html5_HTML5Renderer(this);
		this.window.renderer = this;
	};
	$hxClasses["lime.graphics.Renderer"] = lime_graphics_Renderer;
	lime_graphics_Renderer.__name__ = ["lime", "graphics", "Renderer"];
	lime_graphics_Renderer.prototype = {
		create: function () {
			this.backend.create();
		}
		, flip: function () {
			this.backend.flip();
		}
		, render: function () {
			this.backend.render();
		}
		, __class__: lime_graphics_Renderer
	};
	var lime_graphics_RendererType = $hxClasses["lime.graphics.RendererType"] = { __ename__: ["lime", "graphics", "RendererType"], __constructs__: ["OPENGL", "CANVAS", "DOM", "FLASH", "CAIRO", "CONSOLE", "CUSTOM"] };
	lime_graphics_RendererType.OPENGL = ["OPENGL", 0];
	lime_graphics_RendererType.OPENGL.toString = $estr;
	lime_graphics_RendererType.OPENGL.__enum__ = lime_graphics_RendererType;
	lime_graphics_RendererType.CANVAS = ["CANVAS", 1];
	lime_graphics_RendererType.CANVAS.toString = $estr;
	lime_graphics_RendererType.CANVAS.__enum__ = lime_graphics_RendererType;
	lime_graphics_RendererType.DOM = ["DOM", 2];
	lime_graphics_RendererType.DOM.toString = $estr;
	lime_graphics_RendererType.DOM.__enum__ = lime_graphics_RendererType;
	lime_graphics_RendererType.FLASH = ["FLASH", 3];
	lime_graphics_RendererType.FLASH.toString = $estr;
	lime_graphics_RendererType.FLASH.__enum__ = lime_graphics_RendererType;
	lime_graphics_RendererType.CAIRO = ["CAIRO", 4];
	lime_graphics_RendererType.CAIRO.toString = $estr;
	lime_graphics_RendererType.CAIRO.__enum__ = lime_graphics_RendererType;
	lime_graphics_RendererType.CONSOLE = ["CONSOLE", 5];
	lime_graphics_RendererType.CONSOLE.toString = $estr;
	lime_graphics_RendererType.CONSOLE.__enum__ = lime_graphics_RendererType;
	lime_graphics_RendererType.CUSTOM = ["CUSTOM", 6];
	lime_graphics_RendererType.CUSTOM.toString = $estr;
	lime_graphics_RendererType.CUSTOM.__enum__ = lime_graphics_RendererType;
	var lime_graphics_cairo_Cairo = function (surface) {
		if (surface != null) {
		}
	};
	$hxClasses["lime.graphics.cairo.Cairo"] = lime_graphics_cairo_Cairo;
	lime_graphics_cairo_Cairo.__name__ = ["lime", "graphics", "cairo", "Cairo"];
	lime_graphics_cairo_Cairo.__properties__ = { get_versionString: "get_versionString", get_version: "get_version" }
	lime_graphics_cairo_Cairo.version = null;
	lime_graphics_cairo_Cairo.versionString = null;
	lime_graphics_cairo_Cairo.get_version = function () {
		return 0;
	};
	lime_graphics_cairo_Cairo.get_versionString = function () {
		return "";
	};
	lime_graphics_cairo_Cairo.prototype = {
		arc: function (xc, yc, radius, angle1, angle2) {
		}
		, arcNegative: function (xc, yc, radius, angle1, angle2) {
		}
		, clip: function () {
		}
		, clipExtents: function (x1, y1, x2, y2) {
		}
		, clipPreserve: function () {
		}
		, closePath: function () {
		}
		, copyPage: function () {
		}
		, curveTo: function (x1, y1, x2, y2, x3, y3) {
		}
		, fill: function () {
		}
		, fillExtents: function (x1, y1, x2, y2) {
		}
		, fillPreserve: function () {
		}
		, identityMatrix: function () {
		}
		, inClip: function (x, y) {
			return false;
		}
		, inFill: function (x, y) {
			return false;
		}
		, inStroke: function (x, y) {
			return false;
		}
		, lineTo: function (x, y) {
		}
		, moveTo: function (x, y) {
		}
		, mask: function (pattern) {
		}
		, maskSurface: function (surface, x, y) {
		}
		, newPath: function () {
		}
		, paint: function () {
		}
		, paintWithAlpha: function (alpha) {
		}
		, popGroup: function () {
			return null;
		}
		, popGroupToSource: function () {
		}
		, pushGroup: function () {
		}
		, pushGroupWithContent: function (content) {
		}
		, recreate: function (surface) {
		}
		, rectangle: function (x, y, width, height) {
		}
		, relCurveTo: function (dx1, dy1, dx2, dy2, dx3, dy3) {
		}
		, relLineTo: function (dx, dy) {
		}
		, relMoveTo: function (dx, dy) {
		}
		, resetClip: function () {
		}
		, restore: function () {
		}
		, save: function () {
		}
		, setFontSize: function (size) {
		}
		, setSourceRGB: function (r, g, b) {
		}
		, setSourceRGBA: function (r, g, b, a) {
		}
		, setSourceSurface: function (surface, x, y) {
		}
		, showPage: function () {
		}
		, showText: function (utf8) {
		}
		, status: function () {
			return 0;
		}
		, stroke: function () {
		}
		, strokeExtents: function (x1, y1, x2, y2) {
		}
		, strokePreserve: function () {
		}
		, transform: function (matrix) {
		}
		, rotate: function (amount) {
		}
		, scale: function (x, y) {
		}
		, translate: function (x, y) {
		}
		, get_antialias: function () {
			return 0;
		}
		, set_antialias: function (value) {
			return value;
		}
		, get_currentPoint: function () {
			return null;
		}
		, get_dash: function () {
			return [];
		}
		, set_dash: function (value) {
			return value;
		}
		, get_dashCount: function () {
			return 0;
		}
		, get_fillRule: function () {
			return 0;
		}
		, set_fillRule: function (value) {
			return value;
		}
		, get_fontFace: function () {
			return 0;
		}
		, set_fontFace: function (value) {
			return value;
		}
		, get_fontOptions: function () {
			return null;
		}
		, set_fontOptions: function (value) {
			return value;
		}
		, get_groupTarget: function () {
			return 0;
		}
		, get_hasCurrentPoint: function () {
			return false;
		}
		, get_lineCap: function () {
			return 0;
		}
		, set_lineCap: function (value) {
			return value;
		}
		, get_lineJoin: function () {
			return 0;
		}
		, set_lineJoin: function (value) {
			return value;
		}
		, get_lineWidth: function () {
			return 0;
		}
		, set_lineWidth: function (value) {
			return value;
		}
		, get_matrix: function () {
			return null;
		}
		, set_matrix: function (value) {
			return value;
		}
		, get_miterLimit: function () {
			return 0;
		}
		, set_miterLimit: function (value) {
			return value;
		}
		, get_operator: function () {
			return 0;
		}
		, set_operator: function (value) {
			return value;
		}
		, get_source: function () {
			return 0;
		}
		, set_source: function (value) {
			return value;
		}
		, get_target: function () {
			return 0;
		}
		, get_tolerance: function () {
			return 0;
		}
		, set_tolerance: function (value) {
			return value;
		}
		, __class__: lime_graphics_cairo_Cairo
		, __properties__: { set_tolerance: "set_tolerance", get_tolerance: "get_tolerance", get_target: "get_target", set_source: "set_source", get_source: "get_source", set_operator: "set_operator", get_operator: "get_operator", set_miterLimit: "set_miterLimit", get_miterLimit: "get_miterLimit", set_matrix: "set_matrix", get_matrix: "get_matrix", set_lineWidth: "set_lineWidth", get_lineWidth: "get_lineWidth", set_lineJoin: "set_lineJoin", get_lineJoin: "get_lineJoin", set_lineCap: "set_lineCap", get_lineCap: "get_lineCap", get_hasCurrentPoint: "get_hasCurrentPoint", get_groupTarget: "get_groupTarget", set_fontOptions: "set_fontOptions", get_fontOptions: "get_fontOptions", set_fontFace: "set_fontFace", get_fontFace: "get_fontFace", set_fillRule: "set_fillRule", get_fillRule: "get_fillRule", get_dashCount: "get_dashCount", set_dash: "set_dash", get_dash: "get_dash", get_currentPoint: "get_currentPoint", set_antialias: "set_antialias", get_antialias: "get_antialias" }
	};
	var lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$ = {};
	$hxClasses["lime.graphics.cairo._CairoFTFontFace.CairoFTFontFace_Impl_"] = lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$;
	lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.__name__ = ["lime", "graphics", "cairo", "_CairoFTFontFace", "CairoFTFontFace_Impl_"];
	lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$._new = function () {
		return 0;
	};
	lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.create = function (face, loadFlags) {
		return 0;
	};
	var lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$ = {};
	$hxClasses["lime.graphics.cairo._CairoFontFace.CairoFontFace_Impl_"] = lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$;
	lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$.__name__ = ["lime", "graphics", "cairo", "_CairoFontFace", "CairoFontFace_Impl_"];
	lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$._new = function () {
		return null;
	};
	lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$.status = function (this1) {
		return 0;
	};
	var lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$ = {};
	$hxClasses["lime.graphics.cairo._CairoFontOptions.CairoFontOptions_Impl_"] = lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$;
	lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.__name__ = ["lime", "graphics", "cairo", "_CairoFontOptions", "CairoFontOptions_Impl_"];
	lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.__properties__ = { set_subpixelOrder: "set_subpixelOrder", get_subpixelOrder: "get_subpixelOrder", set_hintStyle: "set_hintStyle", get_hintStyle: "get_hintStyle", set_hintMetrics: "set_hintMetrics", get_hintMetrics: "get_hintMetrics", set_antialias: "set_antialias", get_antialias: "get_antialias" }
	lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$._new = function () {
		return null;
	};
	lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_antialias = function (this1) {
		return 0;
	};
	lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_antialias = function (this1, value) {
		return value;
	};
	lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_hintMetrics = function (this1) {
		return 0;
	};
	lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_hintMetrics = function (this1, value) {
		return value;
	};
	lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_hintStyle = function (this1) {
		return 0;
	};
	lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_hintStyle = function (this1, value) {
		return value;
	};
	lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_subpixelOrder = function (this1) {
		return 0;
	};
	lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_subpixelOrder = function (this1, value) {
		return value;
	};
	var lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$ = {};
	$hxClasses["lime.graphics.cairo._CairoImageSurface.CairoImageSurface_Impl_"] = lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$;
	lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.__name__ = ["lime", "graphics", "cairo", "_CairoImageSurface", "CairoImageSurface_Impl_"];
	lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.__properties__ = { get_width: "get_width", get_stride: "get_stride", get_height: "get_height", get_format: "get_format", get_data: "get_data" }
	lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$._new = function (format, width, height) {
		return 0;
	};
	lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.create = function (data, format, width, height, stride) {
		return 0;
	};
	lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.fromImage = function (image) {
		return null;
	};
	lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_data = function (this1) {
		return null;
	};
	lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_format = function (this1) {
		return 0;
	};
	lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_height = function (this1) {
		return 0;
	};
	lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_stride = function (this1) {
		return 0;
	};
	lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_width = function (this1) {
		return 0;
	};
	var lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$ = {};
	$hxClasses["lime.graphics.cairo._CairoPattern.CairoPattern_Impl_"] = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$;
	lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.__name__ = ["lime", "graphics", "cairo", "_CairoPattern", "CairoPattern_Impl_"];
	lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.__properties__ = { set_matrix: "set_matrix", get_matrix: "get_matrix", set_filter: "set_filter", get_filter: "get_filter", set_extend: "set_extend", get_extend: "get_extend", get_colorStopCount: "get_colorStopCount" }
	lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$._new = function (handle) {
		return handle;
	};
	lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGB = function (this1, offset, r, g, b) {
	};
	lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGBA = function (this1, offset, r, g, b, a) {
	};
	lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface = function (surface) {
		return 0;
	};
	lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createLinear = function (x0, y0, x1, y1) {
		return 0;
	};
	lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRadial = function (cx0, cy0, radius0, cx1, cy1, radius1) {
		return 0;
	};
	lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGB = function (r, g, b) {
		return 0;
	};
	lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA = function (r, g, b, a) {
		return 0;
	};
	lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_colorStopCount = function (this1) {
		return 0;
	};
	lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_extend = function (this1) {
		return 0;
	};
	lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_extend = function (this1, value) {
		return value;
	};
	lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_filter = function (this1) {
		return 0;
	};
	lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter = function (this1, value) {
		return value;
	};
	lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_matrix = function (this1) {
		return null;
	};
	lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix = function (this1, value) {
		return value;
	};
	var lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$ = {};
	$hxClasses["lime.graphics.cairo._CairoSurface.CairoSurface_Impl_"] = lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$;
	lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.__name__ = ["lime", "graphics", "cairo", "_CairoSurface", "CairoSurface_Impl_"];
	lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.flush = function (this1) {
	};
	var lime_graphics_console_IndexBuffer = function () {
	};
	$hxClasses["lime.graphics.console.IndexBuffer"] = lime_graphics_console_IndexBuffer;
	lime_graphics_console_IndexBuffer.__name__ = ["lime", "graphics", "console", "IndexBuffer"];
	lime_graphics_console_IndexBuffer.prototype = {
		__class__: lime_graphics_console_IndexBuffer
	};
	var lime_graphics_console_Primitive = $hxClasses["lime.graphics.console.Primitive"] = { __ename__: ["lime", "graphics", "console", "Primitive"], __constructs__: ["Point", "Line", "LineStrip", "Triangle", "TriangleStrip"] };
	lime_graphics_console_Primitive.Point = ["Point", 0];
	lime_graphics_console_Primitive.Point.toString = $estr;
	lime_graphics_console_Primitive.Point.__enum__ = lime_graphics_console_Primitive;
	lime_graphics_console_Primitive.Line = ["Line", 1];
	lime_graphics_console_Primitive.Line.toString = $estr;
	lime_graphics_console_Primitive.Line.__enum__ = lime_graphics_console_Primitive;
	lime_graphics_console_Primitive.LineStrip = ["LineStrip", 2];
	lime_graphics_console_Primitive.LineStrip.toString = $estr;
	lime_graphics_console_Primitive.LineStrip.__enum__ = lime_graphics_console_Primitive;
	lime_graphics_console_Primitive.Triangle = ["Triangle", 3];
	lime_graphics_console_Primitive.Triangle.toString = $estr;
	lime_graphics_console_Primitive.Triangle.__enum__ = lime_graphics_console_Primitive;
	lime_graphics_console_Primitive.TriangleStrip = ["TriangleStrip", 4];
	lime_graphics_console_Primitive.TriangleStrip.toString = $estr;
	lime_graphics_console_Primitive.TriangleStrip.__enum__ = lime_graphics_console_Primitive;
	var lime_graphics_console_Shader = function () {
	};
	$hxClasses["lime.graphics.console.Shader"] = lime_graphics_console_Shader;
	lime_graphics_console_Shader.__name__ = ["lime", "graphics", "console", "Shader"];
	lime_graphics_console_Shader.prototype = {
		__class__: lime_graphics_console_Shader
	};
	var lime_graphics_console_VertexBuffer = function () {
	};
	$hxClasses["lime.graphics.console.VertexBuffer"] = lime_graphics_console_VertexBuffer;
	lime_graphics_console_VertexBuffer.__name__ = ["lime", "graphics", "console", "VertexBuffer"];
	lime_graphics_console_VertexBuffer.prototype = {
		lock: function () {
			return new lime_graphics_console_VertexOutput();
		}
		, unlock: function () {
		}
		, __class__: lime_graphics_console_VertexBuffer
	};
	var lime_graphics_console_VertexOutput = function () {
	};
	$hxClasses["lime.graphics.console.VertexOutput"] = lime_graphics_console_VertexOutput;
	lime_graphics_console_VertexOutput.__name__ = ["lime", "graphics", "console", "VertexOutput"];
	lime_graphics_console_VertexOutput.prototype = {
		vec2: function (x, y) {
		}
		, vec3: function (x, y, z) {
		}
		, color: function (r, g, b, a) {
		}
		, __class__: lime_graphics_console_VertexOutput
	};
	var lime_graphics_format_BMP = function () { };
	$hxClasses["lime.graphics.format.BMP"] = lime_graphics_format_BMP;
	lime_graphics_format_BMP.__name__ = ["lime", "graphics", "format", "BMP"];
	lime_graphics_format_BMP.encode = function (image, type) {
		if (image.get_premultiplied() || image.get_format() != 0) {
			image = image.clone();
			image.set_premultiplied(false);
			image.set_format(0);
		}
		if (type == null) type = lime_graphics_format_BMPType.RGB;
		var fileHeaderLength = 14;
		var infoHeaderLength = 40;
		var pixelValuesLength = image.width * image.height * 4;
		if (type != null) switch (type[1]) {
			case 1:
				infoHeaderLength = 108;
				break;
			case 2:
				fileHeaderLength = 0;
				pixelValuesLength += image.width * image.height;
				break;
			case 0:
				pixelValuesLength = image.width * 3 + image.width * 3 % 4 + image.height * 3 + image.height * 3;
				break;
			default:
		} else {
		}
		var data = new lime_utils_ByteArray(fileHeaderLength + infoHeaderLength + pixelValuesLength);
		if (fileHeaderLength > 0) {
			data.writeByte(66);
			data.writeByte(77);
			data.writeInt(data.length);
			data.writeShort(0);
			data.writeShort(0);
			data.writeInt(fileHeaderLength + infoHeaderLength);
		}
		data.writeInt(infoHeaderLength);
		data.writeInt(image.width);
		data.writeInt(type == lime_graphics_format_BMPType.ICO ? image.height * 2 : image.height);
		data.writeShort(1);
		data.writeShort(type == lime_graphics_format_BMPType.RGB ? 24 : 32);
		data.writeInt(type == lime_graphics_format_BMPType.BITFIELD ? 3 : 0);
		data.writeInt(pixelValuesLength);
		data.writeInt(11824);
		data.writeInt(11824);
		data.writeInt(0);
		data.writeInt(0);
		if (type == lime_graphics_format_BMPType.BITFIELD) {
			data.writeInt(16711680);
			data.writeInt(65280);
			data.writeInt(255);
			data.writeInt(-16777216);
			data.writeByte(32);
			data.writeByte(110);
			data.writeByte(105);
			data.writeByte(87);
			var _g = 0;
			while (_g < 48) {
				var i = _g++;
				data.writeByte(0);
			}
		}
		var pixels = image.getPixels(new lime_math_Rectangle(0, 0, image.width, image.height), 1);
		var a;
		var r;
		var g;
		var b;
		if (type != null) switch (type[1]) {
			case 1:
				var _g1 = 0;
				var _g2 = image.height;
				while (_g1 < _g2) {
					var y = _g1++;
					pixels.position = (image.height - 1 - y) * 4 * image.width;
					var _g3 = 0;
					var _g21 = image.width;
					while (_g3 < _g21) {
						var x = _g3++;
						a = pixels.readByte();
						r = pixels.readByte();
						g = pixels.readByte();
						b = pixels.readByte();
						data.writeByte(b);
						data.writeByte(g);
						data.writeByte(r);
						data.writeByte(a);
					}
				}
				break;
			case 2:
				var andMask = new lime_utils_ByteArray(image.width * image.height);
				var _g11 = 0;
				var _g4 = image.height;
				while (_g11 < _g4) {
					var y1 = _g11++;
					pixels.position = (image.height - 1 - y1) * 4 * image.width;
					var _g31 = 0;
					var _g22 = image.width;
					while (_g31 < _g22) {
						var x1 = _g31++;
						a = pixels.readByte();
						r = pixels.readByte();
						g = pixels.readByte();
						b = pixels.readByte();
						data.writeByte(b);
						data.writeByte(g);
						data.writeByte(r);
						data.writeByte(a);
						andMask.writeByte(0);
					}
				}
				data.writeBytes(andMask);
				break;
			case 0:
				var _g12 = 0;
				var _g5 = image.height;
				while (_g12 < _g5) {
					var y2 = _g12++;
					pixels.position = (image.height - 1 - y2) * 4 * image.width;
					var _g32 = 0;
					var _g23 = image.width;
					while (_g32 < _g23) {
						var x2 = _g32++;
						a = pixels.readByte();
						r = pixels.readByte();
						g = pixels.readByte();
						b = pixels.readByte();
						data.writeByte(b);
						data.writeByte(g);
						data.writeByte(r);
					}
					var _g33 = 0;
					var _g24 = image.width * 3 % 4;
					while (_g33 < _g24) {
						var i1 = _g33++;
						data.writeByte(0);
					}
				}
				break;
			default:
		} else {
		}
		return data;
	};
	var lime_graphics_format_BMPType = $hxClasses["lime.graphics.format.BMPType"] = { __ename__: ["lime", "graphics", "format", "BMPType"], __constructs__: ["RGB", "BITFIELD", "ICO"] };
	lime_graphics_format_BMPType.RGB = ["RGB", 0];
	lime_graphics_format_BMPType.RGB.toString = $estr;
	lime_graphics_format_BMPType.RGB.__enum__ = lime_graphics_format_BMPType;
	lime_graphics_format_BMPType.BITFIELD = ["BITFIELD", 1];
	lime_graphics_format_BMPType.BITFIELD.toString = $estr;
	lime_graphics_format_BMPType.BITFIELD.__enum__ = lime_graphics_format_BMPType;
	lime_graphics_format_BMPType.ICO = ["ICO", 2];
	lime_graphics_format_BMPType.ICO.toString = $estr;
	lime_graphics_format_BMPType.ICO.__enum__ = lime_graphics_format_BMPType;
	var lime_graphics_format_JPEG = function () { };
	$hxClasses["lime.graphics.format.JPEG"] = lime_graphics_format_JPEG;
	lime_graphics_format_JPEG.__name__ = ["lime", "graphics", "format", "JPEG"];
	lime_graphics_format_JPEG.decodeBytes = function (bytes, decodeData) {
		if (decodeData == null) decodeData = true;
		return null;
	};
	lime_graphics_format_JPEG.decodeFile = function (path, decodeData) {
		if (decodeData == null) decodeData = true;
		return null;
	};
	lime_graphics_format_JPEG.encode = function (image, quality) {
		if (image.get_premultiplied() || image.get_format() != 0) {
			image = image.clone();
			image.set_premultiplied(false);
			image.set_format(0);
		}
		lime_graphics_utils_ImageCanvasUtil.sync(image, false);
		if (image.buffer.__srcCanvas != null) {
			var data = image.buffer.__srcCanvas.toDataURL("image/jpeg", quality / 100);
			var buffer = window.atob(data.split(";base64,")[1]);
			var byteArray = new lime_utils_ByteArray(buffer.length);
			var _g1 = 0;
			var _g = buffer.length;
			while (_g1 < _g) {
				var i = _g1++;
				byteArray.byteView[i] = HxOverrides.cca(buffer, i);
			}
			return byteArray;
		}
		return null;
	};
	var lime_graphics_format_PNG = function () { };
	$hxClasses["lime.graphics.format.PNG"] = lime_graphics_format_PNG;
	lime_graphics_format_PNG.__name__ = ["lime", "graphics", "format", "PNG"];
	lime_graphics_format_PNG.decodeBytes = function (bytes, decodeData) {
		if (decodeData == null) decodeData = true;
		return null;
	};
	lime_graphics_format_PNG.decodeFile = function (path, decodeData) {
		if (decodeData == null) decodeData = true;
		return null;
	};
	lime_graphics_format_PNG.encode = function (image) {
		if (image.get_premultiplied() || image.get_format() != 0) {
			image = image.clone();
			image.set_premultiplied(false);
			image.set_format(0);
		}
		return null;
	};
	var lime_graphics_opengl_GL = function () { };
	$hxClasses["lime.graphics.opengl.GL"] = lime_graphics_opengl_GL;
	lime_graphics_opengl_GL.__name__ = ["lime", "graphics", "opengl", "GL"];
	lime_graphics_opengl_GL.__properties__ = { get_version: "get_version" }
	lime_graphics_opengl_GL.version = null;
	lime_graphics_opengl_GL.context = null;
	lime_graphics_opengl_GL.activeTexture = function (texture) {
		lime_graphics_opengl_GL.context.activeTexture(texture);
	};
	lime_graphics_opengl_GL.attachShader = function (program, shader) {
		lime_graphics_opengl_GL.context.attachShader(program, shader);
	};
	lime_graphics_opengl_GL.bindAttribLocation = function (program, index, name) {
		lime_graphics_opengl_GL.context.bindAttribLocation(program, index, name);
	};
	lime_graphics_opengl_GL.bindBuffer = function (target, buffer) {
		lime_graphics_opengl_GL.context.bindBuffer(target, buffer);
	};
	lime_graphics_opengl_GL.bindFramebuffer = function (target, framebuffer) {
		lime_graphics_opengl_GL.context.bindFramebuffer(target, framebuffer);
	};
	lime_graphics_opengl_GL.bindRenderbuffer = function (target, renderbuffer) {
		lime_graphics_opengl_GL.context.bindRenderbuffer(target, renderbuffer);
	};
	lime_graphics_opengl_GL.bindTexture = function (target, texture) {
		lime_graphics_opengl_GL.context.bindTexture(target, texture);
	};
	lime_graphics_opengl_GL.blendColor = function (red, green, blue, alpha) {
		lime_graphics_opengl_GL.context.blendColor(red, green, blue, alpha);
	};
	lime_graphics_opengl_GL.blendEquation = function (mode) {
		lime_graphics_opengl_GL.context.blendEquation(mode);
	};
	lime_graphics_opengl_GL.blendEquationSeparate = function (modeRGB, modeAlpha) {
		lime_graphics_opengl_GL.context.blendEquationSeparate(modeRGB, modeAlpha);
	};
	lime_graphics_opengl_GL.blendFunc = function (sfactor, dfactor) {
		lime_graphics_opengl_GL.context.blendFunc(sfactor, dfactor);
	};
	lime_graphics_opengl_GL.blendFuncSeparate = function (srcRGB, dstRGB, srcAlpha, dstAlpha) {
		lime_graphics_opengl_GL.context.blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);
	};
	lime_graphics_opengl_GL.bufferData = function (target, data, usage) {
		lime_graphics_opengl_GL.context.bufferData(target, data, usage);
	};
	lime_graphics_opengl_GL.bufferSubData = function (target, offset, data) {
		lime_graphics_opengl_GL.context.bufferSubData(target, offset, data);
	};
	lime_graphics_opengl_GL.checkFramebufferStatus = function (target) {
		return lime_graphics_opengl_GL.context.checkFramebufferStatus(target);
	};
	lime_graphics_opengl_GL.clear = function (mask) {
		lime_graphics_opengl_GL.context.clear(mask);
	};
	lime_graphics_opengl_GL.clearColor = function (red, green, blue, alpha) {
		lime_graphics_opengl_GL.context.clearColor(red, green, blue, alpha);
	};
	lime_graphics_opengl_GL.clearDepth = function (depth) {
		lime_graphics_opengl_GL.context.clearDepth(depth);
	};
	lime_graphics_opengl_GL.clearStencil = function (s) {
		lime_graphics_opengl_GL.context.clearStencil(s);
	};
	lime_graphics_opengl_GL.colorMask = function (red, green, blue, alpha) {
		lime_graphics_opengl_GL.context.colorMask(red, green, blue, alpha);
	};
	lime_graphics_opengl_GL.compileShader = function (shader) {
		lime_graphics_opengl_GL.context.compileShader(shader);
	};
	lime_graphics_opengl_GL.compressedTexImage2D = function (target, level, internalformat, width, height, border, data) {
		lime_graphics_opengl_GL.context.compressedTexImage2D(target, level, internalformat, width, height, border, data);
	};
	lime_graphics_opengl_GL.compressedTexSubImage2D = function (target, level, xoffset, yoffset, width, height, format, data) {
		lime_graphics_opengl_GL.context.compressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, data);
	};
	lime_graphics_opengl_GL.copyTexImage2D = function (target, level, internalformat, x, y, width, height, border) {
		lime_graphics_opengl_GL.context.copyTexImage2D(target, level, internalformat, x, y, width, height, border);
	};
	lime_graphics_opengl_GL.copyTexSubImage2D = function (target, level, xoffset, yoffset, x, y, width, height) {
		lime_graphics_opengl_GL.context.copyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
	};
	lime_graphics_opengl_GL.createBuffer = function () {
		return lime_graphics_opengl_GL.context.createBuffer();
	};
	lime_graphics_opengl_GL.createFramebuffer = function () {
		return lime_graphics_opengl_GL.context.createFramebuffer();
	};
	lime_graphics_opengl_GL.createProgram = function () {
		return lime_graphics_opengl_GL.context.createProgram();
	};
	lime_graphics_opengl_GL.createRenderbuffer = function () {
		return lime_graphics_opengl_GL.context.createRenderbuffer();
	};
	lime_graphics_opengl_GL.createShader = function (type) {
		return lime_graphics_opengl_GL.context.createShader(type);
	};
	lime_graphics_opengl_GL.createTexture = function () {
		return lime_graphics_opengl_GL.context.createTexture();
	};
	lime_graphics_opengl_GL.cullFace = function (mode) {
		lime_graphics_opengl_GL.context.cullFace(mode);
	};
	lime_graphics_opengl_GL.deleteBuffer = function (buffer) {
		lime_graphics_opengl_GL.context.deleteBuffer(buffer);
	};
	lime_graphics_opengl_GL.deleteFramebuffer = function (framebuffer) {
		lime_graphics_opengl_GL.context.deleteFramebuffer(framebuffer);
	};
	lime_graphics_opengl_GL.deleteProgram = function (program) {
		lime_graphics_opengl_GL.context.deleteProgram(program);
	};
	lime_graphics_opengl_GL.deleteRenderbuffer = function (renderbuffer) {
		lime_graphics_opengl_GL.context.deleteRenderbuffer(renderbuffer);
	};
	lime_graphics_opengl_GL.deleteShader = function (shader) {
		lime_graphics_opengl_GL.context.deleteShader(shader);
	};
	lime_graphics_opengl_GL.deleteTexture = function (texture) {
		lime_graphics_opengl_GL.context.deleteTexture(texture);
	};
	lime_graphics_opengl_GL.depthFunc = function (func) {
		lime_graphics_opengl_GL.context.depthFunc(func);
	};
	lime_graphics_opengl_GL.depthMask = function (flag) {
		lime_graphics_opengl_GL.context.depthMask(flag);
	};
	lime_graphics_opengl_GL.depthRange = function (zNear, zFar) {
		lime_graphics_opengl_GL.context.depthRange(zNear, zFar);
	};
	lime_graphics_opengl_GL.detachShader = function (program, shader) {
		lime_graphics_opengl_GL.context.detachShader(program, shader);
	};
	lime_graphics_opengl_GL.disable = function (cap) {
		lime_graphics_opengl_GL.context.disable(cap);
	};
	lime_graphics_opengl_GL.disableVertexAttribArray = function (index) {
		lime_graphics_opengl_GL.context.disableVertexAttribArray(index);
	};
	lime_graphics_opengl_GL.drawArrays = function (mode, first, count) {
		lime_graphics_opengl_GL.context.drawArrays(mode, first, count);
	};
	lime_graphics_opengl_GL.drawElements = function (mode, count, type, offset) {
		lime_graphics_opengl_GL.context.drawElements(mode, count, type, offset);
	};
	lime_graphics_opengl_GL.enable = function (cap) {
		lime_graphics_opengl_GL.context.enable(cap);
	};
	lime_graphics_opengl_GL.enableVertexAttribArray = function (index) {
		lime_graphics_opengl_GL.context.enableVertexAttribArray(index);
	};
	lime_graphics_opengl_GL.finish = function () {
		lime_graphics_opengl_GL.context.finish();
	};
	lime_graphics_opengl_GL.flush = function () {
		lime_graphics_opengl_GL.context.flush();
	};
	lime_graphics_opengl_GL.framebufferRenderbuffer = function (target, attachment, renderbuffertarget, renderbuffer) {
		lime_graphics_opengl_GL.context.framebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
	};
	lime_graphics_opengl_GL.framebufferTexture2D = function (target, attachment, textarget, texture, level) {
		lime_graphics_opengl_GL.context.framebufferTexture2D(target, attachment, textarget, texture, level);
	};
	lime_graphics_opengl_GL.frontFace = function (mode) {
		lime_graphics_opengl_GL.context.frontFace(mode);
	};
	lime_graphics_opengl_GL.generateMipmap = function (target) {
		lime_graphics_opengl_GL.context.generateMipmap(target);
	};
	lime_graphics_opengl_GL.getActiveAttrib = function (program, index) {
		return lime_graphics_opengl_GL.context.getActiveAttrib(program, index);
	};
	lime_graphics_opengl_GL.getActiveUniform = function (program, index) {
		return lime_graphics_opengl_GL.context.getActiveUniform(program, index);
	};
	lime_graphics_opengl_GL.getAttachedShaders = function (program) {
		return lime_graphics_opengl_GL.context.getAttachedShaders(program);
	};
	lime_graphics_opengl_GL.getAttribLocation = function (program, name) {
		return lime_graphics_opengl_GL.context.getAttribLocation(program, name);
	};
	lime_graphics_opengl_GL.getBufferParameter = function (target, pname) {
		return lime_graphics_opengl_GL.context.getBufferParameter(target, pname);
	};
	lime_graphics_opengl_GL.getContextAttributes = function () {
		return lime_graphics_opengl_GL.context.getContextAttributes();
	};
	lime_graphics_opengl_GL.getError = function () {
		return lime_graphics_opengl_GL.context.getError();
	};
	lime_graphics_opengl_GL.getExtension = function (name) {
		return lime_graphics_opengl_GL.context.getExtension(name);
	};
	lime_graphics_opengl_GL.getFramebufferAttachmentParameter = function (target, attachment, pname) {
		return lime_graphics_opengl_GL.context.getFramebufferAttachmentParameter(target, attachment, pname);
	};
	lime_graphics_opengl_GL.getParameter = function (pname) {
		return lime_graphics_opengl_GL.context.getParameter(pname);
	};
	lime_graphics_opengl_GL.getProgramInfoLog = function (program) {
		return lime_graphics_opengl_GL.context.getProgramInfoLog(program);
	};
	lime_graphics_opengl_GL.getProgramParameter = function (program, pname) {
		return lime_graphics_opengl_GL.context.getProgramParameter(program, pname);
	};
	lime_graphics_opengl_GL.getRenderbufferParameter = function (target, pname) {
		return lime_graphics_opengl_GL.context.getRenderbufferParameter(target, pname);
	};
	lime_graphics_opengl_GL.getShaderInfoLog = function (shader) {
		return lime_graphics_opengl_GL.context.getShaderInfoLog(shader);
	};
	lime_graphics_opengl_GL.getShaderParameter = function (shader, pname) {
		return lime_graphics_opengl_GL.context.getShaderParameter(shader, pname);
	};
	lime_graphics_opengl_GL.getShaderPrecisionFormat = function (shadertype, precisiontype) {
		return lime_graphics_opengl_GL.context.getShaderPrecisionFormat(shadertype, precisiontype);
	};
	lime_graphics_opengl_GL.getShaderSource = function (shader) {
		return lime_graphics_opengl_GL.context.getShaderSource(shader);
	};
	lime_graphics_opengl_GL.getSupportedExtensions = function () {
		return lime_graphics_opengl_GL.context.getSupportedExtensions();
	};
	lime_graphics_opengl_GL.getTexParameter = function (target, pname) {
		return lime_graphics_opengl_GL.context.getTexParameter(target, pname);
	};
	lime_graphics_opengl_GL.getUniform = function (program, location) {
		return lime_graphics_opengl_GL.context.getUniform(program, location);
	};
	lime_graphics_opengl_GL.getUniformLocation = function (program, name) {
		return lime_graphics_opengl_GL.context.getUniformLocation(program, name);
	};
	lime_graphics_opengl_GL.getVertexAttrib = function (index, pname) {
		return lime_graphics_opengl_GL.context.getVertexAttrib(index, pname);
	};
	lime_graphics_opengl_GL.getVertexAttribOffset = function (index, pname) {
		return lime_graphics_opengl_GL.context.getVertexAttribOffset(index, pname);
	};
	lime_graphics_opengl_GL.hint = function (target, mode) {
		lime_graphics_opengl_GL.context.hint(target, mode);
	};
	lime_graphics_opengl_GL.isBuffer = function (buffer) {
		return lime_graphics_opengl_GL.context.isBuffer(buffer);
	};
	lime_graphics_opengl_GL.isContextLost = function () {
		return lime_graphics_opengl_GL.context.isContextLost();
	};
	lime_graphics_opengl_GL.isEnabled = function (cap) {
		return lime_graphics_opengl_GL.context.isEnabled(cap);
	};
	lime_graphics_opengl_GL.isFramebuffer = function (framebuffer) {
		return lime_graphics_opengl_GL.context.isFramebuffer(framebuffer);
	};
	lime_graphics_opengl_GL.isProgram = function (program) {
		return lime_graphics_opengl_GL.context.isProgram(program);
	};
	lime_graphics_opengl_GL.isRenderbuffer = function (renderbuffer) {
		return lime_graphics_opengl_GL.context.isRenderbuffer(renderbuffer);
	};
	lime_graphics_opengl_GL.isShader = function (shader) {
		return lime_graphics_opengl_GL.context.isShader(shader);
	};
	lime_graphics_opengl_GL.isTexture = function (texture) {
		return lime_graphics_opengl_GL.context.isTexture(texture);
	};
	lime_graphics_opengl_GL.lineWidth = function (width) {
		lime_graphics_opengl_GL.context.lineWidth(width);
	};
	lime_graphics_opengl_GL.linkProgram = function (program) {
		lime_graphics_opengl_GL.context.linkProgram(program);
	};
	lime_graphics_opengl_GL.pixelStorei = function (pname, param) {
		lime_graphics_opengl_GL.context.pixelStorei(pname, param);
	};
	lime_graphics_opengl_GL.polygonOffset = function (factor, units) {
		lime_graphics_opengl_GL.context.polygonOffset(factor, units);
	};
	lime_graphics_opengl_GL.readPixels = function (x, y, width, height, format, type, pixels) {
		lime_graphics_opengl_GL.context.readPixels(x, y, width, height, format, type, pixels);
	};
	lime_graphics_opengl_GL.renderbufferStorage = function (target, internalformat, width, height) {
		lime_graphics_opengl_GL.context.renderbufferStorage(target, internalformat, width, height);
	};
	lime_graphics_opengl_GL.sampleCoverage = function (value, invert) {
		lime_graphics_opengl_GL.context.sampleCoverage(value, invert);
	};
	lime_graphics_opengl_GL.scissor = function (x, y, width, height) {
		lime_graphics_opengl_GL.context.scissor(x, y, width, height);
	};
	lime_graphics_opengl_GL.shaderSource = function (shader, source) {
		lime_graphics_opengl_GL.context.shaderSource(shader, source);
	};
	lime_graphics_opengl_GL.stencilFunc = function (func, ref, mask) {
		lime_graphics_opengl_GL.context.stencilFunc(func, ref, mask);
	};
	lime_graphics_opengl_GL.stencilFuncSeparate = function (face, func, ref, mask) {
		lime_graphics_opengl_GL.context.stencilFuncSeparate(face, func, ref, mask);
	};
	lime_graphics_opengl_GL.stencilMask = function (mask) {
		lime_graphics_opengl_GL.context.stencilMask(mask);
	};
	lime_graphics_opengl_GL.stencilMaskSeparate = function (face, mask) {
		lime_graphics_opengl_GL.context.stencilMaskSeparate(face, mask);
	};
	lime_graphics_opengl_GL.stencilOp = function (fail, zfail, zpass) {
		lime_graphics_opengl_GL.context.stencilOp(fail, zfail, zpass);
	};
	lime_graphics_opengl_GL.stencilOpSeparate = function (face, fail, zfail, zpass) {
		lime_graphics_opengl_GL.context.stencilOpSeparate(face, fail, zfail, zpass);
	};
	lime_graphics_opengl_GL.texImage2D = function (target, level, internalformat, width, height, border, format, type, pixels) {
		lime_graphics_opengl_GL.context.texImage2D(target, level, internalformat, width, height, border, format, type, pixels);
	};
	lime_graphics_opengl_GL.texParameterf = function (target, pname, param) {
		lime_graphics_opengl_GL.context.texParameterf(target, pname, param);
	};
	lime_graphics_opengl_GL.texParameteri = function (target, pname, param) {
		lime_graphics_opengl_GL.context.texParameteri(target, pname, param);
	};
	lime_graphics_opengl_GL.texSubImage2D = function (target, level, xoffset, yoffset, width, height, format, type, pixels) {
		lime_graphics_opengl_GL.context.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
	};
	lime_graphics_opengl_GL.uniform1f = function (location, x) {
		lime_graphics_opengl_GL.context.uniform1f(location, x);
	};
	lime_graphics_opengl_GL.uniform1fv = function (location, x) {
		lime_graphics_opengl_GL.context.uniform1fv(location, x);
	};
	lime_graphics_opengl_GL.uniform1i = function (location, x) {
		lime_graphics_opengl_GL.context.uniform1i(location, x);
	};
	lime_graphics_opengl_GL.uniform1iv = function (location, v) {
		lime_graphics_opengl_GL.context.uniform1iv(location, v);
	};
	lime_graphics_opengl_GL.uniform2f = function (location, x, y) {
		lime_graphics_opengl_GL.context.uniform2f(location, x, y);
	};
	lime_graphics_opengl_GL.uniform2fv = function (location, v) {
		lime_graphics_opengl_GL.context.uniform2fv(location, v);
	};
	lime_graphics_opengl_GL.uniform2i = function (location, x, y) {
		lime_graphics_opengl_GL.context.uniform2i(location, x, y);
	};
	lime_graphics_opengl_GL.uniform2iv = function (location, v) {
		lime_graphics_opengl_GL.context.uniform2iv(location, v);
	};
	lime_graphics_opengl_GL.uniform3f = function (location, x, y, z) {
		lime_graphics_opengl_GL.context.uniform3f(location, x, y, z);
	};
	lime_graphics_opengl_GL.uniform3fv = function (location, v) {
		lime_graphics_opengl_GL.context.uniform3fv(location, v);
	};
	lime_graphics_opengl_GL.uniform3i = function (location, x, y, z) {
		lime_graphics_opengl_GL.context.uniform3i(location, x, y, z);
	};
	lime_graphics_opengl_GL.uniform3iv = function (location, v) {
		lime_graphics_opengl_GL.context.uniform3iv(location, v);
	};
	lime_graphics_opengl_GL.uniform4f = function (location, x, y, z, w) {
		lime_graphics_opengl_GL.context.uniform4f(location, x, y, z, w);
	};
	lime_graphics_opengl_GL.uniform4fv = function (location, v) {
		lime_graphics_opengl_GL.context.uniform4fv(location, v);
	};
	lime_graphics_opengl_GL.uniform4i = function (location, x, y, z, w) {
		lime_graphics_opengl_GL.context.uniform4i(location, x, y, z, w);
	};
	lime_graphics_opengl_GL.uniform4iv = function (location, v) {
		lime_graphics_opengl_GL.context.uniform4iv(location, v);
	};
	lime_graphics_opengl_GL.uniformMatrix2fv = function (location, transpose, v) {
		lime_graphics_opengl_GL.context.uniformMatrix2fv(location, transpose, v);
	};
	lime_graphics_opengl_GL.uniformMatrix3fv = function (location, transpose, v) {
		lime_graphics_opengl_GL.context.uniformMatrix3fv(location, transpose, v);
	};
	lime_graphics_opengl_GL.uniformMatrix4fv = function (location, transpose, v) {
		lime_graphics_opengl_GL.context.uniformMatrix4fv(location, transpose, v);
	};
	lime_graphics_opengl_GL.useProgram = function (program) {
		lime_graphics_opengl_GL.context.useProgram(program);
	};
	lime_graphics_opengl_GL.validateProgram = function (program) {
		lime_graphics_opengl_GL.context.validateProgram(program);
	};
	lime_graphics_opengl_GL.vertexAttrib1f = function (indx, x) {
		lime_graphics_opengl_GL.context.vertexAttrib1f(indx, x);
	};
	lime_graphics_opengl_GL.vertexAttrib1fv = function (indx, values) {
		lime_graphics_opengl_GL.context.vertexAttrib1fv(indx, values);
	};
	lime_graphics_opengl_GL.vertexAttrib2f = function (indx, x, y) {
		lime_graphics_opengl_GL.context.vertexAttrib2f(indx, x, y);
	};
	lime_graphics_opengl_GL.vertexAttrib2fv = function (indx, values) {
		lime_graphics_opengl_GL.context.vertexAttrib2fv(indx, values);
	};
	lime_graphics_opengl_GL.vertexAttrib3f = function (indx, x, y, z) {
		lime_graphics_opengl_GL.context.vertexAttrib3f(indx, x, y, z);
	};
	lime_graphics_opengl_GL.vertexAttrib3fv = function (indx, values) {
		lime_graphics_opengl_GL.context.vertexAttrib3fv(indx, values);
	};
	lime_graphics_opengl_GL.vertexAttrib4f = function (indx, x, y, z, w) {
		lime_graphics_opengl_GL.context.vertexAttrib4f(indx, x, y, z, w);
	};
	lime_graphics_opengl_GL.vertexAttrib4fv = function (indx, values) {
		lime_graphics_opengl_GL.context.vertexAttrib4fv(indx, values);
	};
	lime_graphics_opengl_GL.vertexAttribPointer = function (indx, size, type, normalized, stride, offset) {
		lime_graphics_opengl_GL.context.vertexAttribPointer(indx, size, type, normalized, stride, offset);
	};
	lime_graphics_opengl_GL.viewport = function (x, y, width, height) {
		lime_graphics_opengl_GL.context.viewport(x, y, width, height);
	};
	lime_graphics_opengl_GL.get_version = function () {
		return 2;
	};
	var lime_graphics_utils_ImageCanvasUtil = function () { };
	$hxClasses["lime.graphics.utils.ImageCanvasUtil"] = lime_graphics_utils_ImageCanvasUtil;
	lime_graphics_utils_ImageCanvasUtil.__name__ = ["lime", "graphics", "utils", "ImageCanvasUtil"];
	lime_graphics_utils_ImageCanvasUtil.colorTransform = function (image, rect, colorMatrix) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
		lime_graphics_utils_ImageDataUtil.colorTransform(image, rect, colorMatrix);
	};
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas = function (image) {
		var buffer = image.buffer;
		if (buffer.__srcImage != null) {
			if (buffer.__srcCanvas == null) {
				lime_graphics_utils_ImageCanvasUtil.createCanvas(image, buffer.__srcImage.width, buffer.__srcImage.height);
				buffer.__srcContext.drawImage(buffer.__srcImage, 0, 0);
			}
			buffer.__srcImage = null;
		} else if (buffer.data != null && buffer.__srcCanvas == null) {
			lime_graphics_utils_ImageCanvasUtil.createCanvas(image, buffer.width, buffer.height);
			lime_graphics_utils_ImageCanvasUtil.createImageData(image);
		} else if (buffer.data == null && buffer.__srcImageData != null) buffer.data = buffer.__srcImageData.data;
	};
	lime_graphics_utils_ImageCanvasUtil.convertToData = function (image) {
		if (image.buffer.data == null) {
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
			lime_graphics_utils_ImageCanvasUtil.sync(image, false);
			lime_graphics_utils_ImageCanvasUtil.createImageData(image);
			image.buffer.__srcCanvas = null;
			image.buffer.__srcContext = null;
		}
	};
	lime_graphics_utils_ImageCanvasUtil.copyChannel = function (image, sourceImage, sourceRect, destPoint, sourceChannel, destChannel) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceImage);
		lime_graphics_utils_ImageCanvasUtil.createImageData(sourceImage);
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
		lime_graphics_utils_ImageDataUtil.copyChannel(image, sourceImage, sourceRect, destPoint, sourceChannel, destChannel);
	};
	lime_graphics_utils_ImageCanvasUtil.copyPixels = function (image, sourceImage, sourceRect, destPoint, alphaImage, alphaPoint, mergeAlpha) {
		if (mergeAlpha == null) mergeAlpha = false;
		if (destPoint == null || destPoint.x >= image.width || destPoint.y >= image.height || sourceRect == null || sourceRect.width < 1 || sourceRect.height < 1) return;
		if (alphaImage != null && alphaImage.get_transparent()) {
			if (alphaPoint == null) alphaPoint = new lime_math_Vector2();
			var tempData = image.clone();
			tempData.copyChannel(alphaImage, new lime_math_Rectangle(alphaPoint.x, alphaPoint.y, sourceRect.width, sourceRect.height), new lime_math_Vector2(sourceRect.x, sourceRect.y), lime_graphics_ImageChannel.ALPHA, lime_graphics_ImageChannel.ALPHA);
			sourceImage = tempData;
		}
		lime_graphics_utils_ImageCanvasUtil.sync(image, true);
		if (!mergeAlpha) {
			if (image.get_transparent() && sourceImage.get_transparent()) image.buffer.__srcContext.clearRect(destPoint.x + image.offsetX, destPoint.y + image.offsetY, sourceRect.width + image.offsetX, sourceRect.height + image.offsetY);
		}
		lime_graphics_utils_ImageCanvasUtil.sync(sourceImage, false);
		if (sourceImage.buffer.get_src() != null) image.buffer.__srcContext.drawImage(sourceImage.buffer.get_src(), sourceRect.x + sourceImage.offsetX | 0, sourceRect.y + sourceImage.offsetY | 0, sourceRect.width | 0, sourceRect.height | 0, destPoint.x + image.offsetX | 0, destPoint.y + image.offsetY | 0, sourceRect.width | 0, sourceRect.height | 0);
	};
	lime_graphics_utils_ImageCanvasUtil.createCanvas = function (image, width, height) {
		var buffer = image.buffer;
		if (buffer.__srcCanvas == null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcCanvas.width = width;
			buffer.__srcCanvas.height = height;
			if (!image.get_transparent()) {
				if (!image.get_transparent()) buffer.__srcCanvas.setAttribute("moz-opaque", "true");
				buffer.__srcContext = buffer.__srcCanvas.getContext("2d", { alpha: false });
			} else buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcContext.mozImageSmoothingEnabled = false;
			buffer.__srcContext.msImageSmoothingEnabled = false;
			buffer.__srcContext.imageSmoothingEnabled = false;
		}
	};
	lime_graphics_utils_ImageCanvasUtil.createImageData = function (image) {
		var buffer = image.buffer;
		if (buffer.__srcImageData == null) {
			if (buffer.data == null) buffer.__srcImageData = buffer.__srcContext.getImageData(0, 0, buffer.width, buffer.height); else {
				buffer.__srcImageData = buffer.__srcContext.createImageData(buffer.width, buffer.height);
				buffer.__srcImageData.data.set(buffer.data);
			}
			var elements = buffer.__srcImageData.data.buffer;
			var this1;
			if (elements != null) this1 = new Uint8Array(elements); else this1 = null;
			buffer.data = this1;
		}
	};
	lime_graphics_utils_ImageCanvasUtil.fillRect = function (image, rect, color, format) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
		lime_graphics_utils_ImageCanvasUtil.sync(image, true);
		if (rect.x == 0 && rect.y == 0 && rect.width == image.width && rect.height == image.height) {
			if (image.get_transparent() && (color & 255) == 0) {
				image.buffer.__srcCanvas.width = image.buffer.width;
				return;
			}
		}
		var r;
		var g;
		var b;
		var a;
		if (format == 1) {
			r = color >> 16 & 255;
			g = color >> 8 & 255;
			b = color & 255;
			if (image.get_transparent()) a = color >> 24 & 255; else a = 255;
		} else {
			r = color >> 24 & 255;
			g = color >> 16 & 255;
			b = color >> 8 & 255;
			if (image.get_transparent()) a = color & 255; else a = 255;
		}
		image.buffer.__srcContext.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + a / 255 + ")";
		image.buffer.__srcContext.fillRect(rect.x + image.offsetX, rect.y + image.offsetY, rect.width + image.offsetX, rect.height + image.offsetY);
	};
	lime_graphics_utils_ImageCanvasUtil.floodFill = function (image, x, y, color, format) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
		lime_graphics_utils_ImageDataUtil.floodFill(image, x, y, color, format);
	};
	lime_graphics_utils_ImageCanvasUtil.getPixel = function (image, x, y, format) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
		return lime_graphics_utils_ImageDataUtil.getPixel(image, x, y, format);
	};
	lime_graphics_utils_ImageCanvasUtil.getPixel32 = function (image, x, y, format) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
		return lime_graphics_utils_ImageDataUtil.getPixel32(image, x, y, format);
	};
	lime_graphics_utils_ImageCanvasUtil.getPixels = function (image, rect, format) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
		return lime_graphics_utils_ImageDataUtil.getPixels(image, rect, format);
	};
	lime_graphics_utils_ImageCanvasUtil.merge = function (image, sourceImage, sourceRect, destPoint, redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceImage);
		lime_graphics_utils_ImageCanvasUtil.createImageData(sourceImage);
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
		lime_graphics_utils_ImageDataUtil.merge(image, sourceImage, sourceRect, destPoint, redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier);
	};
	lime_graphics_utils_ImageCanvasUtil.resize = function (image, newWidth, newHeight) {
		var buffer = image.buffer;
		if (buffer.__srcCanvas == null) {
			lime_graphics_utils_ImageCanvasUtil.createCanvas(image, newWidth, newHeight);
			buffer.__srcContext.drawImage(buffer.get_src(), 0, 0, newWidth, newHeight);
		} else {
			lime_graphics_utils_ImageCanvasUtil.sync(image, true);
			var sourceCanvas = buffer.__srcCanvas;
			buffer.__srcCanvas = null;
			lime_graphics_utils_ImageCanvasUtil.createCanvas(image, newWidth, newHeight);
			buffer.__srcContext.drawImage(sourceCanvas, 0, 0, newWidth, newHeight);
		}
	};
	lime_graphics_utils_ImageCanvasUtil.scroll = function (image, x, y) {
		if (x % image.width == 0 && y % image.height == 0) return;
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
		lime_graphics_utils_ImageCanvasUtil.sync(image, true);
		image.buffer.__srcContext.clearRect(x, y, image.width, image.height);
		image.buffer.__srcContext.drawImage(image.buffer.__srcCanvas, x, y);
	};
	lime_graphics_utils_ImageCanvasUtil.setPixel = function (image, x, y, color, format) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
		lime_graphics_utils_ImageDataUtil.setPixel(image, x, y, color, format);
	};
	lime_graphics_utils_ImageCanvasUtil.setPixel32 = function (image, x, y, color, format) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
		lime_graphics_utils_ImageDataUtil.setPixel32(image, x, y, color, format);
	};
	lime_graphics_utils_ImageCanvasUtil.setPixels = function (image, rect, byteArray, format) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
		lime_graphics_utils_ImageDataUtil.setPixels(image, rect, byteArray, format);
	};
	lime_graphics_utils_ImageCanvasUtil.sync = function (image, clear) {
		if (image.dirty && image.buffer.__srcImageData != null && image.type != lime_graphics_ImageType.DATA) {
			image.buffer.__srcContext.putImageData(image.buffer.__srcImageData, 0, 0);
			image.buffer.data = null;
			image.dirty = false;
		}
		if (clear) {
			image.buffer.__srcImageData = null;
			image.buffer.data = null;
		}
	};
	var lime_graphics_utils_ImageDataUtil = function () { };
	$hxClasses["lime.graphics.utils.ImageDataUtil"] = lime_graphics_utils_ImageDataUtil;
	lime_graphics_utils_ImageDataUtil.__name__ = ["lime", "graphics", "utils", "ImageDataUtil"];
	lime_graphics_utils_ImageDataUtil.colorTransform = function (image, rect, colorMatrix) {
		var data = image.buffer.data;
		if (data == null) return;
		var format = image.buffer.format;
		var premultiplied = image.buffer.premultiplied;
		var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image, rect);
		var alphaTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable(colorMatrix);
		var redTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable(colorMatrix);
		var greenTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable(colorMatrix);
		var blueTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable(colorMatrix);
		var row;
		var offset;
		var pixel;
		var _g1 = 0;
		var _g = dataView.height;
		while (_g1 < _g) {
			var y = _g1++;
			row = dataView.offset + dataView.stride * y;
			var _g3 = 0;
			var _g2 = dataView.width;
			while (_g3 < _g2) {
				var x = _g3++;
				offset = row + x * 4;
				switch (format) {
					case 2:
						pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
						break;
					case 0:
						pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
						break;
					case 1:
						pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
						break;
				}
				if (premultiplied) {
					if ((pixel & 255) != 0 && (pixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
						var r;
						var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
						var g;
						var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
						var b;
						var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
						pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
					}
				}
				pixel = (redTable[pixel >> 24 & 255] & 255) << 24 | (greenTable[pixel >> 16 & 255] & 255) << 16 | (blueTable[pixel >> 8 & 255] & 255) << 8 | alphaTable[pixel & 255] & 255;
				if (premultiplied) {
					if ((pixel & 255) == 0) {
						if (pixel != 0) pixel = 0;
					} else if ((pixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
						pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
					}
				}
				switch (format) {
					case 2:
						data[offset] = pixel >> 8 & 255;
						data[offset + 1] = pixel >> 16 & 255;
						data[offset + 2] = pixel >> 24 & 255;
						data[offset + 3] = pixel & 255;
						break;
					case 0:
						data[offset] = pixel >> 24 & 255;
						data[offset + 1] = pixel >> 16 & 255;
						data[offset + 2] = pixel >> 8 & 255;
						data[offset + 3] = pixel & 255;
						break;
					case 1:
						data[offset] = pixel & 255;
						data[offset + 1] = pixel >> 24 & 255;
						data[offset + 2] = pixel >> 16 & 255;
						data[offset + 3] = pixel >> 8 & 255;
						break;
				}
			}
		}
		image.dirty = true;
	};
	lime_graphics_utils_ImageDataUtil.copyChannel = function (image, sourceImage, sourceRect, destPoint, sourceChannel, destChannel) {
		var destIdx;
		switch (destChannel[1]) {
			case 0:
				destIdx = 0;
				break;
			case 1:
				destIdx = 1;
				break;
			case 2:
				destIdx = 2;
				break;
			case 3:
				destIdx = 3;
				break;
		}
		var srcIdx;
		switch (sourceChannel[1]) {
			case 0:
				srcIdx = 0;
				break;
			case 1:
				srcIdx = 1;
				break;
			case 2:
				srcIdx = 2;
				break;
			case 3:
				srcIdx = 3;
				break;
		}
		var srcData = sourceImage.buffer.data;
		var destData = image.buffer.data;
		if (srcData == null || destData == null) return;
		var srcView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage, sourceRect);
		var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image, new lime_math_Rectangle(destPoint.x, destPoint.y, srcView.width, srcView.height));
		var srcFormat = sourceImage.buffer.format;
		var destFormat = image.buffer.format;
		var srcPremultiplied = sourceImage.buffer.premultiplied;
		var destPremultiplied = image.buffer.premultiplied;
		var srcPosition;
		var destPosition;
		var srcPixel;
		var destPixel;
		var value = 0;
		var _g1 = 0;
		var _g = destView.height;
		while (_g1 < _g) {
			var y = _g1++;
			srcPosition = srcView.offset + srcView.stride * y;
			destPosition = destView.offset + destView.stride * y;
			var _g3 = 0;
			var _g2 = destView.width;
			while (_g3 < _g2) {
				var x = _g3++;
				switch (srcFormat) {
					case 2:
						srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
						break;
					case 0:
						srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
						break;
					case 1:
						srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
						break;
				}
				if (srcPremultiplied) {
					if ((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (srcPixel & 255);
						var r;
						var idx = Math.round((srcPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
						var g;
						var idx1 = Math.round((srcPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
						var b;
						var idx2 = Math.round((srcPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
						srcPixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | srcPixel & 255 & 255;
					}
				}
				switch (destFormat) {
					case 2:
						destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					case 0:
						destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					case 1:
						destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
						break;
				}
				if (destPremultiplied) {
					if ((destPixel & 255) != 0 && (destPixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
						var r1;
						var idx3 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
						var g1;
						var idx4 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
						var b1;
						var idx5 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
						destPixel = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | destPixel & 255 & 255;
					}
				}
				switch (srcIdx) {
					case 0:
						value = srcPixel >> 24 & 255;
						break;
					case 1:
						value = srcPixel >> 16 & 255;
						break;
					case 2:
						value = srcPixel >> 8 & 255;
						break;
					case 3:
						value = srcPixel & 255;
						break;
				}
				switch (destIdx) {
					case 0:
						destPixel = (value & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						value;
						break;
					case 1:
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						value;
						break;
					case 2:
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value & 255) << 8 | destPixel & 255 & 255;
						value;
						break;
					case 3:
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value & 255;
						value;
						break;
				}
				if (destPremultiplied) {
					if ((destPixel & 255) == 0) {
						if (destPixel != 0) destPixel = 0;
					} else if ((destPixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
						destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
					}
				}
				switch (destFormat) {
					case 2:
						destData[destPosition] = destPixel >> 8 & 255;
						destData[destPosition + 1] = destPixel >> 16 & 255;
						destData[destPosition + 2] = destPixel >> 24 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					case 0:
						destData[destPosition] = destPixel >> 24 & 255;
						destData[destPosition + 1] = destPixel >> 16 & 255;
						destData[destPosition + 2] = destPixel >> 8 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					case 1:
						destData[destPosition] = destPixel & 255;
						destData[destPosition + 1] = destPixel >> 24 & 255;
						destData[destPosition + 2] = destPixel >> 16 & 255;
						destData[destPosition + 3] = destPixel >> 8 & 255;
						break;
				}
				srcPosition += 4;
				destPosition += 4;
			}
		}
		image.dirty = true;
	};
	lime_graphics_utils_ImageDataUtil.copyPixels = function (image, sourceImage, sourceRect, destPoint, alphaImage, alphaPoint, mergeAlpha) {
		if (mergeAlpha == null) mergeAlpha = false;
		var sourceData = sourceImage.buffer.data;
		var destData = image.buffer.data;
		if (sourceData == null || destData == null) return;
		var sourceView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage, sourceRect);
		var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image, new lime_math_Rectangle(destPoint.x, destPoint.y, sourceView.width, sourceView.height));
		var sourceFormat = sourceImage.buffer.format;
		var destFormat = image.buffer.format;
		var sourcePremultiplied = sourceImage.buffer.premultiplied;
		var destPremultiplied = image.buffer.premultiplied;
		var sourcePosition;
		var destPosition;
		var sourcePixel;
		if (!mergeAlpha || !sourceImage.get_transparent()) {
			var _g1 = 0;
			var _g = destView.height;
			while (_g1 < _g) {
				var y = _g1++;
				sourcePosition = sourceView.offset + sourceView.stride * y;
				destPosition = destView.offset + destView.stride * y;
				var _g3 = 0;
				var _g2 = destView.width;
				while (_g3 < _g2) {
					var x = _g3++;
					switch (sourceFormat) {
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
					}
					if (sourcePremultiplied) {
						if ((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
							var r;
							var idx = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
							var g;
							var idx1 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
							var b;
							var idx2 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
							sourcePixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | sourcePixel & 255 & 255;
						}
					}
					if (destPremultiplied) {
						if ((sourcePixel & 255) == 0) {
							if (sourcePixel != 0) sourcePixel = 0;
						} else if ((sourcePixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[sourcePixel & 255];
							sourcePixel = ((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
						}
					}
					switch (destFormat) {
						case 2:
							destData[destPosition] = sourcePixel >> 8 & 255;
							destData[destPosition + 1] = sourcePixel >> 16 & 255;
							destData[destPosition + 2] = sourcePixel >> 24 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						case 0:
							destData[destPosition] = sourcePixel >> 24 & 255;
							destData[destPosition + 1] = sourcePixel >> 16 & 255;
							destData[destPosition + 2] = sourcePixel >> 8 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						case 1:
							destData[destPosition] = sourcePixel & 255;
							destData[destPosition + 1] = sourcePixel >> 24 & 255;
							destData[destPosition + 2] = sourcePixel >> 16 & 255;
							destData[destPosition + 3] = sourcePixel >> 8 & 255;
							break;
					}
					sourcePosition += 4;
					destPosition += 4;
				}
			}
		} else {
			var sourceAlpha;
			var destAlpha;
			var oneMinusSourceAlpha;
			var blendAlpha;
			var destPixel;
			if (alphaImage == null) {
				var _g11 = 0;
				var _g4 = destView.height;
				while (_g11 < _g4) {
					var y1 = _g11++;
					sourcePosition = sourceView.offset + sourceView.stride * y1;
					destPosition = destView.offset + destView.stride * y1;
					var _g31 = 0;
					var _g21 = destView.width;
					while (_g31 < _g21) {
						var x1 = _g31++;
						switch (sourceFormat) {
							case 2:
								sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
								break;
							case 0:
								sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
								break;
							case 1:
								sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
								break;
						}
						if (sourcePremultiplied) {
							if ((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
								var r1;
								var idx3 = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
								r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
								var g1;
								var idx4 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
								g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
								var b1;
								var idx5 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
								b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
								sourcePixel = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch (destFormat) {
							case 2:
								destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
								break;
							case 0:
								destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
								break;
							case 1:
								destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
								break;
						}
						if (destPremultiplied) {
							if ((destPixel & 255) != 0 && (destPixel & 255) != 255) {
								lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
								var r2;
								var idx6 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
								r2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx6];
								var g2;
								var idx7 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
								g2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx7];
								var b2;
								var idx8 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
								b2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx8];
								destPixel = (r2 & 255) << 24 | (g2 & 255) << 16 | (b2 & 255) << 8 | destPixel & 255 & 255;
							}
						}
						sourceAlpha = (sourcePixel & 255) / 255.0;
						destAlpha = (destPixel & 255) / 255.0;
						oneMinusSourceAlpha = 1 - sourceAlpha;
						blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
						if (blendAlpha == 0) destPixel = 0; else {
							var value;
							var idx9 = Math.round(((sourcePixel >> 24 & 255) * sourceAlpha + (destPixel >> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
							value = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx9];
							destPixel = (value & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							value;
							var value1;
							var idx10 = Math.round(((sourcePixel >> 16 & 255) * sourceAlpha + (destPixel >> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
							value1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx10];
							destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							value1;
							var value2;
							var idx11 = Math.round(((sourcePixel >> 8 & 255) * sourceAlpha + (destPixel >> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
							value2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx11];
							destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
							value2;
							var value3;
							var idx12 = Math.round(blendAlpha * 255.0);
							value3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx12];
							destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value3 & 255;
							value3;
						}
						if (destPremultiplied) {
							if ((destPixel & 255) == 0) {
								if (destPixel != 0) destPixel = 0;
							} else if ((destPixel & 255) != 255) {
								lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
								destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
							}
						}
						switch (destFormat) {
							case 2:
								destData[destPosition] = destPixel >> 8 & 255;
								destData[destPosition + 1] = destPixel >> 16 & 255;
								destData[destPosition + 2] = destPixel >> 24 & 255;
								destData[destPosition + 3] = destPixel & 255;
								break;
							case 0:
								destData[destPosition] = destPixel >> 24 & 255;
								destData[destPosition + 1] = destPixel >> 16 & 255;
								destData[destPosition + 2] = destPixel >> 8 & 255;
								destData[destPosition + 3] = destPixel & 255;
								break;
							case 1:
								destData[destPosition] = destPixel & 255;
								destData[destPosition + 1] = destPixel >> 24 & 255;
								destData[destPosition + 2] = destPixel >> 16 & 255;
								destData[destPosition + 3] = destPixel >> 8 & 255;
								break;
						}
						sourcePosition += 4;
						destPosition += 4;
					}
				}
			} else {
				if (alphaPoint == null) alphaPoint = new lime_math_Vector2();
				var alphaData = alphaImage.buffer.data;
				var alphaFormat = alphaImage.buffer.format;
				var alphaPremultiplied = alphaImage.buffer.premultiplied;
				var alphaView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(alphaImage, new lime_math_Rectangle(alphaPoint.x, alphaPoint.y, destView.width, destView.height));
				var alphaPosition;
				var alphaPixel;
				var _g12 = 0;
				var _g5 = alphaView.height;
				while (_g12 < _g5) {
					var y2 = _g12++;
					sourcePosition = sourceView.offset + sourceView.stride * y2;
					destPosition = destView.offset + destView.stride * y2;
					alphaPosition = alphaView.offset + alphaView.stride * y2;
					var _g32 = 0;
					var _g22 = alphaView.width;
					while (_g32 < _g22) {
						var x2 = _g32++;
						switch (sourceFormat) {
							case 2:
								sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
								break;
							case 0:
								sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
								break;
							case 1:
								sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
								break;
						}
						if (sourcePremultiplied) {
							if ((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
								var r3;
								var idx13 = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
								r3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx13];
								var g3;
								var idx14 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
								g3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx14];
								var b3;
								var idx15 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
								b3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx15];
								sourcePixel = (r3 & 255) << 24 | (g3 & 255) << 16 | (b3 & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch (destFormat) {
							case 2:
								destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
								break;
							case 0:
								destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
								break;
							case 1:
								destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
								break;
						}
						if (destPremultiplied) {
							if ((destPixel & 255) != 0 && (destPixel & 255) != 255) {
								lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
								var r4;
								var idx16 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
								r4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx16];
								var g4;
								var idx17 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
								g4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx17];
								var b4;
								var idx18 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
								b4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx18];
								destPixel = (r4 & 255) << 24 | (g4 & 255) << 16 | (b4 & 255) << 8 | destPixel & 255 & 255;
							}
						}
						switch (alphaFormat) {
							case 2:
								alphaPixel = (alphaData[alphaPosition + 2] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
								break;
							case 0:
								alphaPixel = (alphaData[alphaPosition] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition + 2] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
								break;
							case 1:
								alphaPixel = (alphaData[alphaPosition + 1] & 255) << 24 | (alphaData[alphaPosition + 2] & 255) << 16 | (alphaData[alphaPosition + 3] & 255) << 8 | alphaData[alphaPosition] & 255;
								break;
						}
						if (alphaPremultiplied) {
							if ((alphaPixel & 255) != 0 && (alphaPixel & 255) != 255) {
								lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (alphaPixel & 255);
								var r5;
								var idx19 = Math.round((alphaPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
								r5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx19];
								var g5;
								var idx20 = Math.round((alphaPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
								g5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx20];
								var b5;
								var idx21 = Math.round((alphaPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
								b5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx21];
								alphaPixel = (r5 & 255) << 24 | (g5 & 255) << 16 | (b5 & 255) << 8 | alphaPixel & 255 & 255;
							}
						}
						sourceAlpha = (alphaPixel & 255) / 255;
						destAlpha = (destPixel & 255) / 255;
						oneMinusSourceAlpha = 1 - sourceAlpha;
						blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
						if (blendAlpha == 0) destPixel = 0; else {
							var value4;
							var idx22 = Math.round(((sourcePixel >> 24 & 255) * sourceAlpha + (destPixel >> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
							value4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx22];
							destPixel = (value4 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							value4;
							var value5;
							var idx23 = Math.round(((sourcePixel >> 16 & 255) * sourceAlpha + (destPixel >> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
							value5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx23];
							destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value5 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							value5;
							var value6;
							var idx24 = Math.round(((sourcePixel >> 8 & 255) * sourceAlpha + (destPixel >> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
							value6 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx24];
							destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value6 & 255) << 8 | destPixel & 255 & 255;
							value6;
							var value7;
							var idx25 = Math.round(blendAlpha * 255.0);
							value7 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx25];
							destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value7 & 255;
							value7;
						}
						if (destPremultiplied) {
							if ((destPixel & 255) == 0) {
								if (destPixel != 0) destPixel = 0;
							} else if ((destPixel & 255) != 255) {
								lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
								destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
							}
						}
						switch (destFormat) {
							case 2:
								destData[destPosition] = destPixel >> 8 & 255;
								destData[destPosition + 1] = destPixel >> 16 & 255;
								destData[destPosition + 2] = destPixel >> 24 & 255;
								destData[destPosition + 3] = destPixel & 255;
								break;
							case 0:
								destData[destPosition] = destPixel >> 24 & 255;
								destData[destPosition + 1] = destPixel >> 16 & 255;
								destData[destPosition + 2] = destPixel >> 8 & 255;
								destData[destPosition + 3] = destPixel & 255;
								break;
							case 1:
								destData[destPosition] = destPixel & 255;
								destData[destPosition + 1] = destPixel >> 24 & 255;
								destData[destPosition + 2] = destPixel >> 16 & 255;
								destData[destPosition + 3] = destPixel >> 8 & 255;
								break;
						}
						sourcePosition += 4;
						destPosition += 4;
					}
				}
			}
		}
		image.dirty = true;
	};
	lime_graphics_utils_ImageDataUtil.fillRect = function (image, rect, color, format) {
		var fillColor;
		switch (format) {
			case 1:
				{
					var argb = color;
					var rgba = 0;
					rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
					fillColor = rgba;
				}
				break;
			case 2:
				{
					var bgra = color;
					var rgba1 = 0;
					rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
					fillColor = rgba1;
				}
				break;
			default:
				fillColor = color;
		}
		if (!image.get_transparent()) {
			fillColor = (fillColor >> 24 & 255 & 255) << 24 | (fillColor >> 16 & 255 & 255) << 16 | (fillColor >> 8 & 255 & 255) << 8 | 255;
			255;
		}
		var data = image.buffer.data;
		if (data == null) return;
		var format1 = image.buffer.format;
		var premultiplied = image.buffer.premultiplied;
		var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image, rect);
		var row;
		var _g1 = 0;
		var _g = dataView.height;
		while (_g1 < _g) {
			var y = _g1++;
			row = dataView.offset + dataView.stride * y;
			var _g3 = 0;
			var _g2 = dataView.width;
			while (_g3 < _g2) {
				var x = _g3++;
				var offset = row + x * 4;
				if (premultiplied) {
					if ((fillColor & 255) == 0) {
						if (fillColor != 0) fillColor = 0;
					} else if ((fillColor & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
						fillColor = ((fillColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
					}
				}
				switch (format1) {
					case 2:
						data[offset] = fillColor >> 8 & 255;
						data[offset + 1] = fillColor >> 16 & 255;
						data[offset + 2] = fillColor >> 24 & 255;
						data[offset + 3] = fillColor & 255;
						break;
					case 0:
						data[offset] = fillColor >> 24 & 255;
						data[offset + 1] = fillColor >> 16 & 255;
						data[offset + 2] = fillColor >> 8 & 255;
						data[offset + 3] = fillColor & 255;
						break;
					case 1:
						data[offset] = fillColor & 255;
						data[offset + 1] = fillColor >> 24 & 255;
						data[offset + 2] = fillColor >> 16 & 255;
						data[offset + 3] = fillColor >> 8 & 255;
						break;
				}
			}
		}
		image.dirty = true;
	};
	lime_graphics_utils_ImageDataUtil.floodFill = function (image, x, y, color, format) {
		var data = image.buffer.data;
		if (data == null) return;
		if (format == 1) color = (color & 16777215) << 8 | color >> 24 & 255;
		var format1 = image.buffer.format;
		var premultiplied = image.buffer.premultiplied;
		var fillColor = color;
		var hitColor;
		var offset = (y + image.offsetY) * (image.buffer.width * 4) + (x + image.offsetX) * 4;
		switch (format1) {
			case 2:
				hitColor = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 0:
				hitColor = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 1:
				hitColor = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
				break;
		}
		if (premultiplied) {
			if ((hitColor & 255) != 0 && (hitColor & 255) != 255) {
				lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (hitColor & 255);
				var r;
				var idx = Math.round((hitColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
				r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
				var g;
				var idx1 = Math.round((hitColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
				g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
				var b;
				var idx2 = Math.round((hitColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
				b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
				hitColor = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | hitColor & 255 & 255;
			}
		}
		if (!image.get_transparent()) {
			fillColor = (fillColor >> 24 & 255 & 255) << 24 | (fillColor >> 16 & 255 & 255) << 16 | (fillColor >> 8 & 255 & 255) << 8 | 255;
			255;
			hitColor = (hitColor >> 24 & 255 & 255) << 24 | (hitColor >> 16 & 255 & 255) << 16 | (hitColor >> 8 & 255 & 255) << 8 | 255;
			255;
		}
		if (fillColor == hitColor) return;
		var dx = [0, -1, 1, 0];
		var dy = [-1, 0, 0, 1];
		var minX = -image.offsetX;
		var minY = -image.offsetY;
		var maxX = minX + image.width;
		var maxY = minY + image.height;
		var queue = [];
		queue.push(x);
		queue.push(y);
		var curPointX;
		var curPointY;
		var nextPointX;
		var nextPointY;
		var nextPointOffset;
		var readColor;
		while (queue.length > 0) {
			curPointY = queue.pop();
			curPointX = queue.pop();
			var _g = 0;
			while (_g < 4) {
				var i = _g++;
				nextPointX = curPointX + dx[i];
				nextPointY = curPointY + dy[i];
				if (nextPointX < minX || nextPointY < minY || nextPointX >= maxX || nextPointY >= maxY) continue;
				nextPointOffset = (nextPointY * image.width + nextPointX) * 4;
				switch (format1) {
					case 2:
						readColor = (data[nextPointOffset + 2] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset] & 255) << 8 | data[nextPointOffset + 3] & 255;
						break;
					case 0:
						readColor = (data[nextPointOffset] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset + 2] & 255) << 8 | data[nextPointOffset + 3] & 255;
						break;
					case 1:
						readColor = (data[nextPointOffset + 1] & 255) << 24 | (data[nextPointOffset + 2] & 255) << 16 | (data[nextPointOffset + 3] & 255) << 8 | data[nextPointOffset] & 255;
						break;
				}
				if (premultiplied) {
					if ((readColor & 255) != 0 && (readColor & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (readColor & 255);
						var r1;
						var idx3 = Math.round((readColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
						var g1;
						var idx4 = Math.round((readColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
						var b1;
						var idx5 = Math.round((readColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
						readColor = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | readColor & 255 & 255;
					}
				}
				if (readColor == hitColor) {
					if (premultiplied) {
						if ((fillColor & 255) == 0) {
							if (fillColor != 0) fillColor = 0;
						} else if ((fillColor & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
							fillColor = ((fillColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
						}
					}
					switch (format1) {
						case 2:
							data[nextPointOffset] = fillColor >> 8 & 255;
							data[nextPointOffset + 1] = fillColor >> 16 & 255;
							data[nextPointOffset + 2] = fillColor >> 24 & 255;
							data[nextPointOffset + 3] = fillColor & 255;
							break;
						case 0:
							data[nextPointOffset] = fillColor >> 24 & 255;
							data[nextPointOffset + 1] = fillColor >> 16 & 255;
							data[nextPointOffset + 2] = fillColor >> 8 & 255;
							data[nextPointOffset + 3] = fillColor & 255;
							break;
						case 1:
							data[nextPointOffset] = fillColor & 255;
							data[nextPointOffset + 1] = fillColor >> 24 & 255;
							data[nextPointOffset + 2] = fillColor >> 16 & 255;
							data[nextPointOffset + 3] = fillColor >> 8 & 255;
							break;
					}
					queue.push(nextPointX);
					queue.push(nextPointY);
				}
			}
		}
		image.dirty = true;
	};
	lime_graphics_utils_ImageDataUtil.getColorBoundsRect = function (image, mask, color, findColor, format) {
		if (findColor == null) findColor = true;
		var left = image.width + 1;
		var right = 0;
		var top = image.height + 1;
		var bottom = 0;
		var _color;
		var _mask;
		switch (format) {
			case 1:
				{
					var argb = color;
					var rgba = 0;
					rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
					_color = rgba;
				}
				{
					var argb1 = mask;
					var rgba1 = 0;
					rgba1 = (argb1 >> 16 & 255 & 255) << 24 | (argb1 >> 8 & 255 & 255) << 16 | (argb1 & 255 & 255) << 8 | argb1 >> 24 & 255 & 255;
					_mask = rgba1;
				}
				break;
			case 2:
				{
					var bgra = color;
					var rgba2 = 0;
					rgba2 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
					_color = rgba2;
				}
				{
					var bgra1 = mask;
					var rgba3 = 0;
					rgba3 = (bgra1 >> 8 & 255 & 255) << 24 | (bgra1 >> 16 & 255 & 255) << 16 | (bgra1 >> 24 & 255 & 255) << 8 | bgra1 & 255 & 255;
					_mask = rgba3;
				}
				break;
			default:
				_color = color;
				_mask = mask;
		}
		if (!image.get_transparent()) {
			_color = (_color >> 24 & 255 & 255) << 24 | (_color >> 16 & 255 & 255) << 16 | (_color >> 8 & 255 & 255) << 8 | 255;
			255;
			_mask = (_mask >> 24 & 255 & 255) << 24 | (_mask >> 16 & 255 & 255) << 16 | (_mask >> 8 & 255 & 255) << 8 | 255;
			255;
		}
		var pixel;
		var hit;
		var _g1 = 0;
		var _g = image.width;
		while (_g1 < _g) {
			var x = _g1++;
			hit = false;
			var _g3 = 0;
			var _g2 = image.height;
			while (_g3 < _g2) {
				var y = _g3++;
				pixel = image.getPixel32(x, y, 0);
				if (findColor) hit = (pixel & _mask) == _color; else hit = (pixel & _mask) != _color;
				if (hit) {
					if (x < left) left = x;
					break;
				}
			}
			if (hit) break;
		}
		var ix;
		var _g11 = 0;
		var _g4 = image.width;
		while (_g11 < _g4) {
			var x1 = _g11++;
			ix = image.width - 1 - x1;
			hit = false;
			var _g31 = 0;
			var _g21 = image.height;
			while (_g31 < _g21) {
				var y1 = _g31++;
				pixel = image.getPixel32(ix, y1, 0);
				if (findColor) hit = (pixel & _mask) == _color; else hit = (pixel & _mask) != _color;
				if (hit) {
					if (ix > right) right = ix;
					break;
				}
			}
			if (hit) break;
		}
		var _g12 = 0;
		var _g5 = image.height;
		while (_g12 < _g5) {
			var y2 = _g12++;
			hit = false;
			var _g32 = 0;
			var _g22 = image.width;
			while (_g32 < _g22) {
				var x2 = _g32++;
				pixel = image.getPixel32(x2, y2, 0);
				if (findColor) hit = (pixel & _mask) == _color; else hit = (pixel & _mask) != _color;
				if (hit) {
					if (y2 < top) top = y2;
					break;
				}
			}
			if (hit) break;
		}
		var iy;
		var _g13 = 0;
		var _g6 = image.height;
		while (_g13 < _g6) {
			var y3 = _g13++;
			iy = image.height - 1 - y3;
			hit = false;
			var _g33 = 0;
			var _g23 = image.width;
			while (_g33 < _g23) {
				var x3 = _g33++;
				pixel = image.getPixel32(x3, iy, 0);
				if (findColor) hit = (pixel & _mask) == _color; else hit = (pixel & _mask) != _color;
				if (hit) {
					if (iy > bottom) bottom = iy;
					break;
				}
			}
			if (hit) break;
		}
		var w = right - left;
		var h = bottom - top;
		if (w > 0) w++;
		if (h > 0) h++;
		if (w < 0) w = 0;
		if (h < 0) h = 0;
		if (left == right) w = 1;
		if (top == bottom) h = 1;
		if (left > image.width) left = 0;
		if (top > image.height) top = 0;
		return new lime_math_Rectangle(left, top, w, h);
	};
	lime_graphics_utils_ImageDataUtil.getPixel = function (image, x, y, format) {
		var pixel;
		var data = image.buffer.data;
		var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
		switch (image.buffer.format) {
			case 2:
				pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 0:
				pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 1:
				pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
				break;
		}
		if (image.buffer.premultiplied) {
			if ((pixel & 255) != 0 && (pixel & 255) != 255) {
				lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
				var r;
				var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
				r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
				var g;
				var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
				g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
				var b;
				var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
				b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
				pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
			}
		}
		pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | 0;
		0;
		switch (format) {
			case 1:
				return (function ($this) {
					var $r;
					var argb = 0;
					argb = (pixel & 255 & 255) << 24 | (pixel >> 24 & 255 & 255) << 16 | (pixel >> 16 & 255 & 255) << 8 | pixel >> 8 & 255 & 255;
					$r = argb;
					return $r;
				}(this));
			case 2:
				return (function ($this) {
					var $r;
					var bgra = 0;
					bgra = (pixel >> 8 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 24 & 255 & 255) << 8 | pixel & 255 & 255;
					$r = bgra;
					return $r;
				}(this));
			default:
				return pixel;
		}
	};
	lime_graphics_utils_ImageDataUtil.getPixel32 = function (image, x, y, format) {
		var pixel;
		var data = image.buffer.data;
		var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
		switch (image.buffer.format) {
			case 2:
				pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 0:
				pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 1:
				pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
				break;
		}
		if (image.buffer.premultiplied) {
			if ((pixel & 255) != 0 && (pixel & 255) != 255) {
				lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
				var r;
				var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
				r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
				var g;
				var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
				g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
				var b;
				var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
				b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
				pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
			}
		}
		switch (format) {
			case 1:
				return (function ($this) {
					var $r;
					var argb = 0;
					argb = (pixel & 255 & 255) << 24 | (pixel >> 24 & 255 & 255) << 16 | (pixel >> 16 & 255 & 255) << 8 | pixel >> 8 & 255 & 255;
					$r = argb;
					return $r;
				}(this));
			case 2:
				return (function ($this) {
					var $r;
					var bgra = 0;
					bgra = (pixel >> 8 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 24 & 255 & 255) << 8 | pixel & 255 & 255;
					$r = bgra;
					return $r;
				}(this));
			default:
				return pixel;
		}
	};
	lime_graphics_utils_ImageDataUtil.getPixels = function (image, rect, format) {
		if (image.buffer.data == null) return null;
		var length = rect.width * rect.height | 0;
		var byteArray = new lime_utils_ByteArray(length * 4);
		byteArray.position = 0;
		var data = image.buffer.data;
		var sourceFormat = image.buffer.format;
		var premultiplied = image.buffer.premultiplied;
		var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image, rect);
		var position;
		var argb;
		var bgra;
		var pixel;
		var destPosition = 0;
		var _g1 = 0;
		var _g = dataView.height;
		while (_g1 < _g) {
			var y = _g1++;
			position = dataView.offset + dataView.stride * y;
			var _g3 = 0;
			var _g2 = dataView.width;
			while (_g3 < _g2) {
				var x = _g3++;
				switch (sourceFormat) {
					case 2:
						pixel = (data[position + 2] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position] & 255) << 8 | data[position + 3] & 255;
						break;
					case 0:
						pixel = (data[position] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position + 2] & 255) << 8 | data[position + 3] & 255;
						break;
					case 1:
						pixel = (data[position + 1] & 255) << 24 | (data[position + 2] & 255) << 16 | (data[position + 3] & 255) << 8 | data[position] & 255;
						break;
				}
				if (premultiplied) {
					if ((pixel & 255) != 0 && (pixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
						var r;
						var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
						var g;
						var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
						var b;
						var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
						pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
					}
				}
				switch (format) {
					case 1:
						{
							var argb1 = 0;
							argb1 = (pixel & 255 & 255) << 24 | (pixel >> 24 & 255 & 255) << 16 | (pixel >> 16 & 255 & 255) << 8 | pixel >> 8 & 255 & 255;
							argb = argb1;
						}
						pixel = argb;
						break;
					case 2:
						{
							var bgra1 = 0;
							bgra1 = (pixel >> 8 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 24 & 255 & 255) << 8 | pixel & 255 & 255;
							bgra = bgra1;
						}
						pixel = bgra;
						break;
					default:
				}
				byteArray.__set(destPosition++, pixel >> 24 & 255);
				byteArray.__set(destPosition++, pixel >> 16 & 255);
				byteArray.__set(destPosition++, pixel >> 8 & 255);
				byteArray.__set(destPosition++, pixel & 255);
				position += 4;
			}
		}
		byteArray.position = 0;
		return byteArray;
	};
	lime_graphics_utils_ImageDataUtil.merge = function (image, sourceImage, sourceRect, destPoint, redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier) {
		if (image.buffer.data == null || sourceImage.buffer.data == null) return;
		var sourceView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage, sourceRect);
		var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image, new lime_math_Rectangle(destPoint.x, destPoint.y, sourceView.width, sourceView.height));
		var sourceData = sourceImage.buffer.data;
		var destData = image.buffer.data;
		var sourceFormat = sourceImage.buffer.format;
		var destFormat = image.buffer.format;
		var sourcePremultiplied = sourceImage.buffer.premultiplied;
		var destPremultiplied = image.buffer.premultiplied;
		var sourcePosition;
		var destPosition;
		var sourcePixel;
		var destPixel;
		var _g1 = 0;
		var _g = destView.height;
		while (_g1 < _g) {
			var y = _g1++;
			sourcePosition = sourceView.offset + sourceView.stride * y;
			destPosition = destView.offset + destView.stride * y;
			var _g3 = 0;
			var _g2 = destView.width;
			while (_g3 < _g2) {
				var x = _g3++;
				switch (sourceFormat) {
					case 2:
						sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					case 0:
						sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					case 1:
						sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
						break;
				}
				if (sourcePremultiplied) {
					if ((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
						var r;
						var idx = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
						var g;
						var idx1 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
						var b;
						var idx2 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
						sourcePixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | sourcePixel & 255 & 255;
					}
				}
				switch (destFormat) {
					case 2:
						destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					case 0:
						destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					case 1:
						destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
						break;
				}
				if (destPremultiplied) {
					if ((destPixel & 255) != 0 && (destPixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
						var r1;
						var idx3 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
						var g1;
						var idx4 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
						var b1;
						var idx5 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
						destPixel = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | destPixel & 255 & 255;
					}
				}
				var value = ((sourcePixel >> 24 & 255) * redMultiplier + (destPixel >> 24 & 255) * (256 - redMultiplier)) / 256 | 0;
				destPixel = (value & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				value;
				var value1 = ((sourcePixel >> 16 & 255) * greenMultiplier + (destPixel >> 16 & 255) * (256 - greenMultiplier)) / 256 | 0;
				destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				value1;
				var value2 = ((sourcePixel >> 8 & 255) * blueMultiplier + (destPixel >> 8 & 255) * (256 - blueMultiplier)) / 256 | 0;
				destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
				value2;
				var value3 = ((sourcePixel & 255) * alphaMultiplier + (destPixel & 255) * (256 - alphaMultiplier)) / 256 | 0;
				destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value3 & 255;
				value3;
				if (destPremultiplied) {
					if ((destPixel & 255) == 0) {
						if (destPixel != 0) destPixel = 0;
					} else if ((destPixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
						destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
					}
				}
				switch (destFormat) {
					case 2:
						destData[destPosition] = destPixel >> 8 & 255;
						destData[destPosition + 1] = destPixel >> 16 & 255;
						destData[destPosition + 2] = destPixel >> 24 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					case 0:
						destData[destPosition] = destPixel >> 24 & 255;
						destData[destPosition + 1] = destPixel >> 16 & 255;
						destData[destPosition + 2] = destPixel >> 8 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					case 1:
						destData[destPosition] = destPixel & 255;
						destData[destPosition + 1] = destPixel >> 24 & 255;
						destData[destPosition + 2] = destPixel >> 16 & 255;
						destData[destPosition + 3] = destPixel >> 8 & 255;
						break;
				}
				sourcePosition += 4;
				destPosition += 4;
			}
		}
		image.dirty = true;
	};
	lime_graphics_utils_ImageDataUtil.multiplyAlpha = function (image) {
		var data = image.buffer.data;
		if (data == null || !image.buffer.transparent) return;
		var format = image.buffer.format;
		var length = data.length / 4 | 0;
		var pixel;
		var _g = 0;
		while (_g < length) {
			var i = _g++;
			var offset = i * 4;
			switch (format) {
				case 2:
					pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
					break;
				case 0:
					pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
					break;
				case 1:
					pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
					break;
			}
			var offset1 = i * 4;
			if ((pixel & 255) == 0) {
				if (pixel != 0) pixel = 0;
			} else if ((pixel & 255) != 255) {
				lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
				pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
			}
			switch (format) {
				case 2:
					data[offset1] = pixel >> 8 & 255;
					data[offset1 + 1] = pixel >> 16 & 255;
					data[offset1 + 2] = pixel >> 24 & 255;
					data[offset1 + 3] = pixel & 255;
					break;
				case 0:
					data[offset1] = pixel >> 24 & 255;
					data[offset1 + 1] = pixel >> 16 & 255;
					data[offset1 + 2] = pixel >> 8 & 255;
					data[offset1 + 3] = pixel & 255;
					break;
				case 1:
					data[offset1] = pixel & 255;
					data[offset1 + 1] = pixel >> 24 & 255;
					data[offset1 + 2] = pixel >> 16 & 255;
					data[offset1 + 3] = pixel >> 8 & 255;
					break;
			}
		}
		image.buffer.premultiplied = true;
		image.dirty = true;
	};
	lime_graphics_utils_ImageDataUtil.resize = function (image, newWidth, newHeight) {
		var buffer = image.buffer;
		if (buffer.width == newWidth && buffer.height == newHeight) return;
		var newBuffer = new lime_graphics_ImageBuffer((function ($this) {
			var $r;
			var elements = newWidth * newHeight * 4;
			var this1;
			if (elements != null) this1 = new Uint8Array(elements); else this1 = null;
			$r = this1;
			return $r;
		}(this)), newWidth, newHeight);
		var imageWidth = image.width;
		var imageHeight = image.height;
		var data = image.get_data();
		var newData = newBuffer.data;
		var sourceIndex;
		var sourceIndexX;
		var sourceIndexY;
		var sourceIndexXY;
		var index;
		var sourceX;
		var sourceY;
		var u;
		var v;
		var uRatio;
		var vRatio;
		var uOpposite;
		var vOpposite;
		var _g = 0;
		while (_g < newHeight) {
			var y = _g++;
			var _g1 = 0;
			while (_g1 < newWidth) {
				var x = _g1++;
				u = (x + 0.5) / newWidth * imageWidth - 0.5;
				v = (y + 0.5) / newHeight * imageHeight - 0.5;
				sourceX = u | 0;
				sourceY = v | 0;
				sourceIndex = (sourceY * imageWidth + sourceX) * 4;
				if (sourceX < imageWidth - 1) sourceIndexX = sourceIndex + 4; else sourceIndexX = sourceIndex;
				if (sourceY < imageHeight - 1) sourceIndexY = sourceIndex + imageWidth * 4; else sourceIndexY = sourceIndex;
				if (sourceIndexX != sourceIndex) sourceIndexXY = sourceIndexY + 4; else sourceIndexXY = sourceIndexY;
				index = (y * newWidth + x) * 4;
				uRatio = u - sourceX;
				vRatio = v - sourceY;
				uOpposite = 1 - uRatio;
				vOpposite = 1 - vRatio;
				var val = Std["int"]((_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY]) * uRatio) * vRatio);
				newData[index] = val;
				var val1 = Std["int"]((_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex + 1]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX + 1]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY + 1]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY + 1]) * uRatio) * vRatio);
				newData[index + 1] = val1;
				var val2 = Std["int"]((_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex + 2]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX + 2]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY + 2]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY + 2]) * uRatio) * vRatio);
				newData[index + 2] = val2;
				if (data[sourceIndexX + 3] == 0 || data[sourceIndexY + 3] == 0 || data[sourceIndexXY + 3] == 0) newData[index + 3] = 0; else newData[index + 3] = data[sourceIndex + 3];
			}
		}
		buffer.data = newBuffer.data;
		buffer.width = newWidth;
		buffer.height = newHeight;
	};
	lime_graphics_utils_ImageDataUtil.resizeBuffer = function (image, newWidth, newHeight) {
		var buffer = image.buffer;
		var data = image.get_data();
		var newData;
		var elements = newWidth * newHeight * 4;
		var this1;
		if (elements != null) this1 = new Uint8Array(elements); else this1 = null;
		newData = this1;
		var sourceIndex;
		var index;
		var _g1 = 0;
		var _g = buffer.height;
		while (_g1 < _g) {
			var y = _g1++;
			var _g3 = 0;
			var _g2 = buffer.width;
			while (_g3 < _g2) {
				var x = _g3++;
				sourceIndex = (y * buffer.width + x) * 4;
				index = (y * newWidth + x) * 4;
				newData[index] = data[sourceIndex];
				newData[index + 1] = data[sourceIndex + 1];
				newData[index + 2] = data[sourceIndex + 2];
				newData[index + 3] = data[sourceIndex + 3];
			}
		}
		buffer.data = newData;
		buffer.width = newWidth;
		buffer.height = newHeight;
	};
	lime_graphics_utils_ImageDataUtil.setFormat = function (image, format) {
		var data = image.buffer.data;
		if (data == null) return;
		var index;
		var a16;
		var length = data.length / 4 | 0;
		var r1;
		var g1;
		var b1;
		var a1;
		var r2;
		var g2;
		var b2;
		var a2;
		var r;
		var g;
		var b;
		var a;
		var _g = image.get_format();
		switch (_g) {
			case 0:
				r1 = 0;
				g1 = 1;
				b1 = 2;
				a1 = 3;
				break;
			case 1:
				r1 = 1;
				g1 = 2;
				b1 = 3;
				a1 = 0;
				break;
			case 2:
				r1 = 2;
				g1 = 1;
				b1 = 0;
				a1 = 3;
				break;
		}
		switch (format) {
			case 0:
				r2 = 0;
				g2 = 1;
				b2 = 2;
				a2 = 3;
				break;
			case 1:
				r2 = 1;
				g2 = 2;
				b2 = 3;
				a2 = 0;
				break;
			case 2:
				r2 = 2;
				g2 = 1;
				b2 = 0;
				a2 = 3;
				break;
		}
		var _g1 = 0;
		while (_g1 < length) {
			var i = _g1++;
			index = i * 4;
			r = data[index + r1];
			g = data[index + g1];
			b = data[index + b1];
			a = data[index + a1];
			data[index + r2] = r;
			data[index + g2] = g;
			data[index + b2] = b;
			data[index + a2] = a;
		}
		image.buffer.format = format;
		image.dirty = true;
	};
	lime_graphics_utils_ImageDataUtil.setPixel = function (image, x, y, color, format) {
		var pixel;
		switch (format) {
			case 1:
				{
					var argb = color;
					var rgba = 0;
					rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
					pixel = rgba;
				}
				break;
			case 2:
				{
					var bgra = color;
					var rgba1 = 0;
					rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
					pixel = rgba1;
				}
				break;
			default:
				pixel = color;
		}
		var source = 0;
		var data = image.buffer.data;
		var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
		switch (image.buffer.format) {
			case 2:
				source = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 0:
				source = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 1:
				source = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
				break;
		}
		if (image.buffer.premultiplied) {
			if ((source & 255) != 0 && (source & 255) != 255) {
				lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (source & 255);
				var r;
				var idx = Math.round((source >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
				r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
				var g;
				var idx1 = Math.round((source >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
				g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
				var b;
				var idx2 = Math.round((source >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
				b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
				source = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | source & 255 & 255;
			}
		}
		var value = source & 255;
		pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | value & 255;
		value;
		var data1 = image.buffer.data;
		var offset1 = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
		if (image.buffer.premultiplied) {
			if ((pixel & 255) == 0) {
				if (pixel != 0) pixel = 0;
			} else if ((pixel & 255) != 255) {
				lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
				pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
			}
		}
		switch (image.buffer.format) {
			case 2:
				data1[offset1] = pixel >> 8 & 255;
				data1[offset1 + 1] = pixel >> 16 & 255;
				data1[offset1 + 2] = pixel >> 24 & 255;
				data1[offset1 + 3] = pixel & 255;
				break;
			case 0:
				data1[offset1] = pixel >> 24 & 255;
				data1[offset1 + 1] = pixel >> 16 & 255;
				data1[offset1 + 2] = pixel >> 8 & 255;
				data1[offset1 + 3] = pixel & 255;
				break;
			case 1:
				data1[offset1] = pixel & 255;
				data1[offset1 + 1] = pixel >> 24 & 255;
				data1[offset1 + 2] = pixel >> 16 & 255;
				data1[offset1 + 3] = pixel >> 8 & 255;
				break;
		}
		image.dirty = true;
	};
	lime_graphics_utils_ImageDataUtil.setPixel32 = function (image, x, y, color, format) {
		var pixel;
		switch (format) {
			case 1:
				{
					var argb = color;
					var rgba = 0;
					rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
					pixel = rgba;
				}
				break;
			case 2:
				{
					var bgra = color;
					var rgba1 = 0;
					rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
					pixel = rgba1;
				}
				break;
			default:
				pixel = color;
		}
		if (!image.get_transparent()) {
			pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | 255;
			255;
		}
		var data = image.buffer.data;
		var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
		if (image.buffer.premultiplied) {
			if ((pixel & 255) == 0) {
				if (pixel != 0) pixel = 0;
			} else if ((pixel & 255) != 255) {
				lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
				pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
			}
		}
		switch (image.buffer.format) {
			case 2:
				data[offset] = pixel >> 8 & 255;
				data[offset + 1] = pixel >> 16 & 255;
				data[offset + 2] = pixel >> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 0:
				data[offset] = pixel >> 24 & 255;
				data[offset + 1] = pixel >> 16 & 255;
				data[offset + 2] = pixel >> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >> 24 & 255;
				data[offset + 2] = pixel >> 16 & 255;
				data[offset + 3] = pixel >> 8 & 255;
				break;
		}
		image.dirty = true;
	};
	lime_graphics_utils_ImageDataUtil.setPixels = function (image, rect, byteArray, format) {
		if (image.buffer.data == null) return;
		var data = image.buffer.data;
		var sourceFormat = image.buffer.format;
		var premultiplied = image.buffer.premultiplied;
		var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image, rect);
		var row;
		var color;
		var pixel;
		var transparent = image.get_transparent();
		var _g1 = 0;
		var _g = dataView.height;
		while (_g1 < _g) {
			var y = _g1++;
			row = dataView.offset + dataView.stride * y;
			var _g3 = 0;
			var _g2 = dataView.width;
			while (_g3 < _g2) {
				var x = _g3++;
				color = byteArray.readUnsignedInt();
				switch (format) {
					case 1:
						{
							var argb = color;
							var rgba = 0;
							rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
							pixel = rgba;
						}
						break;
					case 2:
						{
							var bgra = color;
							var rgba1 = 0;
							rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
							pixel = rgba1;
						}
						break;
					default:
						pixel = color;
				}
				if (!transparent) {
					pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | 255;
					255;
				}
				var offset = row + x * 4;
				if (premultiplied) {
					if ((pixel & 255) == 0) {
						if (pixel != 0) pixel = 0;
					} else if ((pixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
						pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
					}
				}
				switch (sourceFormat) {
					case 2:
						data[offset] = pixel >> 8 & 255;
						data[offset + 1] = pixel >> 16 & 255;
						data[offset + 2] = pixel >> 24 & 255;
						data[offset + 3] = pixel & 255;
						break;
					case 0:
						data[offset] = pixel >> 24 & 255;
						data[offset + 1] = pixel >> 16 & 255;
						data[offset + 2] = pixel >> 8 & 255;
						data[offset + 3] = pixel & 255;
						break;
					case 1:
						data[offset] = pixel & 255;
						data[offset + 1] = pixel >> 24 & 255;
						data[offset + 2] = pixel >> 16 & 255;
						data[offset + 3] = pixel >> 8 & 255;
						break;
				}
			}
		}
		image.dirty = true;
	};
	lime_graphics_utils_ImageDataUtil.unmultiplyAlpha = function (image) {
		var data = image.buffer.data;
		if (data == null) return;
		var format = image.buffer.format;
		var length = data.length / 4 | 0;
		var pixel;
		var _g = 0;
		while (_g < length) {
			var i = _g++;
			var offset = i * 4;
			switch (format) {
				case 2:
					pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
					break;
				case 0:
					pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
					break;
				case 1:
					pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
					break;
			}
			if ((pixel & 255) != 0 && (pixel & 255) != 255) {
				lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
				var r;
				var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
				r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
				var g;
				var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
				g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
				var b;
				var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
				b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
				pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
			}
			var offset1 = i * 4;
			switch (format) {
				case 2:
					data[offset1] = pixel >> 8 & 255;
					data[offset1 + 1] = pixel >> 16 & 255;
					data[offset1 + 2] = pixel >> 24 & 255;
					data[offset1 + 3] = pixel & 255;
					break;
				case 0:
					data[offset1] = pixel >> 24 & 255;
					data[offset1 + 1] = pixel >> 16 & 255;
					data[offset1 + 2] = pixel >> 8 & 255;
					data[offset1 + 3] = pixel & 255;
					break;
				case 1:
					data[offset1] = pixel & 255;
					data[offset1 + 1] = pixel >> 24 & 255;
					data[offset1 + 2] = pixel >> 16 & 255;
					data[offset1 + 3] = pixel >> 8 & 255;
					break;
			}
		}
		image.buffer.premultiplied = false;
		image.dirty = true;
	};
	var lime_graphics_utils__$ImageDataUtil_ImageDataView = function (image, rect) {
		this.image = image;
		if (rect == null) this.rect = image.get_rect(); else {
			if (rect.x < 0) rect.x = 0;
			if (rect.y < 0) rect.y = 0;
			if (rect.x + rect.width > image.width) rect.width = image.width - rect.x;
			if (rect.y + rect.height > image.height) rect.height = image.height - rect.y;
			if (rect.width < 0) rect.width = 0;
			if (rect.height < 0) rect.height = 0;
			this.rect = rect;
		}
		this.stride = image.buffer.get_stride();
		this.x = Math.ceil(this.rect.x);
		this.y = Math.ceil(this.rect.y);
		this.width = Math.floor(this.rect.width);
		this.height = Math.floor(this.rect.height);
		this.offset = this.stride * (this.y + image.offsetY) + (this.x + image.offsetX) * 4;
	};
	$hxClasses["lime.graphics.utils._ImageDataUtil.ImageDataView"] = lime_graphics_utils__$ImageDataUtil_ImageDataView;
	lime_graphics_utils__$ImageDataUtil_ImageDataView.__name__ = ["lime", "graphics", "utils", "_ImageDataUtil", "ImageDataView"];
	lime_graphics_utils__$ImageDataUtil_ImageDataView.prototype = {
		clip: function (x, y, width, height) {
			this.rect.__contract(x, y, width, height);
			this.x = Math.ceil(this.rect.x);
			this.y = Math.ceil(this.rect.y);
			this.width = Math.floor(this.rect.width);
			this.height = Math.floor(this.rect.height);
			this.offset = this.stride * (this.y + this.image.offsetY) + (this.x + this.image.offsetX) * 4;
		}
		, row: function (y) {
			return this.offset + this.stride * y;
		}
		, __class__: lime_graphics_utils__$ImageDataUtil_ImageDataView
	};
	var lime_math__$ColorMatrix_ColorMatrix_$Impl_$ = {};
	$hxClasses["lime.math._ColorMatrix.ColorMatrix_Impl_"] = lime_math__$ColorMatrix_ColorMatrix_$Impl_$;
	lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__name__ = ["lime", "math", "_ColorMatrix", "ColorMatrix_Impl_"];
	lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__properties__ = { set_redOffset: "set_redOffset", get_redOffset: "get_redOffset", set_redMultiplier: "set_redMultiplier", get_redMultiplier: "get_redMultiplier", set_greenOffset: "set_greenOffset", get_greenOffset: "get_greenOffset", set_greenMultiplier: "set_greenMultiplier", get_greenMultiplier: "get_greenMultiplier", set_color: "set_color", get_color: "get_color", set_blueOffset: "set_blueOffset", get_blueOffset: "get_blueOffset", set_blueMultiplier: "set_blueMultiplier", get_blueMultiplier: "get_blueMultiplier", set_alphaOffset: "set_alphaOffset", get_alphaOffset: "get_alphaOffset", set_alphaMultiplier: "set_alphaMultiplier", get_alphaMultiplier: "get_alphaMultiplier" }
	lime_math__$ColorMatrix_ColorMatrix_$Impl_$._new = function (data) {
		var this1;
		if (data != null && data.length == 20) this1 = data; else {
			var array = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__identity;
			var this2;
			if (array != null) this2 = new Float32Array(array); else this2 = null;
			this1 = this2;
		}
		return this1;
	};
	lime_math__$ColorMatrix_ColorMatrix_$Impl_$.clone = function (this1) {
		return lime_math__$ColorMatrix_ColorMatrix_$Impl_$._new((function ($this) {
			var $r;
			var this2;
			if (this1 != null) this2 = new Float32Array(this1); else this2 = null;
			$r = this2;
			return $r;
		}(this)));
	};
	lime_math__$ColorMatrix_ColorMatrix_$Impl_$.concat = function (this1, second) {
		var _g = this1;
		_g[0] = _g[0] + second[0];
		var _g1 = this1;
		_g1[6] = _g1[6] + second[6];
		var _g2 = this1;
		_g2[12] = _g2[12] + second[12];
		var _g3 = this1;
		_g3[18] = _g3[18] + second[18];
	};
	lime_math__$ColorMatrix_ColorMatrix_$Impl_$.copyFrom = function (this1, other) {
		this1.set(other);
	};
	lime_math__$ColorMatrix_ColorMatrix_$Impl_$.identity = function (this1) {
		this1[0] = 1;
		this1[1] = 0;
		this1[2] = 0;
		this1[3] = 0;
		this1[4] = 0;
		this1[5] = 0;
		this1[6] = 1;
		this1[7] = 0;
		this1[8] = 0;
		this1[9] = 0;
		this1[10] = 0;
		this1[11] = 0;
		this1[12] = 1;
		this1[13] = 0;
		this1[14] = 0;
		this1[15] = 0;
		this1[16] = 0;
		this1[17] = 0;
		this1[18] = 1;
		this1[19] = 0;
	};
	lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable = function (this1) {
		var table;
		var this2;
		this2 = new Uint8Array(256);
		table = this2;
		var multiplier = this1[18];
		var offset = this1[19] * 255;
		var value;
		var _g = 0;
		while (_g < 256) {
			var i = _g++;
			value = Math.floor(i * multiplier + offset);
			if (value > 255) value = 255;
			if (value < 0) value = 0;
			table[i] = value;
		}
		return table;
	};
	lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable = function (this1) {
		var table;
		var this2;
		this2 = new Uint8Array(256);
		table = this2;
		var multiplier = this1[12];
		var offset = this1[14] * 255;
		var value;
		var _g = 0;
		while (_g < 256) {
			var i = _g++;
			value = Math.floor(i * multiplier + offset);
			if (value > 255) value = 255;
			if (value < 0) value = 0;
			table[i] = value;
		}
		return table;
	};
	lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable = function (this1) {
		var table;
		var this2;
		this2 = new Uint8Array(256);
		table = this2;
		var multiplier = this1[6];
		var offset = this1[9] * 255;
		var value;
		var _g = 0;
		while (_g < 256) {
			var i = _g++;
			value = Math.floor(i * multiplier + offset);
			if (value > 255) value = 255;
			if (value < 0) value = 0;
			table[i] = value;
		}
		return table;
	};
	lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable = function (this1) {
		var table;
		var this2;
		this2 = new Uint8Array(256);
		table = this2;
		var multiplier = this1[0];
		var offset = this1[4] * 255;
		var value;
		var _g = 0;
		while (_g < 256) {
			var i = _g++;
			value = Math.floor(i * multiplier + offset);
			if (value > 255) value = 255;
			if (value < 0) value = 0;
			table[i] = value;
		}
		return table;
	};
	lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform = function (this1) {
		return null;
	};
	lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_alphaMultiplier = function (this1) {
		return this1[18];
	};
	lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_alphaMultiplier = function (this1, value) {
		return this1[18] = value;
	};
	lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_alphaOffset = function (this1) {
		return this1[19] * 255;
	};
	lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_alphaOffset = function (this1, value) {
		return this1[19] = value / 255;
	};
	lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_blueMultiplier = function (this1) {
		return this1[12];
	};
	lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_blueMultiplier = function (this1, value) {
		return this1[12] = value;
	};
	lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_blueOffset = function (this1) {
		return this1[14] * 255;
	};
	lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_blueOffset = function (this1, value) {
		return this1[14] = value / 255;
	};
	lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_color = function (this1) {
		return (this1[4] * 255 | 0) << 16 | (this1[9] * 255 | 0) << 8 | (this1[14] * 255 | 0);
	};
	lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_color = function (this1, value) {
		this1[4] = (value >> 16 & 255) / 255;
		this1[9] = (value >> 8 & 255) / 255;
		this1[14] = (value & 255) / 255;
		this1[0] = 0;
		this1[6] = 0;
		this1[12] = 0;
		return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_color(this1);
	};
	lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_greenMultiplier = function (this1) {
		return this1[6];
	};
	lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_greenMultiplier = function (this1, value) {
		return this1[6] = value;
	};
	lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_greenOffset = function (this1) {
		return this1[9] * 255;
	};
	lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_greenOffset = function (this1, value) {
		return this1[9] = value / 255;
	};
	lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_redMultiplier = function (this1) {
		return this1[0];
	};
	lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_redMultiplier = function (this1, value) {
		return this1[0] = value;
	};
	lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_redOffset = function (this1) {
		return this1[4] * 255;
	};
	lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_redOffset = function (this1, value) {
		return this1[4] = value / 255;
	};
	lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get = function (this1, index) {
		return this1[index];
	};
	lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set = function (this1, index, value) {
		return this1[index] = value;
	};
	var lime_math_Matrix3 = function (a, b, c, d, tx, ty) {
		if (ty == null) ty = 0;
		if (tx == null) tx = 0;
		if (d == null) d = 1;
		if (c == null) c = 0;
		if (b == null) b = 0;
		if (a == null) a = 1;
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	};
	$hxClasses["lime.math.Matrix3"] = lime_math_Matrix3;
	lime_math_Matrix3.__name__ = ["lime", "math", "Matrix3"];
	lime_math_Matrix3.prototype = {
		clone: function () {
			return new lime_math_Matrix3(this.a, this.b, this.c, this.d, this.tx, this.ty);
		}
		, concat: function (m) {
			var a1 = this.a * m.a + this.b * m.c;
			this.b = this.a * m.b + this.b * m.d;
			this.a = a1;
			var c1 = this.c * m.a + this.d * m.c;
			this.d = this.c * m.b + this.d * m.d;
			this.c = c1;
			var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
			this.ty = this.tx * m.b + this.ty * m.d + m.ty;
			this.tx = tx1;
		}
		, copyColumnFrom: function (column, vector4) {
			if (column > 2) throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)"); else if (column == 0) {
				this.a = vector4.x;
				this.c = vector4.y;
			} else if (column == 1) {
				this.b = vector4.x;
				this.d = vector4.y;
			} else {
				this.tx = vector4.x;
				this.ty = vector4.y;
			}
		}
		, copyColumnTo: function (column, vector4) {
			if (column > 2) throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)"); else if (column == 0) {
				vector4.x = this.a;
				vector4.y = this.c;
				vector4.z = 0;
			} else if (column == 1) {
				vector4.x = this.b;
				vector4.y = this.d;
				vector4.z = 0;
			} else {
				vector4.x = this.tx;
				vector4.y = this.ty;
				vector4.z = 1;
			}
		}
		, copyFrom: function (sourceMatrix3) {
			this.a = sourceMatrix3.a;
			this.b = sourceMatrix3.b;
			this.c = sourceMatrix3.c;
			this.d = sourceMatrix3.d;
			this.tx = sourceMatrix3.tx;
			this.ty = sourceMatrix3.ty;
		}
		, copyRowFrom: function (row, vector4) {
			if (row > 2) throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)"); else if (row == 0) {
				this.a = vector4.x;
				this.c = vector4.y;
			} else if (row == 1) {
				this.b = vector4.x;
				this.d = vector4.y;
			} else {
				this.tx = vector4.x;
				this.ty = vector4.y;
			}
		}
		, copyRowTo: function (row, vector4) {
			if (row > 2) throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)"); else if (row == 0) {
				vector4.x = this.a;
				vector4.y = this.b;
				vector4.z = this.tx;
			} else if (row == 1) {
				vector4.x = this.c;
				vector4.y = this.d;
				vector4.z = this.ty;
			} else {
				vector4.x = 0;
				vector4.y = 0;
				vector4.z = 1;
			}
		}
		, createBox: function (scaleX, scaleY, rotation, tx, ty) {
			if (ty == null) ty = 0;
			if (tx == null) tx = 0;
			if (rotation == null) rotation = 0;
			this.a = scaleX;
			this.d = scaleY;
			this.b = rotation;
			this.tx = tx;
			this.ty = ty;
		}
		, createGradientBox: function (width, height, rotation, tx, ty) {
			if (ty == null) ty = 0;
			if (tx == null) tx = 0;
			if (rotation == null) rotation = 0;
			this.a = width / 1638.4;
			this.d = height / 1638.4;
			if (rotation != 0) {
				var cos = Math.cos(rotation);
				var sin = Math.sin(rotation);
				this.b = sin * this.d;
				this.c = -sin * this.a;
				this.a *= cos;
				this.d *= cos;
			} else {
				this.b = 0;
				this.c = 0;
			}
			this.tx = tx + width / 2;
			this.ty = ty + height / 2;
		}
		, equals: function (Matrix3) {
			return Matrix3 != null && this.tx == Matrix3.tx && this.ty == Matrix3.ty && this.a == Matrix3.a && this.b == Matrix3.b && this.c == Matrix3.c && this.d == Matrix3.d;
		}
		, deltaTransformVector2: function (Vector2) {
			return new lime_math_Vector2(Vector2.x * this.a + Vector2.y * this.c, Vector2.x * this.b + Vector2.y * this.d);
		}
		, identity: function () {
			this.a = 1;
			this.b = 0;
			this.c = 0;
			this.d = 1;
			this.tx = 0;
			this.ty = 0;
		}
		, invert: function () {
			var norm = this.a * this.d - this.b * this.c;
			if (norm == 0) {
				this.a = this.b = this.c = this.d = 0;
				this.tx = -this.tx;
				this.ty = -this.ty;
			} else {
				norm = 1.0 / norm;
				var a1 = this.d * norm;
				this.d = this.a * norm;
				this.a = a1;
				this.b *= -norm;
				this.c *= -norm;
				var tx1 = -this.a * this.tx - this.c * this.ty;
				this.ty = -this.b * this.tx - this.d * this.ty;
				this.tx = tx1;
			}
			return this;
		}
		, mult: function (m) {
			var result = new lime_math_Matrix3(this.a, this.b, this.c, this.d, this.tx, this.ty);
			result.concat(m);
			return result;
		}
		, rotate: function (theta) {
			var cos = Math.cos(theta);
			var sin = Math.sin(theta);
			var a1 = this.a * cos - this.b * sin;
			this.b = this.a * sin + this.b * cos;
			this.a = a1;
			var c1 = this.c * cos - this.d * sin;
			this.d = this.c * sin + this.d * cos;
			this.c = c1;
			var tx1 = this.tx * cos - this.ty * sin;
			this.ty = this.tx * sin + this.ty * cos;
			this.tx = tx1;
		}
		, scale: function (sx, sy) {
			this.a *= sx;
			this.b *= sy;
			this.c *= sx;
			this.d *= sy;
			this.tx *= sx;
			this.ty *= sy;
		}
		, setRotation: function (theta, scale) {
			if (scale == null) scale = 1;
			this.a = Math.cos(theta) * scale;
			this.c = Math.sin(theta) * scale;
			this.b = -this.c;
			this.d = this.a;
		}
		, setTo: function (a, b, c, d, tx, ty) {
			this.a = a;
			this.b = b;
			this.c = c;
			this.d = d;
			this.tx = tx;
			this.ty = ty;
		}
		, to3DString: function (roundPixels) {
			if (roundPixels == null) roundPixels = false;
			if (roundPixels) return "Matrix33d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)"; else return "Matrix33d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
		}
		, toMozString: function () {
			return "Matrix3(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
		}
		, toString: function () {
			return "Matrix3(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
		}
		, transformVector2: function (pos) {
			return new lime_math_Vector2(pos.x * this.a + pos.y * this.c + this.tx, pos.x * this.b + pos.y * this.d + this.ty);
		}
		, translate: function (dx, dy) {
			this.tx += dx;
			this.ty += dy;
		}
		, __cleanValues: function () {
			this.a = Math.round(this.a * 1000) / 1000;
			this.b = Math.round(this.b * 1000) / 1000;
			this.c = Math.round(this.c * 1000) / 1000;
			this.d = Math.round(this.d * 1000) / 1000;
			this.tx = Math.round(this.tx * 10) / 10;
			this.ty = Math.round(this.ty * 10) / 10;
		}
		, __transformX: function (pos) {
			return pos.x * this.a + pos.y * this.c + this.tx;
		}
		, __transformY: function (pos) {
			return pos.x * this.b + pos.y * this.d + this.ty;
		}
		, __translateTransformed: function (pos) {
			this.tx = pos.x * this.a + pos.y * this.c + this.tx;
			this.ty = pos.x * this.b + pos.y * this.d + this.ty;
		}
		, __class__: lime_math_Matrix3
	};
	var lime_math__$Matrix4_Matrix4_$Impl_$ = {};
	$hxClasses["lime.math._Matrix4.Matrix4_Impl_"] = lime_math__$Matrix4_Matrix4_$Impl_$;
	lime_math__$Matrix4_Matrix4_$Impl_$.__name__ = ["lime", "math", "_Matrix4", "Matrix4_Impl_"];
	lime_math__$Matrix4_Matrix4_$Impl_$.__properties__ = { set_position: "set_position", get_position: "get_position", get_determinant: "get_determinant" }
	lime_math__$Matrix4_Matrix4_$Impl_$._new = function (data) {
		var this1;
		if (data != null && data.length == 16) this1 = data; else {
			var array = lime_math__$Matrix4_Matrix4_$Impl_$.__identity;
			var this2;
			if (array != null) this2 = new Float32Array(array); else this2 = null;
			this1 = this2;
		}
		return this1;
	};
	lime_math__$Matrix4_Matrix4_$Impl_$.append = function (this1, lhs) {
		var m111 = this1[0];
		var m121 = this1[4];
		var m131 = this1[8];
		var m141 = this1[12];
		var m112 = this1[1];
		var m122 = this1[5];
		var m132 = this1[9];
		var m142 = this1[13];
		var m113 = this1[2];
		var m123 = this1[6];
		var m133 = this1[10];
		var m143 = this1[14];
		var m114 = this1[3];
		var m124 = this1[7];
		var m134 = this1[11];
		var m144 = this1[15];
		var m211 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 0);
		var m221 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 4);
		var m231 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 8);
		var m241 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 12);
		var m212 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 1);
		var m222 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 5);
		var m232 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 9);
		var m242 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 13);
		var m213 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 2);
		var m223 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 6);
		var m233 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 10);
		var m243 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 14);
		var m214 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 3);
		var m224 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 7);
		var m234 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 11);
		var m244 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 15);
		this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
		this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
		this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
		this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
		this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
		this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
		this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
		this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
		this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
		this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
		this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
		this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
		this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
		this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
		this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
		this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
	};
	lime_math__$Matrix4_Matrix4_$Impl_$.appendRotation = function (this1, degrees, axis, pivotPoint) {
		var m = lime_math__$Matrix4_Matrix4_$Impl_$.getAxisRotation(axis.x, axis.y, axis.z, degrees);
		if (pivotPoint != null) {
			var p = pivotPoint;
			lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation(m, p.x, p.y, p.z);
		}
		lime_math__$Matrix4_Matrix4_$Impl_$.append(this1, m);
	};
	lime_math__$Matrix4_Matrix4_$Impl_$.appendScale = function (this1, xScale, yScale, zScale) {
		lime_math__$Matrix4_Matrix4_$Impl_$.append(this1, lime_math__$Matrix4_Matrix4_$Impl_$._new((function ($this) {
			var $r;
			var array = [xScale, 0.0, 0.0, 0.0, 0.0, yScale, 0.0, 0.0, 0.0, 0.0, zScale, 0.0, 0.0, 0.0, 0.0, 1.0];
			var this2;
			if (array != null) this2 = new Float32Array(array); else this2 = null;
			$r = this2;
			return $r;
		}(this))));
	};
	lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation = function (this1, x, y, z) {
		this1[12] = this1[12] + x;
		this1[13] = this1[13] + y;
		this1[14] = this1[14] + z;
	};
	lime_math__$Matrix4_Matrix4_$Impl_$.clone = function (this1) {
		return lime_math__$Matrix4_Matrix4_$Impl_$._new((function ($this) {
			var $r;
			var this2;
			if (this1 != null) this2 = new Float32Array(this1); else this2 = null;
			$r = this2;
			return $r;
		}(this)));
	};
	lime_math__$Matrix4_Matrix4_$Impl_$.copyColumnFrom = function (this1, column, vector) {
		switch (column) {
			case 0:
				this1[0] = vector.x;
				this1[1] = vector.y;
				this1[2] = vector.z;
				this1[3] = vector.w;
				break;
			case 1:
				this1[4] = vector.x;
				this1[5] = vector.y;
				this1[6] = vector.z;
				this1[7] = vector.w;
				break;
			case 2:
				this1[8] = vector.x;
				this1[9] = vector.y;
				this1[10] = vector.z;
				this1[11] = vector.w;
				break;
			case 3:
				this1[12] = vector.x;
				this1[13] = vector.y;
				this1[14] = vector.z;
				this1[15] = vector.w;
				break;
			default:
				throw new js__$Boot_HaxeError("Error, Column " + column + " out of bounds [0, ..., 3]");
		}
	};
	lime_math__$Matrix4_Matrix4_$Impl_$.copyColumnTo = function (this1, column, vector) {
		switch (column) {
			case 0:
				vector.x = this1[0];
				vector.y = this1[1];
				vector.z = this1[2];
				vector.w = this1[3];
				break;
			case 1:
				vector.x = this1[4];
				vector.y = this1[5];
				vector.z = this1[6];
				vector.w = this1[7];
				break;
			case 2:
				vector.x = this1[8];
				vector.y = this1[9];
				vector.z = this1[10];
				vector.w = this1[11];
				break;
			case 3:
				vector.x = this1[12];
				vector.y = this1[13];
				vector.z = this1[14];
				vector.w = this1[15];
				break;
			default:
				throw new js__$Boot_HaxeError("Error, Column " + column + " out of bounds [0, ..., 3]");
		}
	};
	lime_math__$Matrix4_Matrix4_$Impl_$.copyFrom = function (this1, other) {
		this1.set(other);
	};
	lime_math__$Matrix4_Matrix4_$Impl_$.copythisFrom = function (this1, array, index, transposeValues) {
		if (transposeValues == null) transposeValues = false;
		if (index == null) index = 0;
		if (transposeValues) lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
		var l = array.length - index;
		var _g = 0;
		while (_g < l) {
			var c = _g++;
			this1[c] = array[c + index];
		}
		if (transposeValues) lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
	};
	lime_math__$Matrix4_Matrix4_$Impl_$.copythisTo = function (this1, array, index, transposeValues) {
		if (transposeValues == null) transposeValues = false;
		if (index == null) index = 0;
		if (transposeValues) lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
		var l = this1.length;
		var _g = 0;
		while (_g < l) {
			var c = _g++;
			array[c + index] = this1[c];
		}
		if (transposeValues) lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
	};
	lime_math__$Matrix4_Matrix4_$Impl_$.copyRowFrom = function (this1, row, vector) {
		switch (row) {
			case 0:
				this1[0] = vector.x;
				this1[4] = vector.y;
				this1[8] = vector.z;
				this1[12] = vector.w;
				break;
			case 1:
				this1[1] = vector.x;
				this1[5] = vector.y;
				this1[9] = vector.z;
				this1[13] = vector.w;
				break;
			case 2:
				this1[2] = vector.x;
				this1[6] = vector.y;
				this1[10] = vector.z;
				this1[14] = vector.w;
				break;
			case 3:
				this1[3] = vector.x;
				this1[7] = vector.y;
				this1[11] = vector.z;
				this1[15] = vector.w;
				break;
			default:
				throw new js__$Boot_HaxeError("Error, Row " + Std.string(_$UInt_UInt_$Impl_$.toFloat(row)) + " out of bounds [0, ..., 3]");
		}
	};
	lime_math__$Matrix4_Matrix4_$Impl_$.create2D = function (x, y, scale, rotation) {
		if (rotation == null) rotation = 0;
		if (scale == null) scale = 1;
		var theta = rotation * Math.PI / 180.0;
		var c = Math.cos(theta);
		var s = Math.sin(theta);
		return lime_math__$Matrix4_Matrix4_$Impl_$._new((function ($this) {
			var $r;
			var array = [c * scale, -s * scale, 0, 0, s * scale, c * scale, 0, 0, 0, 0, 1, 0, x, y, 0, 1];
			var this1;
			if (array != null) this1 = new Float32Array(array); else this1 = null;
			$r = this1;
			return $r;
		}(this)));
	};
	lime_math__$Matrix4_Matrix4_$Impl_$.createABCD = function (a, b, c, d, tx, ty) {
		return lime_math__$Matrix4_Matrix4_$Impl_$._new((function ($this) {
			var $r;
			var array = [a, b, 0, 0, c, d, 0, 0, 0, 0, 1, 0, tx, ty, 0, 1];
			var this1;
			if (array != null) this1 = new Float32Array(array); else this1 = null;
			$r = this1;
			return $r;
		}(this)));
	};
	lime_math__$Matrix4_Matrix4_$Impl_$.createOrtho = function (x0, x1, y0, y1, zNear, zFar) {
		var sx = 1.0 / (x1 - x0);
		var sy = 1.0 / (y1 - y0);
		var sz = 1.0 / (zFar - zNear);
		return lime_math__$Matrix4_Matrix4_$Impl_$._new((function ($this) {
			var $r;
			var array = [2.0 * sx, 0, 0, 0, 0, 2.0 * sy, 0, 0, 0, 0, -2. * sz, 0, -(x0 + x1) * sx, -(y0 + y1) * sy, -(zNear + zFar) * sz, 1];
			var this1;
			if (array != null) this1 = new Float32Array(array); else this1 = null;
			$r = this1;
			return $r;
		}(this)));
	};
	lime_math__$Matrix4_Matrix4_$Impl_$.copyRowTo = function (this1, row, vector) {
		switch (row) {
			case 0:
				vector.x = this1[0];
				vector.y = this1[4];
				vector.z = this1[8];
				vector.w = this1[12];
				break;
			case 1:
				vector.x = this1[1];
				vector.y = this1[5];
				vector.z = this1[9];
				vector.w = this1[13];
				break;
			case 2:
				vector.x = this1[2];
				vector.y = this1[6];
				vector.z = this1[10];
				vector.w = this1[14];
				break;
			case 3:
				vector.x = this1[3];
				vector.y = this1[7];
				vector.z = this1[11];
				vector.w = this1[15];
				break;
			default:
				throw new js__$Boot_HaxeError("Error, Row " + row + " out of bounds [0, ..., 3]");
		}
	};
	lime_math__$Matrix4_Matrix4_$Impl_$.copyToMatrix4 = function (this1, other) {
		(js_Boot.__cast(other, Float32Array)).set(this1);
	};
	lime_math__$Matrix4_Matrix4_$Impl_$.deltaTransformVector = function (this1, v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new lime_math_Vector4(x * this1[0] + y * this1[4] + z * this1[8] + this1[3], x * this1[1] + y * this1[5] + z * this1[9] + this1[7], x * this1[2] + y * this1[6] + z * this1[10] + this1[11], 0);
	};
	lime_math__$Matrix4_Matrix4_$Impl_$.identity = function (this1) {
		this1[0] = 1;
		this1[1] = 0;
		this1[2] = 0;
		this1[3] = 0;
		this1[4] = 0;
		this1[5] = 1;
		this1[6] = 0;
		this1[7] = 0;
		this1[8] = 0;
		this1[9] = 0;
		this1[10] = 1;
		this1[11] = 0;
		this1[12] = 0;
		this1[13] = 0;
		this1[14] = 0;
		this1[15] = 1;
	};
	lime_math__$Matrix4_Matrix4_$Impl_$.interpolate = function (thisMat, toMat, percent) {
		var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
		var _g = 0;
		while (_g < 16) {
			var i = _g++;
			lime_math__$Matrix4_Matrix4_$Impl_$.set(m, i, lime_math__$Matrix4_Matrix4_$Impl_$.get(thisMat, i) + (lime_math__$Matrix4_Matrix4_$Impl_$.get(toMat, i) - lime_math__$Matrix4_Matrix4_$Impl_$.get(thisMat, i)) * percent);
		}
		return m;
	};
	lime_math__$Matrix4_Matrix4_$Impl_$.interpolateTo = function (this1, toMat, percent) {
		var _g = 0;
		while (_g < 16) {
			var i = _g++;
			var val = this1[i] + (lime_math__$Matrix4_Matrix4_$Impl_$.get(toMat, i) - this1[i]) * percent;
			this1[i] = val;
		}
	};
	lime_math__$Matrix4_Matrix4_$Impl_$.invert = function (this1) {
		var d = lime_math__$Matrix4_Matrix4_$Impl_$.get_determinant(this1);
		var invertable = Math.abs(d) > 0.00000000001;
		if (invertable) {
			d = 1 / d;
			var m11 = this1[0];
			var m21 = this1[4];
			var m31 = this1[8];
			var m41 = this1[12];
			var m12 = this1[1];
			var m22 = this1[5];
			var m32 = this1[9];
			var m42 = this1[13];
			var m13 = this1[2];
			var m23 = this1[6];
			var m33 = this1[10];
			var m43 = this1[14];
			var m14 = this1[3];
			var m24 = this1[7];
			var m34 = this1[11];
			var m44 = this1[15];
			this1[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
			this1[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
			this1[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
			this1[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
			this1[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
			this1[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
			this1[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
			this1[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
			this1[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
			this1[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
			this1[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
			this1[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
			this1[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
			this1[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
			this1[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
			this1[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
		}
		return invertable;
	};
	lime_math__$Matrix4_Matrix4_$Impl_$.pointAt = function (this1, pos, at, up) {
		if (at == null) at = new lime_math_Vector4(0, 0, -1);
		if (up == null) up = new lime_math_Vector4(0, -1, 0);
		var dir = new lime_math_Vector4(at.x - pos.x, at.y - pos.y, at.z - pos.z);
		var vup = new lime_math_Vector4(up.x, up.y, up.z, up.w);
		var right;
		dir.normalize();
		vup.normalize();
		var dir2 = new lime_math_Vector4(dir.x, dir.y, dir.z, dir.w);
		dir2.scaleBy(vup.x * dir.x + vup.y * dir.y + vup.z * dir.z);
		vup = new lime_math_Vector4(vup.x - dir2.x, vup.y - dir2.y, vup.z - dir2.z);
		if (Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z) > 0) vup.normalize(); else if (dir.x != 0) vup = new lime_math_Vector4(-dir.y, dir.x, 0); else vup = new lime_math_Vector4(1, 0, 0);
		right = new lime_math_Vector4(vup.y * dir.z - vup.z * dir.y, vup.z * dir.x - vup.x * dir.z, vup.x * dir.y - vup.y * dir.x, 1);
		right.normalize();
		this1[0] = right.x;
		this1[4] = right.y;
		this1[8] = right.z;
		this1[12] = 0.0;
		this1[1] = vup.x;
		this1[5] = vup.y;
		this1[9] = vup.z;
		this1[13] = 0.0;
		this1[2] = dir.x;
		this1[6] = dir.y;
		this1[10] = dir.z;
		this1[14] = 0.0;
		this1[3] = pos.x;
		this1[7] = pos.y;
		this1[11] = pos.z;
		this1[15] = 1.0;
	};
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend = function (this1, rhs) {
		var m111 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 0);
		var m121 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 4);
		var m131 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 8);
		var m141 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 12);
		var m112 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 1);
		var m122 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 5);
		var m132 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 9);
		var m142 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 13);
		var m113 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 2);
		var m123 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 6);
		var m133 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 10);
		var m143 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 14);
		var m114 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 3);
		var m124 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 7);
		var m134 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 11);
		var m144 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 15);
		var m211 = this1[0];
		var m221 = this1[4];
		var m231 = this1[8];
		var m241 = this1[12];
		var m212 = this1[1];
		var m222 = this1[5];
		var m232 = this1[9];
		var m242 = this1[13];
		var m213 = this1[2];
		var m223 = this1[6];
		var m233 = this1[10];
		var m243 = this1[14];
		var m214 = this1[3];
		var m224 = this1[7];
		var m234 = this1[11];
		var m244 = this1[15];
		this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
		this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
		this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
		this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
		this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
		this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
		this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
		this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
		this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
		this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
		this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
		this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
		this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
		this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
		this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
		this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
	};
	lime_math__$Matrix4_Matrix4_$Impl_$.prependRotation = function (this1, degrees, axis, pivotPoint) {
		var m = lime_math__$Matrix4_Matrix4_$Impl_$.getAxisRotation(axis.x, axis.y, axis.z, degrees);
		if (pivotPoint != null) {
			var p = pivotPoint;
			lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation(m, p.x, p.y, p.z);
		}
		lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1, m);
	};
	lime_math__$Matrix4_Matrix4_$Impl_$.prependScale = function (this1, xScale, yScale, zScale) {
		lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1, lime_math__$Matrix4_Matrix4_$Impl_$._new((function ($this) {
			var $r;
			var array = [xScale, 0.0, 0.0, 0.0, 0.0, yScale, 0.0, 0.0, 0.0, 0.0, zScale, 0.0, 0.0, 0.0, 0.0, 1.0];
			var this2;
			if (array != null) this2 = new Float32Array(array); else this2 = null;
			$r = this2;
			return $r;
		}(this))));
	};
	lime_math__$Matrix4_Matrix4_$Impl_$.prependTranslation = function (this1, x, y, z) {
		var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
		lime_math__$Matrix4_Matrix4_$Impl_$.set_position(m, new lime_math_Vector4(x, y, z));
		lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1, m);
	};
	lime_math__$Matrix4_Matrix4_$Impl_$.transformVector = function (this1, v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new lime_math_Vector4(x * this1[0] + y * this1[4] + z * this1[8] + this1[12], x * this1[1] + y * this1[5] + z * this1[9] + this1[13], x * this1[2] + y * this1[6] + z * this1[10] + this1[14], x * this1[3] + y * this1[7] + z * this1[11] + this1[15]);
	};
	lime_math__$Matrix4_Matrix4_$Impl_$.transformVectors = function (this1, ain, aout) {
		var i = 0;
		while (i + 3 <= ain.length) {
			var x = ain[i];
			var y = ain[i + 1];
			var z = ain[i + 2];
			aout[i] = x * this1[0] + y * this1[4] + z * this1[8] + this1[12];
			aout[i + 1] = x * this1[1] + y * this1[5] + z * this1[9] + this1[13];
			aout[i + 2] = x * this1[2] + y * this1[6] + z * this1[10] + this1[14];
			i += 3;
		}
	};
	lime_math__$Matrix4_Matrix4_$Impl_$.transpose = function (this1) {
		var othis;
		var this2;
		if (this1 != null) this2 = new Float32Array(this1); else this2 = null;
		othis = this2;
		this1[1] = othis[4];
		this1[2] = othis[8];
		this1[3] = othis[12];
		this1[4] = othis[1];
		this1[6] = othis[9];
		this1[7] = othis[13];
		this1[8] = othis[2];
		this1[9] = othis[6];
		this1[11] = othis[14];
		this1[12] = othis[3];
		this1[13] = othis[7];
		this1[14] = othis[11];
	};
	lime_math__$Matrix4_Matrix4_$Impl_$.getAxisRotation = function (x, y, z, degrees) {
		var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
		var a1 = new lime_math_Vector4(x, y, z);
		var rad = -degrees * (Math.PI / 180);
		var c = Math.cos(rad);
		var s = Math.sin(rad);
		var t = 1.0 - c;
		lime_math__$Matrix4_Matrix4_$Impl_$.set(m, 0, c + a1.x * a1.x * t);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(m, 5, c + a1.y * a1.y * t);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(m, 10, c + a1.z * a1.z * t);
		var tmp1 = a1.x * a1.y * t;
		var tmp2 = a1.z * s;
		lime_math__$Matrix4_Matrix4_$Impl_$.set(m, 4, tmp1 + tmp2);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(m, 1, tmp1 - tmp2);
		tmp1 = a1.x * a1.z * t;
		tmp2 = a1.y * s;
		lime_math__$Matrix4_Matrix4_$Impl_$.set(m, 8, tmp1 - tmp2);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(m, 2, tmp1 + tmp2);
		tmp1 = a1.y * a1.z * t;
		tmp2 = a1.x * s;
		lime_math__$Matrix4_Matrix4_$Impl_$.set(m, 9, tmp1 + tmp2);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(m, 6, tmp1 - tmp2);
		return m;
	};
	lime_math__$Matrix4_Matrix4_$Impl_$.get_determinant = function (this1) {
		return (this1[0] * this1[5] - this1[4] * this1[1]) * (this1[10] * this1[15] - this1[14] * this1[11]) - (this1[0] * this1[9] - this1[8] * this1[1]) * (this1[6] * this1[15] - this1[14] * this1[7]) + (this1[0] * this1[13] - this1[12] * this1[1]) * (this1[6] * this1[11] - this1[10] * this1[7]) + (this1[4] * this1[9] - this1[8] * this1[5]) * (this1[2] * this1[15] - this1[14] * this1[3]) - (this1[4] * this1[13] - this1[12] * this1[5]) * (this1[2] * this1[11] - this1[10] * this1[3]) + (this1[8] * this1[13] - this1[12] * this1[9]) * (this1[2] * this1[7] - this1[6] * this1[3]);
	};
	lime_math__$Matrix4_Matrix4_$Impl_$.get_position = function (this1) {
		return new lime_math_Vector4(this1[12], this1[13], this1[14]);
	};
	lime_math__$Matrix4_Matrix4_$Impl_$.set_position = function (this1, val) {
		this1[12] = val.x;
		this1[13] = val.y;
		this1[14] = val.z;
		return val;
	};
	lime_math__$Matrix4_Matrix4_$Impl_$.get = function (this1, index) {
		return this1[index];
	};
	lime_math__$Matrix4_Matrix4_$Impl_$.set = function (this1, index, value) {
		this1[index] = value;
		return value;
	};
	var lime_math_Rectangle = function (x, y, width, height) {
		if (height == null) height = 0;
		if (width == null) width = 0;
		if (y == null) y = 0;
		if (x == null) x = 0;
		this.x = x;
		this.y = y;
		this.width = width;
		this.height = height;
	};
	$hxClasses["lime.math.Rectangle"] = lime_math_Rectangle;
	lime_math_Rectangle.__name__ = ["lime", "math", "Rectangle"];
	lime_math_Rectangle.prototype = {
		clone: function () {
			return new lime_math_Rectangle(this.x, this.y, this.width, this.height);
		}
		, contains: function (x, y) {
			return x >= this.x && y >= this.y && x < this.get_right() && y < this.get_bottom();
		}
		, containsPoint: function (point) {
			return this.contains(point.x, point.y);
		}
		, containsRect: function (rect) {
			if (rect.width <= 0 || rect.height <= 0) return rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right() && rect.get_bottom() < this.get_bottom(); else return rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right() && rect.get_bottom() <= this.get_bottom();
		}
		, copyFrom: function (sourceRect) {
			this.x = sourceRect.x;
			this.y = sourceRect.y;
			this.width = sourceRect.width;
			this.height = sourceRect.height;
		}
		, equals: function (toCompare) {
			return toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width && this.height == toCompare.height;
		}
		, inflate: function (dx, dy) {
			this.x -= dx;
			this.width += dx * 2;
			this.y -= dy;
			this.height += dy * 2;
		}
		, inflatePoint: function (point) {
			this.inflate(point.x, point.y);
		}
		, intersection: function (toIntersect) {
			var x0;
			if (this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
			var x1;
			if (this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
			if (x1 <= x0) return new lime_math_Rectangle();
			var y0;
			if (this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
			var y1;
			if (this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
			if (y1 <= y0) return new lime_math_Rectangle();
			return new lime_math_Rectangle(x0, y0, x1 - x0, y1 - y0);
		}
		, intersects: function (toIntersect) {
			var x0;
			if (this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
			var x1;
			if (this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
			if (x1 <= x0) return false;
			var y0;
			if (this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
			var y1;
			if (this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
			return y1 > y0;
		}
		, isEmpty: function () {
			return this.width <= 0 || this.height <= 0;
		}
		, offset: function (dx, dy) {
			this.x += dx;
			this.y += dy;
		}
		, offsetPoint: function (point) {
			this.x += point.x;
			this.y += point.y;
		}
		, setEmpty: function () {
			this.x = this.y = this.width = this.height = 0;
		}
		, setTo: function (xa, ya, widtha, heighta) {
			this.x = xa;
			this.y = ya;
			this.width = widtha;
			this.height = heighta;
		}
		, transform: function (m) {
			var tx0 = m.a * this.x + m.c * this.y;
			var tx1 = tx0;
			var ty0 = m.b * this.x + m.d * this.y;
			var ty1 = ty0;
			var tx = m.a * (this.x + this.width) + m.c * this.y;
			var ty = m.b * (this.x + this.width) + m.d * this.y;
			if (tx < tx0) tx0 = tx;
			if (ty < ty0) ty0 = ty;
			if (tx > tx1) tx1 = tx;
			if (ty > ty1) ty1 = ty;
			tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
			ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
			if (tx < tx0) tx0 = tx;
			if (ty < ty0) ty0 = ty;
			if (tx > tx1) tx1 = tx;
			if (ty > ty1) ty1 = ty;
			tx = m.a * this.x + m.c * (this.y + this.height);
			ty = m.b * this.x + m.d * (this.y + this.height);
			if (tx < tx0) tx0 = tx;
			if (ty < ty0) ty0 = ty;
			if (tx > tx1) tx1 = tx;
			if (ty > ty1) ty1 = ty;
			return new lime_math_Rectangle(tx0 + m.tx, ty0 + m.ty, tx1 - tx0, ty1 - ty0);
		}
		, union: function (toUnion) {
			if (this.width == 0 || this.height == 0) return toUnion.clone(); else if (toUnion.width == 0 || toUnion.height == 0) return this.clone();
			var x0;
			if (this.x > toUnion.x) x0 = toUnion.x; else x0 = this.x;
			var x1;
			if (this.get_right() < toUnion.get_right()) x1 = toUnion.get_right(); else x1 = this.get_right();
			var y0;
			if (this.y > toUnion.y) y0 = toUnion.y; else y0 = this.y;
			var y1;
			if (this.get_bottom() < toUnion.get_bottom()) y1 = toUnion.get_bottom(); else y1 = this.get_bottom();
			return new lime_math_Rectangle(x0, y0, x1 - x0, y1 - y0);
		}
		, __contract: function (x, y, width, height) {
			if (this.width == 0 && this.height == 0) return;
			if (this.x < x) this.x = x;
			if (this.y < y) this.y = y;
			if (this.get_right() > x + width) this.width = x + width - this.x;
			if (this.get_bottom() > y + height) this.height = y + height - this.y;
		}
		, __expand: function (x, y, width, height) {
			if (this.width == 0 && this.height == 0) {
				this.x = x;
				this.y = y;
				this.width = width;
				this.height = height;
				return;
			}
			var cacheRight = this.get_right();
			var cacheBottom = this.get_bottom();
			if (this.x > x) this.x = x;
			if (this.y > y) this.y = y;
			if (cacheRight < x + width) this.width = x + width - this.x;
			if (cacheBottom < y + height) this.height = y + height - this.y;
		}
		, __toFlashRectangle: function () {
			return null;
		}
		, get_bottom: function () {
			return this.y + this.height;
		}
		, set_bottom: function (b) {
			this.height = b - this.y;
			return b;
		}
		, get_bottomRight: function () {
			return new lime_math_Vector2(this.x + this.width, this.y + this.height);
		}
		, set_bottomRight: function (p) {
			this.width = p.x - this.x;
			this.height = p.y - this.y;
			return p.clone();
		}
		, get_left: function () {
			return this.x;
		}
		, set_left: function (l) {
			this.width -= l - this.x;
			this.x = l;
			return l;
		}
		, get_right: function () {
			return this.x + this.width;
		}
		, set_right: function (r) {
			this.width = r - this.x;
			return r;
		}
		, get_size: function () {
			return new lime_math_Vector2(this.width, this.height);
		}
		, set_size: function (p) {
			this.width = p.x;
			this.height = p.y;
			return p.clone();
		}
		, get_top: function () {
			return this.y;
		}
		, set_top: function (t) {
			this.height -= t - this.y;
			this.y = t;
			return t;
		}
		, get_topLeft: function () {
			return new lime_math_Vector2(this.x, this.y);
		}
		, set_topLeft: function (p) {
			this.x = p.x;
			this.y = p.y;
			return p.clone();
		}
		, __class__: lime_math_Rectangle
		, __properties__: { set_topLeft: "set_topLeft", get_topLeft: "get_topLeft", set_top: "set_top", get_top: "get_top", set_size: "set_size", get_size: "get_size", set_right: "set_right", get_right: "get_right", set_left: "set_left", get_left: "get_left", set_bottomRight: "set_bottomRight", get_bottomRight: "get_bottomRight", set_bottom: "set_bottom", get_bottom: "get_bottom" }
	};
	var lime_math_Vector2 = function (x, y) {
		if (y == null) y = 0;
		if (x == null) x = 0;
		this.x = x;
		this.y = y;
	};
	$hxClasses["lime.math.Vector2"] = lime_math_Vector2;
	lime_math_Vector2.__name__ = ["lime", "math", "Vector2"];
	lime_math_Vector2.distance = function (pt1, pt2) {
		var dx = pt1.x - pt2.x;
		var dy = pt1.y - pt2.y;
		return Math.sqrt(dx * dx + dy * dy);
	};
	lime_math_Vector2.interpolate = function (pt1, pt2, f) {
		return new lime_math_Vector2(pt2.x + f * (pt1.x - pt2.x), pt2.y + f * (pt1.y - pt2.y));
	};
	lime_math_Vector2.polar = function (len, angle) {
		return new lime_math_Vector2(len * Math.cos(angle), len * Math.sin(angle));
	};
	lime_math_Vector2.prototype = {
		add: function (v) {
			return new lime_math_Vector2(v.x + this.x, v.y + this.y);
		}
		, clone: function () {
			return new lime_math_Vector2(this.x, this.y);
		}
		, equals: function (toCompare) {
			return toCompare != null && toCompare.x == this.x && toCompare.y == this.y;
		}
		, normalize: function (thickness) {
			if (this.x == 0 && this.y == 0) return; else {
				var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
				this.x *= norm;
				this.y *= norm;
			}
		}
		, offset: function (dx, dy) {
			this.x += dx;
			this.y += dy;
		}
		, setTo: function (xa, ya) {
			this.x = xa;
			this.y = ya;
		}
		, subtract: function (v) {
			return new lime_math_Vector2(this.x - v.x, this.y - v.y);
		}
		, __toFlashPoint: function () {
			return null;
		}
		, get_length: function () {
			return Math.sqrt(this.x * this.x + this.y * this.y);
		}
		, __class__: lime_math_Vector2
		, __properties__: { get_length: "get_length" }
	};
	var lime_math_Vector4 = function (x, y, z, w) {
		if (w == null) w = 0.;
		if (z == null) z = 0.;
		if (y == null) y = 0.;
		if (x == null) x = 0.;
		this.w = w;
		this.x = x;
		this.y = y;
		this.z = z;
	};
	$hxClasses["lime.math.Vector4"] = lime_math_Vector4;
	lime_math_Vector4.__name__ = ["lime", "math", "Vector4"];
	lime_math_Vector4.__properties__ = { get_Z_AXIS: "get_Z_AXIS", get_Y_AXIS: "get_Y_AXIS", get_X_AXIS: "get_X_AXIS" }
	lime_math_Vector4.X_AXIS = null;
	lime_math_Vector4.Y_AXIS = null;
	lime_math_Vector4.Z_AXIS = null;
	lime_math_Vector4.angleBetween = function (a, b) {
		var a0 = new lime_math_Vector4(a.x, a.y, a.z, a.w);
		a0.normalize();
		var b0 = new lime_math_Vector4(b.x, b.y, b.z, b.w);
		b0.normalize();
		return Math.acos(a0.x * b0.x + a0.y * b0.y + a0.z * b0.z);
	};
	lime_math_Vector4.distance = function (pt1, pt2) {
		var x = pt2.x - pt1.x;
		var y = pt2.y - pt1.y;
		var z = pt2.z - pt1.z;
		return Math.sqrt(x * x + y * y + z * z);
	};
	lime_math_Vector4.get_X_AXIS = function () {
		return new lime_math_Vector4(1, 0, 0);
	};
	lime_math_Vector4.get_Y_AXIS = function () {
		return new lime_math_Vector4(0, 1, 0);
	};
	lime_math_Vector4.get_Z_AXIS = function () {
		return new lime_math_Vector4(0, 0, 1);
	};
	lime_math_Vector4.prototype = {
		add: function (a) {
			return new lime_math_Vector4(this.x + a.x, this.y + a.y, this.z + a.z);
		}
		, clone: function () {
			return new lime_math_Vector4(this.x, this.y, this.z, this.w);
		}
		, copyFrom: function (sourceVector4) {
			this.x = sourceVector4.x;
			this.y = sourceVector4.y;
			this.z = sourceVector4.z;
		}
		, crossProduct: function (a) {
			return new lime_math_Vector4(this.y * a.z - this.z * a.y, this.z * a.x - this.x * a.z, this.x * a.y - this.y * a.x, 1);
		}
		, decrementBy: function (a) {
			this.x -= a.x;
			this.y -= a.y;
			this.z -= a.z;
		}
		, dotProduct: function (a) {
			return this.x * a.x + this.y * a.y + this.z * a.z;
		}
		, equals: function (toCompare, allFour) {
			if (allFour == null) allFour = false;
			return this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z && (!allFour || this.w == toCompare.w);
		}
		, incrementBy: function (a) {
			this.x += a.x;
			this.y += a.y;
			this.z += a.z;
		}
		, nearEquals: function (toCompare, tolerance, allFour) {
			if (allFour == null) allFour = false;
			return Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance && (!allFour || Math.abs(this.w - toCompare.w) < tolerance);
		}
		, negate: function () {
			this.x *= -1;
			this.y *= -1;
			this.z *= -1;
		}
		, normalize: function () {
			var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
			if (l != 0) {
				this.x /= l;
				this.y /= l;
				this.z /= l;
			}
			return l;
		}
		, project: function () {
			this.x /= this.w;
			this.y /= this.w;
			this.z /= this.w;
		}
		, scaleBy: function (s) {
			this.x *= s;
			this.y *= s;
			this.z *= s;
		}
		, setTo: function (xa, ya, za) {
			this.x = xa;
			this.y = ya;
			this.z = za;
		}
		, subtract: function (a) {
			return new lime_math_Vector4(this.x - a.x, this.y - a.y, this.z - a.z);
		}
		, toString: function () {
			return "Vector4(" + this.x + ", " + this.y + ", " + this.z + ")";
		}
		, get_length: function () {
			return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		}
		, get_lengthSquared: function () {
			return this.x * this.x + this.y * this.y + this.z * this.z;
		}
		, __class__: lime_math_Vector4
		, __properties__: { get_lengthSquared: "get_lengthSquared", get_length: "get_length" }
	};
	var lime_math_color__$ARGB_ARGB_$Impl_$ = {};
	$hxClasses["lime.math.color._ARGB.ARGB_Impl_"] = lime_math_color__$ARGB_ARGB_$Impl_$;
	lime_math_color__$ARGB_ARGB_$Impl_$.__name__ = ["lime", "math", "color", "_ARGB", "ARGB_Impl_"];
	lime_math_color__$ARGB_ARGB_$Impl_$.__properties__ = { set_r: "set_r", get_r: "get_r", set_g: "set_g", get_g: "get_g", set_b: "set_b", get_b: "get_b", set_a: "set_a", get_a: "get_a" }
	lime_math_color__$ARGB_ARGB_$Impl_$.a16 = null;
	lime_math_color__$ARGB_ARGB_$Impl_$.unmult = null;
	lime_math_color__$ARGB_ARGB_$Impl_$._new = function (argb) {
		if (argb == null) argb = 0;
		return argb;
	};
	lime_math_color__$ARGB_ARGB_$Impl_$.create = function (a, r, g, b) {
		var argb = 0;
		argb = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
		return argb;
	};
	lime_math_color__$ARGB_ARGB_$Impl_$.multiplyAlpha = function (this1) {
		if ((this1 >> 24 & 255) == 0) this1 = 0; else if ((this1 >> 24 & 255) != 255) {
			lime_math_color__$ARGB_ARGB_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 >> 24 & 255];
			this1 = (this1 >> 24 & 255 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255;
		}
	};
	lime_math_color__$ARGB_ARGB_$Impl_$.readUInt8 = function (this1, data, offset, format, premultiplied) {
		if (premultiplied == null) premultiplied = false;
		if (format == null) format = 0;
		switch (format) {
			case 2:
				this1 = (data[offset + 1] & 255) << 24 | (data[offset] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset + 2] & 255;
				break;
			case 0:
				this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
				break;
			case 1:
				this1 = (data[offset + 2] & 255) << 24 | (data[offset + 3] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 1] & 255;
				break;
		}
		if (premultiplied) {
			if ((this1 >> 24 & 255) != 0 && (this1 >> 24 & 255) != 255) {
				lime_math_color__$ARGB_ARGB_$Impl_$.unmult = 255.0 / (this1 >> 24 & 255);
				var r;
				var idx = Math.floor((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
				r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
				var g;
				var idx1 = Math.floor((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
				g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
				var b;
				var idx2 = Math.floor((this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
				b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
				this1 = (this1 >> 24 & 255 & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
			}
		}
	};
	lime_math_color__$ARGB_ARGB_$Impl_$.set = function (this1, a, r, g, b) {
		this1 = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
	};
	lime_math_color__$ARGB_ARGB_$Impl_$.unmultiplyAlpha = function (this1) {
		if ((this1 >> 24 & 255) != 0 && (this1 >> 24 & 255) != 255) {
			lime_math_color__$ARGB_ARGB_$Impl_$.unmult = 255.0 / (this1 >> 24 & 255);
			var r;
			var idx = Math.floor((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.floor((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.floor((this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			this1 = (this1 >> 24 & 255 & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
		}
	};
	lime_math_color__$ARGB_ARGB_$Impl_$.writeUInt8 = function (this1, data, offset, format, premultiplied) {
		if (premultiplied == null) premultiplied = false;
		if (format == null) format = 0;
		if (premultiplied) {
			if ((this1 >> 24 & 255) == 0) this1 = 0; else if ((this1 >> 24 & 255) != 255) {
				lime_math_color__$ARGB_ARGB_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 >> 24 & 255];
				this1 = (this1 >> 24 & 255 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255;
			}
		}
		switch (format) {
			case 2:
				data[offset] = this1 & 255;
				data[offset + 1] = this1 >> 8 & 255;
				data[offset + 2] = this1 >> 16 & 255;
				data[offset + 3] = this1 >> 24 & 255;
				break;
			case 0:
				data[offset] = this1 >> 16 & 255;
				data[offset + 1] = this1 >> 8 & 255;
				data[offset + 2] = this1 & 255;
				data[offset + 3] = this1 >> 24 & 255;
				break;
			case 1:
				data[offset] = this1 >> 24 & 255;
				data[offset + 1] = this1 >> 16 & 255;
				data[offset + 2] = this1 >> 8 & 255;
				data[offset + 3] = this1 & 255;
				break;
		}
	};
	lime_math_color__$ARGB_ARGB_$Impl_$.__fromBGRA = function (bgra) {
		var argb = 0;
		argb = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
		return argb;
	};
	lime_math_color__$ARGB_ARGB_$Impl_$.__fromRGBA = function (rgba) {
		var argb = 0;
		argb = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
		return argb;
	};
	lime_math_color__$ARGB_ARGB_$Impl_$.get_a = function (this1) {
		return this1 >> 24 & 255;
	};
	lime_math_color__$ARGB_ARGB_$Impl_$.set_a = function (this1, value) {
		this1 = (value & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
		return value;
	};
	lime_math_color__$ARGB_ARGB_$Impl_$.get_b = function (this1) {
		return this1 & 255;
	};
	lime_math_color__$ARGB_ARGB_$Impl_$.set_b = function (this1, value) {
		this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | value & 255;
		return value;
	};
	lime_math_color__$ARGB_ARGB_$Impl_$.get_g = function (this1) {
		return this1 >> 8 & 255;
	};
	lime_math_color__$ARGB_ARGB_$Impl_$.set_g = function (this1, value) {
		this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
		return value;
	};
	lime_math_color__$ARGB_ARGB_$Impl_$.get_r = function (this1) {
		return this1 >> 16 & 255;
	};
	lime_math_color__$ARGB_ARGB_$Impl_$.set_r = function (this1, value) {
		this1 = (this1 >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
		return value;
	};
	var lime_math_color__$BGRA_BGRA_$Impl_$ = {};
	$hxClasses["lime.math.color._BGRA.BGRA_Impl_"] = lime_math_color__$BGRA_BGRA_$Impl_$;
	lime_math_color__$BGRA_BGRA_$Impl_$.__name__ = ["lime", "math", "color", "_BGRA", "BGRA_Impl_"];
	lime_math_color__$BGRA_BGRA_$Impl_$.__properties__ = { set_r: "set_r", get_r: "get_r", set_g: "set_g", get_g: "get_g", set_b: "set_b", get_b: "get_b", set_a: "set_a", get_a: "get_a" }
	lime_math_color__$BGRA_BGRA_$Impl_$.a16 = null;
	lime_math_color__$BGRA_BGRA_$Impl_$.unmult = null;
	lime_math_color__$BGRA_BGRA_$Impl_$._new = function (bgra) {
		if (bgra == null) bgra = 0;
		return bgra;
	};
	lime_math_color__$BGRA_BGRA_$Impl_$.create = function (b, g, r, a) {
		var bgra = 0;
		bgra = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
		return bgra;
	};
	lime_math_color__$BGRA_BGRA_$Impl_$.multiplyAlpha = function (this1) {
		if ((this1 & 255) == 0) this1 = 0; else if ((this1 & 255) != 255) {
			lime_math_color__$BGRA_BGRA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
			this1 = ((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
		}
	};
	lime_math_color__$BGRA_BGRA_$Impl_$.readUInt8 = function (this1, data, offset, format, premultiplied) {
		if (premultiplied == null) premultiplied = false;
		if (format == null) format = 0;
		switch (format) {
			case 2:
				this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 0:
				this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 1:
				this1 = (data[offset + 3] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 1] & 255) << 8 | data[offset] & 255;
				break;
		}
		if (premultiplied) {
			if ((this1 & 255) != 0 && (this1 & 255) != 255) {
				lime_math_color__$BGRA_BGRA_$Impl_$.unmult = 255.0 / (this1 & 255);
				var b;
				var idx = Math.floor((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
				b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
				var g;
				var idx1 = Math.floor((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
				g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
				var r;
				var idx2 = Math.floor((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
				r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
				this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | this1 & 255 & 255;
			}
		}
	};
	lime_math_color__$BGRA_BGRA_$Impl_$.set = function (this1, b, g, r, a) {
		this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
	};
	lime_math_color__$BGRA_BGRA_$Impl_$.unmultiplyAlpha = function (this1) {
		if ((this1 & 255) != 0 && (this1 & 255) != 255) {
			lime_math_color__$BGRA_BGRA_$Impl_$.unmult = 255.0 / (this1 & 255);
			var b;
			var idx = Math.floor((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.floor((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var r;
			var idx2 = Math.floor((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | this1 & 255 & 255;
		}
	};
	lime_math_color__$BGRA_BGRA_$Impl_$.writeUInt8 = function (this1, data, offset, format, premultiplied) {
		if (premultiplied == null) premultiplied = false;
		if (format == null) format = 0;
		if (premultiplied) {
			if ((this1 & 255) == 0) this1 = 0; else if ((this1 & 255) != 255) {
				lime_math_color__$BGRA_BGRA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
				this1 = ((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
			}
		}
		switch (format) {
			case 2:
				data[offset] = this1 >> 24 & 255;
				data[offset + 1] = this1 >> 16 & 255;
				data[offset + 2] = this1 >> 8 & 255;
				data[offset + 3] = this1 & 255;
				break;
			case 0:
				data[offset] = this1 >> 8 & 255;
				data[offset + 1] = this1 >> 16 & 255;
				data[offset + 2] = this1 >> 24 & 255;
				data[offset + 3] = this1 & 255;
				break;
			case 1:
				data[offset] = this1 & 255;
				data[offset + 1] = this1 >> 8 & 255;
				data[offset + 2] = this1 >> 16 & 255;
				data[offset + 3] = this1 >> 24 & 255;
				break;
		}
	};
	lime_math_color__$BGRA_BGRA_$Impl_$.__fromARGB = function (argb) {
		var bgra = 0;
		bgra = (argb & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb >> 16 & 255 & 255) << 8 | argb >> 24 & 255 & 255;
		return bgra;
	};
	lime_math_color__$BGRA_BGRA_$Impl_$.__fromRGBA = function (rgba) {
		var bgra = 0;
		bgra = (rgba >> 8 & 255 & 255) << 24 | (rgba >> 16 & 255 & 255) << 16 | (rgba >> 24 & 255 & 255) << 8 | rgba & 255 & 255;
		return bgra;
	};
	lime_math_color__$BGRA_BGRA_$Impl_$.get_a = function (this1) {
		return this1 & 255;
	};
	lime_math_color__$BGRA_BGRA_$Impl_$.set_a = function (this1, value) {
		this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | value & 255;
		return value;
	};
	lime_math_color__$BGRA_BGRA_$Impl_$.get_b = function (this1) {
		return this1 >> 24 & 255;
	};
	lime_math_color__$BGRA_BGRA_$Impl_$.set_b = function (this1, value) {
		this1 = (value & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
		return value;
	};
	lime_math_color__$BGRA_BGRA_$Impl_$.get_g = function (this1) {
		return this1 >> 16 & 255;
	};
	lime_math_color__$BGRA_BGRA_$Impl_$.set_g = function (this1, value) {
		this1 = (this1 >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
		return value;
	};
	lime_math_color__$BGRA_BGRA_$Impl_$.get_r = function (this1) {
		return this1 >> 8 & 255;
	};
	lime_math_color__$BGRA_BGRA_$Impl_$.set_r = function (this1, value) {
		this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
		return value;
	};
	var lime_math_color__$RGBA_RGBA_$Impl_$ = {};
	$hxClasses["lime.math.color._RGBA.RGBA_Impl_"] = lime_math_color__$RGBA_RGBA_$Impl_$;
	lime_math_color__$RGBA_RGBA_$Impl_$.__name__ = ["lime", "math", "color", "_RGBA", "RGBA_Impl_"];
	lime_math_color__$RGBA_RGBA_$Impl_$.__properties__ = { set_r: "set_r", get_r: "get_r", set_g: "set_g", get_g: "get_g", set_b: "set_b", get_b: "get_b", set_a: "set_a", get_a: "get_a" }
	lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16 = null;
	lime_math_color__$RGBA_RGBA_$Impl_$.__clamp = null;
	lime_math_color__$RGBA_RGBA_$Impl_$.a16 = null;
	lime_math_color__$RGBA_RGBA_$Impl_$.unmult = null;
	lime_math_color__$RGBA_RGBA_$Impl_$._new = function (rgba) {
		if (rgba == null) rgba = 0;
		return rgba;
	};
	lime_math_color__$RGBA_RGBA_$Impl_$.create = function (r, g, b, a) {
		var rgba = 0;
		rgba = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
		return rgba;
	};
	lime_math_color__$RGBA_RGBA_$Impl_$.multiplyAlpha = function (this1) {
		if ((this1 & 255) == 0) {
			if (this1 != 0) this1 = 0;
		} else if ((this1 & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
			this1 = ((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
		}
	};
	lime_math_color__$RGBA_RGBA_$Impl_$.readUInt8 = function (this1, data, offset, format, premultiplied) {
		if (premultiplied == null) premultiplied = false;
		if (format == null) format = 0;
		switch (format) {
			case 2:
				this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 0:
				this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 1:
				this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
				break;
		}
		if (premultiplied) {
			if ((this1 & 255) != 0 && (this1 & 255) != 255) {
				lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (this1 & 255);
				var r;
				var idx = Math.round((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
				r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
				var g;
				var idx1 = Math.round((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
				g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
				var b;
				var idx2 = Math.round((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
				b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
				this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | this1 & 255 & 255;
			}
		}
	};
	lime_math_color__$RGBA_RGBA_$Impl_$.set = function (this1, r, g, b, a) {
		this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
	};
	lime_math_color__$RGBA_RGBA_$Impl_$.unmultiplyAlpha = function (this1) {
		if ((this1 & 255) != 0 && (this1 & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (this1 & 255);
			var r;
			var idx = Math.round((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | this1 & 255 & 255;
		}
	};
	lime_math_color__$RGBA_RGBA_$Impl_$.writeUInt8 = function (this1, data, offset, format, premultiplied) {
		if (premultiplied == null) premultiplied = false;
		if (format == null) format = 0;
		if (premultiplied) {
			if ((this1 & 255) == 0) {
				if (this1 != 0) this1 = 0;
			} else if ((this1 & 255) != 255) {
				lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
				this1 = ((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
			}
		}
		switch (format) {
			case 2:
				data[offset] = this1 >> 8 & 255;
				data[offset + 1] = this1 >> 16 & 255;
				data[offset + 2] = this1 >> 24 & 255;
				data[offset + 3] = this1 & 255;
				break;
			case 0:
				data[offset] = this1 >> 24 & 255;
				data[offset + 1] = this1 >> 16 & 255;
				data[offset + 2] = this1 >> 8 & 255;
				data[offset + 3] = this1 & 255;
				break;
			case 1:
				data[offset] = this1 & 255;
				data[offset + 1] = this1 >> 24 & 255;
				data[offset + 2] = this1 >> 16 & 255;
				data[offset + 3] = this1 >> 8 & 255;
				break;
		}
	};
	lime_math_color__$RGBA_RGBA_$Impl_$.__fromARGB = function (argb) {
		var rgba = 0;
		rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
		return rgba;
	};
	lime_math_color__$RGBA_RGBA_$Impl_$.__fromBGRA = function (bgra) {
		var rgba = 0;
		rgba = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		return rgba;
	};
	lime_math_color__$RGBA_RGBA_$Impl_$.get_a = function (this1) {
		return this1 & 255;
	};
	lime_math_color__$RGBA_RGBA_$Impl_$.set_a = function (this1, value) {
		this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | value & 255;
		return value;
	};
	lime_math_color__$RGBA_RGBA_$Impl_$.get_b = function (this1) {
		return this1 >> 8 & 255;
	};
	lime_math_color__$RGBA_RGBA_$Impl_$.set_b = function (this1, value) {
		this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
		return value;
	};
	lime_math_color__$RGBA_RGBA_$Impl_$.get_g = function (this1) {
		return this1 >> 16 & 255;
	};
	lime_math_color__$RGBA_RGBA_$Impl_$.set_g = function (this1, value) {
		this1 = (this1 >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
		return value;
	};
	lime_math_color__$RGBA_RGBA_$Impl_$.get_r = function (this1) {
		return this1 >> 24 & 255;
	};
	lime_math_color__$RGBA_RGBA_$Impl_$.set_r = function (this1, value) {
		this1 = (value & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
		return value;
	};
	var lime_net_URLLoader = function (request) {
		this.onSecurityError = new lime_app_Event_$lime_$net_$URLLoader_$String_$Void();
		this.onProgress = new lime_app_Event_$lime_$net_$URLLoader_$Int_$Int_$Void();
		this.onOpen = new lime_app_Event_$lime_$net_$URLLoader_$Void();
		this.onIOError = new lime_app_Event_$lime_$net_$URLLoader_$String_$Void();
		this.onHTTPStatus = new lime_app_Event_$lime_$net_$URLLoader_$Int_$Void();
		this.onComplete = new lime_app_Event_$lime_$net_$URLLoader_$Void();
		this.bytesLoaded = 0;
		this.bytesTotal = 0;
		this.set_dataFormat(lime_net_URLLoaderDataFormat.TEXT);
		if (request != null) this.load(request);
	};
	$hxClasses["lime.net.URLLoader"] = lime_net_URLLoader;
	lime_net_URLLoader.__name__ = ["lime", "net", "URLLoader"];
	lime_net_URLLoader.prototype = {
		close: function () {
		}
		, getData: function () {
			return null;
		}
		, load: function (request) {
			this.requestUrl(request.url, request.method, request.data, request.formatRequestHeaders());
		}
		, registerEvents: function (subject) {
			var _g = this;
			var self = this;
			if (typeof XMLHttpRequestProgressEvent != "undefined") subject.addEventListener("progress", $bind(this, this.__onProgress), false);
			subject.onreadystatechange = function () {
				if (subject.readyState != 4) return;
				var s;
				try {
					s = subject.status;
				} catch (e) {
					haxe_CallStack.lastException = e;
					if (e instanceof js__$Boot_HaxeError) e = e.val;
					s = null;
				}
				if (s == undefined) s = null;
				if (s != null) self.onHTTPStatus.dispatch(_g, s);
				if (s != null && s >= 200 && s < 400) self.__onData(subject.response); else if (s == null) self.onIOError.dispatch(_g, "Failed to connect or resolve host"); else if (s == 12029) self.onIOError.dispatch(_g, "Failed to connect to host"); else if (s == 12007) self.onIOError.dispatch(_g, "Unknown host"); else if (s == 0) {
					self.onIOError.dispatch(_g, "Unable to make request (may be blocked due to cross-domain permissions)");
					self.onSecurityError.dispatch(_g, "Unable to make request (may be blocked due to cross-domain permissions)");
				} else self.onIOError.dispatch(_g, "Http Error #" + subject.status);
			};
		}
		, requestUrl: function (url, method, data, requestHeaders) {
			var xmlHttpRequest = new XMLHttpRequest();
			this.registerEvents(xmlHttpRequest);
			var uri = "";
			if (js_Boot.__instanceof(data, lime_utils_ByteArray)) {
				var data1 = data;
				var _g = this.dataFormat;
				switch (_g[1]) {
					case 0:
						uri = data1.data.buffer;
						break;
					default:
						uri = data1.readUTFBytes(data1.length);
				}
			} else if (js_Boot.__instanceof(data, lime_net_URLVariables)) {
				var data2 = data;
				var _g1 = 0;
				var _g11 = Reflect.fields(data2);
				while (_g1 < _g11.length) {
					var p = _g11[_g1];
					++_g1;
					if (uri.length != 0) uri += "&";
					uri += encodeURIComponent(p) + "=" + StringTools.urlEncode(Reflect.field(data2, p));
				}
			} else if (data != null) uri = data.toString();
			try {
				if (method == "GET" && uri != null && uri != "") {
					var question = url.split("?").length <= 1;
					xmlHttpRequest.open("GET", url + (question ? "?" : "&") + Std.string(uri), true);
					uri = "";
				} else xmlHttpRequest.open(js_Boot.__cast(method, String), url, true);
			} catch (e) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				this.onIOError.dispatch(this, e.toString());
				return;
			}
			var _g2 = this.dataFormat;
			switch (_g2[1]) {
				case 0:
					xmlHttpRequest.responseType = "arraybuffer";
					break;
				default:
			}
			var _g3 = 0;
			while (_g3 < requestHeaders.length) {
				var header = requestHeaders[_g3];
				++_g3;
				xmlHttpRequest.setRequestHeader(header.name, header.value);
			}
			xmlHttpRequest.send(uri);
			this.onOpen.dispatch(this);
			this.getData = function () {
				if (xmlHttpRequest.response != null) return xmlHttpRequest.response; else return xmlHttpRequest.responseText;
			};
		}
		, __onData: function (_) {
			var content = this.getData();
			var _g = this.dataFormat;
			switch (_g[1]) {
				case 0:
					this.data = lime_utils_ByteArray.__ofBuffer(content);
					break;
				default:
					this.data = Std.string(content);
			}
			this.onComplete.dispatch(this);
		}
		, __onProgress: function (event) {
			this.bytesLoaded = event.loaded;
			this.bytesTotal = event.total;
			this.onProgress.dispatch(this, this.bytesLoaded, this.bytesTotal);
		}
		, set_dataFormat: function (inputVal) {
			if (inputVal == lime_net_URLLoaderDataFormat.BINARY && !Reflect.hasField(window, "ArrayBuffer")) this.dataFormat = lime_net_URLLoaderDataFormat.TEXT; else this.dataFormat = inputVal;
			return this.dataFormat;
		}
		, __class__: lime_net_URLLoader
		, __properties__: { set_dataFormat: "set_dataFormat" }
	};
	var lime_net_URLLoaderDataFormat = $hxClasses["lime.net.URLLoaderDataFormat"] = { __ename__: ["lime", "net", "URLLoaderDataFormat"], __constructs__: ["BINARY", "TEXT", "VARIABLES"] };
	lime_net_URLLoaderDataFormat.BINARY = ["BINARY", 0];
	lime_net_URLLoaderDataFormat.BINARY.toString = $estr;
	lime_net_URLLoaderDataFormat.BINARY.__enum__ = lime_net_URLLoaderDataFormat;
	lime_net_URLLoaderDataFormat.TEXT = ["TEXT", 1];
	lime_net_URLLoaderDataFormat.TEXT.toString = $estr;
	lime_net_URLLoaderDataFormat.TEXT.__enum__ = lime_net_URLLoaderDataFormat;
	lime_net_URLLoaderDataFormat.VARIABLES = ["VARIABLES", 2];
	lime_net_URLLoaderDataFormat.VARIABLES.toString = $estr;
	lime_net_URLLoaderDataFormat.VARIABLES.__enum__ = lime_net_URLLoaderDataFormat;
	var lime_net_URLRequest = function (inURL) {
		if (inURL != null) this.url = inURL;
		this.requestHeaders = [];
		this.method = "GET";
		this.contentType = null;
	};
	$hxClasses["lime.net.URLRequest"] = lime_net_URLRequest;
	lime_net_URLRequest.__name__ = ["lime", "net", "URLRequest"];
	lime_net_URLRequest.prototype = {
		formatRequestHeaders: function () {
			var res = this.requestHeaders;
			if (res == null) res = [];
			if (this.method == "GET" || this.data == null) return res;
			if (typeof (this.data) == "string" || js_Boot.__instanceof(this.data, lime_utils_ByteArray)) {
				res = res.slice();
				res.push(new lime_net_URLRequestHeader("Content-Type", this.contentType != null ? this.contentType : "application/x-www-form-urlencoded"));
			}
			return res;
		}
		, __class__: lime_net_URLRequest
	};
	var lime_net_URLRequestHeader = function (name, value) {
		if (value == null) value = "";
		if (name == null) name = "";
		this.name = name;
		this.value = value;
	};
	$hxClasses["lime.net.URLRequestHeader"] = lime_net_URLRequestHeader;
	lime_net_URLRequestHeader.__name__ = ["lime", "net", "URLRequestHeader"];
	lime_net_URLRequestHeader.prototype = {
		__class__: lime_net_URLRequestHeader
	};
	var lime_net_URLVariables = function (inEncoded) {
		if (inEncoded != null) this.decode(inEncoded);
	};
	$hxClasses["lime.net.URLVariables"] = lime_net_URLVariables;
	lime_net_URLVariables.__name__ = ["lime", "net", "URLVariables"];
	lime_net_URLVariables.prototype = {
		decode: function (inVars) {
			var fields = Reflect.fields(this);
			var _g = 0;
			while (_g < fields.length) {
				var f = fields[_g];
				++_g;
				Reflect.deleteField(this, f);
			}
			var fields1 = inVars.split(";").join("&").split("&");
			var _g1 = 0;
			while (_g1 < fields1.length) {
				var f1 = fields1[_g1];
				++_g1;
				var eq = f1.indexOf("=");
				if (eq > 0) Reflect.setField(this, StringTools.urlDecode(HxOverrides.substr(f1, 0, eq)), StringTools.urlDecode(HxOverrides.substr(f1, eq + 1, null))); else if (eq != 0) Reflect.setField(this, decodeURIComponent(f1.split("+").join(" ")), "");
			}
		}
		, toString: function () {
			var result = [];
			var fields = Reflect.fields(this);
			var _g = 0;
			while (_g < fields.length) {
				var f = fields[_g];
				++_g;
				result.push(encodeURIComponent(f) + "=" + StringTools.urlEncode(Reflect.field(this, f)));
			}
			return result.join("&");
		}
		, __class__: lime_net_URLVariables
	};
	var lime_system_BackgroundWorker = function () {
		this.onProgress = new lime_app_Event_$Dynamic_$Void();
		this.onError = new lime_app_Event_$Dynamic_$Void();
		this.onComplete = new lime_app_Event_$Dynamic_$Void();
		this.doWork = new lime_app_Event_$Dynamic_$Void();
	};
	$hxClasses["lime.system.BackgroundWorker"] = lime_system_BackgroundWorker;
	lime_system_BackgroundWorker.__name__ = ["lime", "system", "BackgroundWorker"];
	lime_system_BackgroundWorker.prototype = {
		cancel: function () {
			this.canceled = true;
		}
		, run: function (message) {
			this.canceled = false;
			this.__runMessage = message;
			this.__doWork();
		}
		, sendComplete: function (message) {
			if (!this.canceled) {
				this.canceled = true;
				this.onComplete.dispatch(message);
			}
		}
		, sendError: function (message) {
			if (!this.canceled) {
				this.canceled = true;
				this.onError.dispatch(message);
			}
		}
		, sendProgress: function (message) {
			if (!this.canceled) this.onProgress.dispatch(message);
		}
		, __doWork: function () {
			this.doWork.dispatch(this.__runMessage);
		}
		, __update: function (deltaTime) {
		}
		, __class__: lime_system_BackgroundWorker
	};
	var lime_system_CFFI = function () { };
	$hxClasses["lime.system.CFFI"] = lime_system_CFFI;
	lime_system_CFFI.__name__ = ["lime", "system", "CFFI"];
	lime_system_CFFI.available = null;
	lime_system_CFFI.enabled = null;
	lime_system_CFFI.load = function (library, method, args, lazy) {
		if (lazy == null) lazy = false;
		if (args == null) args = 0;
		if (!lime_system_CFFI.enabled) return Reflect.makeVarArgs(function (__) {
			return {};
		});
		var result = null;
		return result;
	};
	lime_system_CFFI.__findHaxelib = function (library) {
		return "";
	};
	lime_system_CFFI.__loaderTrace = function (message) {
	};
	lime_system_CFFI.__sysName = function () {
		return null;
	};
	lime_system_CFFI.__tryLoad = function (name, library, func, args) {
		return null;
	};
	var lime_system__$CFFIPointer_CFFIPointer_$Impl_$ = {};
	$hxClasses["lime.system._CFFIPointer.CFFIPointer_Impl_"] = lime_system__$CFFIPointer_CFFIPointer_$Impl_$;
	lime_system__$CFFIPointer_CFFIPointer_$Impl_$.__name__ = ["lime", "system", "_CFFIPointer", "CFFIPointer_Impl_"];
	lime_system__$CFFIPointer_CFFIPointer_$Impl_$._new = function (handle) {
		return handle;
	};
	lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get = function (this1) {
		if (this1 != null) {
		}
		return 0;
	};
	lime_system__$CFFIPointer_CFFIPointer_$Impl_$.equals = function (a, b) {
		return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) == b;
	};
	lime_system__$CFFIPointer_CFFIPointer_$Impl_$.equalsPointer = function (a, b) {
		return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) == lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
	};
	lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThan = function (a, b) {
		return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) > b;
	};
	lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanPointer = function (a, b) {
		return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) > lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
	};
	lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanOrEqual = function (a, b) {
		return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) >= b;
	};
	lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanOrEqualPointer = function (a, b) {
		return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) >= lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
	};
	lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThan = function (a, b) {
		return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) < b;
	};
	lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanPointer = function (a, b) {
		return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) < lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
	};
	lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanOrEqual = function (a, b) {
		return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) <= b;
	};
	lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanOrEqualPointer = function (a, b) {
		return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) <= lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
	};
	lime_system__$CFFIPointer_CFFIPointer_$Impl_$.notEquals = function (a, b) {
		return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) != b;
	};
	lime_system__$CFFIPointer_CFFIPointer_$Impl_$.notEqualsPointer = function (a, b) {
		return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) != lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
	};
	var lime_system_Clipboard = function () { };
	$hxClasses["lime.system.Clipboard"] = lime_system_Clipboard;
	lime_system_Clipboard.__name__ = ["lime", "system", "Clipboard"];
	lime_system_Clipboard.__properties__ = { set_text: "set_text", get_text: "get_text" }
	lime_system_Clipboard.get_text = function () {
		return null;
	};
	lime_system_Clipboard.set_text = function (value) {
		return null;
	};
	var lime_system_Display = function () {
	};
	$hxClasses["lime.system.Display"] = lime_system_Display;
	lime_system_Display.__name__ = ["lime", "system", "Display"];
	lime_system_Display.prototype = {
		__class__: lime_system_Display
	};
	var lime_system_DisplayMode = function (width, height, refreshRate, pixelFormat) {
		this.width = width;
		this.height = height;
		this.refreshRate = refreshRate;
		this.pixelFormat = pixelFormat;
	};
	$hxClasses["lime.system.DisplayMode"] = lime_system_DisplayMode;
	lime_system_DisplayMode.__name__ = ["lime", "system", "DisplayMode"];
	lime_system_DisplayMode.prototype = {
		__class__: lime_system_DisplayMode
	};
	var lime_system_Endian = $hxClasses["lime.system.Endian"] = { __ename__: ["lime", "system", "Endian"], __constructs__: ["LITTLE_ENDIAN", "BIG_ENDIAN"] };
	lime_system_Endian.LITTLE_ENDIAN = ["LITTLE_ENDIAN", 0];
	lime_system_Endian.LITTLE_ENDIAN.toString = $estr;
	lime_system_Endian.LITTLE_ENDIAN.__enum__ = lime_system_Endian;
	lime_system_Endian.BIG_ENDIAN = ["BIG_ENDIAN", 1];
	lime_system_Endian.BIG_ENDIAN.toString = $estr;
	lime_system_Endian.BIG_ENDIAN.__enum__ = lime_system_Endian;
	var lime_system_System = function () { };
	$hxClasses["lime.system.System"] = lime_system_System;
	lime_system_System.__name__ = ["lime", "system", "System"];
	lime_system_System.__properties__ = { get_userDirectory: "get_userDirectory", get_numDisplays: "get_numDisplays", get_fontsDirectory: "get_fontsDirectory", get_endianness: "get_endianness", get_documentsDirectory: "get_documentsDirectory", get_desktopDirectory: "get_desktopDirectory", get_applicationStorageDirectory: "get_applicationStorageDirectory", get_applicationDirectory: "get_applicationDirectory", set_allowScreenTimeout: "set_allowScreenTimeout", get_allowScreenTimeout: "get_allowScreenTimeout" }
	lime_system_System.applicationDirectory = null;
	lime_system_System.applicationStorageDirectory = null;
	lime_system_System.desktopDirectory = null;
	lime_system_System.disableCFFI = null;
	lime_system_System.documentsDirectory = null;
	lime_system_System.endianness = null;
	lime_system_System.fontsDirectory = null;
	lime_system_System.numDisplays = null;
	lime_system_System.userDirectory = null;
	lime_system_System.embed = $hx_exports.lime.embed = function (element, width, height, background, assetsPrefix) {
		var htmlElement = null;
		if (typeof (element) == "string") htmlElement = window.document.getElementById(js_Boot.__cast(element, String)); else if (element == null) htmlElement = window.document.createElement("div"); else htmlElement = element;
		var color = null;
		if (background != null) {
			background = StringTools.replace(background, "#", "");
			if (background.indexOf("0x") > -1) color = Std.parseInt(background); else color = Std.parseInt("0x" + background);
		}
		if (width == null) width = 0;
		if (height == null) height = 0;
		ApplicationMain.config.windows[0].background = color;
		ApplicationMain.config.windows[0].element = htmlElement;
		ApplicationMain.config.windows[0].width = width;
		ApplicationMain.config.windows[0].height = height;
		ApplicationMain.config.assetsPrefix = assetsPrefix;
		ApplicationMain.create();
	};
	lime_system_System.exit = function (code) {
	};
	lime_system_System.getDisplay = function (id) {
		if (id == 0) {
			var display = new lime_system_Display();
			display.id = 0;
			display.name = "Generic Display";
			display.currentMode = new lime_system_DisplayMode(window.screen.width, window.screen.height, 60, 1);
			display.supportedModes = [display.currentMode];
			display.bounds = new lime_math_Rectangle(0, 0, display.currentMode.width, display.currentMode.height);
			return display;
		}
		return null;
	};
	lime_system_System.getTimer = function () {
		return new Date().getTime();
	};
	lime_system_System.load = function (library, method, args, lazy) {
		if (lazy == null) lazy = false;
		if (args == null) args = 0;
		return lime_system_CFFI.load(library, method, args, lazy);
	};
	lime_system_System.get_allowScreenTimeout = function () {
		return true;
	};
	lime_system_System.set_allowScreenTimeout = function (value) {
		return true;
	};
	lime_system_System.get_applicationDirectory = function () {
		return null;
	};
	lime_system_System.get_applicationStorageDirectory = function () {
		var company = "MyCompany";
		var file = "MyApplication";
		if (lime_app_Application.current != null && lime_app_Application.current.config != null) {
			if (lime_app_Application.current.config.company != null) company = lime_app_Application.current.config.company;
			if (lime_app_Application.current.config.file != null) file = lime_app_Application.current.config.file;
		}
		return null;
	};
	lime_system_System.get_desktopDirectory = function () {
		return null;
	};
	lime_system_System.get_documentsDirectory = function () {
		return null;
	};
	lime_system_System.get_fontsDirectory = function () {
		return null;
	};
	lime_system_System.get_numDisplays = function () {
		return 1;
	};
	lime_system_System.get_userDirectory = function () {
		return null;
	};
	lime_system_System.get_endianness = function () {
		return lime_system_Endian.LITTLE_ENDIAN;
	};
	var lime_system_ThreadPool = function (minThreads, maxThreads) {
		if (maxThreads == null) maxThreads = 1;
		if (minThreads == null) minThreads = 0;
		this.onProgress = new lime_app_Event_$Dynamic_$Void();
		this.onError = new lime_app_Event_$Dynamic_$Void();
		this.onComplete = new lime_app_Event_$Dynamic_$Void();
		this.doWork = new lime_app_Event_$Dynamic_$Void();
		this.minThreads = minThreads;
		this.maxThreads = maxThreads;
		this.currentThreads = 0;
	};
	$hxClasses["lime.system.ThreadPool"] = lime_system_ThreadPool;
	lime_system_ThreadPool.__name__ = ["lime", "system", "ThreadPool"];
	lime_system_ThreadPool.prototype = {
		queue: function (state) {
			this.doWork.dispatch(state);
		}
		, sendComplete: function (state) {
			this.onComplete.dispatch(state);
		}
		, sendError: function (state) {
			this.onError.dispatch(state);
		}
		, sendProgress: function (state) {
			this.onProgress.dispatch(state);
		}
		, __class__: lime_system_ThreadPool
	};
	var lime_system__$ThreadPool_ThreadPoolMessageType = $hxClasses["lime.system._ThreadPool.ThreadPoolMessageType"] = { __ename__: ["lime", "system", "_ThreadPool", "ThreadPoolMessageType"], __constructs__: ["COMPLETE", "ERROR", "EXIT", "PROGRESS", "WORK"] };
	lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE = ["COMPLETE", 0];
	lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE.toString = $estr;
	lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
	lime_system__$ThreadPool_ThreadPoolMessageType.ERROR = ["ERROR", 1];
	lime_system__$ThreadPool_ThreadPoolMessageType.ERROR.toString = $estr;
	lime_system__$ThreadPool_ThreadPoolMessageType.ERROR.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
	lime_system__$ThreadPool_ThreadPoolMessageType.EXIT = ["EXIT", 2];
	lime_system__$ThreadPool_ThreadPoolMessageType.EXIT.toString = $estr;
	lime_system__$ThreadPool_ThreadPoolMessageType.EXIT.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
	lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS = ["PROGRESS", 3];
	lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS.toString = $estr;
	lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
	lime_system__$ThreadPool_ThreadPoolMessageType.WORK = ["WORK", 4];
	lime_system__$ThreadPool_ThreadPoolMessageType.WORK.toString = $estr;
	lime_system__$ThreadPool_ThreadPoolMessageType.WORK.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
	var lime_system__$ThreadPool_ThreadPoolMessage = function (type, state) {
		this.type = type;
		this.state = state;
	};
	$hxClasses["lime.system._ThreadPool.ThreadPoolMessage"] = lime_system__$ThreadPool_ThreadPoolMessage;
	lime_system__$ThreadPool_ThreadPoolMessage.__name__ = ["lime", "system", "_ThreadPool", "ThreadPoolMessage"];
	lime_system__$ThreadPool_ThreadPoolMessage.prototype = {
		__class__: lime_system__$ThreadPool_ThreadPoolMessage
	};
	var lime_text_Font = function (name) {
		if (name != null) this.name = name;
		if (this.__fontPath != null) this.__fromFile(this.__fontPath);
	};
	$hxClasses["lime.text.Font"] = lime_text_Font;
	lime_text_Font.__name__ = ["lime", "text", "Font"];
	lime_text_Font.fromBytes = function (bytes) {
		var font = new lime_text_Font();
		font.__fromBytes(bytes);
		return font;
	};
	lime_text_Font.fromFile = function (path) {
		var font = new lime_text_Font();
		font.__fromFile(path);
		return font;
	};
	lime_text_Font.prototype = {
		decompose: function () {
			return null;
		}
		, getGlyph: function (character) {
			return -1;
		}
		, getGlyphs: function (characters) {
			if (characters == null) characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^`'\"/\\&*()[]{}<>|:;_-+=?,. ";
			return null;
		}
		, getGlyphMetrics: function (glyph) {
			return null;
		}
		, renderGlyph: function (glyph, fontSize) {
			return null;
		}
		, renderGlyphs: function (glyphs, fontSize) {
			return null;
		}
		, __fromBytes: function (bytes) {
			this.__fontPath = null;
		}
		, __fromFile: function (path) {
			this.__fontPath = path;
		}
		, get_ascender: function () {
			return 0;
		}
		, get_descender: function () {
			return 0;
		}
		, get_height: function () {
			return 0;
		}
		, get_numGlyphs: function () {
			return 0;
		}
		, get_underlinePosition: function () {
			return 0;
		}
		, get_underlineThickness: function () {
			return 0;
		}
		, get_unitsPerEM: function () {
			return 0;
		}
		, __class__: lime_text_Font
		, __properties__: { get_unitsPerEM: "get_unitsPerEM", get_underlineThickness: "get_underlineThickness", get_underlinePosition: "get_underlinePosition", get_numGlyphs: "get_numGlyphs", get_height: "get_height", get_descender: "get_descender", get_ascender: "get_ascender" }
	};
	var lime_text__$Glyph_Glyph_$Impl_$ = {};
	$hxClasses["lime.text._Glyph.Glyph_Impl_"] = lime_text__$Glyph_Glyph_$Impl_$;
	lime_text__$Glyph_Glyph_$Impl_$.__name__ = ["lime", "text", "_Glyph", "Glyph_Impl_"];
	lime_text__$Glyph_Glyph_$Impl_$._new = function (i) {
		return i;
	};
	var lime_text_GlyphMetrics = function () {
	};
	$hxClasses["lime.text.GlyphMetrics"] = lime_text_GlyphMetrics;
	lime_text_GlyphMetrics.__name__ = ["lime", "text", "GlyphMetrics"];
	lime_text_GlyphMetrics.prototype = {
		__class__: lime_text_GlyphMetrics
	};
	var lime_text_GlyphPosition = function (glyph, advance, offset) {
		this.glyph = glyph;
		this.advance = advance;
		if (offset != null) this.offset = offset; else this.offset = new lime_math_Vector2();
	};
	$hxClasses["lime.text.GlyphPosition"] = lime_text_GlyphPosition;
	lime_text_GlyphPosition.__name__ = ["lime", "text", "GlyphPosition"];
	lime_text_GlyphPosition.prototype = {
		__class__: lime_text_GlyphPosition
	};
	var lime_text__$TextDirection_TextDirection_$Impl_$ = {};
	$hxClasses["lime.text._TextDirection.TextDirection_Impl_"] = lime_text__$TextDirection_TextDirection_$Impl_$;
	lime_text__$TextDirection_TextDirection_$Impl_$.__name__ = ["lime", "text", "_TextDirection", "TextDirection_Impl_"];
	lime_text__$TextDirection_TextDirection_$Impl_$.__properties__ = { get_vertical: "get_vertical", get_horizontal: "get_horizontal", get_forward: "get_forward", get_backward: "get_backward" }
	lime_text__$TextDirection_TextDirection_$Impl_$.reverse = function (this1) {
		this1 = this1 ^ 1;
	};
	lime_text__$TextDirection_TextDirection_$Impl_$.toString = function (this1) {
		switch (this1) {
			case 4:
				return "leftToRight";
			case 5:
				return "rightToLeft";
			case 6:
				return "topToBottom";
			case 7:
				return "bottomToTop";
			default:
				return "";
		}
	};
	lime_text__$TextDirection_TextDirection_$Impl_$.get_backward = function (this1) {
		return (this1 & -3) == 5;
	};
	lime_text__$TextDirection_TextDirection_$Impl_$.get_forward = function (this1) {
		return (this1 & -3) == 4;
	};
	lime_text__$TextDirection_TextDirection_$Impl_$.get_horizontal = function (this1) {
		return (this1 & -2) == 4;
	};
	lime_text__$TextDirection_TextDirection_$Impl_$.get_vertical = function (this1) {
		return (this1 & -2) == 6;
	};
	var lime_text_TextLayout = function (text, font, size, direction, script, language) {
		if (language == null) language = "en";
		if (script == null) script = "Zyyy";
		if (direction == null) direction = 4;
		if (size == null) size = 12;
		if (text == null) text = "";
		this.set_text(text);
		this.set_font(font);
		this.set_size(size);
		this.__direction = direction;
		this.__script = script;
		this.__language = language;
		this.positions = [];
		this.__dirty = true;
	};
	$hxClasses["lime.text.TextLayout"] = lime_text_TextLayout;
	lime_text_TextLayout.__name__ = ["lime", "text", "TextLayout"];
	lime_text_TextLayout.prototype = {
		__position: function () {
			this.positions = [];
		}
		, get_positions: function () {
			if (this.__dirty) {
				this.__dirty = false;
				this.__position();
			}
			return this.positions;
		}
		, get_direction: function () {
			return this.__direction;
		}
		, set_direction: function (value) {
			if (value == this.__direction) return value;
			this.__direction = value;
			this.__dirty = true;
			return value;
		}
		, set_font: function (value) {
			if (value == this.font) return value;
			this.font = value;
			this.__dirty = true;
			return value;
		}
		, get_glyphs: function () {
			var glyphs = [];
			var _g = 0;
			var _g1 = this.get_positions();
			while (_g < _g1.length) {
				var position = _g1[_g];
				++_g;
				glyphs.push(position.glyph);
			}
			return glyphs;
		}
		, get_language: function () {
			return this.__language;
		}
		, set_language: function (value) {
			if (value == this.__language) return value;
			this.__language = value;
			this.__dirty = true;
			return value;
		}
		, get_script: function () {
			return this.__script;
		}
		, set_script: function (value) {
			if (value == this.__script) return value;
			this.__script = value;
			this.__dirty = true;
			return value;
		}
		, set_size: function (value) {
			if (value == this.size) return value;
			this.size = value;
			this.__dirty = true;
			return value;
		}
		, set_text: function (value) {
			if (value == this.text) return value;
			this.text = value;
			this.__dirty = true;
			return value;
		}
		, __class__: lime_text_TextLayout
		, __properties__: { set_text: "set_text", set_size: "set_size", set_script: "set_script", get_script: "get_script", get_positions: "get_positions", set_language: "set_language", get_language: "get_language", get_glyphs: "get_glyphs", set_font: "set_font", set_direction: "set_direction", get_direction: "get_direction" }
	};
	var lime_text__$TextScript_TextScript_$Impl_$ = {};
	$hxClasses["lime.text._TextScript.TextScript_Impl_"] = lime_text__$TextScript_TextScript_$Impl_$;
	lime_text__$TextScript_TextScript_$Impl_$.__name__ = ["lime", "text", "_TextScript", "TextScript_Impl_"];
	lime_text__$TextScript_TextScript_$Impl_$.__properties__ = { get_rightToLeft: "get_rightToLeft" }
	lime_text__$TextScript_TextScript_$Impl_$.get_rightToLeft = function (this1) {
		switch (this1) {
			case "Hebr": case "Arab": case "Syrc": case "Thaa": case "Nkoo": case "Samr": case "Mand": case "Armi": case "Phnx": case "Lydi": case "Cprt": case "Khar": case "Sarb": case "Avst": case "Phli": case "Phlp": case "Orkh":
				return true;
			default:
				return false;
		}
	};
	var lime_ui_Gamepad = function (id) {
		this.onDisconnect = new lime_app_Event_$Void_$Void();
		this.onButtonUp = new lime_app_Event_$lime_$ui_$GamepadButton_$Void();
		this.onButtonDown = new lime_app_Event_$lime_$ui_$GamepadButton_$Void();
		this.onAxisMove = new lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void();
		this.id = id;
		this.connected = true;
	};
	$hxClasses["lime.ui.Gamepad"] = lime_ui_Gamepad;
	lime_ui_Gamepad.__name__ = ["lime", "ui", "Gamepad"];
	lime_ui_Gamepad.addMappings = function (mappings) {
	};
	lime_ui_Gamepad.prototype = {
		get_guid: function () {
			return null;
		}
		, get_name: function () {
			return null;
		}
		, __class__: lime_ui_Gamepad
		, __properties__: { get_name: "get_name", get_guid: "get_guid" }
	};
	var lime_ui__$GamepadAxis_GamepadAxis_$Impl_$ = {};
	$hxClasses["lime.ui._GamepadAxis.GamepadAxis_Impl_"] = lime_ui__$GamepadAxis_GamepadAxis_$Impl_$;
	lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.__name__ = ["lime", "ui", "_GamepadAxis", "GamepadAxis_Impl_"];
	lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.toString = function (this1) {
		switch (this1) {
			case 0:
				return "LEFT_X";
			case 1:
				return "LEFT_Y";
			case 2:
				return "RIGHT_X";
			case 3:
				return "RIGHT_Y";
			case 4:
				return "TRIGGER_LEFT";
			case 5:
				return "TRIGGER_RIGHT";
			default:
				return "UNKNOWN (" + this1 + ")";
		}
	};
	var lime_ui__$GamepadButton_GamepadButton_$Impl_$ = {};
	$hxClasses["lime.ui._GamepadButton.GamepadButton_Impl_"] = lime_ui__$GamepadButton_GamepadButton_$Impl_$;
	lime_ui__$GamepadButton_GamepadButton_$Impl_$.__name__ = ["lime", "ui", "_GamepadButton", "GamepadButton_Impl_"];
	lime_ui__$GamepadButton_GamepadButton_$Impl_$.toString = function (this1) {
		switch (this1) {
			case 0:
				return "A";
			case 1:
				return "B";
			case 2:
				return "X";
			case 3:
				return "Y";
			case 4:
				return "BACK";
			case 5:
				return "GUIDE";
			case 6:
				return "START";
			case 7:
				return "LEFT_STICK";
			case 8:
				return "RIGHT_STICK";
			case 9:
				return "LEFT_SHOULDER";
			case 10:
				return "RIGHT_SHOULDER";
			case 11:
				return "DPAD_UP";
			case 12:
				return "DPAD_DOWN";
			case 13:
				return "DPAD_LEFT";
			case 14:
				return "DPAD_RIGHT";
			default:
				return "UNKNOWN (" + this1 + ")";
		}
	};
	var lime_ui_Joystick = function (id) {
		this.onTrackballMove = new lime_app_Event_$Int_$Float_$Void();
		this.onHatMove = new lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void();
		this.onDisconnect = new lime_app_Event_$Void_$Void();
		this.onButtonUp = new lime_app_Event_$Int_$Void();
		this.onButtonDown = new lime_app_Event_$Int_$Void();
		this.onAxisMove = new lime_app_Event_$Int_$Float_$Void();
		this.id = id;
		this.connected = true;
	};
	$hxClasses["lime.ui.Joystick"] = lime_ui_Joystick;
	lime_ui_Joystick.__name__ = ["lime", "ui", "Joystick"];
	lime_ui_Joystick.prototype = {
		get_guid: function () {
			return null;
		}
		, get_name: function () {
			return null;
		}
		, get_numAxes: function () {
			return 0;
		}
		, get_numButtons: function () {
			return 0;
		}
		, get_numHats: function () {
			return 0;
		}
		, get_numTrackballs: function () {
			return 0;
		}
		, __class__: lime_ui_Joystick
		, __properties__: { get_numTrackballs: "get_numTrackballs", get_numHats: "get_numHats", get_numButtons: "get_numButtons", get_numAxes: "get_numAxes", get_name: "get_name", get_guid: "get_guid" }
	};
	var lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$ = {};
	$hxClasses["lime.ui._JoystickHatPosition.JoystickHatPosition_Impl_"] = lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$;
	lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.__name__ = ["lime", "ui", "_JoystickHatPosition", "JoystickHatPosition_Impl_"];
	lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.__properties__ = { set_up: "set_up", get_up: "get_up", set_right: "set_right", get_right: "get_right", set_left: "set_left", get_left: "get_left", set_down: "set_down", get_down: "get_down", set_center: "set_center", get_center: "get_center" }
	lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$._new = function (value) {
		return value;
	};
	lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_center = function (this1) {
		return this1 == 0;
	};
	lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_center = function (this1, value) {
		if (value) this1 = 0;
		return value;
	};
	lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_down = function (this1) {
		return (this1 & 4) > 0;
	};
	lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_down = function (this1, value) {
		if (value) this1 |= 4; else this1 &= 268435455 - 4;
		return value;
	};
	lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_left = function (this1) {
		return (this1 & 8) > 0;
	};
	lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_left = function (this1, value) {
		if (value) this1 |= 8; else this1 &= 268435455 - 8;
		return value;
	};
	lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_right = function (this1) {
		return (this1 & 2) > 0;
	};
	lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_right = function (this1, value) {
		if (value) this1 |= 2; else this1 &= 268435455 - 2;
		return value;
	};
	lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_up = function (this1) {
		return (this1 & 1) > 0;
	};
	lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_up = function (this1, value) {
		if (value) this1 |= 1; else this1 &= 268435455 - 1;
		return value;
	};
	var lime_ui__$KeyCode_KeyCode_$Impl_$ = {};
	$hxClasses["lime.ui._KeyCode.KeyCode_Impl_"] = lime_ui__$KeyCode_KeyCode_$Impl_$;
	lime_ui__$KeyCode_KeyCode_$Impl_$.__name__ = ["lime", "ui", "_KeyCode", "KeyCode_Impl_"];
	lime_ui__$KeyCode_KeyCode_$Impl_$.gt = function (a, b) {
		return a > b;
	};
	lime_ui__$KeyCode_KeyCode_$Impl_$.gte = function (a, b) {
		return a >= b;
	};
	lime_ui__$KeyCode_KeyCode_$Impl_$.lt = function (a, b) {
		return a < b;
	};
	lime_ui__$KeyCode_KeyCode_$Impl_$.lte = function (a, b) {
		return a <= b;
	};
	lime_ui__$KeyCode_KeyCode_$Impl_$.plus = function (a, b) {
		return a + b;
	};
	var lime_ui__$KeyModifier_KeyModifier_$Impl_$ = {};
	$hxClasses["lime.ui._KeyModifier.KeyModifier_Impl_"] = lime_ui__$KeyModifier_KeyModifier_$Impl_$;
	lime_ui__$KeyModifier_KeyModifier_$Impl_$.__name__ = ["lime", "ui", "_KeyModifier", "KeyModifier_Impl_"];
	lime_ui__$KeyModifier_KeyModifier_$Impl_$.__properties__ = { set_shiftKey: "set_shiftKey", get_shiftKey: "get_shiftKey", set_numLock: "set_numLock", get_numLock: "get_numLock", set_metaKey: "set_metaKey", get_metaKey: "get_metaKey", set_ctrlKey: "set_ctrlKey", get_ctrlKey: "get_ctrlKey", set_capsLock: "set_capsLock", get_capsLock: "get_capsLock", set_altKey: "set_altKey", get_altKey: "get_altKey" }
	lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey = function (this1) {
		return (this1 & 256) > 0 || (this1 & 512) > 0;
	};
	lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_altKey = function (this1, value) {
		if (value) this1 |= 768; else this1 &= 268435455 - 768;
		return value;
	};
	lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_capsLock = function (this1) {
		return (this1 & 8192) > 0 || (this1 & 8192) > 0;
	};
	lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_capsLock = function (this1, value) {
		if (value) this1 |= 8192; else this1 &= 268435455 - 8192;
		return value;
	};
	lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey = function (this1) {
		return (this1 & 64) > 0 || (this1 & 128) > 0;
	};
	lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_ctrlKey = function (this1, value) {
		if (value) this1 |= 192; else this1 &= 268435455 - 192;
		return value;
	};
	lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey = function (this1) {
		return (this1 & 1024) > 0 || (this1 & 2048) > 0;
	};
	lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_metaKey = function (this1, value) {
		if (value) this1 |= 3072; else this1 &= 268435455 - 3072;
		return value;
	};
	lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_numLock = function (this1) {
		return (this1 & 4096) > 0 || (this1 & 4096) > 0;
	};
	lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_numLock = function (this1, value) {
		if (value) this1 |= 4096; else this1 &= 268435455 - 4096;
		return value;
	};
	lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey = function (this1) {
		return (this1 & 1) > 0 || (this1 & 2) > 0;
	};
	lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_shiftKey = function (this1, value) {
		if (value) this1 |= 3; else this1 &= 268435455 - 3;
		return value;
	};
	var lime_ui_Mouse = function () { };
	$hxClasses["lime.ui.Mouse"] = lime_ui_Mouse;
	lime_ui_Mouse.__name__ = ["lime", "ui", "Mouse"];
	lime_ui_Mouse.__properties__ = { set_lock: "set_lock", get_lock: "get_lock", set_cursor: "set_cursor", get_cursor: "get_cursor" }
	lime_ui_Mouse.hide = function () {
		lime__$backend_html5_HTML5Mouse.hide();
	};
	lime_ui_Mouse.show = function () {
		lime__$backend_html5_HTML5Mouse.show();
	};
	lime_ui_Mouse.warp = function (x, y, window) {
		lime__$backend_html5_HTML5Mouse.warp(x, y, window);
	};
	lime_ui_Mouse.get_cursor = function () {
		return lime__$backend_html5_HTML5Mouse.get_cursor();
	};
	lime_ui_Mouse.set_cursor = function (value) {
		return lime__$backend_html5_HTML5Mouse.set_cursor(value);
	};
	lime_ui_Mouse.get_lock = function () {
		return lime__$backend_html5_HTML5Mouse.get_lock();
	};
	lime_ui_Mouse.set_lock = function (value) {
		return lime__$backend_html5_HTML5Mouse.set_lock(value);
	};
	var lime_ui_MouseCursor = $hxClasses["lime.ui.MouseCursor"] = { __ename__: ["lime", "ui", "MouseCursor"], __constructs__: ["ARROW", "CROSSHAIR", "DEFAULT", "MOVE", "POINTER", "RESIZE_NESW", "RESIZE_NS", "RESIZE_NWSE", "RESIZE_WE", "TEXT", "WAIT", "WAIT_ARROW", "CUSTOM"] };
	lime_ui_MouseCursor.ARROW = ["ARROW", 0];
	lime_ui_MouseCursor.ARROW.toString = $estr;
	lime_ui_MouseCursor.ARROW.__enum__ = lime_ui_MouseCursor;
	lime_ui_MouseCursor.CROSSHAIR = ["CROSSHAIR", 1];
	lime_ui_MouseCursor.CROSSHAIR.toString = $estr;
	lime_ui_MouseCursor.CROSSHAIR.__enum__ = lime_ui_MouseCursor;
	lime_ui_MouseCursor.DEFAULT = ["DEFAULT", 2];
	lime_ui_MouseCursor.DEFAULT.toString = $estr;
	lime_ui_MouseCursor.DEFAULT.__enum__ = lime_ui_MouseCursor;
	lime_ui_MouseCursor.MOVE = ["MOVE", 3];
	lime_ui_MouseCursor.MOVE.toString = $estr;
	lime_ui_MouseCursor.MOVE.__enum__ = lime_ui_MouseCursor;
	lime_ui_MouseCursor.POINTER = ["POINTER", 4];
	lime_ui_MouseCursor.POINTER.toString = $estr;
	lime_ui_MouseCursor.POINTER.__enum__ = lime_ui_MouseCursor;
	lime_ui_MouseCursor.RESIZE_NESW = ["RESIZE_NESW", 5];
	lime_ui_MouseCursor.RESIZE_NESW.toString = $estr;
	lime_ui_MouseCursor.RESIZE_NESW.__enum__ = lime_ui_MouseCursor;
	lime_ui_MouseCursor.RESIZE_NS = ["RESIZE_NS", 6];
	lime_ui_MouseCursor.RESIZE_NS.toString = $estr;
	lime_ui_MouseCursor.RESIZE_NS.__enum__ = lime_ui_MouseCursor;
	lime_ui_MouseCursor.RESIZE_NWSE = ["RESIZE_NWSE", 7];
	lime_ui_MouseCursor.RESIZE_NWSE.toString = $estr;
	lime_ui_MouseCursor.RESIZE_NWSE.__enum__ = lime_ui_MouseCursor;
	lime_ui_MouseCursor.RESIZE_WE = ["RESIZE_WE", 8];
	lime_ui_MouseCursor.RESIZE_WE.toString = $estr;
	lime_ui_MouseCursor.RESIZE_WE.__enum__ = lime_ui_MouseCursor;
	lime_ui_MouseCursor.TEXT = ["TEXT", 9];
	lime_ui_MouseCursor.TEXT.toString = $estr;
	lime_ui_MouseCursor.TEXT.__enum__ = lime_ui_MouseCursor;
	lime_ui_MouseCursor.WAIT = ["WAIT", 10];
	lime_ui_MouseCursor.WAIT.toString = $estr;
	lime_ui_MouseCursor.WAIT.__enum__ = lime_ui_MouseCursor;
	lime_ui_MouseCursor.WAIT_ARROW = ["WAIT_ARROW", 11];
	lime_ui_MouseCursor.WAIT_ARROW.toString = $estr;
	lime_ui_MouseCursor.WAIT_ARROW.__enum__ = lime_ui_MouseCursor;
	lime_ui_MouseCursor.CUSTOM = ["CUSTOM", 12];
	lime_ui_MouseCursor.CUSTOM.toString = $estr;
	lime_ui_MouseCursor.CUSTOM.__enum__ = lime_ui_MouseCursor;
	var lime_ui_Touch = function (x, y, id, dx, dy, pressure, device) {
		this.x = x;
		this.y = y;
		this.id = id;
		this.dx = dx;
		this.dy = dy;
		this.pressure = pressure;
		this.device = device;
	};
	$hxClasses["lime.ui.Touch"] = lime_ui_Touch;
	lime_ui_Touch.__name__ = ["lime", "ui", "Touch"];
	lime_ui_Touch.prototype = {
		__class__: lime_ui_Touch
	};
	var lime_ui_Window = function (config) {
		this.onTextInput = new lime_app_Event_$String_$Void();
		this.onTextEdit = new lime_app_Event_$String_$Int_$Int_$Void();
		this.onRestore = new lime_app_Event_$Void_$Void();
		this.onResize = new lime_app_Event_$Int_$Int_$Void();
		this.onMove = new lime_app_Event_$Float_$Float_$Void();
		this.onMouseWheel = new lime_app_Event_$Float_$Float_$Void();
		this.onMouseUp = new lime_app_Event_$Float_$Float_$Int_$Void();
		this.onMouseMoveRelative = new lime_app_Event_$Float_$Float_$Void();
		this.onMouseMove = new lime_app_Event_$Float_$Float_$Void();
		this.onMouseDown = new lime_app_Event_$Float_$Float_$Int_$Void();
		this.onMinimize = new lime_app_Event_$Void_$Void();
		this.onLeave = new lime_app_Event_$Void_$Void();
		this.onKeyUp = new lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
		this.onKeyDown = new lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
		this.onFullscreen = new lime_app_Event_$Void_$Void();
		this.onFocusOut = new lime_app_Event_$Void_$Void();
		this.onFocusIn = new lime_app_Event_$Void_$Void();
		this.onEnter = new lime_app_Event_$Void_$Void();
		this.onDeactivate = new lime_app_Event_$Void_$Void();
		this.onCreate = new lime_app_Event_$Void_$Void();
		this.onClose = new lime_app_Event_$Void_$Void();
		this.onActivate = new lime_app_Event_$Void_$Void();
		this.config = config;
		this.__width = 0;
		this.__height = 0;
		this.__fullscreen = false;
		this.__scale = 1;
		this.__x = 0;
		this.__y = 0;
		this.__title = "";
		this.id = -1;
		if (config != null) {
			if (Object.prototype.hasOwnProperty.call(config, "width")) this.__width = config.width;
			if (Object.prototype.hasOwnProperty.call(config, "height")) this.__height = config.height;
			if (Object.prototype.hasOwnProperty.call(config, "x")) this.__x = config.x;
			if (Object.prototype.hasOwnProperty.call(config, "y")) this.__y = config.y;
			if (Object.prototype.hasOwnProperty.call(config, "fullscreen")) this.__fullscreen = config.fullscreen;
			if (Object.prototype.hasOwnProperty.call(config, "title")) this.__title = config.title;
		}
		this.backend = new lime__$backend_html5_HTML5Window(this);
	};
	$hxClasses["lime.ui.Window"] = lime_ui_Window;
	lime_ui_Window.__name__ = ["lime", "ui", "Window"];
	lime_ui_Window.prototype = {
		alert: function (message, title) {
			this.backend.alert(message, title);
		}
		, close: function () {
			this.backend.close();
		}
		, create: function (application) {
			this.application = application;
			this.backend.create(application);
			if (this.renderer != null) this.renderer.create();
		}
		, focus: function () {
			this.backend.focus();
		}
		, move: function (x, y) {
			this.backend.move(x, y);
			this.__x = x;
			this.__y = y;
		}
		, resize: function (width, height) {
			this.backend.resize(width, height);
			this.__width = width;
			this.__height = height;
		}
		, setIcon: function (image) {
			if (image == null) return;
			this.backend.setIcon(image);
		}
		, toString: function () {
			return "[object Window]";
		}
		, get_display: function () {
			return this.backend.getDisplay();
		}
		, get_enableTextEvents: function () {
			return this.backend.getEnableTextEvents();
		}
		, set_enableTextEvents: function (value) {
			return this.backend.setEnableTextEvents(value);
		}
		, get_fullscreen: function () {
			return this.__fullscreen;
		}
		, set_fullscreen: function (value) {
			return this.__fullscreen = this.backend.setFullscreen(value);
		}
		, get_height: function () {
			return this.__height;
		}
		, set_height: function (value) {
			this.resize(this.__width, value);
			return this.__height;
		}
		, get_minimized: function () {
			return this.__minimized;
		}
		, set_minimized: function (value) {
			return this.__minimized = this.backend.setMinimized(value);
		}
		, get_scale: function () {
			return this.__scale;
		}
		, get_title: function () {
			return this.__title;
		}
		, set_title: function (value) {
			return this.__title = this.backend.setTitle(this.__title);
		}
		, get_width: function () {
			return this.__width;
		}
		, set_width: function (value) {
			this.resize(value, this.__height);
			return this.__width;
		}
		, get_x: function () {
			return this.__x;
		}
		, set_x: function (value) {
			this.move(value, this.__y);
			return this.__x;
		}
		, get_y: function () {
			return this.__y;
		}
		, set_y: function (value) {
			this.move(this.__x, value);
			return this.__y;
		}
		, __class__: lime_ui_Window
		, __properties__: { set_y: "set_y", get_y: "get_y", set_x: "set_x", get_x: "get_x", set_width: "set_width", get_width: "get_width", set_title: "set_title", get_title: "get_title", get_scale: "get_scale", set_minimized: "set_minimized", get_minimized: "get_minimized", set_height: "set_height", get_height: "get_height", set_fullscreen: "set_fullscreen", get_fullscreen: "get_fullscreen", set_enableTextEvents: "set_enableTextEvents", get_enableTextEvents: "get_enableTextEvents", get_display: "get_display" }
	};
	var lime_utils_TAError = $hxClasses["lime.utils.TAError"] = { __ename__: ["lime", "utils", "TAError"], __constructs__: ["RangeError"] };
	lime_utils_TAError.RangeError = ["RangeError", 0];
	lime_utils_TAError.RangeError.toString = $estr;
	lime_utils_TAError.RangeError.__enum__ = lime_utils_TAError;
	var lime_utils_ByteArray = function (size) {
		if (size == null) size = 0;
		this.littleEndian = false;
		this.allocated = 0;
		this.position = 0;
		this.length = 0;
		if (size > 0) this.allocated = size;
		this.___resizeBuffer(this.allocated);
		this.set_length(this.allocated);
	};
	$hxClasses["lime.utils.ByteArray"] = lime_utils_ByteArray;
	lime_utils_ByteArray.__name__ = ["lime", "utils", "ByteArray"];
	lime_utils_ByteArray.fromBytes = function (bytes) {
		var result = new lime_utils_ByteArray();
		result.byteView = new Uint8Array(bytes.b.bufferValue);
		result.set_length(result.byteView.length);
		result.allocated = result.length;
		return result;
	};
	lime_utils_ByteArray.readFile = function (path) {
		return null;
	};
	lime_utils_ByteArray.__ofBuffer = function (buffer) {
		var bytes = new lime_utils_ByteArray();
		bytes.set_length(bytes.allocated = buffer.byteLength);
		bytes.data = new DataView(buffer);
		bytes.byteView = new Uint8Array(buffer);
		return bytes;
	};
	lime_utils_ByteArray.lime_bytes_from_data_pointer = function (data, length) {
		return lime_utils_ByteArray.cffi_lime_bytes_from_data_pointer(data, length);
	};
	lime_utils_ByteArray.lime_bytes_get_data_pointer = function (data) {
		return lime_utils_ByteArray.cffi_lime_bytes_get_data_pointer(data);
	};
	lime_utils_ByteArray.lime_bytes_read_file = function (path) {
		return lime_utils_ByteArray.cffi_lime_bytes_read_file(path);
	};
	lime_utils_ByteArray.prototype = {
		clear: function () {
			if (this.allocated < 0) this.___resizeBuffer(this.allocated = Std["int"](Math.max(0, this.allocated * 2))); else if (this.allocated > 0) this.___resizeBuffer(this.allocated = 0);
			this.length = 0;
			0;
			this.position = 0;
		}
		, compress: function (algorithm) {
		}
		, deflate: function () {
			this.compress(lime_utils_CompressionAlgorithm.DEFLATE);
		}
		, inflate: function () {
			this.uncompress(lime_utils_CompressionAlgorithm.DEFLATE);
		}
		, readBoolean: function () {
			return this.readByte() != 0;
		}
		, readByte: function () {
			var data = this.data;
			return data.getInt8(this.position++);
		}
		, readBytes: function (bytes, offset, length) {
			if (length == null) length = 0;
			if (offset == null) offset = 0;
			if (offset < 0 || length < 0) throw new js__$Boot_HaxeError("Read error - Out of bounds");
			if (length == 0) length = this.length - this.position;
			var lengthToEnsure = offset + length;
			if (bytes.length < lengthToEnsure) {
				if (bytes.allocated < lengthToEnsure) bytes.___resizeBuffer(bytes.allocated = Std["int"](Math.max(lengthToEnsure, bytes.allocated * 2))); else if (bytes.allocated > lengthToEnsure * 2) bytes.___resizeBuffer(bytes.allocated = lengthToEnsure);
				bytes.length = lengthToEnsure;
				lengthToEnsure;
			}
			bytes.byteView.set(this.byteView.subarray(this.position, this.position + length), offset);
			bytes.position = offset;
			this.position += length;
			if (bytes.position + length > bytes.length) bytes.set_length(bytes.position + length);
		}
		, readDouble: function () {
			var $double = this.data.getFloat64(this.position, this.littleEndian);
			this.position += 8;
			return $double;
		}
		, readFloat: function () {
			var $float = this.data.getFloat32(this.position, this.littleEndian);
			this.position += 4;
			return $float;
		}
		, readInt: function () {
			var $int = this.data.getInt32(this.position, this.littleEndian);
			this.position += 4;
			return $int;
		}
		, readMultiByte: function (length, charSet) {
			return this.readUTFBytes(length);
		}
		, readShort: function () {
			var $short = this.data.getInt16(this.position, this.littleEndian);
			this.position += 2;
			return $short;
		}
		, readUnsignedByte: function () {
			var data = this.data;
			return data.getUint8(this.position++);
		}
		, readUnsignedInt: function () {
			var uInt = this.data.getUint32(this.position, this.littleEndian);
			this.position += 4;
			return uInt;
		}
		, readUnsignedShort: function () {
			var uShort = this.data.getUint16(this.position, this.littleEndian);
			this.position += 2;
			return uShort;
		}
		, readUTF: function () {
			var bytesCount = this.readUnsignedShort();
			return this.readUTFBytes(bytesCount);
		}
		, readUTFBytes: function (len) {
			var value = "";
			var max = this.position + len;
			while (this.position < max) {
				var data = this.data;
				var c = data.getUint8(this.position++);
				if (c < 128) {
					if (c == 0) break;
					value += String.fromCharCode(c);
				} else if (c < 224) value += String.fromCharCode((c & 63) << 6 | data.getUint8(this.position++) & 127); else if (c < 240) {
					var c2 = data.getUint8(this.position++);
					value += String.fromCharCode((c & 31) << 12 | (c2 & 127) << 6 | data.getUint8(this.position++) & 127);
				} else {
					var c21 = data.getUint8(this.position++);
					var c3 = data.getUint8(this.position++);
					value += String.fromCharCode((c & 15) << 18 | (c21 & 127) << 12 | c3 << 6 & 127 | data.getUint8(this.position++) & 127);
				}
			}
			return value;
		}
		, toString: function () {
			var cachePosition = this.position;
			this.position = 0;
			var value = this.readUTFBytes(this.length);
			this.position = cachePosition;
			return value;
		}
		, uncompress: function (algorithm) {
			haxe_Log.trace("Warning: ByteArray.uncompress on JS target requires the 'format' haxelib", { fileName: "ByteArray.hx", lineNumber: 603, className: "lime.utils.ByteArray", methodName: "uncompress" });
		}
		, write_uncheck: function ($byte) {
		}
		, writeBoolean: function (value) {
			this.writeByte(value ? 1 : 0);
		}
		, writeByte: function (value) {
			var lengthToEnsure = this.position + 1;
			if (this.length < lengthToEnsure) {
				if (this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure, this.allocated * 2))); else if (this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
				this.length = lengthToEnsure;
				lengthToEnsure;
			}
			var data = this.data;
			data.setInt8(this.position, value);
			this.position += 1;
		}
		, writeBytes: function (bytes, offset, length) {
			if (length == null) length = 0;
			if (offset == null) offset = 0;
			if (bytes.length == 0) return;
			if (_$UInt_UInt_$Impl_$.gt(0, offset) || _$UInt_UInt_$Impl_$.gt(0, length)) throw new js__$Boot_HaxeError("Write error - Out of bounds");
			if (length == 0) length = bytes.length;
			var lengthToEnsure = this.position + length;
			if (this.length < lengthToEnsure) {
				if (this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure, this.allocated * 2))); else if (this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
				this.length = lengthToEnsure;
				lengthToEnsure;
			}
			this.byteView.set(bytes.byteView.subarray(offset, offset + length), this.position);
			this.position = this.position + length;
		}
		, writeDouble: function (x) {
			var lengthToEnsure = this.position + 8;
			if (this.length < lengthToEnsure) {
				if (this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure, this.allocated * 2))); else if (this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
				this.length = lengthToEnsure;
				lengthToEnsure;
			}
			this.data.setFloat64(this.position, x, this.littleEndian);
			this.position += 8;
		}
		, writeFile: function (path) {
		}
		, writeFloat: function (x) {
			var lengthToEnsure = this.position + 4;
			if (this.length < lengthToEnsure) {
				if (this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure, this.allocated * 2))); else if (this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
				this.length = lengthToEnsure;
				lengthToEnsure;
			}
			this.data.setFloat32(this.position, x, this.littleEndian);
			this.position += 4;
		}
		, writeInt: function (value) {
			var lengthToEnsure = this.position + 4;
			if (this.length < lengthToEnsure) {
				if (this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure, this.allocated * 2))); else if (this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
				this.length = lengthToEnsure;
				lengthToEnsure;
			}
			this.data.setInt32(this.position, value, this.littleEndian);
			this.position += 4;
		}
		, writeShort: function (value) {
			var lengthToEnsure = this.position + 2;
			if (this.length < lengthToEnsure) {
				if (this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure, this.allocated * 2))); else if (this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
				this.length = lengthToEnsure;
				lengthToEnsure;
			}
			this.data.setInt16(this.position, value, this.littleEndian);
			this.position += 2;
		}
		, writeUnsignedInt: function (value) {
			var lengthToEnsure = this.position + 4;
			if (this.length < lengthToEnsure) {
				if (this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure, this.allocated * 2))); else if (this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
				this.length = lengthToEnsure;
				lengthToEnsure;
			}
			this.data.setUint32(this.position, value, this.littleEndian);
			this.position += 4;
		}
		, writeUnsignedShort: function (value) {
			var lengthToEnsure = this.position + 2;
			if (this.length < lengthToEnsure) {
				if (this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure, this.allocated * 2))); else if (this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
				this.length = lengthToEnsure;
				lengthToEnsure;
			}
			this.data.setUint16(this.position, value, this.littleEndian);
			this.position += 2;
		}
		, writeUTF: function (value) {
			this.writeUnsignedShort(this.__getUTFBytesCount(value));
			this.writeUTFBytes(value);
		}
		, writeUTFBytes: function (value) {
			var _g1 = 0;
			var _g = value.length;
			while (_g1 < _g) {
				var i = _g1++;
				var c = value.charCodeAt(i);
				if (c <= 127) this.writeByte(c); else if (c <= 2047) {
					this.writeByte(192 | c >> 6);
					this.writeByte(128 | c & 63);
				} else if (c <= 65535) {
					this.writeByte(224 | c >> 12);
					this.writeByte(128 | c >> 6 & 63);
					this.writeByte(128 | c & 63);
				} else {
					this.writeByte(240 | c >> 18);
					this.writeByte(128 | c >> 12 & 63);
					this.writeByte(128 | c >> 6 & 63);
					this.writeByte(128 | c & 63);
				}
			}
		}
		, __fromBytes: function (bytes) {
			this.byteView = new Uint8Array(bytes.b.bufferValue);
			this.set_length(this.byteView.length);
			this.allocated = this.length;
		}
		, __get: function (pos) {
			return this.data.getInt8(pos);
		}
		, __getBuffer: function () {
			return this.data.buffer;
		}
		, __getUTFBytesCount: function (value) {
			var count = 0;
			var _g1 = 0;
			var _g = value.length;
			while (_g1 < _g) {
				var i = _g1++;
				var c = value.charCodeAt(i);
				if (c <= 127) count += 1; else if (c <= 2047) count += 2; else if (c <= 65535) count += 3; else count += 4;
			}
			return count;
		}
		, ___resizeBuffer: function (len) {
			var oldByteView = this.byteView;
			var newByteView = new Uint8Array(len);
			if (oldByteView != null) {
				if (oldByteView.length <= len) newByteView.set(oldByteView); else newByteView.set(oldByteView.subarray(0, len));
			}
			this.byteView = newByteView;
			this.data = new DataView(newByteView.buffer);
		}
		, __set: function (pos, v) {
			this.data.setUint8(pos, v);
		}
		, get_bytesAvailable: function () {
			return this.length - this.position;
		}
		, get_endian: function () {
			if (this.littleEndian) return "littleEndian"; else return "bigEndian";
		}
		, set_endian: function (endian) {
			this.littleEndian = endian == "littleEndian";
			return endian;
		}
		, set_length: function (value) {
			if (this.allocated < value) this.___resizeBuffer(this.allocated = Std["int"](Math.max(value, this.allocated * 2))); else if (this.allocated > value * 2) this.___resizeBuffer(this.allocated = value);
			this.length = value;
			return value;
		}
		, __class__: lime_utils_ByteArray
		, __properties__: { set_length: "set_length", set_endian: "set_endian", get_endian: "get_endian", get_bytesAvailable: "get_bytesAvailable" }
	};
	var lime_utils_CompressionAlgorithm = $hxClasses["lime.utils.CompressionAlgorithm"] = { __ename__: ["lime", "utils", "CompressionAlgorithm"], __constructs__: ["DEFLATE", "ZLIB", "LZMA", "GZIP"] };
	lime_utils_CompressionAlgorithm.DEFLATE = ["DEFLATE", 0];
	lime_utils_CompressionAlgorithm.DEFLATE.toString = $estr;
	lime_utils_CompressionAlgorithm.DEFLATE.__enum__ = lime_utils_CompressionAlgorithm;
	lime_utils_CompressionAlgorithm.ZLIB = ["ZLIB", 1];
	lime_utils_CompressionAlgorithm.ZLIB.toString = $estr;
	lime_utils_CompressionAlgorithm.ZLIB.__enum__ = lime_utils_CompressionAlgorithm;
	lime_utils_CompressionAlgorithm.LZMA = ["LZMA", 2];
	lime_utils_CompressionAlgorithm.LZMA.toString = $estr;
	lime_utils_CompressionAlgorithm.LZMA.__enum__ = lime_utils_CompressionAlgorithm;
	lime_utils_CompressionAlgorithm.GZIP = ["GZIP", 3];
	lime_utils_CompressionAlgorithm.GZIP.toString = $estr;
	lime_utils_CompressionAlgorithm.GZIP.__enum__ = lime_utils_CompressionAlgorithm;
	var lime_utils__$Float32Array_Float32Array_$Impl_$ = {};
	$hxClasses["lime.utils._Float32Array.Float32Array_Impl_"] = lime_utils__$Float32Array_Float32Array_$Impl_$;
	lime_utils__$Float32Array_Float32Array_$Impl_$.__name__ = ["lime", "utils", "_Float32Array", "Float32Array_Impl_"];
	lime_utils__$Float32Array_Float32Array_$Impl_$.__set = function (this1, idx, val) {
		return this1[idx] = val;
	};
	lime_utils__$Float32Array_Float32Array_$Impl_$.__get = function (this1, idx) {
		return this1[idx];
	};
	lime_utils__$Float32Array_Float32Array_$Impl_$.fromBytes = function (bytes, byteOffset, len) {
		if (byteOffset == null) byteOffset = 0;
		if (byteOffset == null) return new Float32Array(bytes.b.bufferValue);
		if (len == null) return new Float32Array(bytes.b.bufferValue, byteOffset);
		return new Float32Array(bytes.b.bufferValue, byteOffset, len);
	};
	lime_utils__$Float32Array_Float32Array_$Impl_$.toBytes = function (this1) {
		return new haxe_io_Bytes(new Uint8Array(this1.buffer));
	};
	lime_utils__$Float32Array_Float32Array_$Impl_$.toString = function (this1) {
		if (this1 != null) return "Float32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
	};
	var lime_utils_GLUtils = function () { };
	$hxClasses["lime.utils.GLUtils"] = lime_utils_GLUtils;
	lime_utils_GLUtils.__name__ = ["lime", "utils", "GLUtils"];
	lime_utils_GLUtils.compileShader = function (source, type) {
		var shader = lime_graphics_opengl_GL.context.createShader(type);
		lime_graphics_opengl_GL.context.shaderSource(shader, source);
		lime_graphics_opengl_GL.context.compileShader(shader);
		if (lime_graphics_opengl_GL.context.getShaderParameter(shader, 35713) == 0) switch (type) {
			case 35633:
				throw new js__$Boot_HaxeError("Error compiling vertex shader");
				break;
			case 35632:
				throw new js__$Boot_HaxeError("Error compiling fragment shader");
				break;
			default:
				throw new js__$Boot_HaxeError("Error compiling unknown shader type");
		}
		return shader;
	};
	lime_utils_GLUtils.createProgram = function (vertexSource, fragmentSource) {
		var vertexShader = lime_utils_GLUtils.compileShader(vertexSource, 35633);
		var fragmentShader = lime_utils_GLUtils.compileShader(fragmentSource, 35632);
		var program = lime_graphics_opengl_GL.context.createProgram();
		lime_graphics_opengl_GL.context.attachShader(program, vertexShader);
		lime_graphics_opengl_GL.context.attachShader(program, fragmentShader);
		lime_graphics_opengl_GL.context.linkProgram(program);
		if (lime_graphics_opengl_GL.context.getProgramParameter(program, 35714) == 0) throw new js__$Boot_HaxeError("Unable to initialize the shader program.");
		return program;
	};
	var lime_utils_IDataInput = function () { };
	$hxClasses["lime.utils.IDataInput"] = lime_utils_IDataInput;
	lime_utils_IDataInput.__name__ = ["lime", "utils", "IDataInput"];
	lime_utils_IDataInput.prototype = {
		__class__: lime_utils_IDataInput
		, __properties__: { set_endian: "set_endian", get_endian: "get_endian", get_bytesAvailable: "get_bytesAvailable" }
	};
	var lime_utils_IMemoryRange = function () { };
	$hxClasses["lime.utils.IMemoryRange"] = lime_utils_IMemoryRange;
	lime_utils_IMemoryRange.__name__ = ["lime", "utils", "IMemoryRange"];
	lime_utils_IMemoryRange.prototype = {
		__class__: lime_utils_IMemoryRange
	};
	var lime_utils__$Int16Array_Int16Array_$Impl_$ = {};
	$hxClasses["lime.utils._Int16Array.Int16Array_Impl_"] = lime_utils__$Int16Array_Int16Array_$Impl_$;
	lime_utils__$Int16Array_Int16Array_$Impl_$.__name__ = ["lime", "utils", "_Int16Array", "Int16Array_Impl_"];
	lime_utils__$Int16Array_Int16Array_$Impl_$.__set = function (this1, idx, val) {
		return this1[idx] = val;
	};
	lime_utils__$Int16Array_Int16Array_$Impl_$.__get = function (this1, idx) {
		return this1[idx];
	};
	lime_utils__$Int16Array_Int16Array_$Impl_$.fromBytes = function (bytes, byteOffset, len) {
		if (byteOffset == null) byteOffset = 0;
		if (byteOffset == null) return new Int16Array(bytes.b.bufferValue);
		if (len == null) return new Int16Array(bytes.b.bufferValue, byteOffset);
		return new Int16Array(bytes.b.bufferValue, byteOffset, len);
	};
	lime_utils__$Int16Array_Int16Array_$Impl_$.toBytes = function (this1) {
		return new haxe_io_Bytes(new Uint8Array(this1.buffer));
	};
	lime_utils__$Int16Array_Int16Array_$Impl_$.toString = function (this1) {
		if (this1 != null) return "Int16Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
	};
	var lime_utils__$Int32Array_Int32Array_$Impl_$ = {};
	$hxClasses["lime.utils._Int32Array.Int32Array_Impl_"] = lime_utils__$Int32Array_Int32Array_$Impl_$;
	lime_utils__$Int32Array_Int32Array_$Impl_$.__name__ = ["lime", "utils", "_Int32Array", "Int32Array_Impl_"];
	lime_utils__$Int32Array_Int32Array_$Impl_$.__set = function (this1, idx, val) {
		return this1[idx] = val;
	};
	lime_utils__$Int32Array_Int32Array_$Impl_$.__get = function (this1, idx) {
		return this1[idx];
	};
	lime_utils__$Int32Array_Int32Array_$Impl_$.fromBytes = function (bytes, byteOffset, len) {
		if (byteOffset == null) byteOffset = 0;
		if (byteOffset == null) return new Int32Array(bytes.b.bufferValue);
		if (len == null) return new Int32Array(bytes.b.bufferValue, byteOffset);
		return new Int32Array(bytes.b.bufferValue, byteOffset, len);
	};
	lime_utils__$Int32Array_Int32Array_$Impl_$.toBytes = function (this1) {
		return new haxe_io_Bytes(new Uint8Array(this1.buffer));
	};
	lime_utils__$Int32Array_Int32Array_$Impl_$.toString = function (this1) {
		if (this1 != null) return "Int32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
	};
	var lime_utils_LZMA = function () { };
	$hxClasses["lime.utils.LZMA"] = lime_utils_LZMA;
	lime_utils_LZMA.__name__ = ["lime", "utils", "LZMA"];
	lime_utils_LZMA.decode = function (bytes) {
		return null;
	};
	lime_utils_LZMA.encode = function (bytes) {
		return null;
	};
	var lime_utils__$UInt16Array_UInt16Array_$Impl_$ = {};
	$hxClasses["lime.utils._UInt16Array.UInt16Array_Impl_"] = lime_utils__$UInt16Array_UInt16Array_$Impl_$;
	lime_utils__$UInt16Array_UInt16Array_$Impl_$.__name__ = ["lime", "utils", "_UInt16Array", "UInt16Array_Impl_"];
	lime_utils__$UInt16Array_UInt16Array_$Impl_$.__set = function (this1, idx, val) {
		return this1[idx] = val;
	};
	lime_utils__$UInt16Array_UInt16Array_$Impl_$.__get = function (this1, idx) {
		return this1[idx];
	};
	lime_utils__$UInt16Array_UInt16Array_$Impl_$.fromBytes = function (bytes, byteOffset, len) {
		if (byteOffset == null) byteOffset = 0;
		if (byteOffset == null) return new Uint16Array(bytes.b.bufferValue);
		if (len == null) return new Uint16Array(bytes.b.bufferValue, byteOffset);
		return new Uint16Array(bytes.b.bufferValue, byteOffset, len);
	};
	lime_utils__$UInt16Array_UInt16Array_$Impl_$.toBytes = function (this1) {
		return new haxe_io_Bytes(new Uint8Array(this1.buffer));
	};
	lime_utils__$UInt16Array_UInt16Array_$Impl_$.toString = function (this1) {
		if (this1 != null) return "UInt16Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
	};
	var lime_utils__$UInt32Array_UInt32Array_$Impl_$ = {};
	$hxClasses["lime.utils._UInt32Array.UInt32Array_Impl_"] = lime_utils__$UInt32Array_UInt32Array_$Impl_$;
	lime_utils__$UInt32Array_UInt32Array_$Impl_$.__name__ = ["lime", "utils", "_UInt32Array", "UInt32Array_Impl_"];
	lime_utils__$UInt32Array_UInt32Array_$Impl_$.__set = function (this1, idx, val) {
		return this1[idx] = val;
	};
	lime_utils__$UInt32Array_UInt32Array_$Impl_$.__get = function (this1, idx) {
		return this1[idx];
	};
	lime_utils__$UInt32Array_UInt32Array_$Impl_$.fromBytes = function (bytes, byteOffset, len) {
		if (byteOffset == null) byteOffset = 0;
		if (byteOffset == null) return new Uint32Array(bytes.b.bufferValue);
		if (len == null) return new Uint32Array(bytes.b.bufferValue, byteOffset);
		return new Uint32Array(bytes.b.bufferValue, byteOffset, len);
	};
	lime_utils__$UInt32Array_UInt32Array_$Impl_$.toBytes = function (this1) {
		return new haxe_io_Bytes(new Uint8Array(this1.buffer));
	};
	lime_utils__$UInt32Array_UInt32Array_$Impl_$.toString = function (this1) {
		if (this1 != null) return "UInt32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
	};
	var lime_utils__$UInt8Array_UInt8Array_$Impl_$ = {};
	$hxClasses["lime.utils._UInt8Array.UInt8Array_Impl_"] = lime_utils__$UInt8Array_UInt8Array_$Impl_$;
	lime_utils__$UInt8Array_UInt8Array_$Impl_$.__name__ = ["lime", "utils", "_UInt8Array", "UInt8Array_Impl_"];
	lime_utils__$UInt8Array_UInt8Array_$Impl_$.__set = function (this1, idx, val) {
		return this1[idx] = val;
	};
	lime_utils__$UInt8Array_UInt8Array_$Impl_$.__get = function (this1, idx) {
		return this1[idx];
	};
	lime_utils__$UInt8Array_UInt8Array_$Impl_$.fromBytes = function (bytes, byteOffset, len) {
		if (byteOffset == null) return new Uint8Array(bytes.b.bufferValue);
		if (len == null) return new Uint8Array(bytes.b.bufferValue, byteOffset);
		return new Uint8Array(bytes.b.bufferValue, byteOffset, len);
	};
	lime_utils__$UInt8Array_UInt8Array_$Impl_$.toBytes = function (this1) {
		return new haxe_io_Bytes(new Uint8Array(this1.buffer));
	};
	lime_utils__$UInt8Array_UInt8Array_$Impl_$.toString = function (this1) {
		if (this1 != null) return "UInt8Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
	};
	var openfl_IAssetCache = function () { };
	$hxClasses["openfl.IAssetCache"] = openfl_IAssetCache;
	openfl_IAssetCache.__name__ = ["openfl", "IAssetCache"];
	openfl_IAssetCache.prototype = {
		__class__: openfl_IAssetCache
		, __properties__: { set_enabled: "set_enabled", get_enabled: "get_enabled" }
	};
	var openfl_AssetCache = function () {
		this.__enabled = true;
		this.bitmapData = new haxe_ds_StringMap();
		this.font = new haxe_ds_StringMap();
		this.sound = new haxe_ds_StringMap();
	};
	$hxClasses["openfl.AssetCache"] = openfl_AssetCache;
	openfl_AssetCache.__name__ = ["openfl", "AssetCache"];
	openfl_AssetCache.__interfaces__ = [openfl_IAssetCache];
	openfl_AssetCache.prototype = {
		clear: function (prefix) {
			if (prefix == null) {
				this.bitmapData = new haxe_ds_StringMap();
				this.font = new haxe_ds_StringMap();
				this.sound = new haxe_ds_StringMap();
			} else {
				var keys = this.bitmapData.keys();
				while (keys.hasNext()) {
					var key = keys.next();
					if (StringTools.startsWith(key, prefix)) this.bitmapData.remove(key);
				}
				var keys1 = this.font.keys();
				while (keys1.hasNext()) {
					var key1 = keys1.next();
					if (StringTools.startsWith(key1, prefix)) this.font.remove(key1);
				}
				var keys2 = this.sound.keys();
				while (keys2.hasNext()) {
					var key2 = keys2.next();
					if (StringTools.startsWith(key2, prefix)) this.sound.remove(key2);
				}
			}
		}
		, getBitmapData: function (id) {
			return this.bitmapData.get(id);
		}
		, getFont: function (id) {
			return this.font.get(id);
		}
		, getSound: function (id) {
			return this.sound.get(id);
		}
		, hasBitmapData: function (id) {
			return this.bitmapData.exists(id);
		}
		, hasFont: function (id) {
			return this.font.exists(id);
		}
		, hasSound: function (id) {
			return this.sound.exists(id);
		}
		, removeBitmapData: function (id) {
			return this.bitmapData.remove(id);
		}
		, removeFont: function (id) {
			return this.font.remove(id);
		}
		, removeSound: function (id) {
			return this.sound.remove(id);
		}
		, setBitmapData: function (id, bitmapData) {
			this.bitmapData.set(id, bitmapData);
		}
		, setFont: function (id, font) {
			this.font.set(id, font);
		}
		, setSound: function (id, sound) {
			this.sound.set(id, sound);
		}
		, get_enabled: function () {
			return this.__enabled;
		}
		, set_enabled: function (value) {
			return this.__enabled = value;
		}
		, __class__: openfl_AssetCache
		, __properties__: { set_enabled: "set_enabled", get_enabled: "get_enabled" }
	};
	var openfl_Assets = function () { };
	$hxClasses["openfl.Assets"] = openfl_Assets;
	openfl_Assets.__name__ = ["openfl", "Assets"];
	openfl_Assets.addEventListener = function (type, listener, useCapture, priority, useWeakReference) {
		if (useWeakReference == null) useWeakReference = false;
		if (priority == null) priority = 0;
		if (useCapture == null) useCapture = false;
		if (!lime_Assets.onChange.has(openfl_Assets.LimeAssets_onChange)) lime_Assets.onChange.add(openfl_Assets.LimeAssets_onChange);
		openfl_Assets.dispatcher.addEventListener(type, listener, useCapture, priority, useWeakReference);
	};
	openfl_Assets.dispatchEvent = function (event) {
		return openfl_Assets.dispatcher.dispatchEvent(event);
	};
	openfl_Assets.exists = function (id, type) {
		return lime_Assets.exists(id, type);
	};
	openfl_Assets.getBitmapData = function (id, useCache) {
		if (useCache == null) useCache = true;
		if (useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasBitmapData(id)) {
			var bitmapData = openfl_Assets.cache.getBitmapData(id);
			if (openfl_Assets.isValidBitmapData(bitmapData)) return bitmapData;
		}
		var image = lime_Assets.getImage(id, false);
		if (image != null) {
			var bitmapData1 = openfl_display_BitmapData.fromImage(image);
			if (useCache && openfl_Assets.cache.get_enabled()) openfl_Assets.cache.setBitmapData(id, bitmapData1);
			return bitmapData1;
		}
		return null;
	};
	openfl_Assets.getBytes = function (id) {
		return lime_Assets.getBytes(id);
	};
	openfl_Assets.getFont = function (id, useCache) {
		if (useCache == null) useCache = true;
		if (useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasFont(id)) return openfl_Assets.cache.getFont(id);
		var limeFont = lime_Assets.getFont(id, false);
		if (limeFont != null) {
			var font = openfl_text_Font.__fromLimeFont(limeFont);
			if (useCache && openfl_Assets.cache.get_enabled()) openfl_Assets.cache.setFont(id, font);
			return font;
		}
		return new openfl_text_Font();
	};
	openfl_Assets.getLibrary = function (name) {
		return lime_Assets.getLibrary(name);
	};
	openfl_Assets.getMovieClip = function (id) {
		var libraryName = id.substring(0, id.indexOf(":"));
		var symbolName;
		var pos = id.indexOf(":") + 1;
		symbolName = HxOverrides.substr(id, pos, null);
		var library = openfl_Assets.getLibrary(libraryName);
		if (library != null) {
			if (library.exists(symbolName, "MOVIE_CLIP")) {
				if (library.isLocal(symbolName, "MOVIE_CLIP")) return library.getMovieClip(symbolName); else haxe_Log.trace("[openfl.Assets] MovieClip asset \"" + id + "\" exists, but only asynchronously", { fileName: "Assets.hx", lineNumber: 223, className: "openfl.Assets", methodName: "getMovieClip" });
			} else haxe_Log.trace("[openfl.Assets] There is no MovieClip asset with an ID of \"" + id + "\"", { fileName: "Assets.hx", lineNumber: 229, className: "openfl.Assets", methodName: "getMovieClip" });
		} else haxe_Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"", { fileName: "Assets.hx", lineNumber: 235, className: "openfl.Assets", methodName: "getMovieClip" });
		return null;
	};
	openfl_Assets.getMusic = function (id, useCache) {
		if (useCache == null) useCache = true;
		var path = lime_Assets.getPath(id);
		if (path != null) return new openfl_media_Sound(new openfl_net_URLRequest(path));
		return null;
	};
	openfl_Assets.getPath = function (id) {
		return lime_Assets.getPath(id);
	};
	openfl_Assets.getSound = function (id, useCache) {
		if (useCache == null) useCache = true;
		if (useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasSound(id)) {
			var sound = openfl_Assets.cache.getSound(id);
			if (openfl_Assets.isValidSound(sound)) return sound;
		}
		var path = lime_Assets.getPath(id);
		if (path != null) return new openfl_media_Sound(new openfl_net_URLRequest(path));
		return null;
	};
	openfl_Assets.getText = function (id) {
		return lime_Assets.getText(id);
	};
	openfl_Assets.hasEventListener = function (type) {
		return openfl_Assets.dispatcher.hasEventListener(type);
	};
	openfl_Assets.isLocal = function (id, type, useCache) {
		if (useCache == null) useCache = true;
		if (useCache && openfl_Assets.cache.get_enabled()) {
			if (type == "IMAGE" || type == null) {
				if (openfl_Assets.cache.hasBitmapData(id)) return true;
			}
			if (type == "FONT" || type == null) {
				if (openfl_Assets.cache.hasFont(id)) return true;
			}
			if (type == "SOUND" || type == "MUSIC" || type == null) {
				if (openfl_Assets.cache.hasSound(id)) return true;
			}
		}
		var libraryName = id.substring(0, id.indexOf(":"));
		var symbolName;
		var pos = id.indexOf(":") + 1;
		symbolName = HxOverrides.substr(id, pos, null);
		var library = openfl_Assets.getLibrary(libraryName);
		if (library != null) return library.isLocal(symbolName, type);
		return false;
	};
	openfl_Assets.isValidBitmapData = function (bitmapData) {
		return bitmapData != null && bitmapData.image != null;
	};
	openfl_Assets.isValidSound = function (sound) {
		return true;
	};
	openfl_Assets.list = function (type) {
		return lime_Assets.list(type);
	};
	openfl_Assets.loadBitmapData = function (id, useCache, handler) {
		if (useCache == null) useCache = true;
		if (useCache == null) useCache = true;
		var promise = new lime_app_Promise();
		if (handler != null) {
			promise.future.onComplete(handler);
			promise.future.onError(function (_) {
				handler(null);
			});
		}
		if (useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasBitmapData(id)) {
			var bitmapData = openfl_Assets.cache.getBitmapData(id);
			if (openfl_Assets.isValidBitmapData(bitmapData)) {
				promise.complete(bitmapData);
				return promise.future;
			}
		}
		lime_Assets.loadImage(id, false).onComplete(function (image) {
			if (image != null) {
				var bitmapData1 = openfl_display_BitmapData.fromImage(image);
				if (useCache && openfl_Assets.cache.get_enabled()) openfl_Assets.cache.setBitmapData(id, bitmapData1);
				promise.complete(bitmapData1);
			} else promise.error("[Assets] Could not load Image \"" + id + "\"");
		}).onError($bind(promise, promise.error)).onProgress($bind(promise, promise.progress));
		return promise.future;
	};
	openfl_Assets.loadBytes = function (id, handler) {
		var future = lime_Assets.loadBytes(id);
		if (handler != null) {
			future.onComplete(handler);
			future.onError(function (_) {
				handler(null);
			});
		}
		return future;
	};
	openfl_Assets.loadFont = function (id, useCache, handler) {
		if (useCache == null) useCache = true;
		if (useCache == null) useCache = true;
		var promise = new lime_app_Promise();
		if (handler != null) {
			promise.future.onComplete(handler);
			promise.future.onError(function (_) {
				handler(null);
			});
		}
		if (useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasFont(id)) {
			promise.complete(openfl_Assets.cache.getFont(id));
			return promise.future;
		}
		lime_Assets.loadFont(id).onComplete(function (limeFont) {
			var font = openfl_text_Font.__fromLimeFont(limeFont);
			if (useCache && openfl_Assets.cache.get_enabled()) openfl_Assets.cache.setFont(id, font);
			promise.complete(font);
		}).onError($bind(promise, promise.error)).onProgress($bind(promise, promise.progress));
		return promise.future;
	};
	openfl_Assets.loadLibrary = function (name, handler) {
		var future = lime_Assets.loadLibrary(name);
		if (handler != null) {
			future.onComplete(handler);
			future.onError(function (_) {
				handler(null);
			});
		}
		return future;
	};
	openfl_Assets.loadMusic = function (id, useCache, handler) {
		if (useCache == null) useCache = true;
		if (useCache == null) useCache = true;
		return new lime_app_Future(function () {
			return openfl_Assets.getMusic(id, useCache);
		});
	};
	openfl_Assets.loadMovieClip = function (id, handler) {
		var promise = new lime_app_Promise();
		if (handler != null) {
			promise.future.onComplete(handler);
			promise.future.onError(function (_) {
				handler(null);
			});
		}
		var libraryName = id.substring(0, id.indexOf(":"));
		var symbolName;
		var pos = id.indexOf(":") + 1;
		symbolName = HxOverrides.substr(id, pos, null);
		var library = openfl_Assets.getLibrary(libraryName);
		if (library != null) {
			if (library.exists(symbolName, "MOVIE_CLIP")) promise.completeWith(library.loadMovieClip(symbolName)); else promise.error("[Assets] There is no MovieClip asset with an ID of \"" + id + "\"");
		} else promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
		return promise.future;
	};
	openfl_Assets.loadSound = function (id, useCache, handler) {
		if (useCache == null) useCache = true;
		if (useCache == null) useCache = true;
		return new lime_app_Future(function () {
			return openfl_Assets.getSound(id, useCache);
		});
	};
	openfl_Assets.loadText = function (id, handler) {
		var future = lime_Assets.loadText(id);
		if (handler != null) {
			future.onComplete(handler);
			future.onError(function (_) {
				handler(null);
			});
		}
		return future;
	};
	openfl_Assets.registerLibrary = function (name, library) {
		lime_Assets.registerLibrary(name, library);
	};
	openfl_Assets.removeEventListener = function (type, listener, capture) {
		if (capture == null) capture = false;
		openfl_Assets.dispatcher.removeEventListener(type, listener, capture);
	};
	openfl_Assets.resolveClass = function (name) {
		return Type.resolveClass(name);
	};
	openfl_Assets.resolveEnum = function (name) {
		var value = Type.resolveEnum(name);
		return value;
	};
	openfl_Assets.unloadLibrary = function (name) {
		lime_Assets.unloadLibrary(name);
	};
	openfl_Assets.LimeAssets_onChange = function () {
		openfl_Assets.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE));
	};
	var openfl_AssetLibrary = function () {
		lime_AssetLibrary.call(this);
	};
	$hxClasses["openfl.AssetLibrary"] = openfl_AssetLibrary;
	openfl_AssetLibrary.__name__ = ["openfl", "AssetLibrary"];
	openfl_AssetLibrary.__super__ = lime_AssetLibrary;
	openfl_AssetLibrary.prototype = $extend(lime_AssetLibrary.prototype, {
		getMovieClip: function (id) {
			return null;
		}
		, loadMovieClip: function (id) {
			var _g = this;
			return new lime_app_Future(function () {
				return _g.getMovieClip(id);
			});
		}
		, __class__: openfl_AssetLibrary
	});
	var openfl_display_MovieClip = function () {
		openfl_display_Sprite.call(this);
		this.__currentFrame = 0;
		this.__currentLabels = [];
		this.__totalFrames = 0;
		this.enabled = true;
	};
	$hxClasses["openfl.display.MovieClip"] = openfl_display_MovieClip;
	openfl_display_MovieClip.__name__ = ["openfl", "display", "MovieClip"];
	openfl_display_MovieClip.__super__ = openfl_display_Sprite;
	openfl_display_MovieClip.prototype = $extend(openfl_display_Sprite.prototype, {
		addFrameScript: function (index, method) {
			if (method != null) {
				if (this.__frameScripts == null) this.__frameScripts = new haxe_ds_IntMap();
				this.__frameScripts.h[index] = method;
				haxe_Log.trace("added script index " + index, { fileName: "MovieClip.hx", lineNumber: 149, className: "openfl.display.MovieClip", methodName: "addFrameScript" });
			} else if (this.__frameScripts != null) this.__frameScripts.remove(index);
		}
		, gotoAndPlay: function (frame, scene) {
		}
		, gotoAndStop: function (frame, scene) {
		}
		, nextFrame: function () {
		}
		, play: function () {
		}
		, prevFrame: function () {
		}
		, stop: function () {
		}
		, get_currentFrame: function () {
			return this.__currentFrame;
		}
		, get_currentFrameLabel: function () {
			return this.__currentFrameLabel;
		}
		, get_currentLabel: function () {
			return this.__currentLabel;
		}
		, get_currentLabels: function () {
			return this.__currentLabels;
		}
		, get_framesLoaded: function () {
			return this.__totalFrames;
		}
		, get_totalFrames: function () {
			return this.__totalFrames;
		}
		, __class__: openfl_display_MovieClip
		, __properties__: $extend(openfl_display_Sprite.prototype.__properties__, { get_totalFrames: "get_totalFrames", get_framesLoaded: "get_framesLoaded", get_currentLabels: "get_currentLabels", get_currentLabel: "get_currentLabel", get_currentFrameLabel: "get_currentFrameLabel", get_currentFrame: "get_currentFrame" })
	});
	var openfl_display_LoaderInfo = function () {
		openfl_events_EventDispatcher.call(this);
		this.applicationDomain = openfl_system_ApplicationDomain.currentDomain;
		this.bytesLoaded = 0;
		this.bytesTotal = 0;
		this.childAllowsParent = true;
		this.parameters = {};
	};
	$hxClasses["openfl.display.LoaderInfo"] = openfl_display_LoaderInfo;
	openfl_display_LoaderInfo.__name__ = ["openfl", "display", "LoaderInfo"];
	openfl_display_LoaderInfo.create = function (loader) {
		var loaderInfo = new openfl_display_LoaderInfo();
		loaderInfo.uncaughtErrorEvents = new openfl_events_UncaughtErrorEvents();
		if (loader != null) loaderInfo.loader = loader; else loaderInfo.url = openfl_display_LoaderInfo.__rootURL;
		return loaderInfo;
	};
	openfl_display_LoaderInfo.__super__ = openfl_events_EventDispatcher;
	openfl_display_LoaderInfo.prototype = $extend(openfl_events_EventDispatcher.prototype, {
		__class__: openfl_display_LoaderInfo
	});
	var openfl_system_ApplicationDomain = function (parentDomain) {
		if (parentDomain != null) this.parentDomain = parentDomain; else this.parentDomain = openfl_system_ApplicationDomain.currentDomain;
	};
	$hxClasses["openfl.system.ApplicationDomain"] = openfl_system_ApplicationDomain;
	openfl_system_ApplicationDomain.__name__ = ["openfl", "system", "ApplicationDomain"];
	openfl_system_ApplicationDomain.prototype = {
		getDefinition: function (name) {
			return Type.resolveClass(name);
		}
		, hasDefinition: function (name) {
			return Type.resolveClass(name) != null;
		}
		, __class__: openfl_system_ApplicationDomain
	};
	var openfl_events_UncaughtErrorEvents = function (target) {
		openfl_events_EventDispatcher.call(this, target);
	};
	$hxClasses["openfl.events.UncaughtErrorEvents"] = openfl_events_UncaughtErrorEvents;
	openfl_events_UncaughtErrorEvents.__name__ = ["openfl", "events", "UncaughtErrorEvents"];
	openfl_events_UncaughtErrorEvents.__super__ = openfl_events_EventDispatcher;
	openfl_events_UncaughtErrorEvents.prototype = $extend(openfl_events_EventDispatcher.prototype, {
		__class__: openfl_events_UncaughtErrorEvents
	});
	var openfl_geom_Point = function (x, y) {
		if (y == null) y = 0;
		if (x == null) x = 0;
		this.x = x;
		this.y = y;
	};
	$hxClasses["openfl.geom.Point"] = openfl_geom_Point;
	openfl_geom_Point.__name__ = ["openfl", "geom", "Point"];
	openfl_geom_Point.distance = function (pt1, pt2) {
		var dx = pt1.x - pt2.x;
		var dy = pt1.y - pt2.y;
		return Math.sqrt(dx * dx + dy * dy);
	};
	openfl_geom_Point.interpolate = function (pt1, pt2, f) {
		return new openfl_geom_Point(pt2.x + f * (pt1.x - pt2.x), pt2.y + f * (pt1.y - pt2.y));
	};
	openfl_geom_Point.polar = function (len, angle) {
		return new openfl_geom_Point(len * Math.cos(angle), len * Math.sin(angle));
	};
	openfl_geom_Point.prototype = {
		add: function (v) {
			return new openfl_geom_Point(v.x + this.x, v.y + this.y);
		}
		, clone: function () {
			return new openfl_geom_Point(this.x, this.y);
		}
		, copyFrom: function (sourcePoint) {
			this.x = sourcePoint.x;
			this.y = sourcePoint.y;
		}
		, equals: function (toCompare) {
			return toCompare != null && toCompare.x == this.x && toCompare.y == this.y;
		}
		, normalize: function (thickness) {
			if (this.x == 0 && this.y == 0) return; else {
				var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
				this.x *= norm;
				this.y *= norm;
			}
		}
		, offset: function (dx, dy) {
			this.x += dx;
			this.y += dy;
		}
		, setTo: function (xa, ya) {
			this.x = xa;
			this.y = ya;
		}
		, subtract: function (v) {
			return new openfl_geom_Point(this.x - v.x, this.y - v.y);
		}
		, toString: function () {
			return "(x=" + this.x + ", y=" + this.y + ")";
		}
		, __toLimeVector2: function () {
			return new lime_math_Vector2(this.x, this.y);
		}
		, get_length: function () {
			return Math.sqrt(this.x * this.x + this.y * this.y);
		}
		, __class__: openfl_geom_Point
		, __properties__: { get_length: "get_length" }
	};
	var openfl_geom_ColorTransform = function (redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier, redOffset, greenOffset, blueOffset, alphaOffset) {
		if (alphaOffset == null) alphaOffset = 0;
		if (blueOffset == null) blueOffset = 0;
		if (greenOffset == null) greenOffset = 0;
		if (redOffset == null) redOffset = 0;
		if (alphaMultiplier == null) alphaMultiplier = 1;
		if (blueMultiplier == null) blueMultiplier = 1;
		if (greenMultiplier == null) greenMultiplier = 1;
		if (redMultiplier == null) redMultiplier = 1;
		this.redMultiplier = redMultiplier;
		this.greenMultiplier = greenMultiplier;
		this.blueMultiplier = blueMultiplier;
		this.alphaMultiplier = alphaMultiplier;
		this.redOffset = redOffset;
		this.greenOffset = greenOffset;
		this.blueOffset = blueOffset;
		this.alphaOffset = alphaOffset;
	};
	$hxClasses["openfl.geom.ColorTransform"] = openfl_geom_ColorTransform;
	openfl_geom_ColorTransform.__name__ = ["openfl", "geom", "ColorTransform"];
	openfl_geom_ColorTransform.prototype = {
		concat: function (second) {
			this.redMultiplier *= second.redMultiplier;
			this.greenMultiplier *= second.greenMultiplier;
			this.blueMultiplier *= second.blueMultiplier;
			this.alphaMultiplier *= second.alphaMultiplier;
			this.redOffset = second.redMultiplier * this.redOffset + second.redOffset;
			this.greenOffset = second.greenMultiplier * this.greenOffset + second.greenOffset;
			this.blueOffset = second.blueMultiplier * this.blueOffset + second.blueOffset;
			this.alphaOffset = second.alphaMultiplier * this.alphaOffset + second.alphaOffset;
		}
		, __clone: function () {
			return new openfl_geom_ColorTransform(this.redMultiplier, this.greenMultiplier, this.blueMultiplier, this.alphaMultiplier, this.redOffset, this.greenOffset, this.blueOffset, this.alphaOffset);
		}
		, __combine: function (ct) {
			this.redMultiplier *= ct.redMultiplier;
			this.greenMultiplier *= ct.greenMultiplier;
			this.blueMultiplier *= ct.blueMultiplier;
			this.alphaMultiplier *= ct.alphaMultiplier;
			this.redOffset += ct.redOffset;
			this.greenOffset += ct.greenOffset;
			this.blueOffset += ct.blueOffset;
			this.alphaOffset += ct.alphaOffset;
		}
		, __equals: function (ct, skipAlphaMultiplier) {
			if (skipAlphaMultiplier == null) skipAlphaMultiplier = false;
			return ct != null && this.redMultiplier == ct.redMultiplier && this.greenMultiplier == ct.greenMultiplier && this.blueMultiplier == ct.blueMultiplier && (skipAlphaMultiplier || this.alphaMultiplier == ct.alphaMultiplier) && this.redOffset == ct.redOffset && this.greenOffset == ct.greenOffset && this.blueOffset == ct.blueOffset && this.alphaOffset == ct.alphaOffset;
		}
		, __isDefault: function () {
			return this.redMultiplier == 1 && this.greenMultiplier == 1 && this.blueMultiplier == 1 && this.alphaMultiplier == 1 && this.redOffset == 0 && this.greenOffset == 0 && this.blueOffset == 0 && this.alphaOffset == 0;
		}
		, get_color: function () {
			return (this.redOffset | 0) << 16 | (this.greenOffset | 0) << 8 | (this.blueOffset | 0);
		}
		, set_color: function (value) {
			this.redOffset = value >> 16 & 255;
			this.greenOffset = value >> 8 & 255;
			this.blueOffset = value & 255;
			this.redMultiplier = 0;
			this.greenMultiplier = 0;
			this.blueMultiplier = 0;
			return this.get_color();
		}
		, __toLimeColorMatrix: function () {
			return (function ($this) {
				var $r;
				var array = [$this.redMultiplier, 0, 0, 0, $this.redOffset / 255, 0, $this.greenMultiplier, 0, 0, $this.greenOffset / 255, 0, 0, $this.blueMultiplier, 0, $this.blueOffset / 255, 0, 0, 0, $this.alphaMultiplier, $this.alphaOffset / 255];
				var this1;
				if (array != null) this1 = new Float32Array(array); else this1 = null;
				$r = this1;
				return $r;
			}(this));
		}
		, __class__: openfl_geom_ColorTransform
		, __properties__: { set_color: "set_color", get_color: "get_color" }
	};
	var openfl_Lib = function () { };
	$hxClasses["openfl.Lib"] = openfl_Lib;
	openfl_Lib.__name__ = ["openfl", "Lib"];
	openfl_Lib.application = null;
	openfl_Lib["as"] = function (v, c) {
		if (js_Boot.__instanceof(v, c)) return v; else return null;
	};
	openfl_Lib.attach = function (name) {
		return new openfl_display_MovieClip();
	};
	openfl_Lib.embed = $hx_exports.openfl.embed = function (elementName, width, height, background, assetsPrefix) {
		lime_system_System.embed(elementName, width, height, background, assetsPrefix);
	};
	openfl_Lib.getTimer = function () {
		return lime_system_System.getTimer();
	};
	openfl_Lib.getURL = function (request, target) {
		if (target == null) target = "_blank";
		window.open(request.url, target);
	};
	openfl_Lib.notImplemented = function (api) {
		if (!openfl_Lib.__sentWarnings.exists(api)) {
			openfl_Lib.__sentWarnings.set(api, true);
			haxe_Log.trace("Warning: " + api + " is not implemented", { fileName: "Lib.hx", lineNumber: 113, className: "openfl.Lib", methodName: "notImplemented" });
		}
	};
	openfl_Lib.preventDefaultTouchMove = function () {
		window.document.addEventListener("touchmove", function (evt) {
			evt.preventDefault();
		}, false);
	};
	openfl_Lib.trace = function (arg) {
		haxe_Log.trace(arg, { fileName: "Lib.hx", lineNumber: 144, className: "openfl.Lib", methodName: "trace" });
	};
	var openfl_Memory = function () { };
	$hxClasses["openfl.Memory"] = openfl_Memory;
	openfl_Memory.__name__ = ["openfl", "Memory"];
	openfl_Memory.gcRef = null;
	openfl_Memory.len = null;
	openfl_Memory._setPositionTemporarily = function (position, action) {
		var oldPosition = openfl_Memory.gcRef.position;
		openfl_Memory.gcRef.position = position;
		var value = action();
		openfl_Memory.gcRef.position = oldPosition;
		return value;
	};
	openfl_Memory.getByte = function (addr) {
		if (addr < 0 || addr + 1 > openfl_Memory.len) throw new js__$Boot_HaxeError("Bad address");
		return openfl_Memory.gcRef.data.getInt8(addr);
	};
	openfl_Memory.getDouble = function (addr) {
		if (addr < 0 || addr + 8 > openfl_Memory.len) throw new js__$Boot_HaxeError("Bad address");
		return openfl_Memory._setPositionTemporarily(addr, function () {
			return openfl_Memory.gcRef.readDouble();
		});
	};
	openfl_Memory.getFloat = function (addr) {
		if (addr < 0 || addr + 4 > openfl_Memory.len) throw new js__$Boot_HaxeError("Bad address");
		return openfl_Memory._setPositionTemporarily(addr, function () {
			return openfl_Memory.gcRef.readFloat();
		});
	};
	openfl_Memory.getI32 = function (addr) {
		if (addr < 0 || addr + 4 > openfl_Memory.len) throw new js__$Boot_HaxeError("Bad address");
		return openfl_Memory._setPositionTemporarily(addr, function () {
			return openfl_Memory.gcRef.readInt();
		});
	};
	openfl_Memory.getUI16 = function (addr) {
		if (addr < 0 || addr + 2 > openfl_Memory.len) throw new js__$Boot_HaxeError("Bad address");
		return openfl_Memory._setPositionTemporarily(addr, function () {
			return openfl_Memory.gcRef.readUnsignedShort();
		});
	};
	openfl_Memory.select = function (inBytes) {
		openfl_Memory.gcRef = inBytes;
		if (inBytes != null) openfl_Memory.len = inBytes.length; else openfl_Memory.len = 0;
	};
	openfl_Memory.setByte = function (addr, v) {
		if (addr < 0 || addr + 1 > openfl_Memory.len) throw new js__$Boot_HaxeError("Bad address");
		openfl_Memory.gcRef.data.setUint8(addr, v);
	};
	openfl_Memory.setDouble = function (addr, v) {
		if (addr < 0 || addr + 8 > openfl_Memory.len) throw new js__$Boot_HaxeError("Bad address");
		openfl_Memory._setPositionTemporarily(addr, function () {
			openfl_Memory.gcRef.writeDouble(v);
		});
	};
	openfl_Memory.setFloat = function (addr, v) {
		if (addr < 0 || addr + 4 > openfl_Memory.len) throw new js__$Boot_HaxeError("Bad address");
		openfl_Memory._setPositionTemporarily(addr, function () {
			openfl_Memory.gcRef.writeFloat(v);
		});
	};
	openfl_Memory.setI16 = function (addr, v) {
		if (addr < 0 || addr + 2 > openfl_Memory.len) throw new js__$Boot_HaxeError("Bad address");
		openfl_Memory._setPositionTemporarily(addr, function () {
			openfl_Memory.gcRef.writeUnsignedShort(v);
		});
	};
	openfl_Memory.setI32 = function (addr, v) {
		if (addr < 0 || addr + 4 > openfl_Memory.len) throw new js__$Boot_HaxeError("Bad address");
		openfl_Memory._setPositionTemporarily(addr, function () {
			openfl_Memory.gcRef.writeInt(v);
		});
	};
	var openfl__$Vector_Vector_$Impl_$ = {};
	$hxClasses["openfl._Vector.Vector_Impl_"] = openfl__$Vector_Vector_$Impl_$;
	openfl__$Vector_Vector_$Impl_$.__name__ = ["openfl", "_Vector", "Vector_Impl_"];
	openfl__$Vector_Vector_$Impl_$.__properties__ = { set_fixed: "set_fixed", get_fixed: "get_fixed", set_length: "set_length", get_length: "get_length" }
	openfl__$Vector_Vector_$Impl_$._new = function (length, fixed) {
		if (fixed == null) fixed = false;
		if (length == null) length = 0;
		var this1;
		this1 = new openfl_VectorData();
		var this2;
		this2 = new Array(length);
		this1.data = this2;
		this1.length = length;
		this1.fixed = fixed;
		return this1;
	};
	openfl__$Vector_Vector_$Impl_$.concat = function (this1, a) {
		var vectorData = new openfl_VectorData();
		if (a != null) vectorData.length = this1.length + a.length; else vectorData.length = this1.length;
		vectorData.fixed = false;
		var this2;
		this2 = new Array(vectorData.length);
		vectorData.data = this2;
		haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, vectorData.data, 0, this1.length);
		if (a != null) haxe_ds__$Vector_Vector_$Impl_$.blit(a.data, 0, vectorData.data, this1.length, a.length);
		return vectorData;
	};
	openfl__$Vector_Vector_$Impl_$.copy = function (this1) {
		var vectorData = new openfl_VectorData();
		vectorData.length = this1.length;
		vectorData.fixed = this1.fixed;
		var this2;
		this2 = new Array(this1.length);
		vectorData.data = this2;
		haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, vectorData.data, 0, this1.length);
		return vectorData;
	};
	openfl__$Vector_Vector_$Impl_$.iterator = function (this1) {
		return new openfl_VectorDataIterator(this1);
	};
	openfl__$Vector_Vector_$Impl_$.join = function (this1, sep) {
		var output = "";
		var _g1 = 0;
		var _g = this1.length;
		while (_g1 < _g) {
			var i = _g1++;
			if (i > 0) output += sep;
			output += Std.string(this1.data[i]);
		}
		return output;
	};
	openfl__$Vector_Vector_$Impl_$.pop = function (this1) {
		var value = null;
		if (!this1.fixed) {
			if (this1.length > 0) {
				this1.length--;
				value = this1.data[this1.length];
			}
		}
		return value;
	};
	openfl__$Vector_Vector_$Impl_$.push = function (this1, x) {
		if (!this1.fixed) {
			this1.length++;
			if (this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, data, 0, this1.data.length);
				this1.data = data;
			}
			this1.data[this1.length - 1] = x;
		}
		return this1.length;
	};
	openfl__$Vector_Vector_$Impl_$.reverse = function (this1) {
		var data;
		var this2;
		this2 = new Array(this1.length);
		data = this2;
		var _g1 = 0;
		var _g = this1.length;
		while (_g1 < _g) {
			var i = _g1++;
			data[this1.length - 1 - i] = this1.data[i];
		}
		this1.data = data;
	};
	openfl__$Vector_Vector_$Impl_$.shift = function (this1) {
		if (!this1.fixed && this1.length > 0) {
			this1.length--;
			var value = this1.data[0];
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 1, this1.data, 0, this1.length);
			return value;
		}
		return null;
	};
	openfl__$Vector_Vector_$Impl_$.unshift = function (this1, x) {
		if (!this1.fixed) {
			this1.length++;
			if (this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.length + 10);
				data = this2;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, data, 1, this1.data.length);
				this1.data = data;
			} else haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, this1.data, 1, this1.length - 1);
			this1.data[0] = x;
		}
	};
	openfl__$Vector_Vector_$Impl_$.slice = function (this1, pos, end) {
		if (end == null) end = 0;
		if (pos == null) pos = 0;
		if (pos < 0) pos += this1.length;
		if (end <= 0) end += this1.length;
		if (end > this1.length) end = this1.length;
		var length = end - pos;
		if (length <= 0 || length > this1.length) length = this1.length;
		var vectorData = new openfl_VectorData();
		vectorData.length = end - pos;
		vectorData.fixed = true;
		var this2;
		this2 = new Array(length);
		vectorData.data = this2;
		haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, pos, vectorData.data, 0, length);
		return vectorData;
	};
	openfl__$Vector_Vector_$Impl_$.sort = function (this1, f) {
		var array = haxe_ds__$Vector_Vector_$Impl_$.toArray(this1.data);
		array.sort(f);
		var vec;
		var this2;
		this2 = new Array(array.length);
		vec = this2;
		var _g1 = 0;
		var _g = array.length;
		while (_g1 < _g) {
			var i = _g1++;
			vec[i] = array[i];
		}
		this1.data = vec;
	};
	openfl__$Vector_Vector_$Impl_$.splice = function (this1, pos, len) {
		if (pos < 0) pos += this1.length;
		if (pos + len > this1.length) len = this1.length - pos;
		if (len < 0) len = 0;
		var vectorData = new openfl_VectorData();
		vectorData.length = len;
		vectorData.fixed = false;
		var this2;
		this2 = new Array(len);
		vectorData.data = this2;
		haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, pos, vectorData.data, 0, len);
		if (len > 0) {
			this1.length -= len;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, pos + len, this1.data, pos, this1.length - pos);
		}
		return vectorData;
	};
	openfl__$Vector_Vector_$Impl_$.toString = function (this1) {
		return haxe_ds__$Vector_Vector_$Impl_$.toArray(this1.data).toString();
	};
	openfl__$Vector_Vector_$Impl_$.indexOf = function (this1, x, from) {
		if (from == null) from = 0;
		var value = -1;
		var _g1 = from;
		var _g = this1.length;
		while (_g1 < _g) {
			var i = _g1++;
			if (this1.data[i] == x) {
				value = i;
				break;
			}
		}
		return value;
	};
	openfl__$Vector_Vector_$Impl_$.lastIndexOf = function (this1, x, from) {
		if (from == null) from = 0;
		var value = -1;
		var i = this1.length - 1;
		while (i >= from) {
			if (this1.data[i] == x) {
				value = i;
				break;
			}
			i--;
		}
		return value;
	};
	openfl__$Vector_Vector_$Impl_$.ofArray = function (a) {
		var vectorData = new openfl_VectorData();
		vectorData.length = a.length;
		vectorData.fixed = true;
		var vec;
		var this1;
		this1 = new Array(a.length);
		vec = this1;
		var _g1 = 0;
		var _g = a.length;
		while (_g1 < _g) {
			var i = _g1++;
			vec[i] = a[i];
		}
		vectorData.data = vec;
		return vectorData;
	};
	openfl__$Vector_Vector_$Impl_$.convert = function (v) {
		return v;
	};
	openfl__$Vector_Vector_$Impl_$.get = function (this1, index) {
		return this1.data[index];
	};
	openfl__$Vector_Vector_$Impl_$.set = function (this1, key, value) {
		if (!this1.fixed) {
			if (key >= this1.length) this1.length = key + 1;
			if (this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, data, 0, this1.data.length);
				this1.data = data;
			}
		}
		return this1.data[key] = value;
	};
	openfl__$Vector_Vector_$Impl_$.fromArray = function (value) {
		var vectorData = new openfl_VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		var vec;
		var this1;
		this1 = new Array(value.length);
		vec = this1;
		var _g1 = 0;
		var _g = value.length;
		while (_g1 < _g) {
			var i = _g1++;
			vec[i] = value[i];
		}
		vectorData.data = vec;
		return vectorData;
	};
	openfl__$Vector_Vector_$Impl_$.toArray = function (this1) {
		var value = [];
		var _g1 = 0;
		var _g = this1.data.length;
		while (_g1 < _g) {
			var i = _g1++;
			value.push(this1.data[i]);
		}
		return value;
	};
	openfl__$Vector_Vector_$Impl_$.fromHaxeVector = function (value) {
		var vectorData = new openfl_VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		vectorData.data = value;
		return vectorData;
	};
	openfl__$Vector_Vector_$Impl_$.toHaxeVector = function (this1) {
		return this1.data;
	};
	openfl__$Vector_Vector_$Impl_$.fromVectorData = function (value) {
		return value;
	};
	openfl__$Vector_Vector_$Impl_$.toVectorData = function (this1) {
		return this1;
	};
	openfl__$Vector_Vector_$Impl_$.get_length = function (this1) {
		return this1.length;
	};
	openfl__$Vector_Vector_$Impl_$.set_length = function (this1, value) {
		if (!this1.fixed) {
			if (value > this1.length) {
				var data;
				var this2;
				this2 = new Array(value);
				data = this2;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, data, 0, Std["int"](Math.min(this1.data.length, value)));
				this1.data = data;
			}
			this1.length = value;
		}
		return value;
	};
	openfl__$Vector_Vector_$Impl_$.get_fixed = function (this1) {
		return this1.fixed;
	};
	openfl__$Vector_Vector_$Impl_$.set_fixed = function (this1, value) {
		return this1.fixed = value;
	};
	var openfl_VectorData = function () {
		this.length = 0;
	};
	$hxClasses["openfl.VectorData"] = openfl_VectorData;
	openfl_VectorData.__name__ = ["openfl", "VectorData"];
	openfl_VectorData.prototype = {
		__class__: openfl_VectorData
	};
	var openfl_VectorDataIterator = function (data) {
		this.index = 0;
		this.vectorData = data;
	};
	$hxClasses["openfl.VectorDataIterator"] = openfl_VectorDataIterator;
	openfl_VectorDataIterator.__name__ = ["openfl", "VectorDataIterator"];
	openfl_VectorDataIterator.prototype = {
		hasNext: function () {
			return this.index < this.vectorData.length;
		}
		, next: function () {
			var index = this.index++;
			return this.vectorData.data[index];
		}
		, __class__: openfl_VectorDataIterator
	};
	var openfl__$internal_renderer_AbstractMaskManager = function (renderSession) {
		this.renderSession = renderSession;
	};
	$hxClasses["openfl._internal.renderer.AbstractMaskManager"] = openfl__$internal_renderer_AbstractMaskManager;
	openfl__$internal_renderer_AbstractMaskManager.__name__ = ["openfl", "_internal", "renderer", "AbstractMaskManager"];
	openfl__$internal_renderer_AbstractMaskManager.prototype = {
		pushMask: function (mask) {
		}
		, pushRect: function (rect, transform) {
		}
		, popMask: function () {
		}
		, popRect: function () {
		}
		, saveState: function () {
		}
		, restoreState: function () {
		}
		, __class__: openfl__$internal_renderer_AbstractMaskManager
	};
	var openfl__$internal_renderer_AbstractRenderer = function (width, height) {
		this.width = width;
		this.height = height;
	};
	$hxClasses["openfl._internal.renderer.AbstractRenderer"] = openfl__$internal_renderer_AbstractRenderer;
	openfl__$internal_renderer_AbstractRenderer.__name__ = ["openfl", "_internal", "renderer", "AbstractRenderer"];
	openfl__$internal_renderer_AbstractRenderer.prototype = {
		render: function (stage) {
		}
		, renderShape: function (shape) {
		}
		, setViewport: function (x, y, width, height) {
		}
		, resize: function (width, height) {
		}
		, __class__: openfl__$internal_renderer_AbstractRenderer
	};
	var openfl__$internal_renderer_DrawCommandBuffer = function () {
		this.types = [];
		this.b = [];
		this.i = [];
		this.f = [];
		this.o = [];
		this.ff = [];
		this.ii = [];
		this.ts = [];
	};
	$hxClasses["openfl._internal.renderer.DrawCommandBuffer"] = openfl__$internal_renderer_DrawCommandBuffer;
	openfl__$internal_renderer_DrawCommandBuffer.__name__ = ["openfl", "_internal", "renderer", "DrawCommandBuffer"];
	openfl__$internal_renderer_DrawCommandBuffer.prototype = {
		append: function (other) {
			var data = new openfl__$internal_renderer_DrawCommandReader(other);
			var _g = 0;
			var _g1 = other.types;
			while (_g < _g1.length) {
				var type = _g1[_g];
				++_g;
				switch (type[1]) {
					case 0:
						var c;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
						c = data;
						this.beginBitmapFill(c.buffer.o[c.oPos], c.buffer.o[c.oPos + 1], c.buffer.b[c.bPos], c.buffer.b[c.bPos + 1]);
						break;
					case 1:
						var c1;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
						c1 = data;
						this.beginFill(c1.buffer.i[c1.iPos], c1.buffer.f[c1.fPos]);
						break;
					case 2:
						var c2;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
						c2 = data;
						this.beginGradientFill(c2.buffer.o[c2.oPos], c2.buffer.ii[c2.iiPos], c2.buffer.ff[c2.ffPos], c2.buffer.ii[c2.iiPos + 1], c2.buffer.o[c2.oPos + 1], c2.buffer.o[c2.oPos + 2], c2.buffer.o[c2.oPos + 3], c2.buffer.o[c2.oPos + 4]);
						break;
					case 3:
						var c3;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
						c3 = data;
						this.cubicCurveTo(c3.buffer.f[c3.fPos], c3.buffer.f[c3.fPos + 1], c3.buffer.f[c3.fPos + 3], c3.buffer.f[c3.fPos + 4], c3.buffer.f[c3.fPos + 5], c3.buffer.f[c3.fPos + 6]);
						break;
					case 4:
						var c4;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
						c4 = data;
						this.curveTo(c4.buffer.f[c4.fPos], c4.buffer.f[c4.fPos + 1], c4.buffer.f[c4.fPos + 2], c4.buffer.f[c4.fPos + 3]);
						break;
					case 5:
						var c5;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
						c5 = data;
						this.drawCircle(c5.buffer.f[c5.fPos], c5.buffer.f[c5.fPos + 1], c5.buffer.f[c5.fPos + 2]);
						break;
					case 6:
						var c6;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
						c6 = data;
						this.drawEllipse(c6.buffer.f[c6.fPos], c6.buffer.f[c6.fPos + 1], c6.buffer.f[c6.fPos + 2], c6.buffer.f[c6.fPos + 3]);
						break;
					case 7:
						var c7;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_PATH;
						c7 = data;
						this.drawPath(c7.buffer.o[c7.oPos], c7.buffer.o[c7.oPos + 1], c7.buffer.o[c7.oPos + 2]);
						break;
					case 8:
						var c8;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
						c8 = data;
						this.drawRect(c8.buffer.f[c8.fPos], c8.buffer.f[c8.fPos + 1], c8.buffer.f[c8.fPos + 2], c8.buffer.f[c8.fPos + 3]);
						break;
					case 9:
						var c9;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
						c9 = data;
						this.drawRoundRect(c9.buffer.f[c9.fPos], c9.buffer.f[c9.fPos + 1], c9.buffer.f[c9.fPos + 2], c9.buffer.f[c9.fPos + 3], c9.buffer.f[c9.fPos + 4], c9.buffer.f[c9.fPos + 5]);
						break;
					case 10:
						var c10;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TILES;
						c10 = data;
						this.drawTiles(c10.buffer.ts[c10.tsPos], c10.buffer.ff[c10.ffPos], c10.buffer.b[c10.bPos], c10.buffer.i[c10.iPos], c10.buffer.o[c10.oPos], c10.buffer.i[c10.iPos + 1]);
						break;
					case 11:
						var c11;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
						c11 = data;
						this.drawTriangles(c11.buffer.o[c11.oPos], c11.buffer.o[c11.oPos + 1], c11.buffer.o[c11.oPos + 2], c11.buffer.o[c11.oPos + 3], c11.buffer.o[c11.oPos + 4], c11.buffer.i[c11.iPos]);
						break;
					case 12:
						var c12;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
						c12 = data;
						this.endFill();
						break;
					case 13:
						var c13;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
						c13 = data;
						this.lineBitmapStyle(c13.buffer.o[c13.oPos], c13.buffer.o[c13.oPos + 1], c13.buffer.b[c13.bPos], c13.buffer.b[c13.bPos + 1]);
						break;
					case 14:
						var c14;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
						c14 = data;
						this.lineGradientStyle(c14.buffer.o[c14.oPos], c14.buffer.ii[c14.iiPos], c14.buffer.ff[c14.ffPos], c14.buffer.ii[c14.iiPos + 1], c14.buffer.o[c14.oPos + 1], c14.buffer.o[c14.oPos + 2], c14.buffer.o[c14.oPos + 3], c14.buffer.o[c14.oPos + 4]);
						break;
					case 15:
						var c15;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
						c15 = data;
						this.lineStyle(c15.buffer.o[c15.oPos], c15.buffer.o[c15.oPos + 1], c15.buffer.o[c15.oPos + 2], c15.buffer.o[c15.oPos + 3], c15.buffer.o[c15.oPos + 4], c15.buffer.o[c15.oPos + 5], c15.buffer.o[c15.oPos + 6], c15.buffer.o[c15.oPos + 7]);
						break;
					case 16:
						var c16;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
						c16 = data;
						this.lineTo(c16.buffer.f[c16.fPos], c16.buffer.f[c16.fPos + 1]);
						break;
					case 17:
						var c17;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
						c17 = data;
						this.moveTo(c17.buffer.f[c17.fPos], c17.buffer.f[c17.fPos + 1]);
						break;
					case 18:
						var c18;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX;
						c18 = data;
						this.overrideMatrix(c18.buffer.o[c18.oPos]);
						break;
					default:
				}
			}
			data.destroy();
			return other;
		}
		, beginBitmapFill: function (bitmap, matrix, repeat, smooth) {
			this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL);
			this.o.push(bitmap);
			this.o.push(matrix);
			this.b.push(repeat);
			this.b.push(smooth);
		}
		, beginFill: function (color, alpha) {
			this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_FILL);
			this.i.push(color);
			this.f.push(alpha);
		}
		, beginGradientFill: function (type, colors, alphas, ratios, matrix, spreadMethod, interpolationMethod, focalPointRatio) {
			this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL);
			this.o.push(type);
			this.ii.push(colors);
			this.ff.push(alphas);
			this.ii.push(ratios);
			this.o.push(matrix);
			this.o.push(spreadMethod);
			this.o.push(interpolationMethod);
			this.o.push(focalPointRatio);
		}
		, clear: function () {
			this.types.splice(0, this.types.length);
			this.b.splice(0, this.b.length);
			this.i.splice(0, this.i.length);
			this.f.splice(0, this.f.length);
			this.o.splice(0, this.o.length);
			this.ff.splice(0, this.ff.length);
			this.ii.splice(0, this.ii.length);
			this.ts.splice(0, this.ts.length);
		}
		, copy: function () {
			var copy = new openfl__$internal_renderer_DrawCommandBuffer();
			copy.append(this);
			return copy;
		}
		, cubicCurveTo: function (controlX1, controlY1, controlX2, controlY2, anchorX, anchorY) {
			this.types.push(openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO);
			this.f.push(controlX1);
			this.f.push(controlY1);
			this.f.push(controlX2);
			this.f.push(controlY2);
			this.f.push(anchorX);
			this.f.push(anchorY);
		}
		, curveTo: function (controlX, controlY, anchorX, anchorY) {
			this.types.push(openfl__$internal_renderer_DrawCommandType.CURVE_TO);
			this.f.push(controlX);
			this.f.push(controlY);
			this.f.push(anchorX);
			this.f.push(anchorY);
		}
		, destroy: function () {
			this.clear();
			this.types = null;
			this.b = null;
			this.i = null;
			this.f = null;
			this.o = null;
			this.ff = null;
			this.ii = null;
			this.ts = null;
		}
		, drawCircle: function (x, y, radius) {
			this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE);
			this.f.push(x);
			this.f.push(y);
			this.f.push(radius);
		}
		, drawEllipse: function (x, y, width, height) {
			this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE);
			this.f.push(x);
			this.f.push(y);
			this.f.push(width);
			this.f.push(height);
		}
		, drawPath: function (commands, data, winding) {
			this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_PATH);
			this.o.push(commands);
			this.o.push(data);
			this.o.push(winding);
		}
		, drawRect: function (x, y, width, height) {
			this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_RECT);
			this.f.push(x);
			this.f.push(y);
			this.f.push(width);
			this.f.push(height);
		}
		, drawRoundRect: function (x, y, width, height, rx, ry) {
			this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT);
			this.f.push(x);
			this.f.push(y);
			this.f.push(width);
			this.f.push(height);
			this.f.push(rx);
			this.f.push(ry);
		}
		, drawTiles: function (sheet, tileData, smooth, flags, shader, count) {
			this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_TILES);
			this.ts.push(sheet);
			this.ff.push(tileData);
			this.b.push(smooth);
			this.i.push(flags);
			this.o.push(shader);
			this.i.push(count);
		}
		, drawTriangles: function (vertices, indices, uvtData, culling, colors, blendMode) {
			this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES);
			this.o.push(vertices);
			this.o.push(indices);
			this.o.push(uvtData);
			this.o.push(culling);
			this.o.push(colors);
			this.i.push(blendMode);
		}
		, endFill: function () {
			this.types.push(openfl__$internal_renderer_DrawCommandType.END_FILL);
		}
		, lineBitmapStyle: function (bitmap, matrix, repeat, smooth) {
			this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE);
			this.o.push(bitmap);
			this.o.push(matrix);
			this.b.push(repeat);
			this.b.push(smooth);
		}
		, lineGradientStyle: function (type, colors, alphas, ratios, matrix, spreadMethod, interpolationMethod, focalPointRatio) {
			this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE);
			this.o.push(type);
			this.ii.push(colors);
			this.ff.push(alphas);
			this.ii.push(ratios);
			this.o.push(matrix);
			this.o.push(spreadMethod);
			this.o.push(interpolationMethod);
			this.o.push(focalPointRatio);
		}
		, lineStyle: function (thickness, color, alpha, pixelHinting, scaleMode, caps, joints, miterLimit) {
			this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_STYLE);
			this.o.push(thickness);
			this.o.push(color);
			this.o.push(alpha);
			this.o.push(pixelHinting);
			this.o.push(scaleMode);
			this.o.push(caps);
			this.o.push(joints);
			this.o.push(miterLimit);
		}
		, lineTo: function (x, y) {
			this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_TO);
			this.f.push(x);
			this.f.push(y);
		}
		, moveTo: function (x, y) {
			this.types.push(openfl__$internal_renderer_DrawCommandType.MOVE_TO);
			this.f.push(x);
			this.f.push(y);
		}
		, overrideMatrix: function (matrix) {
			this.types.push(openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX);
			this.o.push(matrix);
		}
		, get_length: function () {
			return this.types.length;
		}
		, __class__: openfl__$internal_renderer_DrawCommandBuffer
		, __properties__: { get_length: "get_length" }
	};
	var openfl__$internal_renderer_DrawCommandReader = function (buffer) {
		this.buffer = buffer;
		this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
		this.prev = openfl__$internal_renderer_DrawCommandType.UNKNOWN;
	};
	$hxClasses["openfl._internal.renderer.DrawCommandReader"] = openfl__$internal_renderer_DrawCommandReader;
	openfl__$internal_renderer_DrawCommandReader.__name__ = ["openfl", "_internal", "renderer", "DrawCommandReader"];
	openfl__$internal_renderer_DrawCommandReader.prototype = {
		advance: function () {
			var _g = this.prev;
			switch (_g[1]) {
				case 0:
					this.oPos += 2;
					this.bPos += 2;
					break;
				case 1:
					this.iPos += 1;
					this.fPos += 1;
					break;
				case 2:
					this.oPos += 5;
					this.iiPos += 2;
					this.ffPos += 1;
					break;
				case 3:
					this.fPos += 6;
					break;
				case 4:
					this.fPos += 4;
					break;
				case 5:
					this.fPos += 3;
					break;
				case 6:
					this.fPos += 4;
					break;
				case 7:
					this.oPos += 3;
					break;
				case 8:
					this.fPos += 4;
					break;
				case 9:
					this.fPos += 6;
					break;
				case 10:
					this.tsPos += 1;
					this.ffPos += 1;
					this.bPos += 1;
					this.iPos += 2;
					this.oPos += 1;
					break;
				case 11:
					this.oPos += 5;
					this.iPos += 1;
					break;
				case 12:
					break;
				case 13:
					this.oPos += 2;
					this.bPos += 2;
					break;
				case 14:
					this.oPos += 5;
					this.iiPos += 2;
					this.ffPos += 1;
					break;
				case 15:
					this.oPos += 8;
					break;
				case 16:
					this.fPos += 2;
					break;
				case 17:
					this.fPos += 2;
					break;
				case 18:
					this.oPos += 1;
					break;
				default:
			}
		}
		, bool: function (index) {
			return this.buffer.b[this.bPos + index];
		}
		, destroy: function () {
			this.buffer = null;
			this.reset();
		}
		, fArr: function (index) {
			return this.buffer.ff[this.ffPos + index];
		}
		, 'float': function (index) {
			return this.buffer.f[this.fPos + index];
		}
		, iArr: function (index) {
			return this.buffer.ii[this.iiPos + index];
		}
		, 'int': function (index) {
			return this.buffer.i[this.iPos + index];
		}
		, obj: function (index) {
			return this.buffer.o[this.oPos + index];
		}
		, readBeginBitmapFill: function () {
			this.advance();
			this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
			return this;
		}
		, readBeginFill: function () {
			this.advance();
			this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
			return this;
		}
		, readBeginGradientFill: function () {
			this.advance();
			this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
			return this;
		}
		, readCubicCurveTo: function () {
			this.advance();
			this.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
			return this;
		}
		, readCurveTo: function () {
			this.advance();
			this.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
			return this;
		}
		, readDrawCircle: function () {
			this.advance();
			this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
			return this;
		}
		, readDrawEllipse: function () {
			this.advance();
			this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
			return this;
		}
		, readDrawPath: function () {
			this.advance();
			this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_PATH;
			return this;
		}
		, readDrawRect: function () {
			this.advance();
			this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
			return this;
		}
		, readDrawRoundRect: function () {
			this.advance();
			this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
			return this;
		}
		, readDrawTiles: function () {
			this.advance();
			this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TILES;
			return this;
		}
		, readDrawTriangles: function () {
			this.advance();
			this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
			return this;
		}
		, readEndFill: function () {
			this.advance();
			this.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
			return this;
		}
		, readLineBitmapStyle: function () {
			this.advance();
			this.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
			return this;
		}
		, readLineGradientStyle: function () {
			this.advance();
			this.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
			return this;
		}
		, readLineStyle: function () {
			this.advance();
			this.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
			return this;
		}
		, readLineTo: function () {
			this.advance();
			this.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
			return this;
		}
		, readMoveTo: function () {
			this.advance();
			this.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
			return this;
		}
		, readOverrideMatrix: function () {
			this.advance();
			this.prev = openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX;
			return this;
		}
		, reset: function () {
			this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
		}
		, skip: function (type) {
			this.advance();
			this.prev = type;
		}
		, tileSheet: function (index) {
			return this.buffer.ts[this.tsPos + index];
		}
		, __class__: openfl__$internal_renderer_DrawCommandReader
	};
	var openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$ = {};
	$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginBitmapFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$;
	openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.__name__ = ["openfl", "_internal", "renderer", "_DrawCommandReader", "BeginBitmapFillView_Impl_"];
	openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.__properties__ = { get_smooth: "get_smooth", get_repeat: "get_repeat", get_matrix: "get_matrix", get_bitmap: "get_bitmap" }
	openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$._new = function (d) {
		return d;
	};
	openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap = function (this1) {
		return this1.buffer.o[this1.oPos];
	};
	openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix = function (this1) {
		return this1.buffer.o[this1.oPos + 1];
	};
	openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat = function (this1) {
		return this1.buffer.b[this1.bPos];
	};
	openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth = function (this1) {
		return this1.buffer.b[this1.bPos + 1];
	};
	var openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$ = {};
	$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$;
	openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.__name__ = ["openfl", "_internal", "renderer", "_DrawCommandReader", "BeginFillView_Impl_"];
	openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.__properties__ = { get_alpha: "get_alpha", get_color: "get_color" }
	openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$._new = function (d) {
		return d;
	};
	openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color = function (this1) {
		return this1.buffer.i[this1.iPos];
	};
	openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha = function (this1) {
		return this1.buffer.f[this1.fPos];
	};
	var openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$ = {};
	$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginGradientFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$;
	openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.__name__ = ["openfl", "_internal", "renderer", "_DrawCommandReader", "BeginGradientFillView_Impl_"];
	openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.__properties__ = { get_focalPointRatio: "get_focalPointRatio", get_interpolationMethod: "get_interpolationMethod", get_spreadMethod: "get_spreadMethod", get_matrix: "get_matrix", get_ratios: "get_ratios", get_alphas: "get_alphas", get_colors: "get_colors", get_type: "get_type" }
	openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$._new = function (d) {
		return d;
	};
	openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type = function (this1) {
		return this1.buffer.o[this1.oPos];
	};
	openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors = function (this1) {
		return this1.buffer.ii[this1.iiPos];
	};
	openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas = function (this1) {
		return this1.buffer.ff[this1.ffPos];
	};
	openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios = function (this1) {
		return this1.buffer.ii[this1.iiPos + 1];
	};
	openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix = function (this1) {
		return this1.buffer.o[this1.oPos + 1];
	};
	openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod = function (this1) {
		return this1.buffer.o[this1.oPos + 2];
	};
	openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod = function (this1) {
		return this1.buffer.o[this1.oPos + 3];
	};
	openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio = function (this1) {
		return this1.buffer.o[this1.oPos + 4];
	};
	var openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$ = {};
	$hxClasses["openfl._internal.renderer._DrawCommandReader.CubicCurveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$;
	openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.__name__ = ["openfl", "_internal", "renderer", "_DrawCommandReader", "CubicCurveToView_Impl_"];
	openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.__properties__ = { get_anchorY: "get_anchorY", get_anchorX: "get_anchorX", get_controlY2: "get_controlY2", get_controlX2: "get_controlX2", get_controlY1: "get_controlY1", get_controlX1: "get_controlX1" }
	openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$._new = function (d) {
		return d;
	};
	openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1 = function (this1) {
		return this1.buffer.f[this1.fPos];
	};
	openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1 = function (this1) {
		return this1.buffer.f[this1.fPos + 1];
	};
	openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2 = function (this1) {
		return this1.buffer.f[this1.fPos + 3];
	};
	openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2 = function (this1) {
		return this1.buffer.f[this1.fPos + 4];
	};
	openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX = function (this1) {
		return this1.buffer.f[this1.fPos + 5];
	};
	openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY = function (this1) {
		return this1.buffer.f[this1.fPos + 6];
	};
	var openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$ = {};
	$hxClasses["openfl._internal.renderer._DrawCommandReader.CurveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$;
	openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.__name__ = ["openfl", "_internal", "renderer", "_DrawCommandReader", "CurveToView_Impl_"];
	openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.__properties__ = { get_anchorY: "get_anchorY", get_anchorX: "get_anchorX", get_controlY: "get_controlY", get_controlX: "get_controlX" }
	openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$._new = function (d) {
		return d;
	};
	openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX = function (this1) {
		return this1.buffer.f[this1.fPos];
	};
	openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY = function (this1) {
		return this1.buffer.f[this1.fPos + 1];
	};
	openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX = function (this1) {
		return this1.buffer.f[this1.fPos + 2];
	};
	openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY = function (this1) {
		return this1.buffer.f[this1.fPos + 3];
	};
	var openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$ = {};
	$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawCircleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$;
	openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.__name__ = ["openfl", "_internal", "renderer", "_DrawCommandReader", "DrawCircleView_Impl_"];
	openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.__properties__ = { get_radius: "get_radius", get_y: "get_y", get_x: "get_x" }
	openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$._new = function (d) {
		return d;
	};
	openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x = function (this1) {
		return this1.buffer.f[this1.fPos];
	};
	openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y = function (this1) {
		return this1.buffer.f[this1.fPos + 1];
	};
	openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius = function (this1) {
		return this1.buffer.f[this1.fPos + 2];
	};
	var openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$ = {};
	$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawEllipseView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$;
	openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.__name__ = ["openfl", "_internal", "renderer", "_DrawCommandReader", "DrawEllipseView_Impl_"];
	openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.__properties__ = { get_height: "get_height", get_width: "get_width", get_y: "get_y", get_x: "get_x" }
	openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$._new = function (d) {
		return d;
	};
	openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x = function (this1) {
		return this1.buffer.f[this1.fPos];
	};
	openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y = function (this1) {
		return this1.buffer.f[this1.fPos + 1];
	};
	openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width = function (this1) {
		return this1.buffer.f[this1.fPos + 2];
	};
	openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height = function (this1) {
		return this1.buffer.f[this1.fPos + 3];
	};
	var openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$ = {};
	$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawPathView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$;
	openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.__name__ = ["openfl", "_internal", "renderer", "_DrawCommandReader", "DrawPathView_Impl_"];
	openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.__properties__ = { get_winding: "get_winding", get_data: "get_data", get_commands: "get_commands" }
	openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$._new = function (d) {
		return d;
	};
	openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_commands = function (this1) {
		return this1.buffer.o[this1.oPos];
	};
	openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_data = function (this1) {
		return this1.buffer.o[this1.oPos + 1];
	};
	openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_winding = function (this1) {
		return this1.buffer.o[this1.oPos + 2];
	};
	var openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$ = {};
	$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawRectView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$;
	openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.__name__ = ["openfl", "_internal", "renderer", "_DrawCommandReader", "DrawRectView_Impl_"];
	openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.__properties__ = { get_height: "get_height", get_width: "get_width", get_y: "get_y", get_x: "get_x" }
	openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$._new = function (d) {
		return d;
	};
	openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x = function (this1) {
		return this1.buffer.f[this1.fPos];
	};
	openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y = function (this1) {
		return this1.buffer.f[this1.fPos + 1];
	};
	openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width = function (this1) {
		return this1.buffer.f[this1.fPos + 2];
	};
	openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height = function (this1) {
		return this1.buffer.f[this1.fPos + 3];
	};
	var openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$ = {};
	$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawRoundRectView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$;
	openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.__name__ = ["openfl", "_internal", "renderer", "_DrawCommandReader", "DrawRoundRectView_Impl_"];
	openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.__properties__ = { get_ry: "get_ry", get_rx: "get_rx", get_height: "get_height", get_width: "get_width", get_y: "get_y", get_x: "get_x" }
	openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$._new = function (d) {
		return d;
	};
	openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x = function (this1) {
		return this1.buffer.f[this1.fPos];
	};
	openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y = function (this1) {
		return this1.buffer.f[this1.fPos + 1];
	};
	openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width = function (this1) {
		return this1.buffer.f[this1.fPos + 2];
	};
	openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height = function (this1) {
		return this1.buffer.f[this1.fPos + 3];
	};
	openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_rx = function (this1) {
		return this1.buffer.f[this1.fPos + 4];
	};
	openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ry = function (this1) {
		return this1.buffer.f[this1.fPos + 5];
	};
	var openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$ = {};
	$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawTilesView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$;
	openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.__name__ = ["openfl", "_internal", "renderer", "_DrawCommandReader", "DrawTilesView_Impl_"];
	openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.__properties__ = { get_count: "get_count", get_shader: "get_shader", get_flags: "get_flags", get_smooth: "get_smooth", get_tileData: "get_tileData", get_sheet: "get_sheet" }
	openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$._new = function (d) {
		return d;
	};
	openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_sheet = function (this1) {
		return this1.buffer.ts[this1.tsPos];
	};
	openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData = function (this1) {
		return this1.buffer.ff[this1.ffPos];
	};
	openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_smooth = function (this1) {
		return this1.buffer.b[this1.bPos];
	};
	openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags = function (this1) {
		return this1.buffer.i[this1.iPos];
	};
	openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_shader = function (this1) {
		return this1.buffer.o[this1.oPos];
	};
	openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_count = function (this1) {
		return this1.buffer.i[this1.iPos + 1];
	};
	var openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$ = {};
	$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawTrianglesView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$;
	openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.__name__ = ["openfl", "_internal", "renderer", "_DrawCommandReader", "DrawTrianglesView_Impl_"];
	openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.__properties__ = { get_blendMode: "get_blendMode", get_colors: "get_colors", get_culling: "get_culling", get_uvtData: "get_uvtData", get_indices: "get_indices", get_vertices: "get_vertices" }
	openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$._new = function (d) {
		return d;
	};
	openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_vertices = function (this1) {
		return this1.buffer.o[this1.oPos];
	};
	openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_indices = function (this1) {
		return this1.buffer.o[this1.oPos + 1];
	};
	openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_uvtData = function (this1) {
		return this1.buffer.o[this1.oPos + 2];
	};
	openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_culling = function (this1) {
		return this1.buffer.o[this1.oPos + 3];
	};
	openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_colors = function (this1) {
		return this1.buffer.o[this1.oPos + 4];
	};
	openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_blendMode = function (this1) {
		return this1.buffer.i[this1.iPos];
	};
	var openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$ = {};
	$hxClasses["openfl._internal.renderer._DrawCommandReader.EndFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$;
	openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$.__name__ = ["openfl", "_internal", "renderer", "_DrawCommandReader", "EndFillView_Impl_"];
	openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$._new = function (d) {
		return d;
	};
	var openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$ = {};
	$hxClasses["openfl._internal.renderer._DrawCommandReader.LineBitmapStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$;
	openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.__name__ = ["openfl", "_internal", "renderer", "_DrawCommandReader", "LineBitmapStyleView_Impl_"];
	openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.__properties__ = { get_smooth: "get_smooth", get_repeat: "get_repeat", get_matrix: "get_matrix", get_bitmap: "get_bitmap" }
	openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$._new = function (d) {
		return d;
	};
	openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap = function (this1) {
		return this1.buffer.o[this1.oPos];
	};
	openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_matrix = function (this1) {
		return this1.buffer.o[this1.oPos + 1];
	};
	openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat = function (this1) {
		return this1.buffer.b[this1.bPos];
	};
	openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth = function (this1) {
		return this1.buffer.b[this1.bPos + 1];
	};
	var openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$ = {};
	$hxClasses["openfl._internal.renderer._DrawCommandReader.LineGradientStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$;
	openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.__name__ = ["openfl", "_internal", "renderer", "_DrawCommandReader", "LineGradientStyleView_Impl_"];
	openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.__properties__ = { get_focalPointRatio: "get_focalPointRatio", get_interpolationMethod: "get_interpolationMethod", get_spreadMethod: "get_spreadMethod", get_matrix: "get_matrix", get_ratios: "get_ratios", get_alphas: "get_alphas", get_colors: "get_colors", get_type: "get_type" }
	openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$._new = function (d) {
		return d;
	};
	openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type = function (this1) {
		return this1.buffer.o[this1.oPos];
	};
	openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors = function (this1) {
		return this1.buffer.ii[this1.iiPos];
	};
	openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas = function (this1) {
		return this1.buffer.ff[this1.ffPos];
	};
	openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios = function (this1) {
		return this1.buffer.ii[this1.iiPos + 1];
	};
	openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix = function (this1) {
		return this1.buffer.o[this1.oPos + 1];
	};
	openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod = function (this1) {
		return this1.buffer.o[this1.oPos + 2];
	};
	openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod = function (this1) {
		return this1.buffer.o[this1.oPos + 3];
	};
	openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio = function (this1) {
		return this1.buffer.o[this1.oPos + 4];
	};
	var openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$ = {};
	$hxClasses["openfl._internal.renderer._DrawCommandReader.LineStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$;
	openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.__name__ = ["openfl", "_internal", "renderer", "_DrawCommandReader", "LineStyleView_Impl_"];
	openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.__properties__ = { get_miterLimit: "get_miterLimit", get_joints: "get_joints", get_caps: "get_caps", get_scaleMode: "get_scaleMode", get_pixelHinting: "get_pixelHinting", get_alpha: "get_alpha", get_color: "get_color", get_thickness: "get_thickness" }
	openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$._new = function (d) {
		return d;
	};
	openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness = function (this1) {
		return this1.buffer.o[this1.oPos];
	};
	openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color = function (this1) {
		return this1.buffer.o[this1.oPos + 1];
	};
	openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha = function (this1) {
		return this1.buffer.o[this1.oPos + 2];
	};
	openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_pixelHinting = function (this1) {
		return this1.buffer.o[this1.oPos + 3];
	};
	openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_scaleMode = function (this1) {
		return this1.buffer.o[this1.oPos + 4];
	};
	openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps = function (this1) {
		return this1.buffer.o[this1.oPos + 5];
	};
	openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints = function (this1) {
		return this1.buffer.o[this1.oPos + 6];
	};
	openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit = function (this1) {
		return this1.buffer.o[this1.oPos + 7];
	};
	var openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$ = {};
	$hxClasses["openfl._internal.renderer._DrawCommandReader.LineToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$;
	openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.__name__ = ["openfl", "_internal", "renderer", "_DrawCommandReader", "LineToView_Impl_"];
	openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.__properties__ = { get_y: "get_y", get_x: "get_x" }
	openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$._new = function (d) {
		return d;
	};
	openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x = function (this1) {
		return this1.buffer.f[this1.fPos];
	};
	openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y = function (this1) {
		return this1.buffer.f[this1.fPos + 1];
	};
	var openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$ = {};
	$hxClasses["openfl._internal.renderer._DrawCommandReader.MoveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$;
	openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.__name__ = ["openfl", "_internal", "renderer", "_DrawCommandReader", "MoveToView_Impl_"];
	openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.__properties__ = { get_y: "get_y", get_x: "get_x" }
	openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$._new = function (d) {
		return d;
	};
	openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x = function (this1) {
		return this1.buffer.f[this1.fPos];
	};
	openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y = function (this1) {
		return this1.buffer.f[this1.fPos + 1];
	};
	var openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$ = {};
	$hxClasses["openfl._internal.renderer._DrawCommandReader.OverrideMatrixView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$;
	openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.__name__ = ["openfl", "_internal", "renderer", "_DrawCommandReader", "OverrideMatrixView_Impl_"];
	openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.__properties__ = { get_matrix: "get_matrix" }
	openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$._new = function (d) {
		return d;
	};
	openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.get_matrix = function (this1) {
		return this1.buffer.o[this1.oPos];
	};
	var openfl__$internal_renderer_DrawCommandType = $hxClasses["openfl._internal.renderer.DrawCommandType"] = { __ename__: ["openfl", "_internal", "renderer", "DrawCommandType"], __constructs__: ["BEGIN_BITMAP_FILL", "BEGIN_FILL", "BEGIN_GRADIENT_FILL", "CUBIC_CURVE_TO", "CURVE_TO", "DRAW_CIRCLE", "DRAW_ELLIPSE", "DRAW_PATH", "DRAW_RECT", "DRAW_ROUND_RECT", "DRAW_TILES", "DRAW_TRIANGLES", "END_FILL", "LINE_BITMAP_STYLE", "LINE_GRADIENT_STYLE", "LINE_STYLE", "LINE_TO", "MOVE_TO", "OVERRIDE_MATRIX", "UNKNOWN"] };
	openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL = ["BEGIN_BITMAP_FILL", 0];
	openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL.toString = $estr;
	openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
	openfl__$internal_renderer_DrawCommandType.BEGIN_FILL = ["BEGIN_FILL", 1];
	openfl__$internal_renderer_DrawCommandType.BEGIN_FILL.toString = $estr;
	openfl__$internal_renderer_DrawCommandType.BEGIN_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
	openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL = ["BEGIN_GRADIENT_FILL", 2];
	openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL.toString = $estr;
	openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
	openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO = ["CUBIC_CURVE_TO", 3];
	openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO.toString = $estr;
	openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
	openfl__$internal_renderer_DrawCommandType.CURVE_TO = ["CURVE_TO", 4];
	openfl__$internal_renderer_DrawCommandType.CURVE_TO.toString = $estr;
	openfl__$internal_renderer_DrawCommandType.CURVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
	openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE = ["DRAW_CIRCLE", 5];
	openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE.toString = $estr;
	openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
	openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE = ["DRAW_ELLIPSE", 6];
	openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE.toString = $estr;
	openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE.__enum__ = openfl__$internal_renderer_DrawCommandType;
	openfl__$internal_renderer_DrawCommandType.DRAW_PATH = ["DRAW_PATH", 7];
	openfl__$internal_renderer_DrawCommandType.DRAW_PATH.toString = $estr;
	openfl__$internal_renderer_DrawCommandType.DRAW_PATH.__enum__ = openfl__$internal_renderer_DrawCommandType;
	openfl__$internal_renderer_DrawCommandType.DRAW_RECT = ["DRAW_RECT", 8];
	openfl__$internal_renderer_DrawCommandType.DRAW_RECT.toString = $estr;
	openfl__$internal_renderer_DrawCommandType.DRAW_RECT.__enum__ = openfl__$internal_renderer_DrawCommandType;
	openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT = ["DRAW_ROUND_RECT", 9];
	openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT.toString = $estr;
	openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT.__enum__ = openfl__$internal_renderer_DrawCommandType;
	openfl__$internal_renderer_DrawCommandType.DRAW_TILES = ["DRAW_TILES", 10];
	openfl__$internal_renderer_DrawCommandType.DRAW_TILES.toString = $estr;
	openfl__$internal_renderer_DrawCommandType.DRAW_TILES.__enum__ = openfl__$internal_renderer_DrawCommandType;
	openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES = ["DRAW_TRIANGLES", 11];
	openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES.toString = $estr;
	openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES.__enum__ = openfl__$internal_renderer_DrawCommandType;
	openfl__$internal_renderer_DrawCommandType.END_FILL = ["END_FILL", 12];
	openfl__$internal_renderer_DrawCommandType.END_FILL.toString = $estr;
	openfl__$internal_renderer_DrawCommandType.END_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
	openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE = ["LINE_BITMAP_STYLE", 13];
	openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE.toString = $estr;
	openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
	openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE = ["LINE_GRADIENT_STYLE", 14];
	openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE.toString = $estr;
	openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
	openfl__$internal_renderer_DrawCommandType.LINE_STYLE = ["LINE_STYLE", 15];
	openfl__$internal_renderer_DrawCommandType.LINE_STYLE.toString = $estr;
	openfl__$internal_renderer_DrawCommandType.LINE_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
	openfl__$internal_renderer_DrawCommandType.LINE_TO = ["LINE_TO", 16];
	openfl__$internal_renderer_DrawCommandType.LINE_TO.toString = $estr;
	openfl__$internal_renderer_DrawCommandType.LINE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
	openfl__$internal_renderer_DrawCommandType.MOVE_TO = ["MOVE_TO", 17];
	openfl__$internal_renderer_DrawCommandType.MOVE_TO.toString = $estr;
	openfl__$internal_renderer_DrawCommandType.MOVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
	openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX = ["OVERRIDE_MATRIX", 18];
	openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX.toString = $estr;
	openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX.__enum__ = openfl__$internal_renderer_DrawCommandType;
	openfl__$internal_renderer_DrawCommandType.UNKNOWN = ["UNKNOWN", 19];
	openfl__$internal_renderer_DrawCommandType.UNKNOWN.toString = $estr;
	openfl__$internal_renderer_DrawCommandType.UNKNOWN.__enum__ = openfl__$internal_renderer_DrawCommandType;
	var openfl__$internal_renderer_GraphicsPaths = function () { };
	$hxClasses["openfl._internal.renderer.GraphicsPaths"] = openfl__$internal_renderer_GraphicsPaths;
	openfl__$internal_renderer_GraphicsPaths.__name__ = ["openfl", "_internal", "renderer", "GraphicsPaths"];
	openfl__$internal_renderer_GraphicsPaths.ellipse = function (points, x, y, rx, ry, segmentCount) {
		var seg = Math.PI * 2 / segmentCount;
		var _g1 = 0;
		var _g = segmentCount + 1;
		while (_g1 < _g) {
			var i = _g1++;
			points.push(x + Math.sin(seg * i) * rx);
			points.push(y + Math.cos(seg * i) * ry);
		}
	};
	openfl__$internal_renderer_GraphicsPaths.cubicCurveTo = function (points, cx, cy, cx2, cy2, x, y) {
		var n = 20;
		var dt = 0;
		var dt2 = 0;
		var dt3 = 0;
		var t2 = 0;
		var t3 = 0;
		var fromX = points[points.length - 2];
		var fromY = points[points.length - 1];
		var px = 0;
		var py = 0;
		var tmp = 0;
		var _g1 = 1;
		var _g = n + 1;
		while (_g1 < _g) {
			var i = _g1++;
			tmp = i / n;
			dt = 1 - tmp;
			dt2 = dt * dt;
			dt3 = dt2 * dt;
			t2 = tmp * tmp;
			t3 = t2 * tmp;
			px = dt3 * fromX + 3 * dt2 * tmp * cx + 3 * dt * t2 * cx2 + t3 * x;
			py = dt3 * fromY + 3 * dt2 * tmp * cy + 3 * dt * t2 * cy2 + t3 * y;
			points.push(px);
			points.push(py);
		}
	};
	openfl__$internal_renderer_GraphicsPaths.curveTo = function (points, cx, cy, x, y) {
		var xa = 0;
		var ya = 0;
		var n = 20;
		var fromX = points[points.length - 2];
		var fromY = points[points.length - 1];
		var px = 0;
		var py = 0;
		var tmp = 0;
		var _g1 = 1;
		var _g = n + 1;
		while (_g1 < _g) {
			var i = _g1++;
			tmp = i / n;
			xa = fromX + (cx - fromX) * tmp;
			ya = fromY + (cy - fromY) * tmp;
			px = xa + (cx + (x - cx) * tmp - xa) * tmp;
			py = ya + (cy + (y - cy) * tmp - ya) * tmp;
			points.push(px);
			points.push(py);
		}
	};
	openfl__$internal_renderer_GraphicsPaths.roundRectangle = function (points, x, y, width, height, rx, ry) {
		var xe = x + width;
		var ye = y + height;
		var cx1 = -rx + rx * openfl__$internal_renderer_GraphicsPaths.SIN45;
		var cx2 = -rx + rx * openfl__$internal_renderer_GraphicsPaths.TAN22;
		var cy1 = -ry + ry * openfl__$internal_renderer_GraphicsPaths.SIN45;
		var cy2 = -ry + ry * openfl__$internal_renderer_GraphicsPaths.TAN22;
		points.push(xe);
		points.push(ye - ry);
		openfl__$internal_renderer_GraphicsPaths.curveTo(points, xe, ye + cy2, xe + cx1, ye + cy1);
		openfl__$internal_renderer_GraphicsPaths.curveTo(points, xe + cx2, ye, xe - rx, ye);
		points.push(x + rx);
		points.push(ye);
		openfl__$internal_renderer_GraphicsPaths.curveTo(points, x - cx2, ye, x - cx1, ye + cy1);
		openfl__$internal_renderer_GraphicsPaths.curveTo(points, x, ye + cy2, x, ye - ry);
		points.push(x);
		points.push(y + ry);
		openfl__$internal_renderer_GraphicsPaths.curveTo(points, x, y - cy2, x - cx1, y - cy1);
		openfl__$internal_renderer_GraphicsPaths.curveTo(points, x - cx2, y, x + rx, y);
		points.push(xe - rx);
		points.push(y);
		openfl__$internal_renderer_GraphicsPaths.curveTo(points, xe + cx2, y, xe + cx1, y - cy1);
		openfl__$internal_renderer_GraphicsPaths.curveTo(points, xe, y - cy2, xe, y + ry);
		points.push(xe);
		points.push(ye - ry);
	};
	var openfl__$internal_renderer_PolyK = function () { };
	$hxClasses["openfl._internal.renderer.PolyK"] = openfl__$internal_renderer_PolyK;
	openfl__$internal_renderer_PolyK.__name__ = ["openfl", "_internal", "renderer", "PolyK"];
	openfl__$internal_renderer_PolyK.triangulate = function (tgs, p) {
		var sign = true;
		var n = p.length >> 1;
		if (n < 3) return [];
		var avl;
		var _g = [];
		var _g1 = 0;
		while (_g1 < n) {
			var i1 = _g1++;
			_g.push(i1);
		}
		avl = _g;
		var i = 0;
		var al = n;
		var earFound = false;
		while (al > 3) {
			var i0 = avl[i % al];
			var i11 = avl[(i + 1) % al];
			var i2 = avl[(i + 2) % al];
			var ax = p[2 * i0];
			var ay = p[2 * i0 + 1];
			var bx = p[2 * i11];
			var by = p[2 * i11 + 1];
			var cx = p[2 * i2];
			var cy = p[2 * i2 + 1];
			earFound = false;
			if (openfl__$internal_renderer_PolyK._convex(ax, ay, bx, by, cx, cy, sign)) {
				earFound = true;
				var _g11 = 0;
				while (_g11 < al) {
					var j = _g11++;
					var vi = avl[j];
					if (vi == i0 || vi == i11 || vi == i2) continue;
					if (openfl__$internal_renderer_PolyK._PointInTriangle(p[2 * vi], p[2 * vi + 1], ax, ay, bx, by, cx, cy)) {
						earFound = false;
						break;
					}
				}
			}
			if (earFound) {
				tgs.push(i0);
				tgs.push(i11);
				tgs.push(i2);
				avl.splice((i + 1) % al, 1);
				al--;
				i = 0;
			} else if (i++ > 3 * al) {
				if (sign) {
					tgs = [];
					var _g12 = [];
					var _g2 = 0;
					while (_g2 < n) {
						var k = _g2++;
						_g12.push(k);
					}
					avl = _g12;
					i = 0;
					al = n;
					sign = false;
				} else {
					haxe_Log.trace("Warning: shape too complex to fill", { fileName: "PolyK.hx", lineNumber: 104, className: "openfl._internal.renderer.PolyK", methodName: "triangulate" });
					return [];
				}
			}
		}
		tgs.push(avl[0]);
		tgs.push(avl[1]);
		tgs.push(avl[2]);
		return tgs;
	};
	openfl__$internal_renderer_PolyK._PointInTriangle = function (px, py, ax, ay, bx, by, cx, cy) {
		var v0x = cx - ax | 0;
		var v0y = cy - ay | 0;
		var v1x = bx - ax | 0;
		var v1y = by - ay | 0;
		var v2x = px - ax | 0;
		var v2y = py - ay | 0;
		var dot00 = v0x * v0x + v0y * v0y;
		var dot01 = v0x * v1x + v0y * v1y;
		var dot02 = v0x * v2x + v0y * v2y;
		var dot11 = v1x * v1x + v1y * v1y;
		var dot12 = v1x * v2x + v1y * v2y;
		var invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
		var u = (dot11 * dot02 - dot01 * dot12) * invDenom;
		var v = (dot00 * dot12 - dot01 * dot02) * invDenom;
		return u >= 0 && v >= 0 && u + v < 1;
	};
	openfl__$internal_renderer_PolyK._convex = function (ax, ay, bx, by, cx, cy, sign) {
		return (ay - by) * (cx - bx) + (bx - ax) * (cy - by) >= 0 == sign;
	};
	var openfl__$internal_renderer_RenderSession = function () {
		this.activeTextures = 0;
	};
	$hxClasses["openfl._internal.renderer.RenderSession"] = openfl__$internal_renderer_RenderSession;
	openfl__$internal_renderer_RenderSession.__name__ = ["openfl", "_internal", "renderer", "RenderSession"];
	openfl__$internal_renderer_RenderSession.prototype = {
		__class__: openfl__$internal_renderer_RenderSession
	};
	var openfl__$internal_renderer_cairo_CairoBitmap = function () { };
	$hxClasses["openfl._internal.renderer.cairo.CairoBitmap"] = openfl__$internal_renderer_cairo_CairoBitmap;
	openfl__$internal_renderer_cairo_CairoBitmap.__name__ = ["openfl", "_internal", "renderer", "cairo", "CairoBitmap"];
	openfl__$internal_renderer_cairo_CairoBitmap.render = function (bitmap, renderSession) {
		if (!bitmap.__renderable || bitmap.__worldAlpha <= 0) return;
		var cairo = renderSession.cairo;
		if (bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
			if (bitmap.__mask != null) renderSession.maskManager.pushMask(bitmap.__mask);
			var transform = bitmap.__renderTransform;
			var scrollRect = bitmap.get_scrollRect();
			if (renderSession.roundPixels) {
				var matrix = transform.__toMatrix3();
				matrix.tx = Math.round(matrix.tx);
				matrix.ty = Math.round(matrix.ty);
				cairo.set_matrix(matrix);
			} else cairo.set_matrix(transform.__toMatrix3());
			var surface = bitmap.bitmapData.getSurface();
			if (surface != null) {
				var pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(surface);
				lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern, bitmap.smoothing ? 1 : 3);
				if (scrollRect != null) {
					cairo.pushGroup();
					cairo.set_source(pattern);
					cairo.newPath();
					cairo.rectangle(scrollRect.x, scrollRect.y, scrollRect.width, scrollRect.height);
					cairo.fill();
					cairo.popGroupToSource();
				} else cairo.set_source(pattern);
				if (bitmap.__worldAlpha == 1) cairo.paint(); else cairo.paintWithAlpha(bitmap.__worldAlpha);
			}
			if (bitmap.__mask != null) renderSession.maskManager.popMask();
		}
	};
	var openfl__$internal_renderer_cairo_CairoGraphics = function () { };
	$hxClasses["openfl._internal.renderer.cairo.CairoGraphics"] = openfl__$internal_renderer_cairo_CairoGraphics;
	openfl__$internal_renderer_cairo_CairoGraphics.__name__ = ["openfl", "_internal", "renderer", "cairo", "CairoGraphics"];
	openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = null;
	openfl__$internal_renderer_cairo_CairoGraphics.bitmapRepeat = null;
	openfl__$internal_renderer_cairo_CairoGraphics.bounds = null;
	openfl__$internal_renderer_cairo_CairoGraphics.cairo = null;
	openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = null;
	openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = null;
	openfl__$internal_renderer_cairo_CairoGraphics.graphics = null;
	openfl__$internal_renderer_cairo_CairoGraphics.hasFill = null;
	openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = null;
	openfl__$internal_renderer_cairo_CairoGraphics.hitTesting = null;
	openfl__$internal_renderer_cairo_CairoGraphics.inversePendingMatrix = null;
	openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix = null;
	openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = null;
	openfl__$internal_renderer_cairo_CairoGraphics.closePath = function () {
		if (openfl__$internal_renderer_cairo_CairoGraphics.strokePattern == null) return;
		openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
		openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern);
		if (!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.strokePreserve();
		openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
	};
	openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern = function (type, colors, alphas, ratios, matrix, spreadMethod, interpolationMethod, focalPointRatio) {
		var pattern = null;
		switch (type[1]) {
			case 0:
				if (matrix == null) matrix = new openfl_geom_Matrix();
				var point = matrix.transformPoint(new openfl_geom_Point(1638.4, 0));
				var x = matrix.tx + openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
				var y = matrix.ty + openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
				pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRadial(x, y, 0, x, y, (point.x - matrix.tx) / 2);
				break;
			case 1:
				if (matrix == null) matrix = new openfl_geom_Matrix();
				var point1 = matrix.transformPoint(new openfl_geom_Point(-819.2, 0));
				var point2 = matrix.transformPoint(new openfl_geom_Point(819.2, 0));
				point1.x += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
				point2.x += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
				point1.y += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
				point2.y += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
				pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createLinear(point1.x, point1.y, point2.x, point2.y);
				break;
		}
		var _g1 = 0;
		var _g = colors.length;
		while (_g1 < _g) {
			var i = _g1++;
			var rgb = colors[i];
			var alpha = alphas[i];
			var r = ((rgb & 16711680) >>> 16) / 255;
			var g = ((rgb & 65280) >>> 8) / 255;
			var b = (rgb & 255) / 255;
			var ratio = ratios[i] / 255;
			if (ratio < 0) ratio = 0;
			if (ratio > 1) ratio = 1;
			lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGBA(pattern, ratio, r, g, b, alpha);
		}
		var mat = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_matrix(pattern);
		mat.tx = openfl__$internal_renderer_cairo_CairoGraphics.bounds.x;
		mat.ty = openfl__$internal_renderer_cairo_CairoGraphics.bounds.y;
		lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix(pattern, mat);
		return pattern;
	};
	openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern = function (bitmapFill, matrix, bitmapRepeat) {
		var pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(bitmapFill.getSurface());
		if (bitmapRepeat) lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_extend(pattern, 1);
		openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = matrix;
		return pattern;
	};
	openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect = function (x, y, width, height, rx, ry) {
		if (ry == -1) ry = rx;
		rx *= 0.5;
		ry *= 0.5;
		if (rx > width / 2) rx = width / 2;
		if (ry > height / 2) ry = height / 2;
		var xe = x + width;
		var ye = y + height;
		var cx1 = -rx + rx * openfl__$internal_renderer_cairo_CairoGraphics.SIN45;
		var cx2 = -rx + rx * openfl__$internal_renderer_cairo_CairoGraphics.TAN22;
		var cy1 = -ry + ry * openfl__$internal_renderer_cairo_CairoGraphics.SIN45;
		var cy2 = -ry + ry * openfl__$internal_renderer_cairo_CairoGraphics.TAN22;
		openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(xe, ye - ry);
		openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe, ye + cy2, xe + cx1, ye + cy1);
		openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe + cx2, ye, xe - rx, ye);
		openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x + rx, ye);
		openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x - cx2, ye, x - cx1, ye + cy1);
		openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x, ye + cy2, x, ye - ry);
		openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x, y + ry);
		openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x, y - cy2, x - cx1, y - cy1);
		openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x - cx2, y, x + rx, y);
		openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(xe - rx, y);
		openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe + cx2, y, xe + cx1, y - cy1);
		openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe, y - cy2, xe, y + ry);
		openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(xe, ye - ry);
	};
	openfl__$internal_renderer_cairo_CairoGraphics.endFill = function () {
		openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
		openfl__$internal_renderer_cairo_CairoGraphics.playCommands(openfl__$internal_renderer_cairo_CairoGraphics.fillCommands, false);
		openfl__$internal_renderer_cairo_CairoGraphics.fillCommands.clear();
	};
	openfl__$internal_renderer_cairo_CairoGraphics.endStroke = function () {
		openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
		openfl__$internal_renderer_cairo_CairoGraphics.playCommands(openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands, true);
		openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
		openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands.clear();
	};
	openfl__$internal_renderer_cairo_CairoGraphics.hitTest = function (graphics, x, y) {
		return false;
	};
	openfl__$internal_renderer_cairo_CairoGraphics.isCCW = function (x1, y1, x2, y2, x3, y3) {
		return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
	};
	openfl__$internal_renderer_cairo_CairoGraphics.normalizeUVT = function (uvt, skipT) {
		if (skipT == null) skipT = false;
		var max = -Infinity;
		var tmp = -Infinity;
		var len = uvt.length;
		var _g1 = 1;
		var _g = len + 1;
		while (_g1 < _g) {
			var t = _g1++;
			if (skipT && t % 3 == 0) continue;
			tmp = uvt.data[t - 1];
			if (max < tmp) max = tmp;
		}
		var result;
		var this1;
		this1 = new openfl_VectorData();
		var this2;
		this2 = new Array(0);
		this1.data = this2;
		this1.length = 0;
		this1.fixed = false;
		result = this1;
		var _g11 = 1;
		var _g2 = len + 1;
		while (_g11 < _g2) {
			var t1 = _g11++;
			if (skipT && t1 % 3 == 0) continue;
			if (!result.fixed) {
				result.length++;
				if (result.data.length < result.length) {
					var data;
					var this3;
					this3 = new Array(result.data.length + 10);
					data = this3;
					haxe_ds__$Vector_Vector_$Impl_$.blit(result.data, 0, data, 0, result.data.length);
					result.data = data;
				}
				result.data[result.length - 1] = uvt.data[t1 - 1] / max;
			}
			result.length;
		}
		return { max: max, uvt: result };
	};
	openfl__$internal_renderer_cairo_CairoGraphics.playCommands = function (commands, stroke) {
		if (stroke == null) stroke = false;
		if (commands.get_length() == 0) return;
		openfl__$internal_renderer_cairo_CairoGraphics.bounds = openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds;
		var offsetX = openfl__$internal_renderer_cairo_CairoGraphics.bounds.x;
		var offsetY = openfl__$internal_renderer_cairo_CairoGraphics.bounds.y;
		var positionX = 0.0;
		var positionY = 0.0;
		var closeGap = false;
		var startX = 0.0;
		var startY = 0.0;
		openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_fillRule(1);
		openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_antialias(3);
		var hasPath = false;
		var data = new openfl__$internal_renderer_DrawCommandReader(commands);
		var _g = 0;
		var _g1 = commands.types;
		try {
			while (_g < _g1.length) {
				var type = _g1[_g];
				++_g;
				switch (type[1]) {
					case 3:
						var c;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
						c = data;
						hasPath = true;
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(c.buffer.f[c.fPos] - offsetX, c.buffer.f[c.fPos + 1] - offsetY, c.buffer.f[c.fPos + 3] - offsetX, c.buffer.f[c.fPos + 4] - offsetY, c.buffer.f[c.fPos + 5] - offsetX, c.buffer.f[c.fPos + 6] - offsetY);
						break;
					case 4:
						var c1;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
						c1 = data;
						hasPath = true;
						openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(c1.buffer.f[c1.fPos] - offsetX, c1.buffer.f[c1.fPos + 1] - offsetY, c1.buffer.f[c1.fPos + 2] - offsetX, c1.buffer.f[c1.fPos + 3] - offsetY);
						break;
					case 5:
						var c2;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
						c2 = data;
						hasPath = true;
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(c2.buffer.f[c2.fPos] - offsetX + c2.buffer.f[c2.fPos + 2], c2.buffer.f[c2.fPos + 1] - offsetY);
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.arc(c2.buffer.f[c2.fPos] - offsetX, c2.buffer.f[c2.fPos + 1] - offsetY, c2.buffer.f[c2.fPos + 2], 0, Math.PI * 2);
						break;
					case 8:
						var c3;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
						c3 = data;
						hasPath = true;
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.rectangle(c3.buffer.f[c3.fPos] - offsetX, c3.buffer.f[c3.fPos + 1] - offsetY, c3.buffer.f[c3.fPos + 2], c3.buffer.f[c3.fPos + 3]);
						break;
					case 6:
						var c4;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
						c4 = data;
						hasPath = true;
						var x = c4.buffer.f[c4.fPos];
						var y = c4.buffer.f[c4.fPos + 1];
						var width = c4.buffer.f[c4.fPos + 2];
						var height = c4.buffer.f[c4.fPos + 3];
						x -= offsetX;
						y -= offsetY;
						var kappa = .5522848;
						var ox = width / 2 * kappa;
						var oy = height / 2 * kappa;
						var xe = x + width;
						var ye = y + height;
						var xm = x + width / 2;
						var ym = y + height / 2;
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x, ym);
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(x, ym - oy, xm - ox, y, xm, y);
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(xm + ox, y, xe, ym - oy, xe, ym);
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(xe, ym + oy, xm + ox, ye, xm, ye);
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(xm - ox, ye, x, ym + oy, x, ym);
						break;
					case 9:
						var c5;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
						c5 = data;
						hasPath = true;
						openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect(c5.buffer.f[c5.fPos] - offsetX, c5.buffer.f[c5.fPos + 1] - offsetY, c5.buffer.f[c5.fPos + 2], c5.buffer.f[c5.fPos + 3], c5.buffer.f[c5.fPos + 4], c5.buffer.f[c5.fPos + 5]);
						break;
					case 16:
						var c6;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
						c6 = data;
						hasPath = true;
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(c6.buffer.f[c6.fPos] - offsetX, c6.buffer.f[c6.fPos + 1] - offsetY);
						positionX = c6.buffer.f[c6.fPos];
						positionY = c6.buffer.f[c6.fPos + 1];
						break;
					case 17:
						var c7;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
						c7 = data;
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(c7.buffer.f[c7.fPos] - offsetX, c7.buffer.f[c7.fPos + 1] - offsetY);
						positionX = c7.buffer.f[c7.fPos];
						positionY = c7.buffer.f[c7.fPos + 1];
						closeGap = true;
						startX = c7.buffer.f[c7.fPos];
						startY = c7.buffer.f[c7.fPos + 1];
						break;
					case 15:
						var c8;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
						c8 = data;
						if (stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) openfl__$internal_renderer_cairo_CairoGraphics.closePath();
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(positionX - offsetX, positionY - offsetY);
						if (c8.buffer.o[c8.oPos] == null) openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = false; else {
							openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
							openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineWidth(c8.buffer.o[c8.oPos] > 0 ? c8.buffer.o[c8.oPos] : 1);
							if (c8.buffer.o[c8.oPos + 6] == null) openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineJoin(1); else openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineJoin((function ($this) {
								var $r;
								var _g2 = c8.buffer.o[c8.oPos + 6];
								$r = (function ($this) {
									var $r;
									switch (_g2[1]) {
										case 0:
											$r = 0;
											break;
										case 2:
											$r = 2;
											break;
										default:
											$r = 1;
									}
									return $r;
								}($this));
								return $r;
							}(this)));
							if (c8.buffer.o[c8.oPos + 5] == null) openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineCap(1); else openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineCap((function ($this) {
								var $r;
								var _g21 = c8.buffer.o[c8.oPos + 5];
								$r = (function ($this) {
									var $r;
									switch (_g21[1]) {
										case 0:
											$r = 0;
											break;
										case 2:
											$r = 2;
											break;
										default:
											$r = 1;
									}
									return $r;
								}($this));
								return $r;
							}(this)));
							openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_miterLimit(c8.buffer.o[c8.oPos + 7] == null ? 3 : c8.buffer.o[c8.oPos + 7]);
							if (c8.buffer.o[c8.oPos + 1] != null) {
								var r = ((c8.buffer.o[c8.oPos + 1] & 16711680) >>> 16) / 255;
								var g = ((c8.buffer.o[c8.oPos + 1] & 65280) >>> 8) / 255;
								var b = (c8.buffer.o[c8.oPos + 1] & 255) / 255;
								if (c8.buffer.o[c8.oPos + 2] == 1 || c8.buffer.o[c8.oPos + 2] == null) openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGB(r, g, b); else openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA(r, g, b, c8.buffer.o[c8.oPos + 2]);
							}
						}
						break;
					case 14:
						var c9;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
						c9 = data;
						if (stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) openfl__$internal_renderer_cairo_CairoGraphics.closePath();
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(positionX - offsetX, positionY - offsetY);
						openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern(c9.buffer.o[c9.oPos], c9.buffer.ii[c9.iiPos], c9.buffer.ff[c9.ffPos], c9.buffer.ii[c9.iiPos + 1], c9.buffer.o[c9.oPos + 1], c9.buffer.o[c9.oPos + 2], c9.buffer.o[c9.oPos + 3], c9.buffer.o[c9.oPos + 4]);
						openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
						break;
					case 13:
						var c10;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
						c10 = data;
						if (stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) openfl__$internal_renderer_cairo_CairoGraphics.closePath();
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(positionX - offsetX, positionY - offsetY);
						openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern(c10.buffer.o[c10.oPos], c10.buffer.o[c10.oPos + 1], c10.buffer.b[c10.bPos]);
						openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
						break;
					case 0:
						var c11;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
						c11 = data;
						openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern(c11.buffer.o[c11.oPos], c11.buffer.o[c11.oPos + 1], c11.buffer.b[c11.bPos]);
						openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = c11.buffer.o[c11.oPos];
						openfl__$internal_renderer_cairo_CairoGraphics.bitmapRepeat = c11.buffer.b[c11.bPos];
						openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
						break;
					case 1:
						var c12;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
						c12 = data;
						if (c12.buffer.f[c12.fPos] < 0.005) openfl__$internal_renderer_cairo_CairoGraphics.hasFill = false; else {
							if (openfl__$internal_renderer_cairo_CairoGraphics.fillPattern != null) openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = null;
							openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA(((c12.buffer.i[c12.iPos] & 16711680) >>> 16) / 255, ((c12.buffer.i[c12.iPos] & 65280) >>> 8) / 255, (c12.buffer.i[c12.iPos] & 255) / 255, c12.buffer.f[c12.fPos]);
							openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
						}
						openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = null;
						break;
					case 2:
						var c13;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
						c13 = data;
						if (openfl__$internal_renderer_cairo_CairoGraphics.fillPattern != null) openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = null;
						openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern(c13.buffer.o[c13.oPos], c13.buffer.ii[c13.iiPos], c13.buffer.ff[c13.ffPos], c13.buffer.ii[c13.iiPos + 1], c13.buffer.o[c13.oPos + 1], c13.buffer.o[c13.oPos + 2], c13.buffer.o[c13.oPos + 3], c13.buffer.o[c13.oPos + 4]);
						openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
						openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = null;
						break;
					case 11:
						var c14;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
						c14 = data;
						var v = c14.buffer.o[c14.oPos];
						var ind = c14.buffer.o[c14.oPos + 1];
						var uvt = c14.buffer.o[c14.oPos + 2];
						var colorFill = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill == null;
						if (colorFill && uvt != null) throw "__break__";
						var width1 = 0;
						var height1 = 0;
						if (!colorFill) {
							if (uvt == null) {
								var this1;
								this1 = new openfl_VectorData();
								var this2;
								this2 = new Array(0);
								this1.data = this2;
								this1.length = 0;
								this1.fixed = false;
								uvt = this1;
								var _g3 = 0;
								var _g22 = v.length / 2 | 0;
								while (_g3 < _g22) {
									var i1 = _g3++;
									if (!uvt.fixed) {
										uvt.length++;
										if (uvt.data.length < uvt.length) {
											var data1;
											var this3;
											this3 = new Array(uvt.data.length + 10);
											data1 = this3;
											haxe_ds__$Vector_Vector_$Impl_$.blit(uvt.data, 0, data1, 0, uvt.data.length);
											uvt.data = data1;
										}
										uvt.data[uvt.length - 1] = v.data[i1 * 2] / openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.width;
									}
									uvt.length;
									if (!uvt.fixed) {
										uvt.length++;
										if (uvt.data.length < uvt.length) {
											var data2;
											var this4;
											this4 = new Array(uvt.data.length + 10);
											data2 = this4;
											haxe_ds__$Vector_Vector_$Impl_$.blit(uvt.data, 0, data2, 0, uvt.data.length);
											uvt.data = data2;
										}
										uvt.data[uvt.length - 1] = v.data[i1 * 2 + 1] / openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.height;
									}
									uvt.length;
								}
							}
							var skipT = c14.buffer.o[c14.oPos + 2].length != v.length;
							var normalizedUVT = openfl__$internal_renderer_cairo_CairoGraphics.normalizeUVT(uvt, skipT);
							var maxUVT = normalizedUVT.max;
							uvt = normalizedUVT.uvt;
							if (maxUVT > 1) {
								width1 = openfl__$internal_renderer_cairo_CairoGraphics.bounds.width | 0;
								height1 = openfl__$internal_renderer_cairo_CairoGraphics.bounds.height | 0;
							} else {
								width1 = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.width;
								height1 = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.height;
							}
						}
						var i = 0;
						var l = ind.length;
						var a_;
						var b_;
						var c_;
						var iax;
						var iay;
						var ibx;
						var iby;
						var icx;
						var icy;
						var x1;
						var y1;
						var x2;
						var y2;
						var x3;
						var y3;
						var uvx1;
						var uvy1;
						var uvx2;
						var uvy2;
						var uvx3;
						var uvy3;
						var denom;
						var t1;
						var t2;
						var t3;
						var t4;
						var dx;
						var dy;
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_antialias(1);
						while (i < l) {
							a_ = i;
							b_ = i + 1;
							c_ = i + 2;
							iax = ind.data[a_] * 2;
							iay = ind.data[a_] * 2 + 1;
							ibx = ind.data[b_] * 2;
							iby = ind.data[b_] * 2 + 1;
							icx = ind.data[c_] * 2;
							icy = ind.data[c_] * 2 + 1;
							x1 = v.data[iax];
							y1 = v.data[iay];
							x2 = v.data[ibx];
							y2 = v.data[iby];
							x3 = v.data[icx];
							y3 = v.data[icy];
							var _g23 = c14.buffer.o[c14.oPos + 3];
							switch (_g23[1]) {
								case 2:
									if (!((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0)) {
										i += 3;
										continue;
									}
									break;
								case 0:
									if ((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0) {
										i += 3;
										continue;
									}
									break;
								default:
							}
							if (colorFill) {
								openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
								openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x1, y1);
								openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x2, y2);
								openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x3, y3);
								openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
								if (!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
								i += 3;
								continue;
							}
							openfl__$internal_renderer_cairo_CairoGraphics.cairo.identityMatrix();
							openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
							openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x1, y1);
							openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x2, y2);
							openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x3, y3);
							openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
							uvx1 = uvt.data[iax] * width1;
							uvx2 = uvt.data[ibx] * width1;
							uvx3 = uvt.data[icx] * width1;
							uvy1 = uvt.data[iay] * height1;
							uvy2 = uvt.data[iby] * height1;
							uvy3 = uvt.data[icy] * height1;
							denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
							if (denom == 0) {
								i += 3;
								continue;
							}
							t1 = -(uvy1 * (x3 - x2) - uvy2 * x3 + uvy3 * x2 + (uvy2 - uvy3) * x1) / denom;
							t2 = (uvy2 * y3 + uvy1 * (y2 - y3) - uvy3 * y2 + (uvy3 - uvy2) * y1) / denom;
							t3 = (uvx1 * (x3 - x2) - uvx2 * x3 + uvx3 * x2 + (uvx2 - uvx3) * x1) / denom;
							t4 = -(uvx2 * y3 + uvx1 * (y2 - y3) - uvx3 * y2 + (uvx3 - uvx2) * y1) / denom;
							dx = (uvx1 * (uvy3 * x2 - uvy2 * x3) + uvy1 * (uvx2 * x3 - uvx3 * x2) + (uvx3 * uvy2 - uvx2 * uvy3) * x1) / denom;
							dy = (uvx1 * (uvy3 * y2 - uvy2 * y3) + uvy1 * (uvx2 * y3 - uvx3 * y2) + (uvx3 * uvy2 - uvx2 * uvy3) * y1) / denom;
							var matrix = new lime_math_Matrix3(t1, t2, t3, t4, dx, dy);
							openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_matrix(matrix);
							openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern);
							if (!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.fill();
							i += 3;
						}
						break;
					case 10:
						var c15;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TILES;
						c15 = data;
						var useScale = (c15.buffer.i[c15.iPos] & 1) > 0;
						var useRotation = (c15.buffer.i[c15.iPos] & 2) > 0;
						var offsetX1 = openfl__$internal_renderer_cairo_CairoGraphics.bounds.x;
						var offsetY1 = openfl__$internal_renderer_cairo_CairoGraphics.bounds.y;
						var useTransform = (c15.buffer.i[c15.iPos] & 16) > 0;
						var useRGB = (c15.buffer.i[c15.iPos] & 4) > 0;
						var useAlpha = (c15.buffer.i[c15.iPos] & 8) > 0;
						var useRect = (c15.buffer.i[c15.iPos] & 32) > 0;
						var useOrigin = (c15.buffer.i[c15.iPos] & 64) > 0;
						var useBlendAdd = (c15.buffer.i[c15.iPos] & 65536) > 0;
						var useBlendOverlay = (c15.buffer.i[c15.iPos] & 4194304) > 0;
						if (useTransform) {
							useScale = false;
							useRotation = false;
						}
						var scaleIndex = 0;
						var rotationIndex = 0;
						var rgbIndex = 0;
						var alphaIndex = 0;
						var transformIndex = 0;
						var numValues = 3;
						if (useRect) if (useOrigin) numValues = 8; else numValues = 6;
						if (useScale) {
							scaleIndex = numValues;
							numValues++;
						}
						if (useRotation) {
							rotationIndex = numValues;
							numValues++;
						}
						if (useTransform) {
							transformIndex = numValues;
							numValues += 4;
						}
						if (useRGB) {
							rgbIndex = numValues;
							numValues += 3;
						}
						if (useAlpha) {
							alphaIndex = numValues;
							numValues++;
						}
						var totalCount = c15.buffer.ff[c15.ffPos].length;
						if (c15.buffer.i[c15.iPos + 1] >= 0 && totalCount > c15.buffer.i[c15.iPos + 1]) totalCount = c15.buffer.i[c15.iPos + 1];
						var itemCount = totalCount / numValues | 0;
						var index = 0;
						var rect = null;
						var center = null;
						var previousTileID = -1;
						var surface;
						c15.buffer.ts[c15.tsPos].__bitmap.__sync();
						surface = c15.buffer.ts[c15.tsPos].__bitmap.getSurface();
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.save();
						if (useBlendAdd) openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_operator(12);
						if (useBlendOverlay) openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_operator(16);
						while (index < totalCount) {
							var i2 = c15.buffer.ff[c15.ffPos][index + 2] | 0;
							var tileID;
							if (!useRect) tileID = i2; else tileID = -1;
							if (!useRect && tileID != previousTileID) {
								rect = c15.buffer.ts[c15.tsPos].__tileRects[tileID];
								center = c15.buffer.ts[c15.tsPos].__centerPoints[tileID];
								previousTileID = tileID;
							} else if (useRect) {
								rect = c15.buffer.ts[c15.tsPos].__rectTile;
								rect.setTo(c15.buffer.ff[c15.ffPos][index + 2], c15.buffer.ff[c15.ffPos][index + 3], c15.buffer.ff[c15.ffPos][index + 4], c15.buffer.ff[c15.ffPos][index + 5]);
								center = c15.buffer.ts[c15.tsPos].__point;
								if (useOrigin) {
									center.x = c15.buffer.ff[c15.ffPos][index + 6];
									center.y = c15.buffer.ff[c15.ffPos][index + 7];
								} else {
									center.x = 0;
									center.y = 0;
								}
							}
							if (rect != null && rect.width > 0 && rect.height > 0 && center != null) {
								openfl__$internal_renderer_cairo_CairoGraphics.cairo.identityMatrix();
								if (useTransform) {
									var matrix1 = new lime_math_Matrix3(c15.buffer.ff[c15.ffPos][index + transformIndex], c15.buffer.ff[c15.ffPos][index + transformIndex + 1], c15.buffer.ff[c15.ffPos][index + transformIndex + 2], c15.buffer.ff[c15.ffPos][index + transformIndex + 3], 0, 0);
									openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_matrix(matrix1);
								}
								openfl__$internal_renderer_cairo_CairoGraphics.cairo.translate(c15.buffer.ff[c15.ffPos][index] - offsetX1, c15.buffer.ff[c15.ffPos][index + 1] - offsetY1);
								if (useRotation) openfl__$internal_renderer_cairo_CairoGraphics.cairo.rotate(c15.buffer.ff[c15.ffPos][index + rotationIndex]);
								if (useScale) {
									var scale = c15.buffer.ff[c15.ffPos][index + scaleIndex];
									openfl__$internal_renderer_cairo_CairoGraphics.cairo.scale(scale, scale);
								}
								openfl__$internal_renderer_cairo_CairoGraphics.cairo.setSourceSurface(surface, 0, 0);
								if (useAlpha) {
									if (!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.paintWithAlpha(c15.buffer.ff[c15.ffPos][index + alphaIndex]);
								} else if (!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.paint();
							}
							index += numValues;
						}
						if (useBlendAdd || useBlendOverlay) openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_operator(2);
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.restore();
						break;
					default:
						data.advance();
						data.prev = type;
				}
			}
		} catch (e) { if (e != "__break__") throw e; }
		data.destroy();
		if (hasPath) {
			if (stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) {
				if (openfl__$internal_renderer_cairo_CairoGraphics.hasFill && closeGap) openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(startX - offsetX, startY - offsetY); else if (closeGap && positionX == startX && positionY == startY) openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern);
				if (!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.strokePreserve();
			}
			if (!stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasFill) {
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.translate(-openfl__$internal_renderer_cairo_CairoGraphics.bounds.x, -openfl__$internal_renderer_cairo_CairoGraphics.bounds.y);
				if (openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix != null) {
					var matrix2 = openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix.clone();
					matrix2.invert();
					if (openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix != null) matrix2.concat(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix);
					lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern, matrix2.__toMatrix3());
				}
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern);
				if (openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix != null) {
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.transform(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix.__toMatrix3());
					if (!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.transform(openfl__$internal_renderer_cairo_CairoGraphics.inversePendingMatrix.__toMatrix3());
				} else if (!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.translate(openfl__$internal_renderer_cairo_CairoGraphics.bounds.x, openfl__$internal_renderer_cairo_CairoGraphics.bounds.y);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
			}
		}
	};
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo = function (cx, cy, x, y) {
		var current = null;
		if (!openfl__$internal_renderer_cairo_CairoGraphics.cairo.get_hasCurrentPoint()) {
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(cx, cy);
			current = new lime_math_Vector2(cx, cy);
		} else current = openfl__$internal_renderer_cairo_CairoGraphics.cairo.get_currentPoint();
		var cx1 = current.x + 0.66666666666666663 * (cx - current.x);
		var cy1 = current.y + 0.66666666666666663 * (cy - current.y);
		var cx2 = x + 0.66666666666666663 * (cx - x);
		var cy2 = y + 0.66666666666666663 * (cy - y);
		openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(cx1, cy1, cx2, cy2, x, y);
	};
	openfl__$internal_renderer_cairo_CairoGraphics.render = function (graphics, renderSession) {
	};
	openfl__$internal_renderer_cairo_CairoGraphics.renderMask = function (graphics, renderSession) {
		if (graphics.__commands.get_length() != 0) {
			var cairo = renderSession.cairo;
			var positionX = 0.0;
			var positionY = 0.0;
			var offsetX = 0;
			var offsetY = 0;
			var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
			var _g = 0;
			var _g1 = graphics.__commands.types;
			while (_g < _g1.length) {
				var type = _g1[_g];
				++_g;
				switch (type[1]) {
					case 3:
						var c;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
						c = data;
						cairo.curveTo(c.buffer.f[c.fPos] - offsetX, c.buffer.f[c.fPos + 1] - offsetY, c.buffer.f[c.fPos + 3] - offsetX, c.buffer.f[c.fPos + 4] - offsetY, c.buffer.f[c.fPos + 5] - offsetX, c.buffer.f[c.fPos + 6] - offsetY);
						positionX = c.buffer.f[c.fPos + 5];
						positionY = c.buffer.f[c.fPos + 5];
						break;
					case 4:
						var c1;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
						c1 = data;
						openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(c1.buffer.f[c1.fPos] - offsetX, c1.buffer.f[c1.fPos + 1] - offsetY, c1.buffer.f[c1.fPos + 2] - offsetX, c1.buffer.f[c1.fPos + 3] - offsetY);
						positionX = c1.buffer.f[c1.fPos + 2];
						positionY = c1.buffer.f[c1.fPos + 3];
						break;
					case 5:
						var c2;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
						c2 = data;
						cairo.arc(c2.buffer.f[c2.fPos] - offsetX, c2.buffer.f[c2.fPos + 1] - offsetY, c2.buffer.f[c2.fPos + 2], 0, Math.PI * 2);
						break;
					case 6:
						var c3;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
						c3 = data;
						var x = c3.buffer.f[c3.fPos];
						var y = c3.buffer.f[c3.fPos + 1];
						var width = c3.buffer.f[c3.fPos + 2];
						var height = c3.buffer.f[c3.fPos + 3];
						x -= offsetX;
						y -= offsetY;
						var kappa = .5522848;
						var ox = width / 2 * kappa;
						var oy = height / 2 * kappa;
						var xe = x + width;
						var ye = y + height;
						var xm = x + width / 2;
						var ym = y + height / 2;
						cairo.moveTo(x, ym);
						cairo.curveTo(x, ym - oy, xm - ox, y, xm, y);
						cairo.curveTo(xm + ox, y, xe, ym - oy, xe, ym);
						cairo.curveTo(xe, ym + oy, xm + ox, ye, xm, ye);
						cairo.curveTo(xm - ox, ye, x, ym + oy, x, ym);
						break;
					case 8:
						var c4;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
						c4 = data;
						cairo.rectangle(c4.buffer.f[c4.fPos] - offsetX, c4.buffer.f[c4.fPos + 1] - offsetY, c4.buffer.f[c4.fPos + 2], c4.buffer.f[c4.fPos + 3]);
						break;
					case 9:
						var c5;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
						c5 = data;
						openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect(c5.buffer.f[c5.fPos] - offsetX, c5.buffer.f[c5.fPos + 1] - offsetY, c5.buffer.f[c5.fPos + 2], c5.buffer.f[c5.fPos + 3], c5.buffer.f[c5.fPos + 4], c5.buffer.f[c5.fPos + 5]);
						break;
					case 16:
						var c6;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
						c6 = data;
						cairo.lineTo(c6.buffer.f[c6.fPos] - offsetX, c6.buffer.f[c6.fPos + 1] - offsetY);
						positionX = c6.buffer.f[c6.fPos];
						positionY = c6.buffer.f[c6.fPos + 1];
						break;
					case 17:
						var c7;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
						c7 = data;
						cairo.moveTo(c7.buffer.f[c7.fPos] - offsetX, c7.buffer.f[c7.fPos + 1] - offsetY);
						positionX = c7.buffer.f[c7.fPos];
						positionY = c7.buffer.f[c7.fPos + 1];
						break;
					default:
						data.advance();
						data.prev = type;
				}
			}
			data.destroy();
		}
	};
	var openfl__$internal_renderer_cairo_CairoMaskManager = function (renderSession) {
		openfl__$internal_renderer_AbstractMaskManager.call(this, renderSession);
	};
	$hxClasses["openfl._internal.renderer.cairo.CairoMaskManager"] = openfl__$internal_renderer_cairo_CairoMaskManager;
	openfl__$internal_renderer_cairo_CairoMaskManager.__name__ = ["openfl", "_internal", "renderer", "cairo", "CairoMaskManager"];
	openfl__$internal_renderer_cairo_CairoMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
	openfl__$internal_renderer_cairo_CairoMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype, {
		pushMask: function (mask) {
			var cairo = this.renderSession.cairo;
			cairo.save();
			var transform = mask.__getWorldTransform();
			cairo.set_matrix(transform.__toMatrix3());
			cairo.newPath();
			mask.__renderCairoMask(this.renderSession);
			cairo.clip();
		}
		, pushRect: function (rect, transform) {
			var cairo = this.renderSession.cairo;
			cairo.save();
			cairo.set_matrix(new lime_math_Matrix3(transform.a, transform.c, transform.b, transform.d, transform.tx, transform.ty));
			cairo.newPath();
			cairo.rectangle(rect.x, rect.y, rect.width, rect.height);
			cairo.clip();
		}
		, popMask: function () {
			this.renderSession.cairo.restore();
		}
		, popRect: function () {
			this.renderSession.cairo.restore();
		}
		, __class__: openfl__$internal_renderer_cairo_CairoMaskManager
	});
	var openfl__$internal_renderer_cairo_CairoRenderer = function (width, height, cairo) {
		openfl__$internal_renderer_AbstractRenderer.call(this, width, height);
		this.cairo = cairo;
		this.renderSession = new openfl__$internal_renderer_RenderSession();
		this.renderSession.cairo = cairo;
		this.renderSession.roundPixels = true;
		this.renderSession.renderer = this;
		this.renderSession.maskManager = new openfl__$internal_renderer_cairo_CairoMaskManager(this.renderSession);
	};
	$hxClasses["openfl._internal.renderer.cairo.CairoRenderer"] = openfl__$internal_renderer_cairo_CairoRenderer;
	openfl__$internal_renderer_cairo_CairoRenderer.__name__ = ["openfl", "_internal", "renderer", "cairo", "CairoRenderer"];
	openfl__$internal_renderer_cairo_CairoRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
	openfl__$internal_renderer_cairo_CairoRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype, {
		render: function (stage) {
			this.cairo.identityMatrix();
			if (stage.__clearBeforeRender) {
				this.cairo.setSourceRGB(stage.__colorSplit[0], stage.__colorSplit[1], stage.__colorSplit[2]);
				this.cairo.paint();
			}
			stage.__renderCairo(this.renderSession);
		}
		, renderDisplayObject: function (object) {
			this.cairo.identityMatrix();
			object.__renderCairo(this.renderSession);
		}
		, __class__: openfl__$internal_renderer_cairo_CairoRenderer
	});
	var openfl__$internal_renderer_cairo_CairoShape = function () { };
	$hxClasses["openfl._internal.renderer.cairo.CairoShape"] = openfl__$internal_renderer_cairo_CairoShape;
	openfl__$internal_renderer_cairo_CairoShape.__name__ = ["openfl", "_internal", "renderer", "cairo", "CairoShape"];
	openfl__$internal_renderer_cairo_CairoShape.render = function (shape, renderSession) {
	};
	var openfl__$internal_renderer_cairo_CairoTextField = function () { };
	$hxClasses["openfl._internal.renderer.cairo.CairoTextField"] = openfl__$internal_renderer_cairo_CairoTextField;
	openfl__$internal_renderer_cairo_CairoTextField.__name__ = ["openfl", "_internal", "renderer", "cairo", "CairoTextField"];
	openfl__$internal_renderer_cairo_CairoTextField.render = function (textField, renderSession) {
	};
	var openfl__$internal_renderer_canvas_CanvasBitmap = function () { };
	$hxClasses["openfl._internal.renderer.canvas.CanvasBitmap"] = openfl__$internal_renderer_canvas_CanvasBitmap;
	openfl__$internal_renderer_canvas_CanvasBitmap.__name__ = ["openfl", "_internal", "renderer", "canvas", "CanvasBitmap"];
	openfl__$internal_renderer_canvas_CanvasBitmap.render = function (bitmap, renderSession) {
		if (!bitmap.__renderable || bitmap.__worldAlpha <= 0) return;
		var context = renderSession.context;
		if (bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
			if (bitmap.__mask != null) renderSession.maskManager.pushMask(bitmap.__mask);
			bitmap.bitmapData.__sync();
			context.globalAlpha = bitmap.__worldAlpha;
			var transform = bitmap.__renderTransform;
			var scrollRect = bitmap.get_scrollRect();
			if (renderSession.roundPixels) context.setTransform(transform.a, transform.b, transform.c, transform.d, transform.tx | 0, transform.ty | 0); else context.setTransform(transform.a, transform.b, transform.c, transform.d, transform.tx, transform.ty);
			if (!bitmap.smoothing) {
				context.mozImageSmoothingEnabled = false;
				context.msImageSmoothingEnabled = false;
				context.imageSmoothingEnabled = false;
			}
			if (scrollRect == null) context.drawImage(bitmap.bitmapData.image.get_src(), 0, 0); else context.drawImage(bitmap.bitmapData.image.get_src(), scrollRect.x, scrollRect.y, scrollRect.width, scrollRect.height, scrollRect.x, scrollRect.y, scrollRect.width, scrollRect.height);
			if (!bitmap.smoothing) {
				context.mozImageSmoothingEnabled = true;
				context.msImageSmoothingEnabled = true;
				context.imageSmoothingEnabled = true;
			}
			if (bitmap.__mask != null) renderSession.maskManager.popMask();
		}
	};
	var openfl__$internal_renderer_canvas_CanvasGraphics = function () { };
	$hxClasses["openfl._internal.renderer.canvas.CanvasGraphics"] = openfl__$internal_renderer_canvas_CanvasGraphics;
	openfl__$internal_renderer_canvas_CanvasGraphics.__name__ = ["openfl", "_internal", "renderer", "canvas", "CanvasGraphics"];
	openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
	openfl__$internal_renderer_canvas_CanvasGraphics.bitmapStroke = null;
	openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = null;
	openfl__$internal_renderer_canvas_CanvasGraphics.bounds = null;
	openfl__$internal_renderer_canvas_CanvasGraphics.graphics = null;
	openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = null;
	openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = null;
	openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = null;
	openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = null;
	openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = null;
	openfl__$internal_renderer_canvas_CanvasGraphics.context = null;
	openfl__$internal_renderer_canvas_CanvasGraphics.closePath = function () {
		if (openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle == null) return;
		openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
		openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
		openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	};
	openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill = function (bitmap, bitmapRepeat) {
		bitmap.__sync();
		return openfl__$internal_renderer_canvas_CanvasGraphics.context.createPattern(bitmap.image.get_src(), bitmapRepeat ? "repeat" : "no-repeat");
	};
	openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern = function (type, colors, alphas, ratios, matrix, spreadMethod, interpolationMethod, focalPointRatio) {
		var gradientFill = null;
		switch (type[1]) {
			case 0:
				if (matrix == null) matrix = new openfl_geom_Matrix();
				var point = matrix.transformPoint(new openfl_geom_Point(1638.4, 0));
				gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createRadialGradient(matrix.tx, matrix.ty, 0, matrix.tx, matrix.ty, (point.x - matrix.tx) / 2);
				break;
			case 1:
				var matrix1;
				if (matrix != null) matrix1 = matrix; else matrix1 = new openfl_geom_Matrix();
				var point1 = matrix1.transformPoint(new openfl_geom_Point(-819.2, 0));
				var point2 = matrix1.transformPoint(new openfl_geom_Point(819.2, 0));
				gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createLinearGradient(point1.x, point1.y, point2.x, point2.y);
				break;
		}
		var _g1 = 0;
		var _g = colors.length;
		while (_g1 < _g) {
			var i = _g1++;
			var rgb = colors[i];
			var alpha = alphas[i];
			var r = (rgb & 16711680) >>> 16;
			var g = (rgb & 65280) >>> 8;
			var b = rgb & 255;
			var ratio = ratios[i] / 255;
			if (ratio < 0) ratio = 0;
			if (ratio > 1) ratio = 1;
			gradientFill.addColorStop(ratio, "rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")");
		}
		return gradientFill;
	};
	openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas = function (bitmap, repeat, width, height) {
		var canvas = window.document.createElement("canvas");
		var context = canvas.getContext("2d");
		canvas.width = width;
		canvas.height = height;
		context.fillStyle = context.createPattern(bitmap.image.get_src(), repeat ? "repeat" : "no-repeat");
		context.beginPath();
		context.moveTo(0, 0);
		context.lineTo(0, height);
		context.lineTo(width, height);
		context.lineTo(width, 0);
		context.lineTo(0, 0);
		context.closePath();
		if (!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) context.fill();
		return canvas;
	};
	openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect = function (x, y, width, height, rx, ry) {
		if (ry == -1) ry = rx;
		rx *= 0.5;
		ry *= 0.5;
		if (rx > width / 2) rx = width / 2;
		if (ry > height / 2) ry = height / 2;
		var xe = x + width;
		var ye = y + height;
		var cx1 = -rx + rx * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
		var cx2 = -rx + rx * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
		var cy1 = -ry + ry * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
		var cy2 = -ry + ry * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
		openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(xe, ye - ry);
		openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe, ye + cy2, xe + cx1, ye + cy1);
		openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2, ye, xe - rx, ye);
		openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x + rx, ye);
		openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2, ye, x - cx1, ye + cy1);
		openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x, ye + cy2, x, ye - ry);
		openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x, y + ry);
		openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x, y - cy2, x - cx1, y - cy1);
		openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2, y, x + rx, y);
		openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe - rx, y);
		openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2, y, xe + cx1, y - cy1);
		openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe, y - cy2, xe, y + ry);
		openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe, ye - ry);
	};
	openfl__$internal_renderer_canvas_CanvasGraphics.endFill = function () {
		openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
		openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands, false);
		openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
	};
	openfl__$internal_renderer_canvas_CanvasGraphics.endStroke = function () {
		openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
		openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands, true);
		openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
		openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
	};
	openfl__$internal_renderer_canvas_CanvasGraphics.hitTest = function (graphics, x, y) {
		if (graphics.__commands.get_length() == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width <= 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height <= 0) return false; else {
			openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = true;
			x -= openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
			y -= openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
			if (graphics.__canvas == null) {
				graphics.__canvas = window.document.createElement("canvas");
				graphics.__context = graphics.__canvas.getContext("2d");
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
			openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
			openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
			var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
			var _g = 0;
			var _g1 = graphics.__commands.types;
			while (_g < _g1.length) {
				var type = _g1[_g];
				++_g;
				switch (type[1]) {
					case 3:
						var c;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
						c = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(c.buffer.f[c.fPos], c.buffer.f[c.fPos + 1], c.buffer.f[c.fPos + 3], c.buffer.f[c.fPos + 4], c.buffer.f[c.fPos + 5], c.buffer.f[c.fPos + 6]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(c.buffer.f[c.fPos], c.buffer.f[c.fPos + 1], c.buffer.f[c.fPos + 3], c.buffer.f[c.fPos + 4], c.buffer.f[c.fPos + 5], c.buffer.f[c.fPos + 6]);
						break;
					case 4:
						var c1;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
						c1 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(c1.buffer.f[c1.fPos], c1.buffer.f[c1.fPos + 1], c1.buffer.f[c1.fPos + 2], c1.buffer.f[c1.fPos + 3]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(c1.buffer.f[c1.fPos], c1.buffer.f[c1.fPos + 1], c1.buffer.f[c1.fPos + 2], c1.buffer.f[c1.fPos + 3]);
						break;
					case 16:
						var c2;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
						c2 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(c2.buffer.f[c2.fPos], c2.buffer.f[c2.fPos + 1]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(c2.buffer.f[c2.fPos], c2.buffer.f[c2.fPos + 1]);
						break;
					case 17:
						var c3;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
						c3 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(c3.buffer.f[c3.fPos], c3.buffer.f[c3.fPos + 1]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(c3.buffer.f[c3.fPos], c3.buffer.f[c3.fPos + 1]);
						break;
					case 14:
						var c4;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
						c4 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(c4.buffer.o[c4.oPos], c4.buffer.ii[c4.iiPos], c4.buffer.ff[c4.ffPos], c4.buffer.ii[c4.iiPos + 1], c4.buffer.o[c4.oPos + 1], c4.buffer.o[c4.oPos + 2], c4.buffer.o[c4.oPos + 3], c4.buffer.o[c4.oPos + 4]);
						break;
					case 13:
						var c5;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
						c5 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(c5.buffer.o[c5.oPos], c5.buffer.o[c5.oPos + 1], c5.buffer.b[c5.bPos], c5.buffer.b[c5.bPos + 1]);
						break;
					case 15:
						var c6;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
						c6 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(c6.buffer.o[c6.oPos], c6.buffer.o[c6.oPos + 1], 1, c6.buffer.o[c6.oPos + 3], c6.buffer.o[c6.oPos + 4], c6.buffer.o[c6.oPos + 5], c6.buffer.o[c6.oPos + 6], c6.buffer.o[c6.oPos + 7]);
						break;
					case 12:
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
						data;
						openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
						if (openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x, y)) {
							data.destroy();
							return true;
						}
						if (openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x, y)) {
							data.destroy();
							return true;
						}
						openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
						openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
						break;
					case 0: case 1: case 2:
						openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
						if (openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x, y)) {
							data.destroy();
							return true;
						}
						if (openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x, y)) {
							data.destroy();
							return true;
						}
						if (type == openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL) {
							var c7;
							data.advance();
							data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
							c7 = data;
							openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(c7.buffer.o[c7.oPos], c7.buffer.o[c7.oPos + 1], c7.buffer.b[c7.bPos], c7.buffer.b[c7.bPos + 1]);
							openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(c7.buffer.o[c7.oPos], c7.buffer.o[c7.oPos + 1], c7.buffer.b[c7.bPos], c7.buffer.b[c7.bPos + 1]);
						} else if (type == openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL) {
							var c8;
							data.advance();
							data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
							c8 = data;
							openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(c8.buffer.o[c8.oPos], c8.buffer.ii[c8.iiPos], c8.buffer.ff[c8.ffPos], c8.buffer.ii[c8.iiPos + 1], c8.buffer.o[c8.oPos + 1], c8.buffer.o[c8.oPos + 2], c8.buffer.o[c8.oPos + 3], c8.buffer.o[c8.oPos + 4]);
							openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(c8.buffer.o[c8.oPos], c8.buffer.ii[c8.iiPos], c8.buffer.ff[c8.ffPos], c8.buffer.ii[c8.iiPos + 1], c8.buffer.o[c8.oPos + 1], c8.buffer.o[c8.oPos + 2], c8.buffer.o[c8.oPos + 3], c8.buffer.o[c8.oPos + 4]);
						} else {
							var c9;
							data.advance();
							data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
							c9 = data;
							openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(c9.buffer.i[c9.iPos], 1);
							openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(c9.buffer.i[c9.iPos], 1);
						}
						break;
					case 5:
						var c10;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
						c10 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(c10.buffer.f[c10.fPos], c10.buffer.f[c10.fPos + 1], c10.buffer.f[c10.fPos + 2]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(c10.buffer.f[c10.fPos], c10.buffer.f[c10.fPos + 1], c10.buffer.f[c10.fPos + 2]);
						break;
					case 6:
						var c11;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
						c11 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(c11.buffer.f[c11.fPos], c11.buffer.f[c11.fPos + 1], c11.buffer.f[c11.fPos + 2], c11.buffer.f[c11.fPos + 3]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(c11.buffer.f[c11.fPos], c11.buffer.f[c11.fPos + 1], c11.buffer.f[c11.fPos + 2], c11.buffer.f[c11.fPos + 3]);
						break;
					case 8:
						var c12;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
						c12 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(c12.buffer.f[c12.fPos], c12.buffer.f[c12.fPos + 1], c12.buffer.f[c12.fPos + 2], c12.buffer.f[c12.fPos + 3]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(c12.buffer.f[c12.fPos], c12.buffer.f[c12.fPos + 1], c12.buffer.f[c12.fPos + 2], c12.buffer.f[c12.fPos + 3]);
						break;
					case 9:
						var c13;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
						c13 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(c13.buffer.f[c13.fPos], c13.buffer.f[c13.fPos + 1], c13.buffer.f[c13.fPos + 2], c13.buffer.f[c13.fPos + 3], c13.buffer.f[c13.fPos + 4], c13.buffer.f[c13.fPos + 5]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(c13.buffer.f[c13.fPos], c13.buffer.f[c13.fPos + 1], c13.buffer.f[c13.fPos + 2], c13.buffer.f[c13.fPos + 3], c13.buffer.f[c13.fPos + 4], c13.buffer.f[c13.fPos + 5]);
						break;
					default:
						data.advance();
						data.prev = type;
				}
			}
			if (openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() > 0) openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
			if (openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() > 0) openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
			data.destroy();
			if (openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x, y)) return true;
			if (openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x, y)) return true;
		}
		return false;
	};
	openfl__$internal_renderer_canvas_CanvasGraphics.isCCW = function (x1, y1, x2, y2, x3, y3) {
		return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
	};
	openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT = function (uvt, skipT) {
		if (skipT == null) skipT = false;
		var max = -Infinity;
		var tmp = -Infinity;
		var len = uvt.length;
		var _g1 = 1;
		var _g = len + 1;
		while (_g1 < _g) {
			var t = _g1++;
			if (skipT && t % 3 == 0) continue;
			tmp = uvt.data[t - 1];
			if (max < tmp) max = tmp;
		}
		var result;
		var this1;
		this1 = new openfl_VectorData();
		var this2;
		this2 = new Array(0);
		this1.data = this2;
		this1.length = 0;
		this1.fixed = false;
		result = this1;
		var _g11 = 1;
		var _g2 = len + 1;
		while (_g11 < _g2) {
			var t1 = _g11++;
			if (skipT && t1 % 3 == 0) continue;
			if (!result.fixed) {
				result.length++;
				if (result.data.length < result.length) {
					var data;
					var this3;
					this3 = new Array(result.data.length + 10);
					data = this3;
					haxe_ds__$Vector_Vector_$Impl_$.blit(result.data, 0, data, 0, result.data.length);
					result.data = data;
				}
				result.data[result.length - 1] = uvt.data[t1 - 1] / max;
			}
			result.length;
		}
		return { max: max, uvt: result };
	};
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands = function (commands, stroke) {
		if (stroke == null) stroke = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.bounds = openfl__$internal_renderer_canvas_CanvasGraphics.graphics.__bounds;
		var offsetX = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
		var offsetY = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
		var positionX = 0.0;
		var positionY = 0.0;
		var closeGap = false;
		var startX = 0.0;
		var startY = 0.0;
		var data = new openfl__$internal_renderer_DrawCommandReader(commands);
		var _g = 0;
		var _g1 = commands.types;
		while (_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch (type[1]) {
				case 3:
					var c;
					data.advance();
					data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
					c = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(c.buffer.f[c.fPos] - offsetX, c.buffer.f[c.fPos + 1] - offsetY, c.buffer.f[c.fPos + 3] - offsetX, c.buffer.f[c.fPos + 4] - offsetY, c.buffer.f[c.fPos + 5] - offsetX, c.buffer.f[c.fPos + 6] - offsetY);
					break;
				case 4:
					var c1;
					data.advance();
					data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
					c1 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(c1.buffer.f[c1.fPos] - offsetX, c1.buffer.f[c1.fPos + 1] - offsetY, c1.buffer.f[c1.fPos + 2] - offsetX, c1.buffer.f[c1.fPos + 3] - offsetY);
					break;
				case 5:
					var c2;
					data.advance();
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
					c2 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(c2.buffer.f[c2.fPos] - offsetX + c2.buffer.f[c2.fPos + 2], c2.buffer.f[c2.fPos + 1] - offsetY);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(c2.buffer.f[c2.fPos] - offsetX, c2.buffer.f[c2.fPos + 1] - offsetY, c2.buffer.f[c2.fPos + 2], 0, Math.PI * 2, true);
					break;
				case 6:
					var c3;
					data.advance();
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
					c3 = data;
					var x = c3.buffer.f[c3.fPos];
					var y = c3.buffer.f[c3.fPos + 1];
					var width = c3.buffer.f[c3.fPos + 2];
					var height = c3.buffer.f[c3.fPos + 3];
					x -= offsetX;
					y -= offsetY;
					var kappa = .5522848;
					var ox = width / 2 * kappa;
					var oy = height / 2 * kappa;
					var xe = x + width;
					var ye = y + height;
					var xm = x + width / 2;
					var ym = y + height / 2;
					openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x, ym);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);
					break;
				case 9:
					var c4;
					data.advance();
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
					c4 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(c4.buffer.f[c4.fPos] - offsetX, c4.buffer.f[c4.fPos + 1] - offsetY, c4.buffer.f[c4.fPos + 2], c4.buffer.f[c4.fPos + 3], c4.buffer.f[c4.fPos + 4], c4.buffer.f[c4.fPos + 5]);
					break;
				case 16:
					var c5;
					data.advance();
					data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
					c5 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(c5.buffer.f[c5.fPos] - offsetX, c5.buffer.f[c5.fPos + 1] - offsetY);
					positionX = c5.buffer.f[c5.fPos];
					positionY = c5.buffer.f[c5.fPos + 1];
					break;
				case 17:
					var c6;
					data.advance();
					data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
					c6 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(c6.buffer.f[c6.fPos] - offsetX, c6.buffer.f[c6.fPos + 1] - offsetY);
					positionX = c6.buffer.f[c6.fPos];
					positionY = c6.buffer.f[c6.fPos + 1];
					closeGap = true;
					startX = c6.buffer.f[c6.fPos];
					startY = c6.buffer.f[c6.fPos + 1];
					break;
				case 15:
					var c7;
					data.advance();
					data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
					c7 = data;
					if (stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
						openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
						if (!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
						openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
					}
					openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX, positionY - offsetY);
					if (c7.buffer.o[c7.oPos] == null) openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false; else {
						if (c7.buffer.o[c7.oPos] > 0) openfl__$internal_renderer_canvas_CanvasGraphics.context.lineWidth = c7.buffer.o[c7.oPos]; else openfl__$internal_renderer_canvas_CanvasGraphics.context.lineWidth = 1;
						if (c7.buffer.o[c7.oPos + 6] == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.lineJoin = "round"; else openfl__$internal_renderer_canvas_CanvasGraphics.context.lineJoin = Std.string(c7.buffer.o[c7.oPos + 6]).toLowerCase();
						if (c7.buffer.o[c7.oPos + 5] == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = "round"; else {
							var _g2 = c7.buffer.o[c7.oPos + 5];
							switch (_g2[1]) {
								case 0:
									openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = "butt";
									break;
								default:
									openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = Std.string(c7.buffer.o[c7.oPos + 5]).toLowerCase();
							}
						}
						if (c7.buffer.o[c7.oPos + 7] == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.miterLimit = 3; else openfl__$internal_renderer_canvas_CanvasGraphics.context.miterLimit = c7.buffer.o[c7.oPos + 7];
						if (c7.buffer.o[c7.oPos + 2] == 1 || c7.buffer.o[c7.oPos + 2] == null) if (c7.buffer.o[c7.oPos + 1] == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "#000000"; else openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "#" + StringTools.hex(c7.buffer.o[c7.oPos + 1] & 16777215, 6); else {
							var r = (c7.buffer.o[c7.oPos + 1] & 16711680) >>> 16;
							var g = (c7.buffer.o[c7.oPos + 1] & 65280) >>> 8;
							var b = c7.buffer.o[c7.oPos + 1] & 255;
							if (c7.buffer.o[c7.oPos + 1] == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "#000000"; else openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "rgba(" + r + ", " + g + ", " + b + ", " + c7.buffer.o[c7.oPos + 2] + ")";
						}
						openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
					}
					break;
				case 14:
					var c8;
					data.advance();
					data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
					c8 = data;
					if (stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
					openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX, positionY - offsetY);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(c8.buffer.o[c8.oPos], c8.buffer.ii[c8.iiPos], c8.buffer.ff[c8.ffPos], c8.buffer.ii[c8.iiPos + 1], c8.buffer.o[c8.oPos + 1], c8.buffer.o[c8.oPos + 2], c8.buffer.o[c8.oPos + 3], c8.buffer.o[c8.oPos + 4]);
					openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
					break;
				case 13:
					var c9;
					data.advance();
					data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
					c9 = data;
					if (stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
					openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX, positionY - offsetY);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(c9.buffer.o[c9.oPos], c9.buffer.b[c9.bPos]);
					openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
					break;
				case 0:
					var c10;
					data.advance();
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
					c10 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(c10.buffer.o[c10.oPos], true);
					openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
					if (c10.buffer.o[c10.oPos + 1] != null) {
						openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = c10.buffer.o[c10.oPos + 1];
						openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = c10.buffer.o[c10.oPos + 1].clone();
						openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.invert();
					} else {
						openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = null;
						openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = null;
					}
					break;
				case 1:
					var c11;
					data.advance();
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
					c11 = data;
					if (c11.buffer.f[c11.fPos] < 0.005) openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false; else {
						if (c11.buffer.f[c11.fPos] == 1) openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "#" + StringTools.hex(c11.buffer.i[c11.iPos], 6); else {
							var r1 = (c11.buffer.i[c11.iPos] & 16711680) >>> 16;
							var g1 = (c11.buffer.i[c11.iPos] & 65280) >>> 8;
							var b1 = c11.buffer.i[c11.iPos] & 255;
							openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "rgba(" + r1 + ", " + g1 + ", " + b1 + ", " + c11.buffer.f[c11.fPos] + ")";
						}
						openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
						openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
					}
					break;
				case 2:
					var c12;
					data.advance();
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
					c12 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(c12.buffer.o[c12.oPos], c12.buffer.ii[c12.iiPos], c12.buffer.ff[c12.ffPos], c12.buffer.ii[c12.iiPos + 1], c12.buffer.o[c12.oPos + 1], c12.buffer.o[c12.oPos + 2], c12.buffer.o[c12.oPos + 3], c12.buffer.o[c12.oPos + 4]);
					openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
					openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
					break;
				case 8:
					var c13;
					data.advance();
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
					c13 = data;
					var optimizationUsed = false;
					if (openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null) {
						var st = 0;
						var sr = 0;
						var sb = 0;
						var sl = 0;
						var canOptimizeMatrix = true;
						if (openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
							if (openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b != 0 || openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c != 0) canOptimizeMatrix = false; else {
								var stl = openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.transformPoint(new openfl_geom_Point(c13.buffer.f[c13.fPos], c13.buffer.f[c13.fPos + 1]));
								var sbr = openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.transformPoint(new openfl_geom_Point(c13.buffer.f[c13.fPos] + c13.buffer.f[c13.fPos + 2], c13.buffer.f[c13.fPos + 1] + c13.buffer.f[c13.fPos + 3]));
								st = stl.y;
								sl = stl.x;
								sb = sbr.y;
								sr = sbr.x;
							}
						} else {
							st = c13.buffer.f[c13.fPos + 1];
							sl = c13.buffer.f[c13.fPos];
							sb = c13.buffer.f[c13.fPos + 1] + c13.buffer.f[c13.fPos + 3];
							sr = c13.buffer.f[c13.fPos] + c13.buffer.f[c13.fPos + 2];
						}
						if (canOptimizeMatrix && st >= 0 && sl >= 0 && sr <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width && sb <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height) {
							optimizationUsed = true;
							if (!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.image.get_src(), sl, st, sr - sl, sb - st, c13.buffer.f[c13.fPos] - offsetX, c13.buffer.f[c13.fPos + 1] - offsetY, c13.buffer.f[c13.fPos + 2], c13.buffer.f[c13.fPos + 3]);
						}
					}
					if (!optimizationUsed) openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(c13.buffer.f[c13.fPos] - offsetX, c13.buffer.f[c13.fPos + 1] - offsetY, c13.buffer.f[c13.fPos + 2], c13.buffer.f[c13.fPos + 3]);
					break;
				default:
					data.advance();
					data.prev = type;
			}
		}
		data.destroy();
		if (stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
			if (openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && closeGap) openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(startX - offsetX, startY - offsetY); else if (closeGap && positionX == startX && positionY == startY) openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
			if (!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
		}
		if (!stroke) {
			if (openfl__$internal_renderer_canvas_CanvasGraphics.hasFill || openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x, -openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
				if (openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.a, openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b, openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c, openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.d, openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.tx, openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.ty);
					if (!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
					openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.a, openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.b, openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.c, openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.d, openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.tx, openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.ty);
				} else if (!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x, openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
			}
		}
	};
	openfl__$internal_renderer_canvas_CanvasGraphics.render = function (graphics, renderSession) {
		var directRender = false;
		if (graphics.__dirty || directRender) {
			openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.graphics = graphics;
			openfl__$internal_renderer_canvas_CanvasGraphics.bounds = graphics.__bounds;
			if (!graphics.__visible || graphics.__commands.get_length() == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width <= 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height <= 0) {
				graphics.__canvas = null;
				graphics.__context = null;
				graphics.__bitmap = null;
			} else {
				if (directRender) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context = renderSession.context;
					openfl__$internal_renderer_canvas_CanvasGraphics.bounds.setTo(0, 0, openfl__$internal_renderer_canvas_CanvasGraphics.context.canvas.width, openfl__$internal_renderer_canvas_CanvasGraphics.context.canvas.width);
				} else {
					if (graphics.__canvas == null) {
						graphics.__canvas = window.document.createElement("canvas");
						graphics.__context = graphics.__canvas.getContext("2d");
					}
					openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
					graphics.__canvas.width = Math.ceil(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width);
					graphics.__canvas.height = Math.ceil(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height);
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
				openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
				var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
				var _g = 0;
				var _g1 = graphics.__commands.types;
				try {
					while (_g < _g1.length) {
						var type = _g1[_g];
						++_g;
						switch (type[1]) {
							case 3:
								var c;
								data.advance();
								data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
								c = data;
								openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(c.buffer.f[c.fPos], c.buffer.f[c.fPos + 1], c.buffer.f[c.fPos + 3], c.buffer.f[c.fPos + 4], c.buffer.f[c.fPos + 5], c.buffer.f[c.fPos + 6]);
								openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(c.buffer.f[c.fPos], c.buffer.f[c.fPos + 1], c.buffer.f[c.fPos + 3], c.buffer.f[c.fPos + 4], c.buffer.f[c.fPos + 5], c.buffer.f[c.fPos + 6]);
								break;
							case 4:
								var c1;
								data.advance();
								data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
								c1 = data;
								openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(c1.buffer.f[c1.fPos], c1.buffer.f[c1.fPos + 1], c1.buffer.f[c1.fPos + 2], c1.buffer.f[c1.fPos + 3]);
								openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(c1.buffer.f[c1.fPos], c1.buffer.f[c1.fPos + 1], c1.buffer.f[c1.fPos + 2], c1.buffer.f[c1.fPos + 3]);
								break;
							case 16:
								var c2;
								data.advance();
								data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
								c2 = data;
								openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(c2.buffer.f[c2.fPos], c2.buffer.f[c2.fPos + 1]);
								openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(c2.buffer.f[c2.fPos], c2.buffer.f[c2.fPos + 1]);
								break;
							case 17:
								var c3;
								data.advance();
								data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
								c3 = data;
								openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(c3.buffer.f[c3.fPos], c3.buffer.f[c3.fPos + 1]);
								openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(c3.buffer.f[c3.fPos], c3.buffer.f[c3.fPos + 1]);
								break;
							case 12:
								data.advance();
								data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
								data;
								openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
								openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
								openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
								openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
								break;
							case 15:
								var c4;
								data.advance();
								data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
								c4 = data;
								openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(c4.buffer.o[c4.oPos], c4.buffer.o[c4.oPos + 1], c4.buffer.o[c4.oPos + 2], c4.buffer.o[c4.oPos + 3], c4.buffer.o[c4.oPos + 4], c4.buffer.o[c4.oPos + 5], c4.buffer.o[c4.oPos + 6], c4.buffer.o[c4.oPos + 7]);
								break;
							case 14:
								var c5;
								data.advance();
								data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
								c5 = data;
								openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(c5.buffer.o[c5.oPos], c5.buffer.ii[c5.iiPos], c5.buffer.ff[c5.ffPos], c5.buffer.ii[c5.iiPos + 1], c5.buffer.o[c5.oPos + 1], c5.buffer.o[c5.oPos + 2], c5.buffer.o[c5.oPos + 3], c5.buffer.o[c5.oPos + 4]);
								break;
							case 13:
								var c6;
								data.advance();
								data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
								c6 = data;
								openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(c6.buffer.o[c6.oPos], c6.buffer.o[c6.oPos + 1], c6.buffer.b[c6.bPos], c6.buffer.b[c6.bPos + 1]);
								break;
							case 0: case 1: case 2:
								openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
								openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
								if (type == openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL) {
									var c7;
									data.advance();
									data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
									c7 = data;
									openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(c7.buffer.o[c7.oPos], c7.buffer.o[c7.oPos + 1], c7.buffer.b[c7.bPos], c7.buffer.b[c7.bPos + 1]);
									openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(c7.buffer.o[c7.oPos], c7.buffer.o[c7.oPos + 1], c7.buffer.b[c7.bPos], c7.buffer.b[c7.bPos + 1]);
								} else if (type == openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL) {
									var c8;
									data.advance();
									data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
									c8 = data;
									openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(c8.buffer.o[c8.oPos], c8.buffer.ii[c8.iiPos], c8.buffer.ff[c8.ffPos], c8.buffer.ii[c8.iiPos + 1], c8.buffer.o[c8.oPos + 1], c8.buffer.o[c8.oPos + 2], c8.buffer.o[c8.oPos + 3], c8.buffer.o[c8.oPos + 4]);
									openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(c8.buffer.o[c8.oPos], c8.buffer.ii[c8.iiPos], c8.buffer.ff[c8.ffPos], c8.buffer.ii[c8.iiPos + 1], c8.buffer.o[c8.oPos + 1], c8.buffer.o[c8.oPos + 2], c8.buffer.o[c8.oPos + 3], c8.buffer.o[c8.oPos + 4]);
								} else {
									var c9;
									data.advance();
									data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
									c9 = data;
									openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(c9.buffer.i[c9.iPos], c9.buffer.f[c9.fPos]);
									openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(c9.buffer.i[c9.iPos], c9.buffer.f[c9.fPos]);
								}
								break;
							case 5:
								var c10;
								data.advance();
								data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
								c10 = data;
								openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(c10.buffer.f[c10.fPos], c10.buffer.f[c10.fPos + 1], c10.buffer.f[c10.fPos + 2]);
								openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(c10.buffer.f[c10.fPos], c10.buffer.f[c10.fPos + 1], c10.buffer.f[c10.fPos + 2]);
								break;
							case 6:
								var c11;
								data.advance();
								data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
								c11 = data;
								openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(c11.buffer.f[c11.fPos], c11.buffer.f[c11.fPos + 1], c11.buffer.f[c11.fPos + 2], c11.buffer.f[c11.fPos + 3]);
								openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(c11.buffer.f[c11.fPos], c11.buffer.f[c11.fPos + 1], c11.buffer.f[c11.fPos + 2], c11.buffer.f[c11.fPos + 3]);
								break;
							case 8:
								var c12;
								data.advance();
								data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
								c12 = data;
								openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(c12.buffer.f[c12.fPos], c12.buffer.f[c12.fPos + 1], c12.buffer.f[c12.fPos + 2], c12.buffer.f[c12.fPos + 3]);
								openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(c12.buffer.f[c12.fPos], c12.buffer.f[c12.fPos + 1], c12.buffer.f[c12.fPos + 2], c12.buffer.f[c12.fPos + 3]);
								break;
							case 9:
								var c13;
								data.advance();
								data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
								c13 = data;
								openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(c13.buffer.f[c13.fPos], c13.buffer.f[c13.fPos + 1], c13.buffer.f[c13.fPos + 2], c13.buffer.f[c13.fPos + 3], c13.buffer.f[c13.fPos + 4], c13.buffer.f[c13.fPos + 5]);
								openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(c13.buffer.f[c13.fPos], c13.buffer.f[c13.fPos + 1], c13.buffer.f[c13.fPos + 2], c13.buffer.f[c13.fPos + 3], c13.buffer.f[c13.fPos + 4], c13.buffer.f[c13.fPos + 5]);
								break;
							case 11:
								openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
								openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
								var c14;
								data.advance();
								data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
								c14 = data;
								var v = c14.buffer.o[c14.oPos];
								var ind = c14.buffer.o[c14.oPos + 1];
								var uvt = c14.buffer.o[c14.oPos + 2];
								var pattern = null;
								var colorFill = openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill == null;
								if (colorFill && uvt != null) throw "__break__";
								if (!colorFill) {
									if (uvt == null) {
										var this1;
										this1 = new openfl_VectorData();
										var this2;
										this2 = new Array(0);
										this1.data = this2;
										this1.length = 0;
										this1.fixed = false;
										uvt = this1;
										var _g3 = 0;
										var _g2 = v.length / 2 | 0;
										while (_g3 < _g2) {
											var i1 = _g3++;
											if (!uvt.fixed) {
												uvt.length++;
												if (uvt.data.length < uvt.length) {
													var data1;
													var this3;
													this3 = new Array(uvt.data.length + 10);
													data1 = this3;
													haxe_ds__$Vector_Vector_$Impl_$.blit(uvt.data, 0, data1, 0, uvt.data.length);
													uvt.data = data1;
												}
												uvt.data[uvt.length - 1] = v.data[i1 * 2] / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width;
											}
											uvt.length;
											if (!uvt.fixed) {
												uvt.length++;
												if (uvt.data.length < uvt.length) {
													var data2;
													var this4;
													this4 = new Array(uvt.data.length + 10);
													data2 = this4;
													haxe_ds__$Vector_Vector_$Impl_$.blit(uvt.data, 0, data2, 0, uvt.data.length);
													uvt.data = data2;
												}
												uvt.data[uvt.length - 1] = v.data[i1 * 2 + 1] / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height;
											}
											uvt.length;
										}
									}
									var skipT = uvt.length != v.length;
									var normalizedUVT = openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT(uvt, skipT);
									var maxUVT = normalizedUVT.max;
									uvt = normalizedUVT.uvt;
									if (maxUVT > 1) pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill, openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat, openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width | 0, openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height | 0); else pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill, openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat, openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width, openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height);
								}
								var i = 0;
								var l = ind.length;
								var a_;
								var b_;
								var c_;
								var iax;
								var iay;
								var ibx;
								var iby;
								var icx;
								var icy;
								var x1;
								var y1;
								var x2;
								var y2;
								var x3;
								var y3;
								var uvx1;
								var uvy1;
								var uvx2;
								var uvy2;
								var uvx3;
								var uvy3;
								var denom;
								var t1;
								var t2;
								var t3;
								var t4;
								var dx;
								var dy;
								while (i < l) {
									a_ = i;
									b_ = i + 1;
									c_ = i + 2;
									iax = ind.data[a_] * 2;
									iay = ind.data[a_] * 2 + 1;
									ibx = ind.data[b_] * 2;
									iby = ind.data[b_] * 2 + 1;
									icx = ind.data[c_] * 2;
									icy = ind.data[c_] * 2 + 1;
									x1 = v.data[iax];
									y1 = v.data[iay];
									x2 = v.data[ibx];
									y2 = v.data[iby];
									x3 = v.data[icx];
									y3 = v.data[icy];
									var _g21 = c14.buffer.o[c14.oPos + 3];
									switch (_g21[1]) {
										case 2:
											if (!((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0)) {
												i += 3;
												continue;
											}
											break;
										case 0:
											if ((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0) {
												i += 3;
												continue;
											}
											break;
										default:
									}
									if (colorFill) {
										openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
										openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x1, y1);
										openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x2, y2);
										openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3, y3);
										openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
										if (!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
										i += 3;
										continue;
									}
									openfl__$internal_renderer_canvas_CanvasGraphics.context.save();
									openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
									openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x1, y1);
									openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x2, y2);
									openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3, y3);
									openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
									openfl__$internal_renderer_canvas_CanvasGraphics.context.clip();
									uvx1 = uvt.data[iax] * pattern.width;
									uvx2 = uvt.data[ibx] * pattern.width;
									uvx3 = uvt.data[icx] * pattern.width;
									uvy1 = uvt.data[iay] * pattern.height;
									uvy2 = uvt.data[iby] * pattern.height;
									uvy3 = uvt.data[icy] * pattern.height;
									denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
									if (denom == 0) {
										i += 3;
										continue;
									}
									t1 = -(uvy1 * (x3 - x2) - uvy2 * x3 + uvy3 * x2 + (uvy2 - uvy3) * x1) / denom;
									t2 = (uvy2 * y3 + uvy1 * (y2 - y3) - uvy3 * y2 + (uvy3 - uvy2) * y1) / denom;
									t3 = (uvx1 * (x3 - x2) - uvx2 * x3 + uvx3 * x2 + (uvx2 - uvx3) * x1) / denom;
									t4 = -(uvx2 * y3 + uvx1 * (y2 - y3) - uvx3 * y2 + (uvx3 - uvx2) * y1) / denom;
									dx = (uvx1 * (uvy3 * x2 - uvy2 * x3) + uvy1 * (uvx2 * x3 - uvx3 * x2) + (uvx3 * uvy2 - uvx2 * uvy3) * x1) / denom;
									dy = (uvx1 * (uvy3 * y2 - uvy2 * y3) + uvy1 * (uvx2 * y3 - uvx3 * y2) + (uvx3 * uvy2 - uvx2 * uvy3) * y1) / denom;
									openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(t1, t2, t3, t4, dx, dy);
									openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(pattern, 0, 0);
									openfl__$internal_renderer_canvas_CanvasGraphics.context.restore();
									i += 3;
								}
								break;
							case 10:
								var c15;
								data.advance();
								data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TILES;
								c15 = data;
								var useScale = (c15.buffer.i[c15.iPos] & 1) > 0;
								var offsetX = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
								var offsetY = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
								var useRotation = (c15.buffer.i[c15.iPos] & 2) > 0;
								var useTransform = (c15.buffer.i[c15.iPos] & 16) > 0;
								var useRGB = (c15.buffer.i[c15.iPos] & 4) > 0;
								var useAlpha = (c15.buffer.i[c15.iPos] & 8) > 0;
								var useRect = (c15.buffer.i[c15.iPos] & 32) > 0;
								var useOrigin = (c15.buffer.i[c15.iPos] & 64) > 0;
								var useBlendAdd = (c15.buffer.i[c15.iPos] & 65536) > 0;
								if (useTransform) {
									useScale = false;
									useRotation = false;
								}
								var scaleIndex = 0;
								var rotationIndex = 0;
								var rgbIndex = 0;
								var alphaIndex = 0;
								var transformIndex = 0;
								var numValues = 3;
								if (useRect) if (useOrigin) numValues = 8; else numValues = 6;
								if (useScale) {
									scaleIndex = numValues;
									numValues++;
								}
								if (useRotation) {
									rotationIndex = numValues;
									numValues++;
								}
								if (useTransform) {
									transformIndex = numValues;
									numValues += 4;
								}
								if (useRGB) {
									rgbIndex = numValues;
									numValues += 3;
								}
								if (useAlpha) {
									alphaIndex = numValues;
									numValues++;
								}
								var totalCount = c15.buffer.ff[c15.ffPos].length;
								if (c15.buffer.i[c15.iPos + 1] >= 0 && totalCount > c15.buffer.i[c15.iPos + 1]) totalCount = c15.buffer.i[c15.iPos + 1];
								var itemCount = totalCount / numValues | 0;
								var index = 0;
								var rect = null;
								var center = null;
								var previousTileID = -1;
								var surface;
								c15.buffer.ts[c15.tsPos].__bitmap.__sync();
								surface = c15.buffer.ts[c15.tsPos].__bitmap.image.get_src();
								if (useBlendAdd) openfl__$internal_renderer_canvas_CanvasGraphics.context.globalCompositeOperation = "lighter";
								while (index < totalCount) {
									var tileID;
									if (!useRect) tileID = c15.buffer.ff[c15.ffPos][index + 2] | 0; else tileID = -1;
									if (!useRect && tileID != previousTileID) {
										rect = c15.buffer.ts[c15.tsPos].__tileRects[tileID];
										center = c15.buffer.ts[c15.tsPos].__centerPoints[tileID];
										previousTileID = tileID;
									} else if (useRect) {
										rect = c15.buffer.ts[c15.tsPos].__rectTile;
										rect.setTo(c15.buffer.ff[c15.ffPos][index + 2], c15.buffer.ff[c15.ffPos][index + 3], c15.buffer.ff[c15.ffPos][index + 4], c15.buffer.ff[c15.ffPos][index + 5]);
										center = c15.buffer.ts[c15.tsPos].__point;
										if (useOrigin) {
											center.x = c15.buffer.ff[c15.ffPos][index + 6];
											center.y = c15.buffer.ff[c15.ffPos][index + 7];
										} else {
											center.x = 0;
											center.y = 0;
										}
									}
									if (rect != null && rect.width > 0 && rect.height > 0 && center != null) {
										openfl__$internal_renderer_canvas_CanvasGraphics.context.save();
										openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(c15.buffer.ff[c15.ffPos][index] - offsetX, c15.buffer.ff[c15.ffPos][index + 1] - offsetY);
										if (useRotation) openfl__$internal_renderer_canvas_CanvasGraphics.context.rotate(c15.buffer.ff[c15.ffPos][index + rotationIndex]);
										var scale = 1.0;
										if (useScale) scale = c15.buffer.ff[c15.ffPos][index + scaleIndex];
										if (useTransform) openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(c15.buffer.ff[c15.ffPos][index + transformIndex], c15.buffer.ff[c15.ffPos][index + transformIndex + 1], c15.buffer.ff[c15.ffPos][index + transformIndex + 2], c15.buffer.ff[c15.ffPos][index + transformIndex + 3], 0, 0);
										if (useAlpha) openfl__$internal_renderer_canvas_CanvasGraphics.context.globalAlpha = c15.buffer.ff[c15.ffPos][index + alphaIndex];
										openfl__$internal_renderer_canvas_CanvasGraphics.context.imageSmoothingEnabled = c15.buffer.b[c15.bPos];
										openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(surface, rect.x, rect.y, rect.width, rect.height, -center.x * scale, -center.y * scale, rect.width * scale, rect.height * scale);
										openfl__$internal_renderer_canvas_CanvasGraphics.context.restore();
									}
									index += numValues;
								}
								if (useBlendAdd) openfl__$internal_renderer_canvas_CanvasGraphics.context.globalCompositeOperation = "source-over";
								break;
							default:
								data.advance();
								data.prev = type;
						}
					}
				} catch (e) { if (e != "__break__") throw e; }
				if (openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() > 0) openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
				if (openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() > 0) openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
				data.destroy();
				graphics.__bitmap = openfl_display_BitmapData.fromCanvas(graphics.__canvas);
			}
			graphics.set___dirty(false);
		}
	};
	openfl__$internal_renderer_canvas_CanvasGraphics.renderMask = function (graphics, renderSession) {
		if (graphics.__commands.get_length() != 0) {
			openfl__$internal_renderer_canvas_CanvasGraphics.context = renderSession.context;
			var positionX = 0.0;
			var positionY = 0.0;
			var offsetX = 0;
			var offsetY = 0;
			var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
			var _g = 0;
			var _g1 = graphics.__commands.types;
			while (_g < _g1.length) {
				var type = _g1[_g];
				++_g;
				switch (type[1]) {
					case 3:
						var c;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
						c = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(c.buffer.f[c.fPos] - offsetX, c.buffer.f[c.fPos + 1] - offsetY, c.buffer.f[c.fPos + 3] - offsetX, c.buffer.f[c.fPos + 4] - offsetY, c.buffer.f[c.fPos + 5] - offsetX, c.buffer.f[c.fPos + 6] - offsetY);
						positionX = c.buffer.f[c.fPos + 5];
						positionY = c.buffer.f[c.fPos + 6];
						break;
					case 4:
						var c1;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
						c1 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(c1.buffer.f[c1.fPos] - offsetX, c1.buffer.f[c1.fPos + 1] - offsetY, c1.buffer.f[c1.fPos + 2] - offsetX, c1.buffer.f[c1.fPos + 3] - offsetY);
						positionX = c1.buffer.f[c1.fPos + 2];
						positionY = c1.buffer.f[c1.fPos + 3];
						break;
					case 5:
						var c2;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
						c2 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(c2.buffer.f[c2.fPos] - offsetX, c2.buffer.f[c2.fPos + 1] - offsetY, c2.buffer.f[c2.fPos + 2], 0, Math.PI * 2, true);
						break;
					case 6:
						var c3;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
						c3 = data;
						var x = c3.buffer.f[c3.fPos];
						var y = c3.buffer.f[c3.fPos + 1];
						var width = c3.buffer.f[c3.fPos + 2];
						var height = c3.buffer.f[c3.fPos + 3];
						x -= offsetX;
						y -= offsetY;
						var kappa = .5522848;
						var ox = width / 2 * kappa;
						var oy = height / 2 * kappa;
						var xe = x + width;
						var ye = y + height;
						var xm = x + width / 2;
						var ym = y + height / 2;
						openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x, ym);
						openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
						openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
						openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
						openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);
						break;
					case 8:
						var c4;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
						c4 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(c4.buffer.f[c4.fPos] - offsetX, c4.buffer.f[c4.fPos + 1] - offsetY, c4.buffer.f[c4.fPos + 2], c4.buffer.f[c4.fPos + 3]);
						break;
					case 9:
						var c5;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
						c5 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(c5.buffer.f[c5.fPos] - offsetX, c5.buffer.f[c5.fPos + 1] - offsetY, c5.buffer.f[c5.fPos + 2], c5.buffer.f[c5.fPos + 3], c5.buffer.f[c5.fPos + 4], c5.buffer.f[c5.fPos + 5]);
						break;
					case 16:
						var c6;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
						c6 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(c6.buffer.f[c6.fPos] - offsetX, c6.buffer.f[c6.fPos + 1] - offsetY);
						positionX = c6.buffer.f[c6.fPos];
						positionY = c6.buffer.f[c6.fPos + 1];
						break;
					case 17:
						var c7;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
						c7 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(c7.buffer.f[c7.fPos] - offsetX, c7.buffer.f[c7.fPos + 1] - offsetY);
						positionX = c7.buffer.f[c7.fPos];
						positionY = c7.buffer.f[c7.fPos + 1];
						break;
					default:
						data.advance();
						data.prev = type;
				}
			}
			data.destroy();
		}
	};
	var openfl__$internal_renderer_canvas_CanvasMaskManager = function (renderSession) {
		openfl__$internal_renderer_AbstractMaskManager.call(this, renderSession);
	};
	$hxClasses["openfl._internal.renderer.canvas.CanvasMaskManager"] = openfl__$internal_renderer_canvas_CanvasMaskManager;
	openfl__$internal_renderer_canvas_CanvasMaskManager.__name__ = ["openfl", "_internal", "renderer", "canvas", "CanvasMaskManager"];
	openfl__$internal_renderer_canvas_CanvasMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
	openfl__$internal_renderer_canvas_CanvasMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype, {
		pushMask: function (mask) {
			var context = this.renderSession.context;
			context.save();
			var transform = mask.__getWorldTransform();
			context.setTransform(transform.a, transform.b, transform.c, transform.d, transform.tx, transform.ty);
			context.beginPath();
			mask.__renderCanvasMask(this.renderSession);
			context.clip();
		}
		, pushRect: function (rect, transform) {
			var context = this.renderSession.context;
			context.save();
			context.setTransform(transform.a, transform.b, transform.c, transform.d, transform.tx, transform.ty);
			context.beginPath();
			context.rect(rect.x, rect.y, rect.width, rect.height);
			context.clip();
		}
		, popMask: function () {
			this.renderSession.context.restore();
		}
		, popRect: function () {
			this.renderSession.context.restore();
		}
		, __class__: openfl__$internal_renderer_canvas_CanvasMaskManager
	});
	var openfl__$internal_renderer_canvas_CanvasRenderer = function (width, height, context) {
		openfl__$internal_renderer_AbstractRenderer.call(this, width, height);
		this.context = context;
		this.renderSession = new openfl__$internal_renderer_RenderSession();
		this.renderSession.context = context;
		this.renderSession.roundPixels = true;
		this.renderSession.renderer = this;
		this.renderSession.maskManager = new openfl__$internal_renderer_canvas_CanvasMaskManager(this.renderSession);
	};
	$hxClasses["openfl._internal.renderer.canvas.CanvasRenderer"] = openfl__$internal_renderer_canvas_CanvasRenderer;
	openfl__$internal_renderer_canvas_CanvasRenderer.__name__ = ["openfl", "_internal", "renderer", "canvas", "CanvasRenderer"];
	openfl__$internal_renderer_canvas_CanvasRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
	openfl__$internal_renderer_canvas_CanvasRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype, {
		render: function (stage) {
			this.context.setTransform(1, 0, 0, 1, 0, 0);
			this.context.globalAlpha = 1;
			if (!stage.__transparent && stage.__clearBeforeRender) {
				this.context.fillStyle = stage.__colorString;
				this.context.fillRect(0, 0, stage.stageWidth, stage.stageHeight);
			} else if (stage.__transparent && stage.__clearBeforeRender) this.context.clearRect(0, 0, stage.stageWidth, stage.stageHeight);
			stage.__renderCanvas(this.renderSession);
		}
		, __class__: openfl__$internal_renderer_canvas_CanvasRenderer
	});
	var openfl__$internal_renderer_canvas_CanvasShape = function () { };
	$hxClasses["openfl._internal.renderer.canvas.CanvasShape"] = openfl__$internal_renderer_canvas_CanvasShape;
	openfl__$internal_renderer_canvas_CanvasShape.__name__ = ["openfl", "_internal", "renderer", "canvas", "CanvasShape"];
	openfl__$internal_renderer_canvas_CanvasShape.render = function (shape, renderSession) {
		if (!shape.__renderable || shape.__worldAlpha <= 0) return;
		var graphics = shape.__graphics;
		if (graphics != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics, renderSession);
			if (graphics.__canvas != null) {
				var context = renderSession.context;
				var scrollRect = shape.get_scrollRect();
				if (graphics.__bounds.width > 0 && graphics.__bounds.height > 0 && (scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0)) {
					if (shape.__mask != null) renderSession.maskManager.pushMask(shape.__mask);
					context.globalAlpha = shape.__worldAlpha;
					var transform = shape.__renderTransform;
					if (renderSession.roundPixels) context.setTransform(transform.a, transform.b, transform.c, transform.d, transform.tx | 0, transform.ty | 0); else context.setTransform(transform.a, transform.b, transform.c, transform.d, transform.tx, transform.ty);
					if (scrollRect == null) context.drawImage(graphics.__canvas, graphics.__bounds.x, graphics.__bounds.y); else context.drawImage(graphics.__canvas, Math.ceil(graphics.__bounds.x + scrollRect.x), Math.ceil(graphics.__bounds.y + scrollRect.y), scrollRect.width, scrollRect.height, Math.ceil(graphics.__bounds.x + scrollRect.x), Math.ceil(graphics.__bounds.y + scrollRect.y), scrollRect.width, scrollRect.height);
					if (shape.__mask != null) renderSession.maskManager.popMask();
				}
			}
		}
	};
	var openfl__$internal_renderer_canvas_CanvasTextField = function () { };
	$hxClasses["openfl._internal.renderer.canvas.CanvasTextField"] = openfl__$internal_renderer_canvas_CanvasTextField;
	openfl__$internal_renderer_canvas_CanvasTextField.__name__ = ["openfl", "_internal", "renderer", "canvas", "CanvasTextField"];
	openfl__$internal_renderer_canvas_CanvasTextField.context = null;
	openfl__$internal_renderer_canvas_CanvasTextField.disableInputMode = function (textEngine) {
	};
	openfl__$internal_renderer_canvas_CanvasTextField.enableInputMode = function (textEngine) {
		textEngine.__cursorPosition = -1;
		if (textEngine.__hiddenInput == null) {
			textEngine.__hiddenInput = window.document.createElement("input");
			var hiddenInput = textEngine.__hiddenInput;
			hiddenInput.type = "text";
			hiddenInput.style.position = "absolute";
			hiddenInput.style.opacity = "0";
			hiddenInput.style.color = "transparent";
			hiddenInput.style.left = "0px";
			hiddenInput.style.top = "50%";
			if (new EReg("(iPad|iPhone|iPod).*OS 8_", "gi").match(window.navigator.userAgent)) {
				hiddenInput.style.fontSize = "0px";
				hiddenInput.style.width = "0px";
				hiddenInput.style.height = "0px";
			} else {
				hiddenInput.style.width = "1px";
				hiddenInput.style.height = "1px";
			}
			hiddenInput.style.pointerEvents = "none";
			hiddenInput.style.zIndex = "-10000000";
			if (textEngine.maxChars > 0) hiddenInput.maxLength = textEngine.maxChars;
			window.document.body.appendChild(hiddenInput);
			hiddenInput.value = textEngine.text;
		}
	};
	openfl__$internal_renderer_canvas_CanvasTextField.render = function (textField, renderSession) {
		if (textField.__dirty) {
			var textEngine = textField.__textEngine;
			textField.__updateLayout();
			if ((textEngine.text == null || textEngine.text == "") && !textEngine.background && !textEngine.border && !textEngine.__hasFocus || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != openfl_text_TextFieldAutoSize.NONE) {
				textField.__graphics.__canvas = null;
				textField.__graphics.__context = null;
				textField.__graphics.set___dirty(false);
				textField.__dirty = false;
			} else {
				var bounds = textEngine.bounds;
				if (textField.__graphics == null || textField.__graphics.__canvas == null) {
					if (textField.__graphics == null) textField.__graphics = new openfl_display_Graphics();
					textField.__graphics.__canvas = window.document.createElement("canvas");
					textField.__graphics.__context = textField.__graphics.__canvas.getContext("2d");
					textField.__graphics.__bounds = new openfl_geom_Rectangle(0, 0, bounds.width, bounds.height);
				}
				var graphics = textField.__graphics;
				openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
				if (textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
					var text = textEngine.text;
					if (textEngine.displayAsPassword) {
						var length = text.length;
						var mask = "";
						var _g = 0;
						while (_g < length) {
							var i = _g++;
							mask += "*";
						}
						text = mask;
					}
					graphics.__canvas.width = Math.ceil(bounds.width);
					graphics.__canvas.height = Math.ceil(bounds.height);
					if (textEngine.antiAliasType != openfl_text_AntiAliasType.ADVANCED || textEngine.gridFitType != openfl_text_GridFitType.PIXEL) {
						graphics.__context.mozImageSmoothingEnabled = true;
						graphics.__context.msImageSmoothingEnabled = true;
						graphics.__context.imageSmoothingEnabled = true;
					} else {
						graphics.__context.mozImageSmoothingEnabled = false;
						graphics.__context.msImageSmoothingEnabled = false;
						graphics.__context.imageSmoothingEnabled = false;
					}
					if (textEngine.border || textEngine.background) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5, 0.5, bounds.width - 1, bounds.height - 1);
						if (textEngine.background) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(textEngine.backgroundColor, 6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
						}
						if (textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textEngine.borderColor, 6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "top";
					openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
					var scrollX = -textField.get_scrollH();
					var scrollY = 0.0;
					var _g1 = 0;
					var _g2 = textField.get_scrollV() - 1;
					while (_g1 < _g2) {
						var i1 = _g1++;
						scrollY -= textEngine.lineHeights[i1];
					}
					var advance;
					var offsetY = 0.0;
					var applyHack = new EReg("(iPad|iPhone|iPod|Firefox)", "g").match(window.navigator.userAgent);
					var _g3 = 0;
					var _g11 = textEngine.layoutGroups;
					while (_g3 < _g11.length) {
						var group = _g11[_g3];
						++_g3;
						if (group.lineIndex < textField.get_scrollV() - 1) continue;
						if (group.lineIndex > textField.get_scrollV() + textEngine.bottomScrollV - 2) break;
						openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_text_TextEngine.getFont(group.format);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(group.format.color, 6);
						if (applyHack) offsetY = group.format.size * 0.185;
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(group.startIndex, group.endIndex), group.offsetX + scrollX, group.offsetY + offsetY + scrollY);
						if (textField.__caretIndex > -1 && textEngine.selectable) {
							if (textField.__selectionIndex == textField.__caretIndex) {
								if (textField.__showCursor && group.startIndex <= textField.__caretIndex && group.endIndex >= textField.__caretIndex) {
									advance = 0.0;
									var _g31 = 0;
									var _g21 = textField.__caretIndex - group.startIndex;
									while (_g31 < _g21) {
										var i2 = _g31++;
										if (group.advances.length <= i2) break;
										advance += group.advances[i2];
									}
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(group.offsetX + advance, group.offsetY, 1, group.height);
								}
							} else if (group.startIndex <= textField.__caretIndex && group.endIndex >= textField.__caretIndex || group.startIndex <= textField.__selectionIndex && group.endIndex >= textField.__selectionIndex) {
								var selectionStart = Std["int"](Math.min(textField.__selectionIndex, textField.__caretIndex));
								var selectionEnd = Std["int"](Math.max(textField.__selectionIndex, textField.__caretIndex));
								if (group.startIndex > selectionStart) selectionStart = group.startIndex;
								if (group.endIndex < selectionEnd) selectionEnd = group.endIndex;
								var start;
								var end;
								start = textField.getCharBoundaries(selectionStart);
								if (selectionEnd >= textEngine.text.length) {
									end = textField.getCharBoundaries(textEngine.text.length - 1);
									end.x += end.width + 2;
								} else end = textField.getCharBoundaries(selectionEnd);
								if (start != null && end != null) {
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(start.x, start.y, end.x - start.x, group.height);
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#FFFFFF";
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(selectionStart, selectionEnd), scrollX + start.x, group.offsetY + offsetY + scrollY);
								}
							}
						}
					}
				} else {
					graphics.__canvas.width = Math.ceil(bounds.width);
					graphics.__canvas.height = Math.ceil(bounds.height);
					if (textEngine.border || textEngine.background) {
						if (textEngine.border) openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5, 0.5, bounds.width - 1, bounds.height - 1); else openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0, 0, bounds.width, bounds.height);
						if (textEngine.background) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(textEngine.backgroundColor, 6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
						}
						if (textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textEngine.borderColor, 6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
					}
				}
				graphics.__bitmap = openfl_display_BitmapData.fromCanvas(textField.__graphics.__canvas);
				textField.__dirty = false;
				graphics.set___dirty(false);
			}
		}
	};
	var openfl__$internal_renderer_console_ConsoleRenderer = function (width, height, ctx) {
		openfl__$internal_renderer_AbstractRenderer.call(this, width, height);
		throw new js__$Boot_HaxeError("ConsoleRenderer not supported");
	};
	$hxClasses["openfl._internal.renderer.console.ConsoleRenderer"] = openfl__$internal_renderer_console_ConsoleRenderer;
	openfl__$internal_renderer_console_ConsoleRenderer.__name__ = ["openfl", "_internal", "renderer", "console", "ConsoleRenderer"];
	openfl__$internal_renderer_console_ConsoleRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
	openfl__$internal_renderer_console_ConsoleRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype, {
		render: function (stage) {
		}
		, __class__: openfl__$internal_renderer_console_ConsoleRenderer
	});
	var openfl__$internal_renderer_dom_DOMBitmap = function () { };
	$hxClasses["openfl._internal.renderer.dom.DOMBitmap"] = openfl__$internal_renderer_dom_DOMBitmap;
	openfl__$internal_renderer_dom_DOMBitmap.__name__ = ["openfl", "_internal", "renderer", "dom", "DOMBitmap"];
	openfl__$internal_renderer_dom_DOMBitmap.render = function (bitmap, renderSession) {
		if (bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
			if (bitmap.bitmapData.image.buffer.__srcImage != null) openfl__$internal_renderer_dom_DOMBitmap.renderImage(bitmap, renderSession); else openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(bitmap, renderSession);
		} else {
			if (bitmap.__image != null) {
				renderSession.element.removeChild(bitmap.__image);
				bitmap.__image = null;
				bitmap.__style = null;
			}
			if (bitmap.__canvas != null) {
				renderSession.element.removeChild(bitmap.__canvas);
				bitmap.__canvas = null;
				bitmap.__style = null;
			}
		}
	};
	openfl__$internal_renderer_dom_DOMBitmap.renderCanvas = function (bitmap, renderSession) {
		if (bitmap.__image != null) {
			renderSession.element.removeChild(bitmap.__image);
			bitmap.__image = null;
		}
		if (bitmap.__canvas == null) {
			bitmap.__canvas = window.document.createElement("canvas");
			bitmap.__context = bitmap.__canvas.getContext("2d");
			if (!bitmap.smoothing) {
				bitmap.__context.mozImageSmoothingEnabled = false;
				bitmap.__context.msImageSmoothingEnabled = false;
				bitmap.__context.imageSmoothingEnabled = false;
			}
			openfl__$internal_renderer_dom_DOMRenderer.initializeElement(bitmap, bitmap.__canvas, renderSession);
		}
		bitmap.bitmapData.__sync();
		bitmap.__canvas.width = bitmap.bitmapData.width;
		bitmap.__canvas.height = bitmap.bitmapData.height;
		bitmap.__context.globalAlpha = bitmap.__worldAlpha;
		bitmap.__context.drawImage(bitmap.bitmapData.image.buffer.__srcCanvas, 0, 0);
		openfl__$internal_renderer_dom_DOMRenderer.applyStyle(bitmap, renderSession, true, false, true);
	};
	openfl__$internal_renderer_dom_DOMBitmap.renderImage = function (bitmap, renderSession) {
		if (bitmap.__canvas != null) {
			renderSession.element.removeChild(bitmap.__canvas);
			bitmap.__canvas = null;
		}
		if (bitmap.__image == null) {
			bitmap.__image = window.document.createElement("img");
			bitmap.__image.src = bitmap.bitmapData.image.buffer.__srcImage.src;
			openfl__$internal_renderer_dom_DOMRenderer.initializeElement(bitmap, bitmap.__image, renderSession);
		}
		openfl__$internal_renderer_dom_DOMRenderer.applyStyle(bitmap, renderSession, true, true, true);
	};
	var openfl__$internal_renderer_dom_DOMMaskManager = function (renderSession) {
		openfl__$internal_renderer_AbstractMaskManager.call(this, renderSession);
	};
	$hxClasses["openfl._internal.renderer.dom.DOMMaskManager"] = openfl__$internal_renderer_dom_DOMMaskManager;
	openfl__$internal_renderer_dom_DOMMaskManager.__name__ = ["openfl", "_internal", "renderer", "dom", "DOMMaskManager"];
	openfl__$internal_renderer_dom_DOMMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
	openfl__$internal_renderer_dom_DOMMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype, {
		pushMask: function (mask) {
		}
		, pushRect: function (rect, transform) {
		}
		, popMask: function () {
		}
		, __class__: openfl__$internal_renderer_dom_DOMMaskManager
	});
	var openfl__$internal_renderer_dom_DOMRenderer = function (width, height, element) {
		openfl__$internal_renderer_AbstractRenderer.call(this, width, height);
		this.element = element;
		this.renderSession = new openfl__$internal_renderer_RenderSession();
		this.renderSession.element = element;
		this.renderSession.roundPixels = true;
		var prefix = (function () {
			var styles = window.getComputedStyle(document.documentElement, ''),
				pre = (Array.prototype.slice
					.call(styles)
					.join('')
					.match(/-(moz|webkit|ms)-/) || (styles.OLink === '' && ['', 'o'])
				)[1],
				dom = ('WebKit|Moz|MS|O').match(new RegExp('(' + pre + ')', 'i'))[1];
			return {
				dom: dom,
				lowercase: pre,
				css: '-' + pre + '-',
				js: pre[0].toUpperCase() + pre.substr(1)
			};
		})();
		this.renderSession.vendorPrefix = prefix.lowercase;
		if (prefix.lowercase == "webkit") this.renderSession.transformProperty = "-webkit-transform"; else this.renderSession.transformProperty = "transform";
		if (prefix.lowercase == "webkit") this.renderSession.transformOriginProperty = "-webkit-transform-origin"; else this.renderSession.transformOriginProperty = "transform-origin";
		this.renderSession.maskManager = new openfl__$internal_renderer_dom_DOMMaskManager(this.renderSession);
		this.renderSession.renderer = this;
	};
	$hxClasses["openfl._internal.renderer.dom.DOMRenderer"] = openfl__$internal_renderer_dom_DOMRenderer;
	openfl__$internal_renderer_dom_DOMRenderer.__name__ = ["openfl", "_internal", "renderer", "dom", "DOMRenderer"];
	openfl__$internal_renderer_dom_DOMRenderer.applyStyle = function (displayObject, renderSession, setTransform, setAlpha, setClip) {
		var style = displayObject.__style;
		if (setTransform && displayObject.__worldTransformChanged) style.setProperty(renderSession.transformProperty, displayObject.__worldTransform.to3DString(renderSession.roundPixels), null);
		if (displayObject.__worldZ != ++renderSession.z) {
			displayObject.__worldZ = renderSession.z;
			style.setProperty("z-index", displayObject.__worldZ == null ? "null" : "" + displayObject.__worldZ, null);
		}
		if (setAlpha && displayObject.__worldAlphaChanged) {
			if (displayObject.__worldAlpha < 1) style.setProperty("opacity", displayObject.__worldAlpha == null ? "null" : "" + displayObject.__worldAlpha, null); else style.removeProperty("opacity");
		}
		if (setClip && displayObject.__worldClipChanged) {
			if (displayObject.__worldClip == null) style.removeProperty("clip"); else {
				var clip = openfl_geom_Rectangle.__temp;
				var matrix = openfl_geom_Matrix.__temp;
				matrix.copyFrom(displayObject.__worldTransform);
				matrix.invert();
				displayObject.__worldClip.__transform(clip, matrix);
				style.setProperty("clip", "rect(" + clip.y + "px, " + clip.get_right() + "px, " + clip.get_bottom() + "px, " + clip.x + "px)", null);
			}
		}
	};
	openfl__$internal_renderer_dom_DOMRenderer.initializeElement = function (displayObject, element, renderSession) {
		var style = displayObject.__style = element.style;
		style.setProperty("position", "absolute", null);
		style.setProperty("top", "0", null);
		style.setProperty("left", "0", null);
		style.setProperty(renderSession.transformOriginProperty, "0 0 0", null);
		renderSession.element.appendChild(element);
		displayObject.__worldAlphaChanged = true;
		displayObject.__worldClipChanged = true;
		displayObject.__worldTransformChanged = true;
		displayObject.__worldVisibleChanged = true;
		displayObject.__worldZ = -1;
	};
	openfl__$internal_renderer_dom_DOMRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
	openfl__$internal_renderer_dom_DOMRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype, {
		render: function (stage) {
			this.element.style.background = stage.__colorString;
			this.renderSession.z = 1;
			stage.__renderDOM(this.renderSession);
		}
		, __class__: openfl__$internal_renderer_dom_DOMRenderer
	});
	var openfl__$internal_renderer_dom_DOMShape = function () { };
	$hxClasses["openfl._internal.renderer.dom.DOMShape"] = openfl__$internal_renderer_dom_DOMShape;
	openfl__$internal_renderer_dom_DOMShape.__name__ = ["openfl", "_internal", "renderer", "dom", "DOMShape"];
	openfl__$internal_renderer_dom_DOMShape.render = function (shape, renderSession) {
		var graphics = shape.__graphics;
		if (shape.stage != null && shape.__worldVisible && shape.__renderable && graphics != null) {
			if (graphics.__dirty || shape.__worldAlphaChanged || shape.__canvas == null && graphics.__canvas != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics, renderSession);
				if (graphics.__canvas != null) {
					if (shape.__canvas == null) {
						shape.__canvas = window.document.createElement("canvas");
						shape.__context = shape.__canvas.getContext("2d");
						openfl__$internal_renderer_dom_DOMRenderer.initializeElement(shape, shape.__canvas, renderSession);
					}
					shape.__canvas.width = graphics.__canvas.width;
					shape.__canvas.height = graphics.__canvas.height;
					shape.__context.globalAlpha = shape.__worldAlpha;
					shape.__context.drawImage(graphics.__canvas, 0, 0);
				} else if (shape.__canvas != null) {
					renderSession.element.removeChild(shape.__canvas);
					shape.__canvas = null;
					shape.__style = null;
				}
			}
			if (shape.__canvas != null) {
				if (shape.__worldTransformChanged || graphics.__transformDirty) {
					graphics.__transformDirty = false;
					var transform = openfl_geom_Matrix.__temp;
					transform.identity();
					transform.translate(graphics.__bounds.x, graphics.__bounds.y);
					transform.concat(shape.__worldTransform);
					shape.__style.setProperty(renderSession.transformProperty, renderSession.roundPixels ? "matrix3d(" + transform.a + ", " + transform.b + ", " + "0, 0, " + transform.c + ", " + transform.d + ", " + "0, 0, 0, 0, 1, 0, " + (transform.tx | 0) + ", " + (transform.ty | 0) + ", 0, 1)" : "matrix3d(" + transform.a + ", " + transform.b + ", " + "0, 0, " + transform.c + ", " + transform.d + ", " + "0, 0, 0, 0, 1, 0, " + transform.tx + ", " + transform.ty + ", 0, 1)", null);
				}
				openfl__$internal_renderer_dom_DOMRenderer.applyStyle(shape, renderSession, false, false, true);
			}
		} else if (shape.__canvas != null) {
			renderSession.element.removeChild(shape.__canvas);
			shape.__canvas = null;
			shape.__style = null;
		}
	};
	var openfl__$internal_renderer_dom_DOMTextField = function () { };
	$hxClasses["openfl._internal.renderer.dom.DOMTextField"] = openfl__$internal_renderer_dom_DOMTextField;
	openfl__$internal_renderer_dom_DOMTextField.__name__ = ["openfl", "_internal", "renderer", "dom", "DOMTextField"];
	openfl__$internal_renderer_dom_DOMTextField.measureText = function (textField) {
		var textEngine = textField.__textEngine;
		var div = textField.__div;
		if (div == null) {
			div = window.document.createElement("div");
			div.innerHTML = new EReg("\n", "g").replace(textEngine.text, "<br>");
			div.style.setProperty("font", openfl__$internal_text_TextEngine.getFont(textField.__textFormat), null);
			div.style.setProperty("pointer-events", "none", null);
			div.style.position = "absolute";
			div.style.top = "110%";
			window.document.body.appendChild(div);
		}
		textEngine.__measuredWidth = div.clientWidth;
		if (textField.__div == null) div.style.width = Std.string(textEngine.width - 4) + "px";
		textEngine.__measuredHeight = div.clientHeight;
		if (textField.__div == null) window.document.body.removeChild(div);
	};
	openfl__$internal_renderer_dom_DOMTextField.render = function (textField, renderSession) {
		var textEngine = textField.__textEngine;
		if (textField.stage != null && textField.__worldVisible && textField.__renderable) {
			if (textField.__dirty || textField.__div == null) {
				if (textEngine.text != "" || textEngine.background || textEngine.border || textEngine.type == openfl_text_TextFieldType.INPUT) {
					if (textField.__div == null) {
						textField.__div = window.document.createElement("div");
						openfl__$internal_renderer_dom_DOMRenderer.initializeElement(textField, textField.__div, renderSession);
						textField.__style.setProperty("outline", "none", null);
						textField.__div.addEventListener("input", function (event) {
							event.preventDefault();
							if (textField.get_htmlText() != textField.__div.innerHTML) {
								textField.set_htmlText(textField.__div.innerHTML);
								textField.__dirty = false;
							}
						}, true);
					}
					if (textEngine.selectable) textField.__style.setProperty("cursor", "text", null); else textField.__style.setProperty("cursor", "inherit", null);
					textField.__div.contentEditable = textEngine.type == openfl_text_TextFieldType.INPUT;
					var style = textField.__style;
					textField.__div.innerHTML = textEngine.text;
					if (textEngine.background) style.setProperty("background-color", "#" + StringTools.hex(textEngine.backgroundColor, 6), null); else style.removeProperty("background-color");
					if (textEngine.border) style.setProperty("border", "solid 1px #" + StringTools.hex(textEngine.borderColor, 6), null); else style.removeProperty("border");
					style.setProperty("font", openfl__$internal_text_TextEngine.getFont(textField.__textFormat), null);
					style.setProperty("color", "#" + StringTools.hex(textField.__textFormat.color, 6), null);
					if (textEngine.autoSize != openfl_text_TextFieldAutoSize.NONE) style.setProperty("width", "auto", null); else style.setProperty("width", textEngine.width + "px", null);
					style.setProperty("height", textEngine.height + "px", null);
					var _g = textField.__textFormat.align;
					switch (_g[1]) {
						case 3:
							style.setProperty("text-align", "center", null);
							break;
						case 1:
							style.setProperty("text-align", "right", null);
							break;
						default:
							style.setProperty("text-align", "left", null);
					}
					textField.__dirty = false;
				} else if (textField.__div != null) {
					renderSession.element.removeChild(textField.__div);
					textField.__div = null;
				}
			}
			if (textField.__div != null) openfl__$internal_renderer_dom_DOMRenderer.applyStyle(textField, renderSession, true, true, false);
		} else if (textField.__div != null) {
			renderSession.element.removeChild(textField.__div);
			textField.__div = null;
			textField.__style = null;
		}
	};
	var openfl__$internal_renderer_opengl_GLBitmap = function () { };
	$hxClasses["openfl._internal.renderer.opengl.GLBitmap"] = openfl__$internal_renderer_opengl_GLBitmap;
	openfl__$internal_renderer_opengl_GLBitmap.__name__ = ["openfl", "_internal", "renderer", "opengl", "GLBitmap"];
	openfl__$internal_renderer_opengl_GLBitmap.render = function (bitmap, renderSession) {
		if (!bitmap.__renderable || bitmap.__worldAlpha <= 0 || bitmap.bitmapData == null || !bitmap.bitmapData.__isValid) return;
		renderSession.spriteBatch.renderBitmapData(bitmap.bitmapData, bitmap.smoothing, bitmap.__renderTransform, bitmap.__worldColorTransform, bitmap.__worldAlpha, bitmap.__blendMode, bitmap.__shader, bitmap.pixelSnapping);
	};
	openfl__$internal_renderer_opengl_GLBitmap.pushFramebuffer = function (renderSession, texture, viewPort, smoothing, transparent, clearBuffer, powerOfTwo) {
		if (powerOfTwo == null) powerOfTwo = true;
		if (clearBuffer == null) clearBuffer = false;
		if (transparent == null) transparent = true;
		var gl = renderSession.gl;
		if (gl == null) return null;
		var renderer = renderSession.renderer;
		var spritebatch = renderSession.spriteBatch;
		var x = viewPort.x | 0;
		var y = viewPort.y | 0;
		var width = viewPort.width | 0;
		var height = viewPort.height | 0;
		spritebatch.finish();
		if (openfl__$internal_renderer_opengl_GLBitmap.fbData.length <= 0) openfl__$internal_renderer_opengl_GLBitmap.fbData.push({ texture: null, viewPort: null, transparent: renderer.transparent });
		if (texture == null) texture = new openfl__$internal_renderer_opengl_utils_PingPongTexture(gl, width, height, smoothing, powerOfTwo);
		texture.resize(width, height);
		renderer.transparent = transparent;
		renderSession.maskManager.saveState();
		gl.bindFramebuffer(gl.FRAMEBUFFER, (texture.__swapped ? texture.__texture1 : texture.__texture0).frameBuffer);
		renderer.setViewport(x, y, width, height);
		gl.colorMask(true, true, true, true);
		renderSession.blendModeManager.setBlendMode(openfl_display_BlendMode.NORMAL);
		if (clearBuffer) (texture.__swapped ? texture.__texture1 : texture.__texture0).clear(0, 0, 0, 0, null);
		openfl__$internal_renderer_opengl_GLBitmap.fbData.push({ texture: texture, viewPort: viewPort, transparent: transparent });
		return texture;
	};
	openfl__$internal_renderer_opengl_GLBitmap.drawBitmapDrawable = function (renderSession, target, source, matrix, colorTransform, blendMode, clipRect) {
		var data = openfl__$internal_renderer_opengl_GLBitmap.fbData[openfl__$internal_renderer_opengl_GLBitmap.fbData.length - 1];
		if (data == null) throw new js__$Boot_HaxeError("No data to draw to");
		var gl = renderSession.gl;
		if (gl == null) return;
		var viewPort = data.viewPort;
		var renderer = renderSession.renderer;
		var spritebatch = renderSession.spriteBatch;
		var drawTarget = target != null;
		var tmpRect;
		if (clipRect == null) tmpRect = new openfl_geom_Rectangle(viewPort.x, viewPort.y, viewPort.width, viewPort.height); else tmpRect = clipRect.clone();
		spritebatch.begin(renderSession, drawTarget ? null : tmpRect);
		if (drawTarget) {
			target.__worldTransform.identity();
			openfl__$internal_renderer_opengl_GLBitmap.flipMatrix(target.__worldTransform, viewPort.height);
			target.__renderGL(renderSession);
			spritebatch.stop();
			if (target.__texture != null) gl.deleteTexture(target.__texture);
			target.__texture = null;
			spritebatch.start(tmpRect);
		}
		var ctCache = source.__worldColorTransform;
		var blendModeCache = source.__blendMode;
		var cached = source.__cacheAsBitmap;
		var m;
		if (matrix != null) m = new openfl_geom_Matrix(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty); else m = new openfl_geom_Matrix();
		openfl__$internal_renderer_opengl_GLBitmap.flipMatrix(m, viewPort.height);
		if (colorTransform != null) source.__worldColorTransform = colorTransform; else source.__worldColorTransform = new openfl_geom_ColorTransform();
		source.__blendMode = blendMode;
		openfl_display_DisplayObject.__cacheAsBitmapMode = true;
		source.__updateTransforms(m);
		source.__updateChildren(false);
		source.__cacheAsBitmap = false;
		source.__renderGL(renderSession);
		source.__cacheAsBitmap = cached;
		source.__worldColorTransform = ctCache;
		source.__blendMode = blendModeCache;
		openfl_display_DisplayObject.__cacheAsBitmapMode = false;
		source.__updateTransforms();
		source.__updateChildren(false);
	};
	openfl__$internal_renderer_opengl_GLBitmap.popFramebuffer = function (renderSession, image) {
		var gl = renderSession.gl;
		if (gl == null) return;
		renderSession.spriteBatch.finish();
		openfl__$internal_renderer_opengl_GLBitmap.fbData.pop();
		var data = openfl__$internal_renderer_opengl_GLBitmap.fbData[openfl__$internal_renderer_opengl_GLBitmap.fbData.length - 1];
		if (data == null) throw new js__$Boot_HaxeError("oh");
		var x;
		var y;
		var width;
		var height;
		if (data.viewPort == null) {
			x = y = 0;
			width = renderSession.renderer.width;
			height = renderSession.renderer.height;
		} else {
			x = Math.floor(data.viewPort.x);
			y = Math.floor(data.viewPort.y);
			width = Math.ceil(data.viewPort.width);
			height = Math.ceil(data.viewPort.height);
		}
		if (image != null) {
			if (image.width != width || image.height != height) image.resize(width, height);
			gl.readPixels(x, y, width, height, gl.RGBA, gl.UNSIGNED_BYTE, image.buffer.data);
			image.dirty = false;
			image.set_premultiplied(true);
		}
		gl.bindFramebuffer(gl.FRAMEBUFFER, data.texture == null ? renderSession.defaultFramebuffer : data.texture.get_framebuffer());
		renderSession.renderer.setViewport(x, y, width, height);
		renderSession.renderer.transparent = data.transparent;
		renderSession.maskManager.restoreState();
	};
	openfl__$internal_renderer_opengl_GLBitmap.flipMatrix = function (m, height) {
		var tx = m.tx;
		var ty = m.ty;
		m.tx = 0;
		m.ty = 0;
		m.scale(1, -1);
		m.translate(0, height);
		m.tx += tx;
		m.ty -= ty;
	};
	var openfl__$internal_renderer_opengl_GLRenderer = function (width, height, gl, transparent, antialias, preserveDrawingBuffer) {
		if (preserveDrawingBuffer == null) preserveDrawingBuffer = false;
		if (antialias == null) antialias = false;
		if (transparent == null) transparent = false;
		if (height == null) height = 600;
		if (width == null) width = 800;
		this.vpHeight = 0;
		this.vpWidth = 0;
		this.vpY = 0;
		this.vpX = 0;
		openfl__$internal_renderer_AbstractRenderer.call(this, width, height);
		this.transparent = transparent;
		this.preserveDrawingBuffer = preserveDrawingBuffer;
		this.width = width;
		this.height = height;
		this.viewport = new openfl_geom_Rectangle();
		this.options = { alpha: transparent, antialias: antialias, premultipliedAlpha: transparent, stencil: true, preserveDrawingBuffer: preserveDrawingBuffer };
		this._glContextId = openfl__$internal_renderer_opengl_GLRenderer.glContextId++;
		this.gl = gl;
		this.defaultFramebuffer = null;
		openfl__$internal_renderer_opengl_GLRenderer.glContexts[this._glContextId] = gl;
		this.projectionMatrix = new openfl_geom_Matrix();
		this.projection = new openfl_geom_Point();
		this.projection.x = this.width / 2;
		this.projection.y = -this.height / 2;
		this.offset = new openfl_geom_Point(0, 0);
		this.resize(this.width, this.height);
		this.contextLost = false;
		this.shaderManager = new openfl__$internal_renderer_opengl_utils_ShaderManager(gl);
		this.spriteBatch = new openfl__$internal_renderer_opengl_utils_SpriteBatch(gl);
		this.filterManager = new openfl__$internal_renderer_opengl_utils_FilterManager(gl, this.transparent);
		this.stencilManager = new openfl__$internal_renderer_opengl_utils_StencilManager(gl);
		this.blendModeManager = new openfl__$internal_renderer_opengl_utils_BlendModeManager(gl);
		this.renderSession = new openfl__$internal_renderer_RenderSession();
		this.renderSession.gl = this.gl;
		this.renderSession.drawCount = 0;
		this.renderSession.shaderManager = this.shaderManager;
		this.renderSession.filterManager = this.filterManager;
		this.renderSession.blendModeManager = this.blendModeManager;
		this.renderSession.spriteBatch = this.spriteBatch;
		this.renderSession.stencilManager = this.stencilManager;
		this.renderSession.renderer = this;
		this.renderSession.defaultFramebuffer = this.defaultFramebuffer;
		this.renderSession.projectionMatrix = this.projectionMatrix;
		this.maskManager = new openfl__$internal_renderer_opengl_utils_GLMaskManager(this.renderSession);
		this.renderSession.maskManager = this.maskManager;
		this.shaderManager.setShader(this.shaderManager.defaultShader);
		gl.disable(gl.DEPTH_TEST);
		gl.disable(gl.CULL_FACE);
		gl.enable(gl.BLEND);
		gl.colorMask(true, true, true, this.transparent);
	};
	$hxClasses["openfl._internal.renderer.opengl.GLRenderer"] = openfl__$internal_renderer_opengl_GLRenderer;
	openfl__$internal_renderer_opengl_GLRenderer.__name__ = ["openfl", "_internal", "renderer", "opengl", "GLRenderer"];
	openfl__$internal_renderer_opengl_GLRenderer.renderBitmap = function (shape, renderSession, smooth) {
		if (smooth == null) smooth = true;
		if (!shape.__renderable || shape.__worldAlpha <= 0) return;
		if (shape.__graphics == null || shape.__graphics.__bitmap == null) return;
		var rect = openfl_geom_Rectangle.__temp;
		var matrix = openfl_geom_Matrix.__temp;
		rect.setEmpty();
		matrix.identity();
		shape.__getBounds(rect, matrix);
		var bitmap = shape.__graphics.__bitmap;
		matrix.translate(shape.__graphics.__bounds.x, shape.__graphics.__bounds.y);
		matrix.concat(shape.__renderTransform);
		renderSession.spriteBatch.renderBitmapData(bitmap, smooth, matrix, shape.__worldColorTransform, shape.__worldAlpha, shape.__blendMode, null, openfl_display_PixelSnapping.ALWAYS);
	};
	openfl__$internal_renderer_opengl_GLRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
	openfl__$internal_renderer_opengl_GLRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype, {
		destroy: function () {
			openfl__$internal_renderer_opengl_GLRenderer.glContexts[this._glContextId] = null;
			this.projection = null;
			this.offset = null;
			this.shaderManager.destroy();
			this.spriteBatch.destroy();
			this.maskManager.destroy();
			this.filterManager.destroy();
			this.shaderManager = null;
			this.spriteBatch = null;
			this.maskManager = null;
			this.filterManager = null;
			this.gl = null;
			this.renderSession = null;
		}
		, setViewport: function (x, y, width, height) {
			if (!(this.vpX == x && this.vpY == y && this.vpWidth == width && this.vpHeight == height)) {
				this.vpX = x;
				this.vpY = y;
				this.vpWidth = width;
				this.vpHeight = height;
				this.gl.viewport(x, y, width, height);
				this.setOrtho(x, y, width, height);
				this.viewport.setTo(x, y, width, height);
			}
		}
		, setOrtho: function (x, y, width, height) {
			var o = this.projectionMatrix;
			o.identity();
			o.a = 1 / width * 2;
			o.d = -1 / height * 2;
			o.tx = -1 - x * o.a;
			o.ty = 1 - y * o.d;
		}
		, handleContextLost: function (event) {
			event.preventDefault();
			this.contextLost = true;
		}
		, handleContextRestored: function () {
			var gl = this.gl;
			openfl__$internal_renderer_opengl_GLRenderer.glContextId++;
			this.shaderManager.setContext(gl);
			this.spriteBatch.setContext(gl);
			this.maskManager.setContext(gl);
			this.filterManager.setContext(gl);
			this.renderSession.gl = gl;
			this.defaultFramebuffer = null;
			gl.disable(gl.DEPTH_TEST);
			gl.disable(gl.CULL_FACE);
			gl.enable(gl.BLEND);
			gl.colorMask(true, true, true, this.transparent);
			this.setViewport(0, 0, this.width, this.height);
			this.contextLost = false;
		}
		, render: function (stage) {
			if (this.contextLost) return;
			var gl = this.gl;
			this.setViewport(0, 0, this.width, this.height);
			gl.bindFramebuffer(gl.FRAMEBUFFER, this.defaultFramebuffer);
			if (this.transparent) gl.clearColor(0, 0, 0, 0); else gl.clearColor(stage.__colorSplit[0], stage.__colorSplit[1], stage.__colorSplit[2], 1);
			gl.clear(gl.COLOR_BUFFER_BIT);
			this.renderDisplayObject(stage, this.projection);
		}
		, renderDisplayObject: function (displayObject, projection, buffer) {
			this.renderSession.blendModeManager.setBlendMode(openfl_display_BlendMode.NORMAL);
			this.renderSession.drawCount = 0;
			this.renderSession.currentBlendMode = null;
			this.spriteBatch.begin(this.renderSession);
			this.filterManager.begin(this.renderSession, buffer);
			displayObject.__renderGL(this.renderSession);
			this.spriteBatch.finish();
		}
		, resize: function (width, height) {
			this.width = width;
			this.height = height;
			openfl__$internal_renderer_AbstractRenderer.prototype.resize.call(this, width, height);
			this.setViewport(0, 0, width, height);
			this.projection.x = width / 2;
			this.projection.y = -height / 2;
		}
		, __class__: openfl__$internal_renderer_opengl_GLRenderer
	});
	var openfl__$internal_renderer_opengl_shaders2_Shader = function (gl) {
		this.wrapT = 33071;
		this.wrapS = 33071;
		this.compiled = false;
		this.uniforms = new haxe_ds_StringMap();
		this.attributes = new haxe_ds_StringMap();
		this.ID = openfl__$internal_renderer_opengl_shaders2_Shader.UID++;
		this.gl = gl;
		this.program = null;
	};
	$hxClasses["openfl._internal.renderer.opengl.shaders2.Shader"] = openfl__$internal_renderer_opengl_shaders2_Shader;
	openfl__$internal_renderer_opengl_shaders2_Shader.__name__ = ["openfl", "_internal", "renderer", "opengl", "shaders2", "Shader"];
	openfl__$internal_renderer_opengl_shaders2_Shader.compileProgram = function (gl, vertexSrc, fragmentSrc) {
		var cache = openfl__$internal_renderer_opengl_utils_ShaderManager.compiledShadersCache;
		var key = haxe_crypto_Md5.encode(vertexSrc + fragmentSrc);
		if (__map_reserved[key] != null ? cache.existsReserved(key) : cache.h.hasOwnProperty(key)) return __map_reserved[key] != null ? cache.getReserved(key) : cache.h[key];
		var vertexShader = openfl__$internal_renderer_opengl_shaders2_Shader.compileShader(gl, vertexSrc, gl.VERTEX_SHADER);
		var fragmentShader = openfl__$internal_renderer_opengl_shaders2_Shader.compileShader(gl, fragmentSrc, gl.FRAGMENT_SHADER);
		var program = gl.createProgram();
		if (vertexShader != null && fragmentShader != null) {
			gl.attachShader(program, vertexShader);
			gl.attachShader(program, fragmentShader);
			gl.linkProgram(program);
			gl.deleteShader(vertexShader);
			gl.deleteShader(fragmentShader);
			if (gl.getProgramParameter(program, gl.LINK_STATUS) == 0) {
				haxe_Log.trace("Could not compile the program:\n\t" + gl.getProgramInfoLog(program), { fileName: "Shader.hx", lineNumber: 226, className: "openfl._internal.renderer.opengl.shaders2.Shader", methodName: "compileProgram" });
				haxe_Log.trace("VERTEX:\n" + vertexSrc + "\nFRAGMENT:\n" + fragmentSrc, { fileName: "Shader.hx", lineNumber: 227, className: "openfl._internal.renderer.opengl.shaders2.Shader", methodName: "compileProgram" });
				return null;
			}
		}
		if (__map_reserved[key] != null) cache.setReserved(key, program); else cache.h[key] = program;
		return program;
	};
	openfl__$internal_renderer_opengl_shaders2_Shader.compileShader = function (gl, shaderSrc, type) {
		var src = shaderSrc;
		var shader = gl.createShader(type);
		gl.shaderSource(shader, src);
		gl.compileShader(shader);
		if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) == 0) {
			haxe_Log.trace("Could not compile the shader:\n\t" + gl.getShaderInfoLog(shader), { fileName: "Shader.hx", lineNumber: 244, className: "openfl._internal.renderer.opengl.shaders2.Shader", methodName: "compileShader" });
			haxe_Log.trace(shaderSrc, { fileName: "Shader.hx", lineNumber: 245, className: "openfl._internal.renderer.opengl.shaders2.Shader", methodName: "compileShader" });
			return null;
		}
		return shader;
	};
	openfl__$internal_renderer_opengl_shaders2_Shader.prototype = {
		init: function (force) {
			if (force == null) force = false;
			if (this.compiled && !force) return;
			if (this.vertexSrc != null) this.vertexString = this.vertexSrc.join("\n");
			if (this.fragmentSrc != null) this.fragmentString = this.fragmentSrc.join("\n");
			if (this.vertexString == null || this.fragmentString == null) throw new js__$Boot_HaxeError("No vertex or fragment source provided");
			this.program = openfl__$internal_renderer_opengl_shaders2_Shader.compileProgram(this.gl, this.vertexString, this.fragmentString);
			if (this.program != null) this.compiled = true;
		}
		, destroy: function () {
			if (this.program != null) this.gl.deleteProgram(this.program);
			this.compiled = false;
			this.attributes = null;
		}
		, applyData: function (shaderData, renderSession) {
			if (shaderData == null) return;
			var param;
			var u;
			var v;
			var bd;
			var $it0 = shaderData.keys();
			while ($it0.hasNext()) {
				var key = $it0.next();
				u = this.getUniformLocation(key);
				param = __map_reserved[key] != null ? shaderData.getReserved(key) : shaderData.h[key];
				if (param == null) continue;
				v = param.value;
				bd = param.bitmap;
				if (v == null && bd == null) continue;
				var _g = param.internalType;
				switch (_g) {
					case 1:
						var _g1 = param.size;
						switch (_g1) {
							case 1:
								this.gl.uniform1i(u, v[0] | 0);
								break;
							case 2:
								this.gl.uniform2i(u, v[0] | 0, v[1] | 0);
								break;
							case 3:
								this.gl.uniform3i(u, v[0] | 0, v[1] | 0, v[2] | 0);
								break;
							case 4:
								this.gl.uniform4i(u, v[0] | 0, v[1] | 0, v[2] | 0, v[3] | 0);
								break;
						}
						break;
					case 2:
						var _g11 = param.size;
						switch (_g11) {
							case 1:
								this.gl.uniform1f(u, v[0]);
								break;
							case 2:
								this.gl.uniform2f(u, v[0], v[1]);
								break;
							case 3:
								this.gl.uniform3f(u, v[0], v[1], v[2]);
								break;
							case 4:
								this.gl.uniform4f(u, v[0], v[1], v[2], v[3]);
								break;
						}
						break;
					case 3:
						var _g12 = param.size;
						switch (_g12) {
							case 2:
								this.gl.uniformMatrix2fv(u, param.transpose, (function ($this) {
									var $r;
									var array = param.value;
									var this1;
									if (array != null) this1 = new Float32Array(array); else this1 = null;
									$r = this1;
									return $r;
								}(this)));
								break;
							case 3:
								this.gl.uniformMatrix3fv(u, param.transpose, (function ($this) {
									var $r;
									var array1 = param.value;
									var this2;
									if (array1 != null) this2 = new Float32Array(array1); else this2 = null;
									$r = this2;
									return $r;
								}(this)));
								break;
							case 4:
								this.gl.uniformMatrix4fv(u, param.transpose, (function ($this) {
									var $r;
									var array2 = param.value;
									var this3;
									if (array2 != null) this3 = new Float32Array(array2); else this3 = null;
									$r = this3;
									return $r;
								}(this)));
								break;
						}
						break;
					case 4:
						if (bd == null || !bd.__isValid) continue;
						this.gl.activeTexture(this.gl.TEXTURE0 + renderSession.activeTextures);
						this.gl.bindTexture(this.gl.TEXTURE_2D, bd.getTexture(this.gl));
						this.gl.uniform1i(u, renderSession.activeTextures);
						this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, param.smooth ? this.gl.LINEAR : this.gl.NEAREST);
						this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, param.smooth ? this.gl.LINEAR : this.gl.NEAREST);
						this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, param.repeatX);
						this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, param.repeatY);
						renderSession.activeTextures++;
						break;
					default:
				}
			}
		}
		, getAttribLocation: function (attribute) {
			if (this.program == null) throw new js__$Boot_HaxeError("Shader isn't initialized");
			if (this.attributes.exists(attribute)) return this.attributes.get(attribute); else {
				var location = this.gl.getAttribLocation(this.program, attribute);
				this.attributes.set(attribute, location);
				return location;
			}
		}
		, getUniformLocation: function (uniform) {
			if (this.program == null) throw new js__$Boot_HaxeError("Shader isn't initialized");
			if (this.uniforms.exists(uniform)) return this.uniforms.get(uniform); else {
				var location = this.gl.getUniformLocation(this.program, uniform);
				this.uniforms.set(uniform, location);
				return location;
			}
		}
		, enableVertexAttribute: function (attribute, stride, offset) {
			var location = this.getAttribLocation(attribute.name);
			this.gl.enableVertexAttribArray(location);
			this.gl.vertexAttribPointer(location, attribute.components, attribute.type, attribute.normalized, stride, offset * 4);
		}
		, disableVertexAttribute: function (attribute, setDefault) {
			if (setDefault == null) setDefault = true;
			var location = this.getAttribLocation(attribute.name);
			this.gl.disableVertexAttribArray(location);
			if (setDefault) {
				var _g = attribute.components;
				switch (_g) {
					case 1:
						this.gl.vertexAttrib1fv(location, attribute.defaultValue.subarray(0, 1));
						break;
					case 2:
						this.gl.vertexAttrib2fv(location, attribute.defaultValue.subarray(0, 2));
						break;
					case 3:
						this.gl.vertexAttrib3fv(location, attribute.defaultValue.subarray(0, 3));
						break;
					default:
						this.gl.vertexAttrib4fv(location, attribute.defaultValue.subarray(0, 4));
				}
			}
		}
		, bindVertexArray: function (va) {
			var offset = 0;
			var stride = va.get_stride();
			var _g = 0;
			var _g1 = va.attributes;
			while (_g < _g1.length) {
				var attribute = _g1[_g];
				++_g;
				if (attribute.enabled) {
					this.enableVertexAttribute(attribute, stride, offset);
					offset += Math.floor(attribute.components * attribute.getElementsBytes() / 4);
				} else this.disableVertexAttribute(attribute, true);
			}
		}
		, unbindVertexArray: function (va) {
			var _g = 0;
			var _g1 = va.attributes;
			while (_g < _g1.length) {
				var attribute = _g1[_g];
				++_g;
				this.disableVertexAttribute(attribute, false);
			}
		}
		, __class__: openfl__$internal_renderer_opengl_shaders2_Shader
	};
	var openfl__$internal_renderer_opengl_shaders2_DefaultShader = function (gl) {
		openfl__$internal_renderer_opengl_shaders2_Shader.call(this, gl);
		this.vertexSrc = openfl__$internal_renderer_opengl_shaders2_DefaultShader.VERTEX_SRC;
		this.fragmentSrc = ["#ifdef GL_ES", "precision lowp float;", "#endif", "uniform sampler2D " + "openfl_uSampler0" + ";", "uniform vec4 " + "openfl_uColorMultiplier" + ";", "uniform vec4 " + "openfl_uColorOffset" + ";", "uniform bool " + "openfl_uUseColorTransform" + ";", "varying vec2 " + "openfl_vTexCoord" + ";", "varying vec4 " + "openfl_vColor" + ";", "vec4 colorTransform(const vec4 color, const vec4 tint, const vec4 multiplier, const vec4 offset) {", "\tif(!" + "openfl_uUseColorTransform" + ") {", "\t\treturn color * tint;", "\t}", "\tvec4 unmultiply;", "\tif (color.a == 0.0) {", "\t\tunmultiply = vec4(0.0, 0.0, 0.0, 0.0);", "\t} else {", "   \tunmultiply = vec4(color.rgb / color.a, color.a);", "\t}", "   vec4 result = unmultiply * tint * multiplier;", "   result = result + offset;", "   result = clamp(result, 0., 1.);", "   result = vec4(result.rgb * result.a, result.a);", "   return result;", "}", "void main(void) {", "   vec4 tc = texture2D(" + "openfl_uSampler0" + ", " + "openfl_vTexCoord" + ");", "   gl_FragColor = colorTransform(tc, " + "openfl_vColor" + ", " + "openfl_uColorMultiplier" + ", " + "openfl_uColorOffset" + ");", "}"];
		this.init();
	};
	$hxClasses["openfl._internal.renderer.opengl.shaders2.DefaultShader"] = openfl__$internal_renderer_opengl_shaders2_DefaultShader;
	openfl__$internal_renderer_opengl_shaders2_DefaultShader.__name__ = ["openfl", "_internal", "renderer", "opengl", "shaders2", "DefaultShader"];
	openfl__$internal_renderer_opengl_shaders2_DefaultShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
	openfl__$internal_renderer_opengl_shaders2_DefaultShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype, {
		init: function (force) {
			if (force == null) force = false;
			openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this, force);
			this.getAttribLocation("openfl_aPosition");
			this.getAttribLocation("openfl_aTexCoord0");
			this.getAttribLocation("openfl_aColor");
			this.getUniformLocation("openfl_uProjectionMatrix");
			this.getUniformLocation("openfl_uSampler0");
			this.getUniformLocation("openfl_uColorMultiplier");
			this.getUniformLocation("openfl_uColorOffset");
			this.getUniformLocation("openfl_uUseColorTransform");
		}
		, __class__: openfl__$internal_renderer_opengl_shaders2_DefaultShader
	});
	var openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader = function (gl) {
		openfl__$internal_renderer_opengl_shaders2_Shader.call(this, gl);
		this.vertexSrc = ["attribute vec2 " + "openfl_aPosition" + ";", "attribute vec2 " + "openfl_aTexCoord0" + ";", "attribute vec4 " + "openfl_aColor" + ";", "uniform mat3 " + "openfl_uProjectionMatrix" + ";", "varying vec2 vTexCoord;", "varying vec4 vColor;", "void main(void) {", "   gl_Position = vec4((" + "openfl_uProjectionMatrix" + " * vec3(" + "openfl_aPosition" + ", 1.0)).xy, 0.0, 1.0);", "   vTexCoord = " + "openfl_aTexCoord0" + ";", "   vColor = " + "openfl_aColor" + ".bgra;", "}"];
		this.fragmentSrc = ["#ifdef GL_ES", "precision lowp float;", "#endif", "uniform sampler2D " + "openfl_uSampler0" + ";", "uniform vec3 " + "openfl_uColor" + ";", "uniform bool " + "openfl_uUseTexture" + ";", "uniform float " + "openfl_uAlpha" + ";", "uniform vec4 " + "openfl_uColorMultiplier" + ";", "uniform vec4 " + "openfl_uColorOffset" + ";", "varying vec2 vTexCoord;", "varying vec4 vColor;", "vec4 tmp;", "vec4 colorTransform(const vec4 color, const vec4 tint, const vec4 multiplier, const vec4 offset) {", "   vec4 unmultiply = vec4(color.rgb / color.a, color.a);", "   vec4 result = unmultiply * tint * multiplier;", "   result = result + offset;", "   result = clamp(result, 0., 1.);", "   result = vec4(result.rgb * result.a, result.a);", "   return result;", "}", "void main(void) {", "   if(" + "openfl_uUseTexture" + ") {", "       tmp = texture2D(" + "openfl_uSampler0" + ", vTexCoord);", "   } else {", "       tmp = vec4(" + "openfl_uColor" + ", 1.);", "   }", "   gl_FragColor = colorTransform(tmp, vColor, " + "openfl_uColorMultiplier" + ", " + "openfl_uColorOffset" + ");", "}"];
		this.init();
	};
	$hxClasses["openfl._internal.renderer.opengl.shaders2.DrawTrianglesShader"] = openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader;
	openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader.__name__ = ["openfl", "_internal", "renderer", "opengl", "shaders2", "DrawTrianglesShader"];
	openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
	openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype, {
		init: function (force) {
			if (force == null) force = false;
			openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this, force);
			this.getAttribLocation("openfl_aPosition");
			this.getAttribLocation("openfl_aTexCoord0");
			this.getAttribLocation("openfl_aColor");
			this.getUniformLocation("openfl_uSampler0");
			this.getUniformLocation("openfl_uProjectionMatrix");
			this.getUniformLocation("openfl_uColor");
			this.getUniformLocation("openfl_uAlpha");
			this.getUniformLocation("openfl_uUseTexture");
			this.getUniformLocation("openfl_uColorMultiplier");
			this.getUniformLocation("openfl_uColorOffset");
		}
		, __class__: openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader
	});
	var openfl__$internal_renderer_opengl_shaders2_FillShader = function (gl) {
		openfl__$internal_renderer_opengl_shaders2_Shader.call(this, gl);
		this.vertexSrc = ["attribute vec2 " + "openfl_aPosition" + ";", "uniform mat3 " + "openfl_uTranslationMatrix" + ";", "uniform mat3 " + "openfl_uProjectionMatrix" + ";", "uniform vec4 " + "openfl_uColor" + ";", "uniform float " + "openfl_uAlpha" + ";", "uniform vec4 " + "openfl_uColorMultiplier" + ";", "uniform vec4 " + "openfl_uColorOffset" + ";", "varying vec4 vColor;", "vec4 colorTransform(const vec4 color, const float alpha, const vec4 multiplier, const vec4 offset) {", "   vec4 result = color * multiplier;", "   result.a *= alpha;", "   result = result + offset;", "   result = clamp(result, 0., 1.);", "   result = vec4(result.rgb * result.a, result.a);", "   return result;", "}", "void main(void) {", "   gl_Position = vec4((" + "openfl_uProjectionMatrix" + " * " + "openfl_uTranslationMatrix" + " * vec3(" + "openfl_aPosition" + ", 1.0)).xy, 0.0, 1.0);", "   vColor = colorTransform(" + "openfl_uColor" + ", " + "openfl_uAlpha" + ", " + "openfl_uColorMultiplier" + ", " + "openfl_uColorOffset" + ");", "}"];
		this.fragmentSrc = ["#ifdef GL_ES", "precision lowp float;", "#endif", "varying vec4 vColor;", "void main(void) {", "   gl_FragColor = vColor;", "}"];
		this.init();
	};
	$hxClasses["openfl._internal.renderer.opengl.shaders2.FillShader"] = openfl__$internal_renderer_opengl_shaders2_FillShader;
	openfl__$internal_renderer_opengl_shaders2_FillShader.__name__ = ["openfl", "_internal", "renderer", "opengl", "shaders2", "FillShader"];
	openfl__$internal_renderer_opengl_shaders2_FillShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
	openfl__$internal_renderer_opengl_shaders2_FillShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype, {
		init: function (force) {
			if (force == null) force = false;
			openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this, force);
			this.getAttribLocation("openfl_aPosition");
			this.getUniformLocation("openfl_uTranslationMatrix");
			this.getUniformLocation("openfl_uProjectionMatrix");
			this.getUniformLocation("openfl_uColor");
			this.getUniformLocation("openfl_uColorMultiplier");
			this.getUniformLocation("openfl_uColorOffset");
		}
		, __class__: openfl__$internal_renderer_opengl_shaders2_FillShader
	});
	var openfl__$internal_renderer_opengl_shaders2_PatternFillShader = function (gl) {
		openfl__$internal_renderer_opengl_shaders2_Shader.call(this, gl);
		this.vertexSrc = ["attribute vec2 " + "openfl_aPosition" + ";", "uniform mat3 " + "openfl_uTranslationMatrix" + ";", "uniform mat3 " + "openfl_uProjectionMatrix" + ";", "uniform mat3 " + "openfl_uPatternMatrix" + ";", "varying vec2 vPosition;", "void main(void) {", "   gl_Position = vec4((" + "openfl_uProjectionMatrix" + " * " + "openfl_uTranslationMatrix" + " * vec3(" + "openfl_aPosition" + ", 1.0)).xy, 0.0, 1.0);", "   vPosition = (" + "openfl_uPatternMatrix" + " * vec3(" + "openfl_aPosition" + ", 1)).xy;", "}"];
		this.fragmentSrc = ["#ifdef GL_ES", "precision lowp float;", "#endif", "uniform float " + "openfl_uAlpha" + ";", "uniform vec2 " + "openfl_uPatternTL" + ";", "uniform vec2 " + "openfl_uPatternBR" + ";", "uniform sampler2D " + "openfl_uSampler0" + ";", "uniform vec4 " + "openfl_uColorMultiplier" + ";", "uniform vec4 " + "openfl_uColorOffset" + ";", "varying vec2 vPosition;", "vec4 colorTransform(const vec4 color, const float alpha, const vec4 multiplier, const vec4 offset) {", "   vec4 unmultiply = vec4(color.rgb / color.a, color.a);", "   vec4 result = unmultiply * multiplier;", "   result.a *= alpha;", "   result = result + offset;", "   result = clamp(result, 0., 1.);", "   result = vec4(result.rgb * result.a, result.a);", "   return result;", "}", "void main(void) {", "   vec2 pos = mix(" + "openfl_uPatternTL" + ", " + "openfl_uPatternBR" + ", vPosition);", "   vec4 tcol = texture2D(" + "openfl_uSampler0" + ", pos);", "   gl_FragColor = colorTransform(tcol, " + "openfl_uAlpha" + ", " + "openfl_uColorMultiplier" + ", " + "openfl_uColorOffset" + ");", "}"];
		this.init();
	};
	$hxClasses["openfl._internal.renderer.opengl.shaders2.PatternFillShader"] = openfl__$internal_renderer_opengl_shaders2_PatternFillShader;
	openfl__$internal_renderer_opengl_shaders2_PatternFillShader.__name__ = ["openfl", "_internal", "renderer", "opengl", "shaders2", "PatternFillShader"];
	openfl__$internal_renderer_opengl_shaders2_PatternFillShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
	openfl__$internal_renderer_opengl_shaders2_PatternFillShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype, {
		init: function (force) {
			if (force == null) force = false;
			openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this, force);
			this.getAttribLocation("openfl_aPosition");
			this.getUniformLocation("openfl_uTranslationMatrix");
			this.getUniformLocation("openfl_uPatternMatrix");
			this.getUniformLocation("openfl_uProjectionMatrix");
			this.getUniformLocation("openfl_uSampler0");
			this.getUniformLocation("openfl_uPatternTL");
			this.getUniformLocation("openfl_uPatternBR");
			this.getUniformLocation("openfl_uAlpha");
			this.getUniformLocation("openfl_uColorMultiplier");
			this.getUniformLocation("openfl_uColorOffset");
		}
		, __class__: openfl__$internal_renderer_opengl_shaders2_PatternFillShader
	});
	var openfl__$internal_renderer_opengl_shaders2_PrimitiveShader = function (gl) {
		openfl__$internal_renderer_opengl_shaders2_Shader.call(this, gl);
		this.vertexSrc = ["attribute vec2 " + "openfl_aPosition" + ";", "attribute vec4 " + "openfl_aColor" + ";", "uniform mat3 " + "openfl_uTranslationMatrix" + ";", "uniform mat3 " + "openfl_uProjectionMatrix" + ";", "uniform vec4 " + "openfl_uColorMultiplier" + ";", "uniform vec4 " + "openfl_uColorOffset" + ";", "uniform float " + "openfl_uAlpha" + ";", "varying vec4 vColor;", "vec4 colorTransform(const vec4 color, const float alpha, const vec4 multiplier, const vec4 offset) {", "   vec4 result = color * multiplier;", "   result.a *= alpha;", "   result = result + offset;", "   result = clamp(result, 0., 1.);", "   result = vec4(result.rgb * result.a, result.a);", "   return result;", "}", "void main(void) {", "   gl_Position = vec4((" + "openfl_uProjectionMatrix" + " * " + "openfl_uTranslationMatrix" + " * vec3(" + "openfl_aPosition" + ", 1.0)).xy, 0.0, 1.0);", "   vColor = colorTransform(" + "openfl_aColor" + ", " + "openfl_uAlpha" + ", " + "openfl_uColorMultiplier" + ", " + "openfl_uColorOffset" + ");", "}"];
		this.fragmentSrc = ["#ifdef GL_ES", "precision lowp float;", "#endif", "varying vec4 vColor;", "void main(void) {", "   gl_FragColor = vColor;", "}"];
		this.init();
	};
	$hxClasses["openfl._internal.renderer.opengl.shaders2.PrimitiveShader"] = openfl__$internal_renderer_opengl_shaders2_PrimitiveShader;
	openfl__$internal_renderer_opengl_shaders2_PrimitiveShader.__name__ = ["openfl", "_internal", "renderer", "opengl", "shaders2", "PrimitiveShader"];
	openfl__$internal_renderer_opengl_shaders2_PrimitiveShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
	openfl__$internal_renderer_opengl_shaders2_PrimitiveShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype, {
		init: function (force) {
			if (force == null) force = false;
			openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this, force);
			this.getAttribLocation("openfl_aPosition");
			this.getAttribLocation("openfl_aColor");
			this.getUniformLocation("openfl_uTranslationMatrix");
			this.getUniformLocation("openfl_uProjectionMatrix");
			this.getUniformLocation("openfl_uAlpha");
			this.getUniformLocation("openfl_uColorMultiplier");
			this.getUniformLocation("openfl_uColorOffset");
		}
		, __class__: openfl__$internal_renderer_opengl_shaders2_PrimitiveShader
	});
	var openfl__$internal_renderer_opengl_utils_BlendModeManager = function (gl) {
		this.gl = gl;
		this.currentBlendMode = null;
	};
	$hxClasses["openfl._internal.renderer.opengl.utils.BlendModeManager"] = openfl__$internal_renderer_opengl_utils_BlendModeManager;
	openfl__$internal_renderer_opengl_utils_BlendModeManager.__name__ = ["openfl", "_internal", "renderer", "opengl", "utils", "BlendModeManager"];
	openfl__$internal_renderer_opengl_utils_BlendModeManager.prototype = {
		destroy: function () {
			this.gl = null;
		}
		, setBlendMode: function (blendMode, force) {
			if (force == null) force = false;
			if (blendMode == null) {
				blendMode = openfl_display_BlendMode.NORMAL;
				force = true;
			}
			if (!force && this.currentBlendMode == blendMode) return false;
			this.currentBlendMode = blendMode;
			switch (blendMode[1]) {
				case 0:
					this.gl.blendEquation(32774);
					this.gl.blendFunc(1, 1);
					break;
				case 9:
					this.gl.blendEquation(32774);
					this.gl.blendFunc(774, 771);
					break;
				case 12:
					this.gl.blendEquation(32774);
					this.gl.blendFunc(1, 769);
					break;
				case 13:
					this.gl.blendEquation(32779);
					this.gl.blendFunc(1, 1);
					break;
				default:
					this.gl.blendEquation(32774);
					this.gl.blendFunc(1, 771);
			}
			return true;
		}
		, __class__: openfl__$internal_renderer_opengl_utils_BlendModeManager
	};
	var openfl__$internal_renderer_opengl_utils_DrawPath = function (makeArray) {
		if (makeArray == null) makeArray = true;
		this.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
		this.points = null;
		this.winding = 0;
		this.isRemovable = true;
		this.fillIndex = 0;
		this.line = new openfl__$internal_renderer_opengl_utils_LineStyle();
		this.fill = openfl__$internal_renderer_opengl_utils_FillType.None;
		if (makeArray) this.points = [];
	};
	$hxClasses["openfl._internal.renderer.opengl.utils.DrawPath"] = openfl__$internal_renderer_opengl_utils_DrawPath;
	openfl__$internal_renderer_opengl_utils_DrawPath.__name__ = ["openfl", "_internal", "renderer", "opengl", "utils", "DrawPath"];
	openfl__$internal_renderer_opengl_utils_DrawPath.getStack = function (graphics, gl) {
		return openfl__$internal_renderer_opengl_utils_PathBuiler.build(graphics, gl);
	};
	openfl__$internal_renderer_opengl_utils_DrawPath.prototype = {
		update: function (line, fill, fillIndex, winding) {
			this.updateLine(line);
			this.fill = fill;
			this.fillIndex = fillIndex;
			this.winding = winding;
		}
		, updateLine: function (line) {
			this.line.width = line.width;
			this.line.color = line.color;
			if (line.alpha == null) this.line.alpha = 1; else this.line.alpha = line.alpha;
			if (line.scaleMode == null) this.line.scaleMode = openfl_display_LineScaleMode.NORMAL; else this.line.scaleMode = line.scaleMode;
			if (line.caps == null) this.line.caps = openfl_display_CapsStyle.ROUND; else this.line.caps = line.caps;
			if (line.joints == null) this.line.joints = openfl_display_JointStyle.ROUND; else this.line.joints = line.joints;
			this.line.miterLimit = line.miterLimit;
		}
		, __class__: openfl__$internal_renderer_opengl_utils_DrawPath
	};
	var openfl__$internal_renderer_opengl_utils_PathBuiler = function () { };
	$hxClasses["openfl._internal.renderer.opengl.utils.PathBuiler"] = openfl__$internal_renderer_opengl_utils_PathBuiler;
	openfl__$internal_renderer_opengl_utils_PathBuiler.__name__ = ["openfl", "_internal", "renderer", "opengl", "utils", "PathBuiler"];
	openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = null;
	openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths = null;
	openfl__$internal_renderer_opengl_utils_PathBuiler.__line = null;
	openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = null;
	openfl__$internal_renderer_opengl_utils_PathBuiler.closePath = function () {
		var l;
		if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null) l = 0; else l = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length;
		if (l <= 0) return;
		if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type == openfl__$internal_renderer_opengl_utils_GraphicType.Polygon && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.fill != openfl__$internal_renderer_opengl_utils_FillType.None) {
			var sx = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points[0];
			var sy = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points[1];
			var ex = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points[l - 2];
			var ey = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points[l - 1];
			if (!(sx == ex && sy == ey)) openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo(sx, sy);
		}
	};
	openfl__$internal_renderer_opengl_utils_PathBuiler.endFill = function () {
		openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.None;
		openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex++;
	};
	openfl__$internal_renderer_opengl_utils_PathBuiler.moveTo = function (x, y) {
		if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line, openfl__$internal_renderer_opengl_utils_PathBuiler.__fill, openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex, openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(x);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(y);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
	};
	openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo = function (x, y) {
		var points = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points;
		var push_point = true;
		if (points.length > 1) {
			var lastX = points[points.length - 2];
			var lastY = points[points.length - 1];
			if (lastX == x && lastY == y) push_point = false;
		}
		if (push_point == true) {
			openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(x);
			openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(y);
		}
	};
	openfl__$internal_renderer_opengl_utils_PathBuiler.curveTo = function (cx, cy, x, y) {
		if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
			if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
			openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
			openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line, openfl__$internal_renderer_opengl_utils_PathBuiler.__fill, openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex, openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
			openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
			openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
			openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
			openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
		}
		openfl__$internal_renderer_GraphicsPaths.curveTo(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points, cx, cy, x, y);
	};
	openfl__$internal_renderer_opengl_utils_PathBuiler.cubicCurveTo = function (cx, cy, cx2, cy2, x, y) {
		if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
			if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
			openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
			openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line, openfl__$internal_renderer_opengl_utils_PathBuiler.__fill, openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex, openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
			openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
			openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
			openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
			openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
		}
		openfl__$internal_renderer_GraphicsPaths.cubicCurveTo(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points, cx, cy, cx2, cy2, x, y);
	};
	openfl__$internal_renderer_opengl_utils_PathBuiler.graphicDataPop = function () {
		if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
	};
	openfl__$internal_renderer_opengl_utils_PathBuiler.build = function (graphics, gl) {
		var glStack = null;
		var bounds = graphics.__bounds;
		openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths = [];
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
		openfl__$internal_renderer_opengl_utils_PathBuiler.__line = new openfl__$internal_renderer_opengl_utils_LineStyle();
		openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.None;
		openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex = 0;
		glStack = graphics.__glStack[openfl__$internal_renderer_opengl_GLRenderer.glContextId];
		if (glStack == null) glStack = graphics.__glStack[openfl__$internal_renderer_opengl_GLRenderer.glContextId] = new openfl__$internal_renderer_opengl_utils_GLStack(gl);
		if (!graphics.__visible || graphics.__commands.get_length() == 0 || bounds == null || bounds.width == 0 || bounds.height == 0) {
		} else {
			var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
			var _g = 0;
			var _g1 = graphics.__commands.types;
			while (_g < _g1.length) {
				var type = _g1[_g];
				++_g;
				switch (type[1]) {
					case 0:
						var c;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
						c = data;
						openfl__$internal_renderer_opengl_utils_PathBuiler.endFill();
						if (c.buffer.o[c.oPos] != null) openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.Texture(c.buffer.o[c.oPos], c.buffer.o[c.oPos + 1], c.buffer.b[c.bPos], c.buffer.b[c.bPos + 1]); else openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.None;
						if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
							if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line, openfl__$internal_renderer_opengl_utils_PathBuiler.__fill, openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex, openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [];
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
							openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
						}
						break;
					case 1:
						var c1;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
						c1 = data;
						openfl__$internal_renderer_opengl_utils_PathBuiler.endFill();
						if (c1.buffer.f[c1.fPos] > 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.Color(c1.buffer.i[c1.iPos] & 16777215, c1.buffer.f[c1.fPos]); else openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.None;
						if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
							if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line, openfl__$internal_renderer_opengl_utils_PathBuiler.__fill, openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex, openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [];
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
							openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
						}
						break;
					case 3:
						var c2;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
						c2 = data;
						if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
							if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line, openfl__$internal_renderer_opengl_utils_PathBuiler.__fill, openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex, openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
							openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
						}
						openfl__$internal_renderer_GraphicsPaths.cubicCurveTo(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points, c2.buffer.f[c2.fPos], c2.buffer.f[c2.fPos + 1], c2.buffer.f[c2.fPos + 3], c2.buffer.f[c2.fPos + 4], c2.buffer.f[c2.fPos + 5], c2.buffer.f[c2.fPos + 6]);
						break;
					case 4:
						var c3;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
						c3 = data;
						if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
							if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line, openfl__$internal_renderer_opengl_utils_PathBuiler.__fill, openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex, openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
							openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
						}
						openfl__$internal_renderer_GraphicsPaths.curveTo(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points, c3.buffer.f[c3.fPos], c3.buffer.f[c3.fPos + 1], c3.buffer.f[c3.fPos + 2], c3.buffer.f[c3.fPos + 3]);
						break;
					case 5:
						var c4;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
						c4 = data;
						if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line, openfl__$internal_renderer_opengl_utils_PathBuiler.__fill, openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex, openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Circle;
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [c4.buffer.f[c4.fPos], c4.buffer.f[c4.fPos + 1], c4.buffer.f[c4.fPos + 2]];
						openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
						break;
					case 6:
						var c5;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
						c5 = data;
						if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line, openfl__$internal_renderer_opengl_utils_PathBuiler.__fill, openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex, openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse;
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [c5.buffer.f[c5.fPos], c5.buffer.f[c5.fPos + 1], c5.buffer.f[c5.fPos + 2], c5.buffer.f[c5.fPos + 3]];
						openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
						break;
					case 8:
						var c6;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
						c6 = data;
						if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line, openfl__$internal_renderer_opengl_utils_PathBuiler.__fill, openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex, openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Rectangle(false);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [c6.buffer.f[c6.fPos], c6.buffer.f[c6.fPos + 1], c6.buffer.f[c6.fPos + 2], c6.buffer.f[c6.fPos + 3]];
						openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
						break;
					case 9:
						var c7;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
						c7 = data;
						var x = c7.buffer.f[c7.fPos];
						var y = c7.buffer.f[c7.fPos + 1];
						var width = c7.buffer.f[c7.fPos + 2];
						var height = c7.buffer.f[c7.fPos + 3];
						var rx = c7.buffer.f[c7.fPos + 4];
						var ry = c7.buffer.f[c7.fPos + 5];
						if (ry == -1) ry = rx;
						rx *= 0.5;
						ry *= 0.5;
						if (rx > width / 2) rx = width / 2;
						if (ry > height / 2) ry = height / 2;
						if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line, openfl__$internal_renderer_opengl_utils_PathBuiler.__fill, openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex, openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Rectangle(true);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [x, y, width, height, rx, ry];
						openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
						break;
					case 12:
						var c8;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
						c8 = data;
						openfl__$internal_renderer_opengl_utils_PathBuiler.endFill();
						break;
					case 15:
						var c9;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
						c9 = data;
						openfl__$internal_renderer_opengl_utils_PathBuiler.__line = new openfl__$internal_renderer_opengl_utils_LineStyle();
						if (c9.buffer.o[c9.oPos] == null || isNaN(c9.buffer.o[c9.oPos]) || c9.buffer.o[c9.oPos] < 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__line.width = 0; else if (c9.buffer.o[c9.oPos] == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__line.width = 1; else openfl__$internal_renderer_opengl_utils_PathBuiler.__line.width = c9.buffer.o[c9.oPos];
						if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
						if (c9.buffer.o[c9.oPos + 1] == null) openfl__$internal_renderer_opengl_utils_PathBuiler.__line.color = 0; else openfl__$internal_renderer_opengl_utils_PathBuiler.__line.color = c9.buffer.o[c9.oPos + 1];
						if (c9.buffer.o[c9.oPos + 2] == null) openfl__$internal_renderer_opengl_utils_PathBuiler.__line.alpha = 1; else openfl__$internal_renderer_opengl_utils_PathBuiler.__line.alpha = c9.buffer.o[c9.oPos + 2];
						openfl__$internal_renderer_opengl_utils_PathBuiler.__line.scaleMode = c9.buffer.o[c9.oPos + 4];
						openfl__$internal_renderer_opengl_utils_PathBuiler.__line.caps = c9.buffer.o[c9.oPos + 5];
						openfl__$internal_renderer_opengl_utils_PathBuiler.__line.joints = c9.buffer.o[c9.oPos + 6];
						openfl__$internal_renderer_opengl_utils_PathBuiler.__line.miterLimit = c9.buffer.o[c9.oPos + 7];
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line, openfl__$internal_renderer_opengl_utils_PathBuiler.__fill, openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex, openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [];
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
						openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
						break;
					case 16:
						var c10;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
						c10 = data;
						openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo(c10.buffer.f[c10.fPos], c10.buffer.f[c10.fPos + 1]);
						break;
					case 17:
						var c11;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
						c11 = data;
						if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line, openfl__$internal_renderer_opengl_utils_PathBuiler.__fill, openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex, openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(c11.buffer.f[c11.fPos]);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(c11.buffer.f[c11.fPos + 1]);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
						break;
					case 11:
						var c12;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
						c12 = data;
						var uvtData = c12.buffer.o[c12.oPos + 2];
						var vertices = c12.buffer.o[c12.oPos];
						var indices = c12.buffer.o[c12.oPos + 1];
						var culling = c12.buffer.o[c12.oPos + 3];
						var colors = c12.buffer.o[c12.oPos + 4];
						var blendMode = c12.buffer.i[c12.iPos];
						var isColor;
						{
							var _g2 = openfl__$internal_renderer_opengl_utils_PathBuiler.__fill;
							switch (_g2[1]) {
								case 1:
									isColor = true;
									break;
								default:
									isColor = false;
							}
						}
						if (isColor && uvtData != null) continue;
						if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line, openfl__$internal_renderer_opengl_utils_PathBuiler.__fill, openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex, openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
						if (uvtData == null) {
							var this1;
							this1 = new openfl_VectorData();
							var this2;
							this2 = new Array(0);
							this1.data = this2;
							this1.length = 0;
							this1.fixed = false;
							uvtData = this1;
							{
								var _g21 = openfl__$internal_renderer_opengl_utils_PathBuiler.__fill;
								switch (_g21[1]) {
									case 2:
										var b = _g21[2];
										var _g4 = 0;
										var _g3 = vertices.length / 2 | 0;
										while (_g4 < _g3) {
											var i = _g4++;
											if (!uvtData.fixed) {
												uvtData.length++;
												if (uvtData.data.length < uvtData.length) {
													var data1;
													var this3;
													this3 = new Array(uvtData.data.length + 10);
													data1 = this3;
													haxe_ds__$Vector_Vector_$Impl_$.blit(uvtData.data, 0, data1, 0, uvtData.data.length);
													uvtData.data = data1;
												}
												uvtData.data[uvtData.length - 1] = vertices.data[i * 2] / b.width;
											}
											uvtData.length;
											if (!uvtData.fixed) {
												uvtData.length++;
												if (uvtData.data.length < uvtData.length) {
													var data2;
													var this4;
													this4 = new Array(uvtData.data.length + 10);
													data2 = this4;
													haxe_ds__$Vector_Vector_$Impl_$.blit(uvtData.data, 0, data2, 0, uvtData.data.length);
													uvtData.data = data2;
												}
												uvtData.data[uvtData.length - 1] = vertices.data[i * 2 + 1] / b.height;
											}
											uvtData.length;
										}
										break;
									default:
								}
							}
						}
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.DrawTriangles(vertices, indices, uvtData, culling, colors, blendMode);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable = false;
						openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
						break;
					case 10:
						var c13;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TILES;
						c13 = data;
						if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex++;
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath(false);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line, openfl__$internal_renderer_opengl_utils_PathBuiler.__fill, openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex, openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.DrawTiles(c13.buffer.ts[c13.tsPos], c13.buffer.ff[c13.ffPos], c13.buffer.b[c13.bPos], c13.buffer.i[c13.iPos], c13.buffer.o[c13.oPos], c13.buffer.i[c13.iPos + 1]);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable = false;
						openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
						break;
					case 7:
						var c14;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_PATH;
						c14 = data;
						if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
						switch (c14.buffer.o[c14.oPos + 2]) {
							case openfl_display_GraphicsPathWinding.EVEN_ODD:
								openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 0;
								break;
							case openfl_display_GraphicsPathWinding.NON_ZERO:
								openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 1;
								break;
							default:
								openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 0;
						}
						var command;
						var cx;
						var cy;
						var cx2;
						var cy2;
						var ax;
						var ay;
						var idx = 0;
						var _g31 = 0;
						var _g22 = c14.buffer.o[c14.oPos].length;
						while (_g31 < _g22) {
							var i1 = _g31++;
							command = c14.buffer.o[c14.oPos].data[i1];
							switch (command) {
								case 1:
									ax = c14.buffer.o[c14.oPos + 1].data[idx];
									ay = c14.buffer.o[c14.oPos + 1].data[idx + 1];
									idx += 2;
									if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
									openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
									openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line, openfl__$internal_renderer_opengl_utils_PathBuiler.__fill, openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex, openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
									openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
									openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ax);
									openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ay);
									openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
									break;
								case 4:
									ax = c14.buffer.o[c14.oPos + 1].data[idx + 2];
									ay = c14.buffer.o[c14.oPos + 1].data[idx + 3];
									idx += 4;
									if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
									openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
									openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line, openfl__$internal_renderer_opengl_utils_PathBuiler.__fill, openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex, openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
									openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
									openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ax);
									openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ay);
									openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
									break;
								case 2:
									ax = c14.buffer.o[c14.oPos + 1].data[idx];
									ay = c14.buffer.o[c14.oPos + 1].data[idx + 1];
									idx += 2;
									openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo(ax, ay);
									break;
								case 5:
									ax = c14.buffer.o[c14.oPos + 1].data[idx + 2];
									ay = c14.buffer.o[c14.oPos + 1].data[idx + 3];
									idx += 4;
									openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo(ax, ay);
									break;
								case 3:
									cx = c14.buffer.o[c14.oPos + 1].data[idx];
									cy = c14.buffer.o[c14.oPos + 1].data[idx + 1];
									ax = c14.buffer.o[c14.oPos + 1].data[idx + 2];
									ay = c14.buffer.o[c14.oPos + 1].data[idx + 3];
									idx += 4;
									if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
										if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
										openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
										openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line, openfl__$internal_renderer_opengl_utils_PathBuiler.__fill, openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex, openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
										openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
										openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
										openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
										openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
									}
									openfl__$internal_renderer_GraphicsPaths.curveTo(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points, cx, cy, ax, ay);
									break;
								case 6:
									cx = c14.buffer.o[c14.oPos + 1].data[idx];
									cy = c14.buffer.o[c14.oPos + 1].data[idx + 1];
									cx2 = c14.buffer.o[c14.oPos + 1].data[idx + 2];
									cy2 = c14.buffer.o[c14.oPos + 1].data[idx + 3];
									ax = c14.buffer.o[c14.oPos + 1].data[idx + 4];
									ay = c14.buffer.o[c14.oPos + 1].data[idx + 5];
									idx += 6;
									if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
										if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
										openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
										openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line, openfl__$internal_renderer_opengl_utils_PathBuiler.__fill, openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex, openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
										openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
										openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
										openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
										openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
									}
									openfl__$internal_renderer_GraphicsPaths.cubicCurveTo(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points, cx, cy, cx2, cy2, ax, ay);
									break;
								default:
							}
						}
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 0;
						break;
					case 18:
						var c15;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX;
						c15 = data;
						if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line, openfl__$internal_renderer_opengl_utils_PathBuiler.__fill, openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex, openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.OverrideMatrix(c15.buffer.o[c15.oPos]);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable = false;
						openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
						break;
					default:
						data.advance();
						data.prev = type;
				}
			}
			openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
			data.destroy();
		}
		graphics.__drawPaths = openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths;
		return glStack;
	};
	var openfl__$internal_renderer_opengl_utils_LineStyle = function () {
		this.width = 0;
		this.color = 0;
		this.alpha = 1;
		this.scaleMode = openfl_display_LineScaleMode.NORMAL;
		this.caps = openfl_display_CapsStyle.ROUND;
		this.joints = openfl_display_JointStyle.ROUND;
		this.miterLimit = 3;
	};
	$hxClasses["openfl._internal.renderer.opengl.utils.LineStyle"] = openfl__$internal_renderer_opengl_utils_LineStyle;
	openfl__$internal_renderer_opengl_utils_LineStyle.__name__ = ["openfl", "_internal", "renderer", "opengl", "utils", "LineStyle"];
	openfl__$internal_renderer_opengl_utils_LineStyle.prototype = {
		__class__: openfl__$internal_renderer_opengl_utils_LineStyle
	};
	var openfl__$internal_renderer_opengl_utils_FillType = $hxClasses["openfl._internal.renderer.opengl.utils.FillType"] = { __ename__: ["openfl", "_internal", "renderer", "opengl", "utils", "FillType"], __constructs__: ["None", "Color", "Texture", "Gradient"] };
	openfl__$internal_renderer_opengl_utils_FillType.None = ["None", 0];
	openfl__$internal_renderer_opengl_utils_FillType.None.toString = $estr;
	openfl__$internal_renderer_opengl_utils_FillType.None.__enum__ = openfl__$internal_renderer_opengl_utils_FillType;
	openfl__$internal_renderer_opengl_utils_FillType.Color = function (color, alpha) { var $x = ["Color", 1, color, alpha]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_FillType; $x.toString = $estr; return $x; };
	openfl__$internal_renderer_opengl_utils_FillType.Texture = function (bitmap, matrix, repeat, smooth) { var $x = ["Texture", 2, bitmap, matrix, repeat, smooth]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_FillType; $x.toString = $estr; return $x; };
	openfl__$internal_renderer_opengl_utils_FillType.Gradient = ["Gradient", 3];
	openfl__$internal_renderer_opengl_utils_FillType.Gradient.toString = $estr;
	openfl__$internal_renderer_opengl_utils_FillType.Gradient.__enum__ = openfl__$internal_renderer_opengl_utils_FillType;
	var openfl__$internal_renderer_opengl_utils_FilterManager = function (gl, transparent) {
		this.transparent = transparent;
		this.filterStack = [];
		this.offsetX = 0;
		this.offsetY = 0;
		this.setContext(gl);
	};
	$hxClasses["openfl._internal.renderer.opengl.utils.FilterManager"] = openfl__$internal_renderer_opengl_utils_FilterManager;
	openfl__$internal_renderer_opengl_utils_FilterManager.__name__ = ["openfl", "_internal", "renderer", "opengl", "utils", "FilterManager"];
	openfl__$internal_renderer_opengl_utils_FilterManager.prototype = {
		applyFilterPass: function (filter, filterArea, width, height) {
		}
		, begin: function (renderSession, buffer) {
			this.renderSession = renderSession;
			this.defaultShader = renderSession.shaderManager.defaultShader;
			this.width = 0;
			this.height = 0;
			this.buffer = buffer;
		}
		, destroy: function () {
			var gl = this.gl;
			this.filterStack = null;
			this.offsetX = 0;
			this.offsetY = 0;
			var _g = 0;
			var _g1 = this.texturePool;
			while (_g < _g1.length) {
				var texture = _g1[_g];
				++_g;
				texture.destroy();
			}
			this.texturePool = null;
			gl.deleteBuffer(this.vertexBuffer);
			gl.deleteBuffer(this.uvBuffer);
			gl.deleteBuffer(this.colorBuffer);
			gl.deleteBuffer(this.indexBuffer);
		}
		, initShaderBuffers: function () {
			var gl = this.gl;
			this.vertexBuffer = gl.createBuffer();
			this.uvBuffer = gl.createBuffer();
			this.colorBuffer = gl.createBuffer();
			this.indexBuffer = gl.createBuffer();
			var array = [0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0];
			var this1;
			if (array != null) this1 = new Float32Array(array); else this1 = null;
			this.vertexArray = this1;
			gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);
			gl.bufferData(gl.ARRAY_BUFFER, this.vertexArray, gl.STATIC_DRAW);
			var array1 = [0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0];
			var this2;
			if (array1 != null) this2 = new Float32Array(array1); else this2 = null;
			this.uvArray = this2;
			gl.bindBuffer(gl.ARRAY_BUFFER, this.uvBuffer);
			gl.bufferData(gl.ARRAY_BUFFER, this.uvArray, gl.STATIC_DRAW);
			var array2 = [1.0, 16777215, 1.0, 16777215, 1.0, 16777215, 1.0, 16777215];
			var this3;
			if (array2 != null) this3 = new Float32Array(array2); else this3 = null;
			this.colorArray = this3;
			gl.bindBuffer(gl.ARRAY_BUFFER, this.colorBuffer);
			gl.bufferData(gl.ARRAY_BUFFER, this.colorArray, gl.STATIC_DRAW);
			gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
			gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, (function ($this) {
				var $r;
				var array3 = [0, 1, 2, 1, 3, 2];
				var this4;
				if (array3 != null) this4 = new Uint16Array(array3); else this4 = null;
				$r = this4;
				return $r;
			}(this)), gl.STATIC_DRAW);
		}
		, popFilter: function () {
		}
		, pushFilter: function (filterBlock) {
		}
		, setContext: function (gl) {
			this.gl = gl;
			this.texturePool = [];
			this.initShaderBuffers();
		}
		, __class__: openfl__$internal_renderer_opengl_utils_FilterManager
	};
	var openfl__$internal_renderer_opengl_utils_GLMaskManager = function (renderSession) {
		openfl__$internal_renderer_AbstractMaskManager.call(this, renderSession);
		this.setContext(renderSession.gl);
		this.clips = [];
	};
	$hxClasses["openfl._internal.renderer.opengl.utils.GLMaskManager"] = openfl__$internal_renderer_opengl_utils_GLMaskManager;
	openfl__$internal_renderer_opengl_utils_GLMaskManager.__name__ = ["openfl", "_internal", "renderer", "opengl", "utils", "GLMaskManager"];
	openfl__$internal_renderer_opengl_utils_GLMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
	openfl__$internal_renderer_opengl_utils_GLMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype, {
		destroy: function () {
			this.gl = null;
		}
		, pushRect: function (rect, transform) {
			if (rect == null) return;
			var m = new openfl_geom_Matrix(transform.a, transform.b, transform.c, transform.d, transform.tx, transform.ty);
			openfl__$internal_renderer_opengl_GLBitmap.flipMatrix(m, this.renderSession.renderer.viewport.height);
			var clip = rect.clone();
			clip.__transform(clip, m);
			if (this.currentClip != null) clip = this.currentClip.intersection(clip);
			var restartBatch = this.currentClip == null || clip.isEmpty() || this.currentClip.containsRect(clip);
			this.clips.push(clip);
			this.currentClip = clip;
			if (restartBatch) {
				this.renderSession.spriteBatch.stop();
				this.renderSession.spriteBatch.start(this.currentClip);
			}
		}
		, pushMask: function (mask) {
			this.renderSession.spriteBatch.stop();
			this.renderSession.stencilManager.pushMask(mask, this.renderSession);
			this.renderSession.spriteBatch.start(this.currentClip);
		}
		, popMask: function () {
			this.renderSession.spriteBatch.stop();
			this.renderSession.stencilManager.popMask(null, this.renderSession);
			this.renderSession.spriteBatch.start(this.currentClip);
		}
		, popRect: function () {
			this.renderSession.spriteBatch.stop();
			this.clips.pop();
			this.currentClip = this.clips[this.clips.length - 1];
			this.renderSession.spriteBatch.start(this.currentClip);
		}
		, saveState: function () {
			this.savedClip = this.currentClip;
			this.currentClip = null;
		}
		, restoreState: function () {
			this.currentClip = this.savedClip;
			this.savedClip = null;
		}
		, setContext: function (gl) {
			if (this.renderSession != null) this.renderSession.gl = gl;
			this.gl = gl;
		}
		, __class__: openfl__$internal_renderer_opengl_utils_GLMaskManager
	});
	var openfl__$internal_renderer_opengl_utils_VertexAttribute = function (components, type, normalized, name, defaultValue) {
		if (normalized == null) normalized = false;
		this.enabled = true;
		this.normalized = false;
		this.components = components;
		this.type = type;
		this.normalized = normalized;
		this.name = name;
		if (defaultValue == null) {
			var this1;
			if (components != null) this1 = new Float32Array(components); else this1 = null;
			this.defaultValue = this1;
		} else this.defaultValue = defaultValue;
	};
	$hxClasses["openfl._internal.renderer.opengl.utils.VertexAttribute"] = openfl__$internal_renderer_opengl_utils_VertexAttribute;
	openfl__$internal_renderer_opengl_utils_VertexAttribute.__name__ = ["openfl", "_internal", "renderer", "opengl", "utils", "VertexAttribute"];
	openfl__$internal_renderer_opengl_utils_VertexAttribute.prototype = {
		copy: function () {
			return new openfl__$internal_renderer_opengl_utils_VertexAttribute(this.components, this.type, this.normalized, this.name, this.defaultValue);
		}
		, getElementsBytes: function () {
			var _g = this.type;
			switch (_g) {
				case 5120: case 5121:
					return 1;
				case 5122: case 5123:
					return 2;
				default:
					return 4;
			}
		}
		, get_elements: function () {
			return Math.floor(this.components * this.getElementsBytes() / 4);
		}
		, __class__: openfl__$internal_renderer_opengl_utils_VertexAttribute
		, __properties__: { get_elements: "get_elements" }
	};
	var openfl_geom_Rectangle = function (x, y, width, height) {
		if (height == null) height = 0;
		if (width == null) width = 0;
		if (y == null) y = 0;
		if (x == null) x = 0;
		this.x = x;
		this.y = y;
		this.width = width;
		this.height = height;
	};
	$hxClasses["openfl.geom.Rectangle"] = openfl_geom_Rectangle;
	openfl_geom_Rectangle.__name__ = ["openfl", "geom", "Rectangle"];
	openfl_geom_Rectangle.prototype = {
		clone: function () {
			return new openfl_geom_Rectangle(this.x, this.y, this.width, this.height);
		}
		, contains: function (x, y) {
			return x >= this.x && y >= this.y && x < this.get_right() && y < this.get_bottom();
		}
		, containsPoint: function (point) {
			return this.contains(point.x, point.y);
		}
		, containsRect: function (rect) {
			if (rect.width <= 0 || rect.height <= 0) return rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right() && rect.get_bottom() < this.get_bottom(); else return rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right() && rect.get_bottom() <= this.get_bottom();
		}
		, copyFrom: function (sourceRect) {
			this.x = sourceRect.x;
			this.y = sourceRect.y;
			this.width = sourceRect.width;
			this.height = sourceRect.height;
		}
		, equals: function (toCompare) {
			return toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width && this.height == toCompare.height;
		}
		, inflate: function (dx, dy) {
			this.x -= dx;
			this.width += dx * 2;
			this.y -= dy;
			this.height += dy * 2;
		}
		, inflatePoint: function (point) {
			this.inflate(point.x, point.y);
		}
		, intersection: function (toIntersect) {
			var x0;
			if (this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
			var x1;
			if (this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
			if (x1 <= x0) return new openfl_geom_Rectangle();
			var y0;
			if (this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
			var y1;
			if (this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
			if (y1 <= y0) return new openfl_geom_Rectangle();
			return new openfl_geom_Rectangle(x0, y0, x1 - x0, y1 - y0);
		}
		, intersects: function (toIntersect) {
			var x0;
			if (this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
			var x1;
			if (this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
			if (x1 <= x0) return false;
			var y0;
			if (this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
			var y1;
			if (this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
			return y1 > y0;
		}
		, isEmpty: function () {
			return this.width <= 0 || this.height <= 0;
		}
		, offset: function (dx, dy) {
			this.x += dx;
			this.y += dy;
		}
		, offsetPoint: function (point) {
			this.x += point.x;
			this.y += point.y;
		}
		, setEmpty: function () {
			this.x = this.y = this.width = this.height = 0;
		}
		, setTo: function (xa, ya, widtha, heighta) {
			this.x = xa;
			this.y = ya;
			this.width = widtha;
			this.height = heighta;
		}
		, toString: function () {
			return "(x=" + this.x + ", y=" + this.y + ", width=" + this.width + ", height=" + this.height + ")";
		}
		, union: function (toUnion) {
			if (this.width == 0 || this.height == 0) return toUnion.clone(); else if (toUnion.width == 0 || toUnion.height == 0) return this.clone();
			var x0;
			if (this.x > toUnion.x) x0 = toUnion.x; else x0 = this.x;
			var x1;
			if (this.get_right() < toUnion.get_right()) x1 = toUnion.get_right(); else x1 = this.get_right();
			var y0;
			if (this.y > toUnion.y) y0 = toUnion.y; else y0 = this.y;
			var y1;
			if (this.get_bottom() < toUnion.get_bottom()) y1 = toUnion.get_bottom(); else y1 = this.get_bottom();
			return new openfl_geom_Rectangle(x0, y0, x1 - x0, y1 - y0);
		}
		, __contract: function (x, y, width, height) {
			if (this.width == 0 && this.height == 0) return;
			var cacheRight = this.get_right();
			var cacheBottom = this.get_bottom();
			if (this.x < x) this.x = x;
			if (this.y < y) this.y = y;
			if (this.get_right() > x + width) this.width = x + width - this.x;
			if (this.get_bottom() > y + height) this.height = y + height - this.y;
		}
		, __expand: function (x, y, width, height) {
			if (this.width == 0 && this.height == 0) {
				this.x = x;
				this.y = y;
				this.width = width;
				this.height = height;
				return;
			}
			var cacheRight = this.get_right();
			var cacheBottom = this.get_bottom();
			if (this.x > x) {
				this.x = x;
				this.width = cacheRight - x;
			}
			if (this.y > y) {
				this.y = y;
				this.height = cacheBottom - y;
			}
			if (cacheRight < x + width) this.width = x + width - this.x;
			if (cacheBottom < y + height) this.height = y + height - this.y;
		}
		, __toLimeRectangle: function () {
			return new lime_math_Rectangle(this.x, this.y, this.width, this.height);
		}
		, __transform: function (rect, m) {
			var tx0 = m.a * this.x + m.c * this.y;
			var tx1 = tx0;
			var ty0 = m.b * this.x + m.d * this.y;
			var ty1 = ty0;
			var tx = m.a * (this.x + this.width) + m.c * this.y;
			var ty = m.b * (this.x + this.width) + m.d * this.y;
			if (tx < tx0) tx0 = tx;
			if (ty < ty0) ty0 = ty;
			if (tx > tx1) tx1 = tx;
			if (ty > ty1) ty1 = ty;
			tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
			ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
			if (tx < tx0) tx0 = tx;
			if (ty < ty0) ty0 = ty;
			if (tx > tx1) tx1 = tx;
			if (ty > ty1) ty1 = ty;
			tx = m.a * this.x + m.c * (this.y + this.height);
			ty = m.b * this.x + m.d * (this.y + this.height);
			if (tx < tx0) tx0 = tx;
			if (ty < ty0) ty0 = ty;
			if (tx > tx1) tx1 = tx;
			if (ty > ty1) ty1 = ty;
			rect.setTo(tx0 + m.tx, ty0 + m.ty, tx1 - tx0, ty1 - ty0);
		}
		, get_bottom: function () {
			return this.y + this.height;
		}
		, set_bottom: function (b) {
			this.height = b - this.y;
			return b;
		}
		, get_bottomRight: function () {
			return new openfl_geom_Point(this.x + this.width, this.y + this.height);
		}
		, set_bottomRight: function (p) {
			this.width = p.x - this.x;
			this.height = p.y - this.y;
			return p.clone();
		}
		, get_left: function () {
			return this.x;
		}
		, set_left: function (l) {
			this.width -= l - this.x;
			this.x = l;
			return l;
		}
		, get_right: function () {
			return this.x + this.width;
		}
		, set_right: function (r) {
			this.width = r - this.x;
			return r;
		}
		, get_size: function () {
			return new openfl_geom_Point(this.width, this.height);
		}
		, set_size: function (p) {
			this.width = p.x;
			this.height = p.y;
			return p.clone();
		}
		, get_top: function () {
			return this.y;
		}
		, set_top: function (t) {
			this.height -= t - this.y;
			this.y = t;
			return t;
		}
		, get_topLeft: function () {
			return new openfl_geom_Point(this.x, this.y);
		}
		, set_topLeft: function (p) {
			this.x = p.x;
			this.y = p.y;
			return p.clone();
		}
		, __class__: openfl_geom_Rectangle
		, __properties__: { set_topLeft: "set_topLeft", get_topLeft: "get_topLeft", set_top: "set_top", get_top: "get_top", set_size: "set_size", get_size: "get_size", set_right: "set_right", get_right: "get_right", set_left: "set_left", get_left: "get_left", set_bottomRight: "set_bottomRight", get_bottomRight: "get_bottomRight", set_bottom: "set_bottom", get_bottom: "get_bottom" }
	};
	var openfl__$internal_renderer_opengl_utils_GraphicsRenderer = function () { };
	$hxClasses["openfl._internal.renderer.opengl.utils.GraphicsRenderer"] = openfl__$internal_renderer_opengl_utils_GraphicsRenderer;
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.__name__ = ["openfl", "_internal", "renderer", "opengl", "utils", "GraphicsRenderer"];
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.lastVertsBuffer = null;
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.lastBucketMode = null;
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.lastTexture = null;
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.lastTextureRepeat = null;
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.lastTextureSmooth = null;
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.overrideMatrix = null;
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildCircle = function (path, glStack, localCoords) {
		if (localCoords == null) localCoords = false;
		var rectData = path.points;
		var x = rectData[0];
		var y = rectData[1];
		var rx = rectData[2];
		var ry;
		if (rectData.length == 3) ry = rx; else ry = rectData[3];
		if (path.type == openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse) {
			rx /= 2;
			ry /= 2;
			x += rx;
			y += ry;
		}
		if (localCoords) {
			x -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
			y -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
		}
		var totalSegs = 40;
		var seg = Math.PI * 2 / totalSegs;
		var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path, glStack);
		var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
		if (fill != null) {
			var verts = fill.verts;
			var indices = fill.indices;
			var vertPos = verts.length / 2 | 0;
			indices.push(vertPos);
			var _g1 = 0;
			var _g = totalSegs + 1;
			while (_g1 < _g) {
				var i = _g1++;
				verts.push(x);
				verts.push(y);
				verts.push(x + Math.sin(seg * i) * rx);
				verts.push(y + Math.cos(seg * i) * ry);
				indices.push(vertPos++);
				indices.push(vertPos++);
			}
			indices.push(vertPos - 1);
		}
		if (path.line.width > 0) {
			var tempPoints = path.points;
			path.points = [];
			openfl__$internal_renderer_GraphicsPaths.ellipse(path.points, x, y, rx, ry, totalSegs);
			openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path, bucket);
			path.points = tempPoints;
		}
	};
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildComplexPoly = function (path, glStack, localCoords) {
		if (localCoords == null) localCoords = false;
		var bucket = null;
		if (path.points.length >= 6) {
			var points = path.points.slice();
			if (localCoords) {
				var _g1 = 0;
				var _g = points.length / 2 | 0;
				while (_g1 < _g) {
					var i = _g1++;
					points[i * 2] -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
					points[i * 2 + 1] -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
				}
			}
			bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path, glStack);
			var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
			fill.drawMode = glStack.gl.TRIANGLE_FAN;
			fill.verts = points;
			var indices = fill.indices;
			var length = points.length / 2 | 0;
			var _g2 = 0;
			while (_g2 < length) {
				var i1 = _g2++;
				indices.push(i1);
			}
		}
		if (path.line.width > 0) {
			if (bucket == null) bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path, glStack);
			openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path, bucket, localCoords);
		}
	};
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine = function (path, bucket, localCoords) {
		if (localCoords == null) localCoords = false;
		var points = path.points;
		if (points.length == 0) return;
		var line = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Line);
		if (localCoords) {
			var _g1 = 0;
			var _g = points.length / 2 | 0;
			while (_g1 < _g) {
				var i = _g1++;
				points[i * 2] -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
				points[i * 2 + 1] -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
			}
		}
		var firstPoint = new openfl_geom_Point(points[0], points[1]);
		var lastPoint = new openfl_geom_Point(points[points.length - 2 | 0], points[points.length - 1 | 0]);
		if (firstPoint.x == lastPoint.x && firstPoint.y == lastPoint.y) {
			points = points.slice();
			points.pop();
			points.pop();
			lastPoint = new openfl_geom_Point(points[points.length - 2 | 0], points[points.length - 1 | 0]);
			var midPointX = lastPoint.x + (firstPoint.x - lastPoint.x) * 0.5;
			var midPointY = lastPoint.y + (firstPoint.y - lastPoint.y) * 0.5;
			points.unshift(midPointY);
			points.unshift(midPointX);
			points.push(midPointX);
			points.push(midPointY);
		}
		var verts = line.verts;
		var indices = line.indices;
		var length = points.length / 2 | 0;
		var indexCount = points.length;
		var indexStart = verts.length / 6 | 0;
		var width = path.line.width / 2;
		var color = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.hex2rgb(path.line.color);
		var alpha = path.line.alpha;
		var r = color[0];
		var g = color[1];
		var b = color[2];
		var px;
		var py;
		var p1x;
		var p1y;
		var p2x;
		var p2y;
		var p3x;
		var p3y;
		var perpx;
		var perpy;
		var perp2x;
		var perp2y;
		var perp3x;
		var perp3y;
		var a1;
		var b1;
		var c1;
		var a2;
		var b2;
		var c2;
		var denom;
		var pdist;
		var dist;
		p1x = points[0];
		p1y = points[1];
		p2x = points[2];
		p2y = points[3];
		perpx = -(p1y - p2y);
		perpy = p1x - p2x;
		dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
		perpx = perpx / dist;
		perpy = perpy / dist;
		perpx = perpx * width;
		perpy = perpy * width;
		verts.push(p1x - perpx);
		verts.push(p1y - perpy);
		verts.push(r);
		verts.push(g);
		verts.push(b);
		verts.push(alpha);
		verts.push(p1x + perpx);
		verts.push(p1y + perpy);
		verts.push(r);
		verts.push(g);
		verts.push(b);
		verts.push(alpha);
		var _g11 = 1;
		var _g2 = length - 1;
		while (_g11 < _g2) {
			var i1 = _g11++;
			p1x = points[(i1 - 1) * 2];
			p1y = points[(i1 - 1) * 2 + 1];
			p2x = points[i1 * 2];
			p2y = points[i1 * 2 + 1];
			p3x = points[(i1 + 1) * 2];
			p3y = points[(i1 + 1) * 2 + 1];
			perpx = -(p1y - p2y);
			perpy = p1x - p2x;
			dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
			perpx = perpx / dist;
			perpy = perpy / dist;
			perpx = perpx * width;
			perpy = perpy * width;
			perp2x = -(p2y - p3y);
			perp2y = p2x - p3x;
			dist = Math.sqrt(Math.abs(perp2x * perp2x + perp2y * perp2y));
			perp2x = perp2x / dist;
			perp2y = perp2y / dist;
			perp2x = perp2x * width;
			perp2y = perp2y * width;
			a1 = -perpy + p1y - (-perpy + p2y);
			b1 = -perpx + p2x - (-perpx + p1x);
			c1 = (-perpx + p1x) * (-perpy + p2y) - (-perpx + p2x) * (-perpy + p1y);
			a2 = -perp2y + p3y - (-perp2y + p2y);
			b2 = -perp2x + p2x - (-perp2x + p3x);
			c2 = (-perp2x + p3x) * (-perp2y + p2y) - (-perp2x + p2x) * (-perp2y + p3y);
			denom = a1 * b2 - a2 * b1;
			if (Math.abs(denom) < 0.1) {
				denom += 10.1;
				verts.push(p2x - perpx);
				verts.push(p2y - perpy);
				verts.push(r);
				verts.push(g);
				verts.push(b);
				verts.push(alpha);
				verts.push(p2x + perpx);
				verts.push(p2y + perpy);
				verts.push(r);
				verts.push(g);
				verts.push(b);
				verts.push(alpha);
				continue;
			}
			px = (b1 * c2 - b2 * c1) / denom;
			py = (a2 * c1 - a1 * c2) / denom;
			pdist = (px - p2x) * (px - p2x) + (py - p2y) + (py - p2y);
			if (pdist > 19600) {
				perp3x = perpx - perp2x;
				perp3y = perpy - perp2y;
				dist = Math.sqrt(Math.abs(perp3x * perp3x + perp3y * perp3y));
				perp3x = perp3x / dist;
				perp3y = perp3y / dist;
				perp3x = perp3x * width;
				perp3y = perp3y * width;
				verts.push(p2x - perp3x);
				verts.push(p2y - perp3y);
				verts.push(r);
				verts.push(g);
				verts.push(b);
				verts.push(alpha);
				verts.push(p2x + perp3x);
				verts.push(p2y + perp3y);
				verts.push(r);
				verts.push(g);
				verts.push(b);
				verts.push(alpha);
				verts.push(p2x - perp3x);
				verts.push(p2y - perp3y);
				verts.push(r);
				verts.push(g);
				verts.push(b);
				verts.push(alpha);
				indexCount++;
			} else {
				verts.push(px);
				verts.push(py);
				verts.push(r);
				verts.push(g);
				verts.push(b);
				verts.push(alpha);
				verts.push(p2x - (px - p2x));
				verts.push(p2y - (py - p2y));
				verts.push(r);
				verts.push(g);
				verts.push(b);
				verts.push(alpha);
			}
		}
		p1x = points[(length - 2) * 2];
		p1y = points[(length - 2) * 2 + 1];
		p2x = points[(length - 1) * 2];
		p2y = points[(length - 1) * 2 + 1];
		perpx = -(p1y - p2y);
		perpy = p1x - p2x;
		dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
		if (!isFinite(dist)) haxe_Log.trace(perpx * perpx + perpy * perpy, { fileName: "GraphicsRenderer.hx", lineNumber: 407, className: "openfl._internal.renderer.opengl.utils.GraphicsRenderer", methodName: "buildLine" });
		perpx = perpx / dist;
		perpy = perpy / dist;
		perpx = perpx * width;
		perpy = perpy * width;
		verts.push(p2x - perpx);
		verts.push(p2y - perpy);
		verts.push(r);
		verts.push(g);
		verts.push(b);
		verts.push(alpha);
		verts.push(p2x + perpx);
		verts.push(p2y + perpy);
		verts.push(r);
		verts.push(g);
		verts.push(b);
		verts.push(alpha);
		indices.push(indexStart);
		var _g3 = 0;
		while (_g3 < indexCount) {
			var i2 = _g3++;
			indices.push(indexStart++);
		}
		indices.push(indexStart - 1);
	};
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildPoly = function (path, glStack) {
		if (path.points.length < 6) return;
		var points = path.points;
		var l = points.length;
		var sx = points[0];
		var sy = points[1];
		var ex = points[l - 2];
		var ey = points[l - 1];
		if (sx != ex || sy != ey) {
			points.push(sx);
			points.push(sy);
		}
		var length = points.length / 2 | 0;
		var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path, glStack);
		var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
		var verts = fill.verts;
		var indices = fill.indices;
		if (fill != null) {
			var triangles = [];
			openfl__$internal_renderer_PolyK.triangulate(triangles, points);
			var vertPos = verts.length / 2;
			var i = 0;
			while (i < triangles.length) {
				indices.push(triangles[i] + vertPos | 0);
				indices.push(triangles[i] + vertPos | 0);
				indices.push(triangles[i + 1] + vertPos | 0);
				indices.push(triangles[i + 2] + vertPos | 0);
				indices.push(triangles[i + 2] + vertPos | 0);
				i += 3;
			}
			var _g = 0;
			while (_g < length) {
				var i1 = _g++;
				verts.push(points[i1 * 2]);
				verts.push(points[i1 * 2 + 1]);
			}
		}
		if (path.line.width > 0) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path, bucket);
	};
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildRectangle = function (path, glStack, localCoords) {
		if (localCoords == null) localCoords = false;
		var rectData = path.points;
		var x = rectData[0];
		var y = rectData[1];
		var width = rectData[2];
		var height = rectData[3];
		if (localCoords) {
			x -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
			y -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
		}
		var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path, glStack);
		var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
		if (fill != null) {
			var verts = fill.verts;
			var indices = fill.indices;
			var vertPos = verts.length / 2 | 0;
			verts.push(x);
			verts.push(y);
			verts.push(x + width);
			verts.push(y);
			verts.push(x);
			verts.push(y + height);
			verts.push(x + width);
			verts.push(y + height);
			indices.push(vertPos);
			indices.push(vertPos);
			indices.push(vertPos + 1);
			indices.push(vertPos + 2);
			indices.push(vertPos + 3);
			indices.push(vertPos + 3);
		}
		if (path.line.width > 0) {
			var tempPoints = path.points;
			path.points = [x, y, x + width, y, x + width, y + height, x, y + height, x, y];
			openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path, bucket);
			path.points = tempPoints;
		}
	};
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildRoundedRectangle = function (path, glStack, localCoords) {
		if (localCoords == null) localCoords = false;
		var points = path.points.slice();
		var x = points[0];
		var y = points[1];
		var width = points[2];
		var height = points[3];
		var rx = points[4];
		var ry = points[5];
		if (localCoords) {
			x -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
			y -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
		}
		var recPoints = [];
		openfl__$internal_renderer_GraphicsPaths.roundRectangle(recPoints, x, y, width, height, rx, ry);
		var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path, glStack);
		var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
		if (fill != null) {
			var verts = fill.verts;
			var indices = fill.indices;
			var vecPos = verts.length / 2;
			var triangles = [];
			openfl__$internal_renderer_PolyK.triangulate(triangles, recPoints);
			var i = 0;
			while (i < triangles.length) {
				indices.push(triangles[i] + vecPos | 0);
				indices.push(triangles[i] + vecPos | 0);
				indices.push(triangles[i + 1] + vecPos | 0);
				indices.push(triangles[i + 2] + vecPos | 0);
				indices.push(triangles[i + 2] + vecPos | 0);
				i += 3;
			}
			i = 0;
			while (i < recPoints.length) {
				verts.push(recPoints[i]);
				verts.push(recPoints[++i]);
				i++;
			}
		}
		if (path.line.width > 0) {
			var tempPoints = path.points;
			path.points = recPoints;
			openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path, bucket);
			path.points = tempPoints;
		}
	};
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildDrawTriangles = function (path, object, glStack, localCoords) {
		if (localCoords == null) localCoords = false;
		var args = path.type.slice(2);
		var vertices = args[0];
		var indices = args[1];
		var uvtData = args[2];
		var culling = args[3];
		var colors = args[4];
		var blendMode = args[5];
		var a;
		var b;
		var c;
		var d;
		var tx;
		var ty;
		if (localCoords) {
			a = 1.0;
			b = 0.0;
			c = 0.0;
			d = 1.0;
			tx = 0.0;
			ty = 0.0;
		} else {
			a = object.__worldTransform.a;
			b = object.__worldTransform.b;
			c = object.__worldTransform.c;
			d = object.__worldTransform.d;
			tx = object.__worldTransform.tx;
			ty = object.__worldTransform.ty;
		}
		var hasColors = colors != null && colors.length > 0;
		var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path, glStack);
		var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
		var colorAttrib = fill.vertexArray.attributes[2];
		colorAttrib.enabled = hasColors;
		var array = [1, 1, 1, 1];
		var this1;
		if (array != null) this1 = new Float32Array(array); else this1 = null;
		colorAttrib.defaultValue = this1;
		fill.rawVerts = true;
		fill.glLength = indices.length;
		fill.stride = Std["int"](fill.vertexArray.get_stride() / 4);
		var vertsLength = fill.glLength * fill.stride;
		var verts;
		if (fill.glVerts == null || fill.glVerts.length < vertsLength) {
			var this2;
			if (vertsLength != null) this2 = new Float32Array(vertsLength); else this2 = null;
			verts = this2;
			fill.glVerts = verts;
		} else verts = fill.glVerts;
		var glColors;
		var buffer = verts.buffer;
		var this3;
		if (buffer != null) this3 = new Uint32Array(buffer, 0); else this3 = null;
		glColors = this3;
		var v0 = 0;
		var v1 = 0;
		var v2 = 0;
		var i0 = 0;
		var i1 = 0;
		var i2 = 0;
		var x0 = 0.0;
		var y0 = 0.0;
		var x1 = 0.0;
		var y1 = 0.0;
		var x2 = 0.0;
		var y2 = 0.0;
		var idx = 0;
		var _g1 = 0;
		var _g = indices.length / 3 | 0;
		while (_g1 < _g) {
			var i = _g1++;
			i0 = indices.data[i * 3];
			i1 = indices.data[i * 3 + 1];
			i2 = indices.data[i * 3 + 2];
			v0 = i0 * 2;
			v1 = i1 * 2;
			v2 = i2 * 2;
			x0 = vertices.data[v0];
			y0 = vertices.data[v0 + 1];
			x1 = vertices.data[v1];
			y1 = vertices.data[v1 + 1];
			x2 = vertices.data[v2];
			y2 = vertices.data[v2 + 1];
			if (localCoords) {
				x0 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
				y0 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
				x1 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
				y1 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
				x2 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
				y2 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
			}
			switch (culling[1]) {
				case 2:
					if (!((x1 - x0) * (y2 - y0) - (y1 - y0) * (x2 - x0) < 0)) continue;
					break;
				case 0:
					if ((x1 - x0) * (y2 - y0) - (y1 - y0) * (x2 - x0) < 0) continue;
					break;
				default:
			}
			var idx1 = idx++;
			verts[idx1] = a * x0 + c * y0 + tx;
			var idx2 = idx++;
			verts[idx2] = b * x0 + d * y0 + ty;
			var idx3 = idx++;
			verts[idx3] = uvtData.data[v0];
			var idx4 = idx++;
			verts[idx4] = uvtData.data[v0 + 1];
			if (hasColors) {
				var idx5 = idx++;
				glColors[idx5] = colors.data[i0];
			}
			var idx6 = idx++;
			verts[idx6] = a * x1 + c * y1 + tx;
			var idx7 = idx++;
			verts[idx7] = b * x1 + d * y1 + ty;
			var idx8 = idx++;
			verts[idx8] = uvtData.data[v1];
			var idx9 = idx++;
			verts[idx9] = uvtData.data[v1 + 1];
			if (hasColors) {
				var idx10 = idx++;
				glColors[idx10] = colors.data[i1];
			}
			var idx11 = idx++;
			verts[idx11] = a * x2 + c * y2 + tx;
			var idx12 = idx++;
			verts[idx12] = b * x2 + d * y2 + ty;
			var idx13 = idx++;
			verts[idx13] = uvtData.data[v2];
			var idx14 = idx++;
			verts[idx14] = uvtData.data[v2 + 1];
			if (hasColors) {
				var idx15 = idx++;
				glColors[idx15] = colors.data[i2];
			}
		}
	};
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildDrawTiles = function (path, glStack) {
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path, glStack);
	};
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.quadraticBezierCurve = function (fromX, fromY, cpX, cpY, toX, toY) {
		var xa;
		var ya;
		var xb;
		var yb;
		var x;
		var y;
		var n = 20;
		var points = [];
		var getPt = function (n1, n2, perc) {
			var diff = n2 - n1;
			return n1 + diff * perc;
		};
		var j = 0.0;
		var _g1 = 0;
		var _g = n + 1;
		while (_g1 < _g) {
			var i = _g1++;
			j = i / n;
			xa = getPt(fromX, cpX, j);
			ya = getPt(fromY, cpY, j);
			xb = getPt(cpX, toX, j);
			yb = getPt(cpY, toY, j);
			x = getPt(xa, xb, j);
			y = getPt(ya, yb, j);
			points.push(x);
			points.push(y);
		}
		return points;
	};
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.render = function (object, renderSession) {
		var graphics = object.__graphics;
		var bounds = graphics.__bounds;
		var spritebatch = renderSession.spriteBatch;
		var dirty = graphics.__dirty;
		if (!graphics.__visible || graphics.__commands.get_length() == 0 || bounds == null || bounds.width == 0 || bounds.height == 0) {
			graphics.__glStack.splice(0, graphics.__glStack.length);
			return;
		}
		if (dirty) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.updateGraphics(object, object.__graphics, renderSession.gl, object.get_cacheAsBitmap());
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderGraphics(object, renderSession, false);
	};
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderGraphics = function (object, renderSession, localCoords) {
		if (localCoords == null) localCoords = false;
		var graphics = object.__graphics;
		var gl = renderSession.gl;
		var glStack = graphics.__glStack[openfl__$internal_renderer_opengl_GLRenderer.glContextId];
		if (glStack == null) return;
		var bucket;
		var translationMatrix;
		if (localCoords) translationMatrix = openfl_geom_Matrix.__identity; else translationMatrix = object.__worldTransform;
		var clipRect = renderSession.spriteBatch.clipRect;
		var batchDrawing = renderSession.spriteBatch.drawing;
		batchDrawing = renderSession.spriteBatch.drawing;
		var _g1 = 0;
		var _g = glStack.buckets.length;
		while (_g1 < _g) {
			var i = _g1++;
			batchDrawing = renderSession.spriteBatch.drawing;
			if (batchDrawing && !localCoords) renderSession.spriteBatch.finish();
			renderSession.blendModeManager.setBlendMode(object.__blendMode);
			if (clipRect != null) {
				gl.enable(gl.SCISSOR_TEST);
				gl.scissor(Math.floor(clipRect.x), Math.floor(clipRect.y), Math.floor(clipRect.width), Math.floor(clipRect.height));
			}
			bucket = glStack.buckets[i];
			var _g2 = bucket.mode;
			switch (_g2[1]) {
				case 1: case 2:
					renderSession.stencilManager.pushBucket(bucket, renderSession, translationMatrix.toArray(true));
					var shader = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareShader(bucket, renderSession, object, translationMatrix.toArray(true));
					openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderFill(bucket, shader, renderSession);
					renderSession.stencilManager.popBucket(object, bucket, renderSession);
					break;
				case 5:
					var shader1 = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareShader(bucket, renderSession, object, null);
					openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderDrawTriangles(bucket, shader1, renderSession);
					break;
				case 6:
					if (!batchDrawing) renderSession.spriteBatch.begin(renderSession, clipRect);
					var args = bucket.graphicType.slice(2);
					renderSession.spriteBatch.renderTiles(object, args[0], args[1], args[2], args[3], args[4], args[5]);
					renderSession.spriteBatch.finish();
					break;
				default:
			}
			var ct = object.__worldColorTransform;
			var _g21 = 0;
			var _g3 = bucket.lines;
			while (_g21 < _g3.length) {
				var line = _g3[_g21];
				++_g21;
				if (line != null && line.verts.length > 0) {
					var shader2 = renderSession.shaderManager.primitiveShader;
					renderSession.shaderManager.setShader(shader2);
					gl.uniformMatrix3fv(shader2.getUniformLocation("openfl_uTranslationMatrix"), false, translationMatrix.toArray(true));
					gl.uniformMatrix3fv(shader2.getUniformLocation("openfl_uProjectionMatrix"), false, renderSession.projectionMatrix.toArray(true));
					gl.uniform1f(shader2.getUniformLocation("openfl_uAlpha"), 1);
					gl.uniform4f(shader2.getUniformLocation("openfl_uColorMultiplier"), ct.redMultiplier, ct.greenMultiplier, ct.blueMultiplier, ct.alphaMultiplier);
					gl.uniform4f(shader2.getUniformLocation("openfl_uColorOffset"), ct.redOffset / 255, ct.greenOffset / 255, ct.blueOffset / 255, ct.alphaOffset / 255);
					line.vertexArray.bind();
					shader2.bindVertexArray(line.vertexArray);
					gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, line.indexBuffer);
					gl.drawElements(gl.TRIANGLE_STRIP, line.indices.length, gl.UNSIGNED_SHORT, 0);
				}
			}
			if (clipRect != null) gl.disable(gl.SCISSOR_TEST);
			batchDrawing = renderSession.spriteBatch.drawing;
			if (!batchDrawing && !localCoords) renderSession.spriteBatch.begin(renderSession, clipRect);
		}
	};
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.updateGraphics = function (object, graphics, gl, localCoords) {
		if (localCoords == null) localCoords = false;
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectPosition.setTo(object.get_x(), object.get_y());
		if (graphics.__bounds == null) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds = new openfl_geom_Rectangle(); else openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.copyFrom(graphics.__bounds);
		var glStack = null;
		if (graphics.__dirty) glStack = openfl__$internal_renderer_opengl_utils_DrawPath.getStack(graphics, gl);
		graphics.set___dirty(false);
		var _g = 0;
		var _g1 = glStack.buckets;
		while (_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			data.reset();
			openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bucketPool.push(data);
		}
		glStack.reset();
		var _g11 = glStack.lastIndex;
		var _g2 = graphics.__drawPaths.length;
		while (_g11 < _g2) {
			var i = _g11++;
			var path = graphics.__drawPaths[i];
			{
				var _g21 = path.type;
				switch (_g21[1]) {
					case 0:
						openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildComplexPoly(path, glStack, localCoords);
						break;
					case 1:
						var rounded = _g21[2];
						if (rounded) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildRoundedRectangle(path, glStack, localCoords); else openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildRectangle(path, glStack, localCoords);
						break;
					case 2: case 3:
						openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildCircle(path, glStack, localCoords);
						break;
					case 4:
						openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildDrawTriangles(path, object, glStack, localCoords);
						break;
					case 5:
						openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path, glStack);
						break;
					case 6:
						var m = _g21[2];
						openfl__$internal_renderer_opengl_utils_GraphicsRenderer.overrideMatrix = m;
						break;
				}
			}
			glStack.lastIndex++;
		}
		var _g3 = 0;
		var _g12 = glStack.buckets;
		while (_g3 < _g12.length) {
			var bucket = _g12[_g3];
			++_g3;
			if (bucket.uploadTileBuffer) bucket.uploadTile(Math.ceil(openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.get_left()), Math.ceil(openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.get_top()), Math.floor(openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.get_right()), Math.floor(openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.get_bottom()));
			bucket.optimize();
		}
		glStack.upload();
	};
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket = function (path, glStack) {
		var bucket = null;
		{
			var _g = path.fill;
			switch (_g[1]) {
				case 1:
					var a = _g[3];
					var c = _g[2];
					bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.switchBucket(path.fillIndex, glStack, openfl__$internal_renderer_opengl_utils_BucketMode.Fill);
					if (c == null) bucket.color = [1, 1, 1]; else bucket.color = [(c >> 16 & 255) / 255, (c >> 8 & 255) / 255, (c & 255) / 255];
					bucket.color[3] = a;
					bucket.uploadTileBuffer = true;
					break;
				case 2:
					var s = _g[5];
					var r = _g[4];
					var m = _g[3];
					var b = _g[2];
					bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.switchBucket(path.fillIndex, glStack, openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill);
					bucket.bitmap = b;
					bucket.textureRepeat = r;
					bucket.textureSmooth = s;
					bucket.texture = b.getTexture(glStack.gl);
					bucket.uploadTileBuffer = true;
					var pMatrix;
					if (m == null) pMatrix = new openfl_geom_Matrix(); else pMatrix = new openfl_geom_Matrix(m.a, m.b, m.c, m.d, m.tx, m.ty);
					pMatrix.invert();
					pMatrix.scale(1 / b.width, 1 / b.height);
					var tx = pMatrix.tx;
					var ty = pMatrix.ty;
					pMatrix.tx = 0;
					pMatrix.ty = 0;
					bucket.textureTL.x = tx;
					bucket.textureTL.y = ty;
					bucket.textureBR.x = tx + 1;
					bucket.textureBR.y = ty + 1;
					bucket.textureMatrix = pMatrix;
					break;
				default:
					bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.switchBucket(path.fillIndex, glStack, openfl__$internal_renderer_opengl_utils_BucketMode.Line);
					bucket.uploadTileBuffer = false;
			}
		}
		{
			var _g1 = path.type;
			switch (_g1[1]) {
				case 4:
					bucket.mode = openfl__$internal_renderer_opengl_utils_BucketMode.DrawTriangles;
					bucket.uploadTileBuffer = false;
					break;
				case 5:
					bucket.mode = openfl__$internal_renderer_opengl_utils_BucketMode.DrawTiles;
					bucket.uploadTileBuffer = false;
					break;
				default:
			}
		}
		bucket.graphicType = path.type;
		bucket.overrideMatrix = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.overrideMatrix;
		return bucket;
	};
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.getBucket = function (glStack, mode) {
		var b = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bucketPool.pop();
		if (b == null) b = new openfl__$internal_renderer_opengl_utils_GLBucket(glStack.gl);
		b.mode = mode;
		glStack.buckets.push(b);
		return b;
	};
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.switchBucket = function (fillIndex, glStack, mode) {
		var bucket = null;
		var _g = 0;
		var _g1 = glStack.buckets;
		while (_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if (b.fillIndex == fillIndex) {
				bucket = b;
				break;
			}
		}
		if (bucket == null) bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.getBucket(glStack, mode);
		bucket.dirty = true;
		bucket.fillIndex = fillIndex;
		return bucket;
	};
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareShader = function (bucket, renderSession, object, translationMatrix) {
		var gl = renderSession.gl;
		var shader = null;
		var _g = bucket.mode;
		switch (_g[1]) {
			case 1:
				shader = renderSession.shaderManager.fillShader;
				break;
			case 2:
				shader = renderSession.shaderManager.patternFillShader;
				break;
			case 5:
				shader = renderSession.shaderManager.drawTrianglesShader;
				break;
			default:
				shader = null;
		}
		if (shader == null) return null;
		var newShader = renderSession.shaderManager.setShader(shader);
		gl.uniform1f(shader.getUniformLocation("openfl_uAlpha"), object.__worldAlpha);
		gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uProjectionMatrix"), false, renderSession.projectionMatrix.toArray(true));
		var ct = object.__worldColorTransform;
		gl.uniform4f(shader.getUniformLocation("openfl_uColorMultiplier"), ct.redMultiplier, ct.greenMultiplier, ct.blueMultiplier, ct.alphaMultiplier);
		gl.uniform4f(shader.getUniformLocation("openfl_uColorOffset"), ct.redOffset / 255, ct.greenOffset / 255, ct.blueOffset / 255, ct.alphaOffset / 255);
		var _g1 = bucket.mode;
		switch (_g1[1]) {
			case 1:
				gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uTranslationMatrix"), false, translationMatrix);
				gl.uniform4fv(shader.getUniformLocation("openfl_uColor"), (function ($this) {
					var $r;
					var array = bucket.color;
					var this1;
					if (array != null) this1 = new Float32Array(array); else this1 = null;
					$r = this1;
					return $r;
				}(this)));
				break;
			case 2:
				gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uTranslationMatrix"), false, translationMatrix);
				gl.uniform2f(shader.getUniformLocation("openfl_uPatternTL"), bucket.textureTL.x, bucket.textureTL.y);
				gl.uniform2f(shader.getUniformLocation("openfl_uPatternBR"), bucket.textureBR.x, bucket.textureBR.y);
				gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uPatternMatrix"), false, bucket.textureMatrix.toArray(true));
				break;
			case 5:
				if (bucket.texture != null) gl.uniform1i(shader.getUniformLocation("openfl_uUseTexture"), 1); else {
					gl.uniform1i(shader.getUniformLocation("openfl_uUseTexture"), 0);
					gl.uniform4fv(shader.getUniformLocation("openfl_uColor"), (function ($this) {
						var $r;
						var array1 = bucket.color;
						var this2;
						if (array1 != null) this2 = new Float32Array(array1); else this2 = null;
						$r = this2;
						return $r;
					}(this)));
				}
				break;
			default:
		}
		return shader;
	};
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderFill = function (bucket, shader, renderSession) {
		var gl = renderSession.gl;
		if (bucket.mode == openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill && bucket.texture != null) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bindTexture(gl, bucket);
		gl.bindBuffer(gl.ARRAY_BUFFER, bucket.tileBuffer);
		gl.vertexAttribPointer(shader.getAttribLocation("openfl_aPosition"), 4, gl.SHORT, false, 0, 0);
		gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
	};
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderDrawTriangles = function (bucket, shader, renderSession) {
		var gl = renderSession.gl;
		var _g = 0;
		var _g1 = bucket.fills;
		while (_g < _g1.length) {
			var fill = _g1[_g];
			++_g;
			if (fill.available) continue;
			openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bindTexture(gl, bucket);
			fill.vertexArray.bind();
			shader.bindVertexArray(fill.vertexArray);
			gl.drawArrays(gl.TRIANGLES, fill.glStart, fill.glLength);
		}
	};
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bindTexture = function (gl, bucket) {
		gl.bindTexture(gl.TEXTURE_2D, bucket.texture);
		if (bucket.textureRepeat && bucket.bitmap.image.get_powerOfTwo()) {
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
		} else {
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
		}
		if (bucket.textureSmooth) {
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
		} else {
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
		}
	};
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.isCCW = function (x1, y1, x2, y2, x3, y3) {
		return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
	};
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.hex2rgb = function (hex) {
		if (hex == null) return [1, 1, 1]; else return [(hex >> 16 & 255) / 255, (hex >> 8 & 255) / 255, (hex & 255) / 255];
	};
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.hex2rgba = function (hex) {
		if (hex == null) return [1, 1, 1, 1]; else return [(hex >> 16 & 255) / 255, (hex >> 8 & 255) / 255, (hex & 255) / 255, (hex >> 24 & 255) / 255];
	};
	var openfl__$internal_renderer_opengl_utils_GLStack = function (gl) {
		this.lastIndex = 0;
		this.gl = gl;
		this.buckets = [];
		this.lastIndex = 0;
	};
	$hxClasses["openfl._internal.renderer.opengl.utils.GLStack"] = openfl__$internal_renderer_opengl_utils_GLStack;
	openfl__$internal_renderer_opengl_utils_GLStack.__name__ = ["openfl", "_internal", "renderer", "opengl", "utils", "GLStack"];
	openfl__$internal_renderer_opengl_utils_GLStack.prototype = {
		reset: function () {
			this.buckets = [];
			this.lastIndex = 0;
		}
		, upload: function () {
			var _g = 0;
			var _g1 = this.buckets;
			while (_g < _g1.length) {
				var bucket = _g1[_g];
				++_g;
				if (bucket.dirty) bucket.upload();
			}
		}
		, __class__: openfl__$internal_renderer_opengl_utils_GLStack
	};
	var openfl__$internal_renderer_opengl_utils_GLBucket = function (gl) {
		this.uploadTileBuffer = true;
		this.textureSmooth = true;
		this.textureRepeat = false;
		this.lines = [];
		this.fills = [];
		this.fillIndex = -1;
		this.gl = gl;
		this.color = [0, 0, 0];
		this.lastIndex = 0;
		this.alpha = 1;
		this.dirty = true;
		this.mode = openfl__$internal_renderer_opengl_utils_BucketMode.Fill;
		this.textureMatrix = new openfl_geom_Matrix();
		this.textureTL = new openfl_geom_Point();
		this.textureBR = new openfl_geom_Point(1, 1);
	};
	$hxClasses["openfl._internal.renderer.opengl.utils.GLBucket"] = openfl__$internal_renderer_opengl_utils_GLBucket;
	openfl__$internal_renderer_opengl_utils_GLBucket.__name__ = ["openfl", "_internal", "renderer", "opengl", "utils", "GLBucket"];
	openfl__$internal_renderer_opengl_utils_GLBucket.prototype = {
		getData: function (type) {
			var data;
			switch (type[1]) {
				case 1:
					data = this.fills;
					break;
				default:
					data = this.lines;
			}
			var result = null;
			var remove = false;
			var _g = 0;
			while (_g < data.length) {
				var d = data[_g];
				++_g;
				if (d.available) {
					result = d;
					remove = true;
					break;
				}
			}
			if (result == null) result = new openfl__$internal_renderer_opengl_utils_GLBucketData(this.gl);
			result.available = false;
			result.parent = this;
			result.type = type;
			if (remove) HxOverrides.remove(data, result);
			data.push(result);
			switch (type[1]) {
				case 1:
					var _g1 = this.mode;
					switch (_g1[1]) {
						case 1: case 2:
							result.vertexArray.attributes = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.fillVertexAttributes;
							break;
						case 5:
							result.vertexArray.attributes = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.drawTrianglesVertexAttributes.slice();
							result.vertexArray.attributes[2] = result.vertexArray.attributes[2].copy();
							break;
						default:
					}
					break;
				case 0:
					result.vertexArray.attributes = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.primitiveVertexAttributes;
					break;
			}
			return result;
		}
		, optimize: function () {
			var _g = this;
			var data = this.lines;
			if (data.length > 1) {
				var result = [];
				var tmp = null;
				var last = null;
				var idx = 0;
				var vi = 0;
				var ii = 0;
				var before = data.length;
				var _g1 = 0;
				while (_g1 < data.length) {
					var d = data[_g1];
					++_g1;
					if (d.available || d.rawVerts || d.rawIndices) {
						if (tmp != null) {
							result.push(tmp);
							tmp = null;
						}
						result.push(d);
						last = d;
						continue;
					}
					if (last == null || last.drawMode == d.drawMode) {
						if (tmp == null) tmp = d; else {
							vi = tmp.verts.length;
							ii = tmp.indices.length;
							var _g2 = 0;
							var _g11 = d.verts.length;
							while (_g2 < _g11) {
								var j = _g2++;
								tmp.verts[j + vi] = d.verts[j];
							}
							var _g21 = 0;
							var _g12 = d.indices.length;
							while (_g21 < _g12) {
								var j1 = _g21++;
								tmp.indices[j1 + ii] = d.indices[j1] + idx;
							}
						}
						idx = tmp.indices[tmp.indices.length - 1] + 1;
						last = d;
					} else {
						if (tmp != null) {
							result.push(tmp);
							tmp = null;
						}
						result.push(d);
						last = d;
						continue;
					}
				}
				if (result.length == 0 && tmp != null) result.push(tmp);
				if (result.length > 0) switch (openfl__$internal_renderer_opengl_utils_BucketDataType.Line[1]) {
					case 1:
						_g.fills = result;
						break;
					default:
						_g.lines = result;
				}
			}
		}
		, reset: function () {
			var _g = 0;
			var _g1 = this.fills;
			while (_g < _g1.length) {
				var fill = _g1[_g];
				++_g;
				fill.reset();
			}
			var _g2 = 0;
			var _g11 = this.lines;
			while (_g2 < _g11.length) {
				var line = _g11[_g2];
				++_g2;
				line.reset();
			}
			this.fillIndex = -1;
			this.uploadTileBuffer = true;
			this.graphicType = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
		}
		, uploadTile: function (x, y, w, h) {
			if (this.tileBuffer == null) this.tileBuffer = this.gl.createBuffer();
			this.tile = [x, y, 0, 0, w, y, 1, 0, x, h, 0, 1, w, h, 1, 1];
			var array = this.tile;
			var this1;
			if (array != null) this1 = new Int16Array(array); else this1 = null;
			this.glTile = this1;
			this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.tileBuffer);
			this.gl.bufferData(this.gl.ARRAY_BUFFER, this.glTile, this.gl.STATIC_DRAW);
		}
		, upload: function () {
			if (this.mode != openfl__$internal_renderer_opengl_utils_BucketMode.Line) {
				var _g = 0;
				var _g1 = this.fills;
				while (_g < _g1.length) {
					var fill = _g1[_g];
					++_g;
					if (!fill.available) fill.upload();
				}
			}
			var _g2 = 0;
			var _g11 = this.lines;
			while (_g2 < _g11.length) {
				var line = _g11[_g2];
				++_g2;
				if (!line.available) line.upload();
			}
			this.dirty = false;
		}
		, __class__: openfl__$internal_renderer_opengl_utils_GLBucket
	};
	var openfl__$internal_renderer_opengl_utils_GLBucketData = function (gl) {
		this.available = false;
		this.rawIndices = false;
		this.stride = 0;
		this.rawVerts = false;
		this.lastVertsSize = 0;
		this.glStart = 0;
		this.glLength = 0;
		this.gl = gl;
		this.drawMode = gl.TRIANGLE_STRIP;
		this.verts = [];
		this.indices = [];
		this.vertexArray = new openfl__$internal_renderer_opengl_utils_VertexArray([]);
	};
	$hxClasses["openfl._internal.renderer.opengl.utils.GLBucketData"] = openfl__$internal_renderer_opengl_utils_GLBucketData;
	openfl__$internal_renderer_opengl_utils_GLBucketData.__name__ = ["openfl", "_internal", "renderer", "opengl", "utils", "GLBucketData"];
	openfl__$internal_renderer_opengl_utils_GLBucketData.prototype = {
		reset: function () {
			this.available = true;
			this.verts = [];
			this.indices = [];
			this.glLength = 0;
			this.glStart = 0;
			this.stride = 0;
			this.rawVerts = false;
			this.rawIndices = false;
			this.drawMode = this.gl.TRIANGLE_STRIP;
		}
		, upload: function () {
			if (this.rawVerts && this.glVerts != null && this.glVerts.length > 0 || this.verts.length > 0) {
				if (!this.rawVerts) {
					var array = this.verts;
					var this1;
					if (array != null) this1 = new Float32Array(array); else this1 = null;
					this.glVerts = this1;
				}
				this.vertexArray.buffer = this.glVerts.buffer;
				if (this.glVerts.length <= this.lastVertsSize) {
					this.vertexArray.bind();
					var end = this.glLength * this.stride;
					if (this.glLength > 0 && this.lastVertsSize > end) {
						var view = this.glVerts.subarray(0, end);
						this.vertexArray.upload(view);
					} else this.vertexArray.upload(this.glVerts);
				} else {
					this.vertexArray.setContext(this.gl, this.glVerts);
					this.lastVertsSize = this.glVerts.length;
				}
			}
			if (this.glLength == 0 && (this.rawIndices && this.glIndices != null && this.glIndices.length > 0 || this.indices.length > 0)) {
				if (this.indexBuffer == null) this.indexBuffer = this.gl.createBuffer();
				if (!this.rawIndices) {
					var array1 = this.indices;
					var this2;
					if (array1 != null) this2 = new Uint16Array(array1); else this2 = null;
					this.glIndices = this2;
				}
				this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
				this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, this.glIndices, this.gl.STREAM_DRAW);
			}
		}
		, __class__: openfl__$internal_renderer_opengl_utils_GLBucketData
	};
	var openfl__$internal_renderer_opengl_utils_BucketMode = $hxClasses["openfl._internal.renderer.opengl.utils.BucketMode"] = { __ename__: ["openfl", "_internal", "renderer", "opengl", "utils", "BucketMode"], __constructs__: ["None", "Fill", "PatternFill", "Line", "PatternLine", "DrawTriangles", "DrawTiles"] };
	openfl__$internal_renderer_opengl_utils_BucketMode.None = ["None", 0];
	openfl__$internal_renderer_opengl_utils_BucketMode.None.toString = $estr;
	openfl__$internal_renderer_opengl_utils_BucketMode.None.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
	openfl__$internal_renderer_opengl_utils_BucketMode.Fill = ["Fill", 1];
	openfl__$internal_renderer_opengl_utils_BucketMode.Fill.toString = $estr;
	openfl__$internal_renderer_opengl_utils_BucketMode.Fill.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
	openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill = ["PatternFill", 2];
	openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill.toString = $estr;
	openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
	openfl__$internal_renderer_opengl_utils_BucketMode.Line = ["Line", 3];
	openfl__$internal_renderer_opengl_utils_BucketMode.Line.toString = $estr;
	openfl__$internal_renderer_opengl_utils_BucketMode.Line.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
	openfl__$internal_renderer_opengl_utils_BucketMode.PatternLine = ["PatternLine", 4];
	openfl__$internal_renderer_opengl_utils_BucketMode.PatternLine.toString = $estr;
	openfl__$internal_renderer_opengl_utils_BucketMode.PatternLine.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
	openfl__$internal_renderer_opengl_utils_BucketMode.DrawTriangles = ["DrawTriangles", 5];
	openfl__$internal_renderer_opengl_utils_BucketMode.DrawTriangles.toString = $estr;
	openfl__$internal_renderer_opengl_utils_BucketMode.DrawTriangles.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
	openfl__$internal_renderer_opengl_utils_BucketMode.DrawTiles = ["DrawTiles", 6];
	openfl__$internal_renderer_opengl_utils_BucketMode.DrawTiles.toString = $estr;
	openfl__$internal_renderer_opengl_utils_BucketMode.DrawTiles.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
	var openfl__$internal_renderer_opengl_utils_BucketDataType = $hxClasses["openfl._internal.renderer.opengl.utils.BucketDataType"] = { __ename__: ["openfl", "_internal", "renderer", "opengl", "utils", "BucketDataType"], __constructs__: ["Line", "Fill"] };
	openfl__$internal_renderer_opengl_utils_BucketDataType.Line = ["Line", 0];
	openfl__$internal_renderer_opengl_utils_BucketDataType.Line.toString = $estr;
	openfl__$internal_renderer_opengl_utils_BucketDataType.Line.__enum__ = openfl__$internal_renderer_opengl_utils_BucketDataType;
	openfl__$internal_renderer_opengl_utils_BucketDataType.Fill = ["Fill", 1];
	openfl__$internal_renderer_opengl_utils_BucketDataType.Fill.toString = $estr;
	openfl__$internal_renderer_opengl_utils_BucketDataType.Fill.__enum__ = openfl__$internal_renderer_opengl_utils_BucketDataType;
	var openfl__$internal_renderer_opengl_utils_GLGraphicsData = function (gl) {
		this.indices = [];
		this.data = [];
		this.lastIndex = 0;
		this.mode = 0;
		this.dirty = true;
		this.alpha = 1.0;
		this.tint = [1.0, 1.0, 1.0];
		this.gl = gl;
		this.dataBuffer = gl.createBuffer();
		this.indexBuffer = gl.createBuffer();
	};
	$hxClasses["openfl._internal.renderer.opengl.utils.GLGraphicsData"] = openfl__$internal_renderer_opengl_utils_GLGraphicsData;
	openfl__$internal_renderer_opengl_utils_GLGraphicsData.__name__ = ["openfl", "_internal", "renderer", "opengl", "utils", "GLGraphicsData"];
	openfl__$internal_renderer_opengl_utils_GLGraphicsData.prototype = {
		reset: function () {
			this.data = [];
			this.indices = [];
			this.lastIndex = 0;
		}
		, upload: function () {
			var elements = this.data;
			var this1;
			if (elements != null) this1 = new Float32Array(elements); else this1 = null;
			this.glData = this1;
			this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.dataBuffer);
			this.gl.bufferData(this.gl.ARRAY_BUFFER, this.glData, this.gl.STATIC_DRAW);
			var elements1 = this.indices;
			var this2;
			if (elements1 != null) this2 = new Uint16Array(elements1); else this2 = null;
			this.glIndices = this2;
			this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
			this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, this.glIndices, this.gl.STATIC_DRAW);
			this.dirty = false;
		}
		, __class__: openfl__$internal_renderer_opengl_utils_GLGraphicsData
	};
	var openfl__$internal_renderer_opengl_utils_GraphicType = $hxClasses["openfl._internal.renderer.opengl.utils.GraphicType"] = { __ename__: ["openfl", "_internal", "renderer", "opengl", "utils", "GraphicType"], __constructs__: ["Polygon", "Rectangle", "Circle", "Ellipse", "DrawTriangles", "DrawTiles", "OverrideMatrix"] };
	openfl__$internal_renderer_opengl_utils_GraphicType.Polygon = ["Polygon", 0];
	openfl__$internal_renderer_opengl_utils_GraphicType.Polygon.toString = $estr;
	openfl__$internal_renderer_opengl_utils_GraphicType.Polygon.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType;
	openfl__$internal_renderer_opengl_utils_GraphicType.Rectangle = function (rounded) { var $x = ["Rectangle", 1, rounded]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType; $x.toString = $estr; return $x; };
	openfl__$internal_renderer_opengl_utils_GraphicType.Circle = ["Circle", 2];
	openfl__$internal_renderer_opengl_utils_GraphicType.Circle.toString = $estr;
	openfl__$internal_renderer_opengl_utils_GraphicType.Circle.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType;
	openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse = ["Ellipse", 3];
	openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse.toString = $estr;
	openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType;
	openfl__$internal_renderer_opengl_utils_GraphicType.DrawTriangles = function (vertices, indices, uvtData, culling, colors, blendMode) { var $x = ["DrawTriangles", 4, vertices, indices, uvtData, culling, colors, blendMode]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType; $x.toString = $estr; return $x; };
	openfl__$internal_renderer_opengl_utils_GraphicType.DrawTiles = function (sheet, tileData, smooth, flags, shader, count) { var $x = ["DrawTiles", 5, sheet, tileData, smooth, flags, shader, count]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType; $x.toString = $estr; return $x; };
	openfl__$internal_renderer_opengl_utils_GraphicType.OverrideMatrix = function (matrix) { var $x = ["OverrideMatrix", 6, matrix]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType; $x.toString = $estr; return $x; };
	var openfl__$internal_renderer_opengl_utils_PingPongTexture = function (gl, width, height, smoothing, powerOfTwo) {
		if (powerOfTwo == null) powerOfTwo = true;
		if (smoothing == null) smoothing = true;
		this.__swapped = false;
		this.powerOfTwo = true;
		this.useOldTexture = false;
		this.gl = gl;
		this.width = width;
		this.height = height;
		this.smoothing = smoothing;
		this.powerOfTwo = powerOfTwo;
		this.set_renderTexture(new openfl__$internal_renderer_opengl_utils_RenderTexture(gl, width, height, smoothing, powerOfTwo));
	};
	$hxClasses["openfl._internal.renderer.opengl.utils.PingPongTexture"] = openfl__$internal_renderer_opengl_utils_PingPongTexture;
	openfl__$internal_renderer_opengl_utils_PingPongTexture.__name__ = ["openfl", "_internal", "renderer", "opengl", "utils", "PingPongTexture"];
	openfl__$internal_renderer_opengl_utils_PingPongTexture.prototype = {
		swap: function () {
			this.__swapped = !this.__swapped;
			if ((this.__swapped ? this.__texture1 : this.__texture0) == null) this.set_renderTexture(new openfl__$internal_renderer_opengl_utils_RenderTexture(this.gl, this.width, this.height, this.smoothing, this.powerOfTwo));
		}
		, clear: function (r, g, b, a, mask) {
			if (a == null) a = 0;
			if (b == null) b = 0;
			if (g == null) g = 0;
			if (r == null) r = 0;
			(this.__swapped ? this.__texture1 : this.__texture0).clear(r, g, b, a, mask);
		}
		, resize: function (width, height) {
			this.width = width;
			this.height = height;
			(this.__swapped ? this.__texture1 : this.__texture0).resize(width, height);
		}
		, destroy: function () {
			if (this.__texture0 != null) {
				this.__texture0.destroy();
				this.__texture0 = null;
			}
			if (this.__texture1 != null) {
				this.__texture1.destroy();
				this.__texture1 = null;
			}
			this.__swapped = false;
		}
		, get_renderTexture: function () {
			if (this.__swapped) return this.__texture1; else return this.__texture0;
		}
		, set_renderTexture: function (v) {
			if (this.__swapped) return this.__texture1 = v; else return this.__texture0 = v;
		}
		, get_oldRenderTexture: function () {
			if (this.__swapped) return this.__texture0; else return this.__texture1;
		}
		, set_oldRenderTexture: function (v) {
			if (this.__swapped) return this.__texture0 = v; else return this.__texture1 = v;
		}
		, get_framebuffer: function () {
			return (this.__swapped ? this.__texture1 : this.__texture0).frameBuffer;
		}
		, get_texture: function () {
			if (this.useOldTexture) return (this.__swapped ? this.__texture0 : this.__texture1).texture; else return (this.__swapped ? this.__texture1 : this.__texture0).texture;
		}
		, get___otherTexture: function () {
			if (this.__swapped) return this.__texture0; else return this.__texture1;
		}
		, __class__: openfl__$internal_renderer_opengl_utils_PingPongTexture
		, __properties__: { get___otherTexture: "get___otherTexture", get_texture: "get_texture", get_framebuffer: "get_framebuffer", set_oldRenderTexture: "set_oldRenderTexture", get_oldRenderTexture: "get_oldRenderTexture", set_renderTexture: "set_renderTexture", get_renderTexture: "get_renderTexture" }
	};
	var openfl__$internal_renderer_opengl_utils_RenderTexture = function (gl, width, height, smoothing, powerOfTwo) {
		if (powerOfTwo == null) powerOfTwo = true;
		if (smoothing == null) smoothing = true;
		this.powerOfTwo = true;
		this.gl = gl;
		this.powerOfTwo = powerOfTwo;
		this.frameBuffer = gl.createFramebuffer();
		this.texture = gl.createTexture();
		gl.bindTexture(gl.TEXTURE_2D, this.texture);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, smoothing ? gl.LINEAR : gl.NEAREST);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, smoothing ? gl.LINEAR : gl.NEAREST);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
		gl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer);
		gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture, 0);
		this.renderBuffer = gl.createRenderbuffer();
		gl.bindRenderbuffer(gl.RENDERBUFFER, this.renderBuffer);
		gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, this.renderBuffer);
		this.resize(width, height);
	};
	$hxClasses["openfl._internal.renderer.opengl.utils.RenderTexture"] = openfl__$internal_renderer_opengl_utils_RenderTexture;
	openfl__$internal_renderer_opengl_utils_RenderTexture.__name__ = ["openfl", "_internal", "renderer", "opengl", "utils", "RenderTexture"];
	openfl__$internal_renderer_opengl_utils_RenderTexture.prototype = {
		clear: function (r, g, b, a, mask) {
			if (a == null) a = 0;
			if (b == null) b = 0;
			if (g == null) g = 0;
			if (r == null) r = 0;
			this.gl.clearColor(r, g, b, a);
			this.gl.clear(mask == null ? this.gl.COLOR_BUFFER_BIT : mask);
		}
		, destroy: function () {
			if (this.frameBuffer != null) this.gl.deleteFramebuffer(this.frameBuffer);
			if (this.texture != null) this.gl.deleteTexture(this.texture);
			this.frameBuffer = null;
			this.texture = null;
		}
		, resize: function (width, height) {
			if (this.width == width && this.height == height) return;
			this.width = width;
			this.height = height;
			var pow2W = width;
			var pow2H = height;
			if (this.powerOfTwo) {
				pow2W = this.powOfTwo(width);
				pow2H = this.powOfTwo(height);
			}
			var lastW = this.__width;
			var lastH = this.__height;
			this.__width = pow2W;
			this.__height = pow2H;
			this.createUVs();
			if (lastW == pow2W && lastH == pow2H) return;
			this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture);
			this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.__width, this.__height, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, null);
			this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.renderBuffer);
			this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.DEPTH_STENCIL, this.__width, this.__height);
		}
		, createUVs: function () {
			if (this.__uvData == null) this.__uvData = new openfl_display_TextureUvs();
			var w = this.width / this.__width;
			var h = this.height / this.__height;
			this.__uvData.x0 = 0;
			this.__uvData.y0 = 0;
			this.__uvData.x1 = w;
			this.__uvData.y1 = 0;
			this.__uvData.x2 = w;
			this.__uvData.y2 = h;
			this.__uvData.x3 = 0;
			this.__uvData.y3 = h;
		}
		, powOfTwo: function (value) {
			var n = 1;
			while (n < value) n <<= 1;
			return n;
		}
		, __class__: openfl__$internal_renderer_opengl_utils_RenderTexture
	};
	var openfl__$internal_renderer_opengl_utils_ShaderManager = function (gl) {
		this.setContext(gl);
	};
	$hxClasses["openfl._internal.renderer.opengl.utils.ShaderManager"] = openfl__$internal_renderer_opengl_utils_ShaderManager;
	openfl__$internal_renderer_opengl_utils_ShaderManager.__name__ = ["openfl", "_internal", "renderer", "opengl", "utils", "ShaderManager"];
	openfl__$internal_renderer_opengl_utils_ShaderManager.prototype = {
		setContext: function (gl) {
			this.gl = gl;
			this.defaultShader = new openfl__$internal_renderer_opengl_shaders2_DefaultShader(gl);
			this.fillShader = new openfl__$internal_renderer_opengl_shaders2_FillShader(gl);
			this.patternFillShader = new openfl__$internal_renderer_opengl_shaders2_PatternFillShader(gl);
			this.drawTrianglesShader = new openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader(gl);
			this.primitiveShader = new openfl__$internal_renderer_opengl_shaders2_PrimitiveShader(gl);
			this.setShader(this.defaultShader, true);
		}
		, destroy: function () {
			this.defaultShader.destroy();
			this.fillShader.destroy();
			this.patternFillShader.destroy();
			this.drawTrianglesShader.destroy();
			this.primitiveShader.destroy();
			this.gl = null;
		}
		, setShader: function (shader, force) {
			if (force == null) force = false;
			if (shader == null) {
				this.currentShader = null;
				this.gl.useProgram(null);
				return true;
			}
			if (this.currentShader != null && !force && this.currentShader.ID == shader.ID) return false;
			this.currentShader = shader;
			this.gl.useProgram(shader.program);
			return true;
		}
		, __class__: openfl__$internal_renderer_opengl_utils_ShaderManager
	};
	var openfl__$internal_renderer_opengl_utils_SpriteBatch = function (gl, maxSprites) {
		if (maxSprites == null) maxSprites = 2000;
		this.uvs = new openfl_display_TextureUvs();
		this.matrix = new openfl_geom_Matrix();
		this.lastEnableColor = true;
		this.enableColor = true;
		this.attributes = [];
		this.writtenVertexBytes = 0;
		this.drawing = false;
		this.dirty = true;
		this.states = [];
		this.maxSprites = maxSprites;
		this.attributes.push(new openfl__$internal_renderer_opengl_utils_VertexAttribute(2, 5126, false, "openfl_aPosition"));
		this.attributes.push(new openfl__$internal_renderer_opengl_utils_VertexAttribute(2, 5126, false, "openfl_aTexCoord0"));
		this.attributes.push(new openfl__$internal_renderer_opengl_utils_VertexAttribute(4, 5121, true, "openfl_aColor"));
		var array = [1, 1, 1, 1];
		var this1;
		if (array != null) this1 = new Float32Array(array); else this1 = null;
		this.attributes[2].defaultValue = this1;
		this.maxElementsPerVertex = 0;
		var _g = 0;
		var _g1 = this.attributes;
		while (_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			this.maxElementsPerVertex += Math.floor(a.components * a.getElementsBytes() / 4);
		}
		this.vertexArraySize = maxSprites * this.maxElementsPerVertex * 4 * 4;
		this.indexArraySize = maxSprites * 6;
		this.vertexArray = new openfl__$internal_renderer_opengl_utils_VertexArray(this.attributes, this.vertexArraySize, false);
		var buffer = this.vertexArray.buffer;
		var this2;
		if (buffer != null) this2 = new Float32Array(buffer, 0); else this2 = null;
		this.positions = this2;
		var buffer1 = this.vertexArray.buffer;
		var this3;
		if (buffer1 != null) this3 = new Uint32Array(buffer1, 0); else this3 = null;
		this.colors = this3;
		var elements = this.indexArraySize;
		var this4;
		if (elements != null) this4 = new Uint16Array(elements); else this4 = null;
		this.indices = this4;
		var i = 0;
		var j = 0;
		while (i < this.indexArraySize) {
			this.indices[i] = j;
			this.indices[i + 1] = j + 1;
			this.indices[i + 2] = j + 2;
			this.indices[i + 3] = j;
			this.indices[i + 4] = j + 2;
			this.indices[i + 5] = j + 3;
			i += 6;
			j += 4;
		}
		this.currentState = new openfl__$internal_renderer_opengl_utils__$SpriteBatch_State();
		this.dirty = true;
		this.drawing = false;
		this.batchedSprites = 0;
		this.setContext(gl);
	};
	$hxClasses["openfl._internal.renderer.opengl.utils.SpriteBatch"] = openfl__$internal_renderer_opengl_utils_SpriteBatch;
	openfl__$internal_renderer_opengl_utils_SpriteBatch.__name__ = ["openfl", "_internal", "renderer", "opengl", "utils", "SpriteBatch"];
	openfl__$internal_renderer_opengl_utils_SpriteBatch.prototype = {
		destroy: function () {
			this.vertexArray.destroy();
			this.vertexArray = null;
			this.indices = null;
			this.gl.deleteBuffer(this.indexBuffer);
			this.currentState.destroy();
			var _g = 0;
			var _g1 = this.states;
			while (_g < _g1.length) {
				var state = _g1[_g];
				++_g;
				state.destroy();
			}
			this.gl = null;
		}
		, begin: function (renderSession, clipRect) {
			this.renderSession = renderSession;
			this.shader = renderSession.shaderManager.defaultShader;
			this.drawing = true;
			this.start(clipRect);
		}
		, finish: function () {
			this.stop();
			this.clipRect = null;
			this.drawing = false;
		}
		, start: function (clipRect) {
			if (!this.drawing) this.stop();
			this.dirty = true;
			this.clipRect = clipRect;
		}
		, stop: function () {
			this.flush();
		}
		, renderBitmapData: function (bitmapData, smoothing, matrix, ct, alpha, blendMode, flashShader, pixelSnapping, bgra) {
			if (bgra == null) bgra = false;
			if (alpha == null) alpha = 1;
			if (bitmapData == null) return;
			var texture = bitmapData.getTexture(this.gl);
			if (this.batchedSprites >= this.maxSprites) this.flush();
			var uvs = bitmapData.__uvData;
			if (uvs == null) return;
			this.prepareShader(flashShader, bitmapData);
			var color = ((alpha * 255 | 0) & 255) << 24 | 16777215;
			this.enableColor = true;
			if (this.enableColor != this.lastEnableColor) {
				this.flush();
				this.lastEnableColor = this.enableColor;
			}
			this.attributes[2].enabled = this.lastEnableColor;
			this.elementsPerVertex = this.getElementsPerVertex();
			var index = this.batchedSprites * 4 * this.elementsPerVertex;
			this.fillVertices(index, bitmapData.width, bitmapData.height, matrix, uvs, color, pixelSnapping);
			this.setState(this.batchedSprites, texture, smoothing, blendMode, ct, flashShader, true);
			this.batchedSprites++;
		}
		, renderTiles: function (object, sheet, tileData, smooth, flags, flashShader, count) {
			if (count == null) count = -1;
			if (flags == null) flags = 0;
			if (smooth == null) smooth = false;
			var texture = sheet.__bitmap.getTexture(this.gl);
			if (texture == null) return;
			var useScale = (flags & 1) > 0;
			var useRotation = (flags & 2) > 0;
			var useTransform = (flags & 16) > 0;
			var useRGB = (flags & 4) > 0;
			var useAlpha = (flags & 8) > 0;
			var useRect = (flags & 32) > 0;
			var useOrigin = (flags & 64) > 0;
			var blendMode;
			var _g = flags & 983040;
			switch (_g) {
				case 65536:
					blendMode = openfl_display_BlendMode.ADD;
					break;
				case 131072:
					blendMode = openfl_display_BlendMode.MULTIPLY;
					break;
				case 262144:
					blendMode = openfl_display_BlendMode.SCREEN;
					break;
				case 524288:
					blendMode = openfl_display_BlendMode.SUBTRACT;
					break;
				default:
					var _g1 = flags & 15728640;
					switch (_g1) {
						case 1048576:
							blendMode = openfl_display_BlendMode.DARKEN;
							break;
						case 2097152:
							blendMode = openfl_display_BlendMode.LIGHTEN;
							break;
						case 4194304:
							blendMode = openfl_display_BlendMode.OVERLAY;
							break;
						case 8388608:
							blendMode = openfl_display_BlendMode.HARDLIGHT;
							break;
						default:
							var _g2 = flags & 251658240;
							switch (_g2) {
								case 16777216:
									blendMode = openfl_display_BlendMode.DIFFERENCE;
									break;
								case 33554432:
									blendMode = openfl_display_BlendMode.INVERT;
									break;
								default:
									blendMode = openfl_display_BlendMode.NORMAL;
							}
					}
			}
			if (useTransform) {
				useScale = false;
				useRotation = false;
			}
			var scaleIndex = 0;
			var rotationIndex = 0;
			var rgbIndex = 0;
			var alphaIndex = 0;
			var transformIndex = 0;
			var numValues = 3;
			if (useRect) if (useOrigin) numValues = 8; else numValues = 6;
			if (useScale) {
				scaleIndex = numValues;
				numValues++;
			}
			if (useRotation) {
				rotationIndex = numValues;
				numValues++;
			}
			if (useTransform) {
				transformIndex = numValues;
				numValues += 4;
			}
			if (useRGB) {
				rgbIndex = numValues;
				numValues += 3;
			}
			if (useAlpha) {
				alphaIndex = numValues;
				numValues++;
			}
			var totalCount = tileData.length;
			if (count >= 0 && totalCount > count) totalCount = count;
			var itemCount = Math.ceil(totalCount / numValues);
			var iIndex = 0;
			var tileID = -1;
			var rect = sheet.__rectTile;
			var tileUV = sheet.__rectUV;
			var center = sheet.__point;
			var x = 0.0;
			var y = 0.0;
			var alpha = 1.0;
			var tint = 16777215;
			var color = -1;
			var scale = 1.0;
			var rotation = 0.0;
			var cosTheta = 1.0;
			var sinTheta = 0.0;
			var a = 0.0;
			var b = 0.0;
			var c = 0.0;
			var d = 0.0;
			var tx = 0.0;
			var ty = 0.0;
			var ox = 0.0;
			var oy = 0.0;
			var oMatrix = object.__worldTransform;
			var bIndex = 0;
			var tMa = 1.0;
			var tMb = 0.0;
			var tMc = 0.0;
			var tMd = 1.0;
			var tMtx = 0.0;
			var tMty = 0.0;
			var oMa = oMatrix.a;
			var oMb = oMatrix.b;
			var oMc = oMatrix.c;
			var oMd = oMatrix.d;
			var oMtx = oMatrix.tx;
			var oMty = oMatrix.ty;
			var rx = 0.0;
			var ry = 0.0;
			var rw = 0.0;
			var rh = 0.0;
			var tuvx = 0.0;
			var tuvy = 0.0;
			var tuvw = 0.0;
			var tuvh = 0.0;
			this.enableColor = true;
			if (this.enableColor != this.lastEnableColor) {
				this.flush();
				this.lastEnableColor = this.enableColor;
			}
			this.attributes[2].enabled = this.lastEnableColor;
			this.elementsPerVertex = this.getElementsPerVertex();
			this.prepareShader(flashShader, null);
			while (iIndex < totalCount) {
				if (this.batchedSprites >= this.maxSprites) this.flush();
				x = tileData[iIndex];
				y = tileData[iIndex + 1];
				if (useRect) {
					tileID = -1;
					rect.x = tileData[iIndex + 2];
					rect.y = tileData[iIndex + 3];
					rect.width = tileData[iIndex + 4];
					rect.height = tileData[iIndex + 5];
					if (useOrigin) {
						center.x = tileData[iIndex + 6];
						center.y = tileData[iIndex + 7];
					} else {
						center.x = 0;
						center.y = 0;
					}
					rw = rect.width;
					rh = rect.height;
					tuvx = rect.get_left() / sheet.__bitmap.width;
					tuvy = rect.get_top() / sheet.__bitmap.height;
					tuvw = rect.get_right() / sheet.__bitmap.width;
					tuvh = rect.get_bottom() / sheet.__bitmap.height;
				} else {
					tileID = (tileData[iIndex + 2] == null ? 0 : tileData[iIndex + 2]) | 0;
					rect = sheet.__tileRects[tileID];
					center = sheet.__centerPoints[tileID];
					tileUV = sheet.__tileUVs[tileID];
					if (rect != null) {
						rw = rect.width;
						rh = rect.height;
						tuvx = tileUV.x;
						tuvy = tileUV.y;
						tuvw = tileUV.width;
						tuvh = tileUV.height;
					}
				}
				if (rect != null && rect.width > 0 && rect.height > 0 && center != null) {
					alpha = 1;
					tint = 16777215;
					scale = 1.0;
					rotation = 0.0;
					cosTheta = 1.0;
					sinTheta = 0.0;
					if (useAlpha) alpha = tileData[iIndex + alphaIndex] * object.__worldAlpha; else alpha = object.__worldAlpha;
					if (useRGB) tint = (tileData[iIndex + rgbIndex] * 255 | 0) << 16 | (tileData[iIndex + rgbIndex + 1] * 255 | 0) << 8 | (tileData[iIndex + rgbIndex + 2] * 255 | 0);
					if (useScale) scale = tileData[iIndex + scaleIndex];
					if (useRotation) {
						rotation = tileData[iIndex + rotationIndex];
						cosTheta = Math.cos(rotation);
						sinTheta = Math.sin(rotation);
					}
					if (useTransform) {
						a = tileData[iIndex + transformIndex];
						b = tileData[iIndex + transformIndex + 1];
						c = tileData[iIndex + transformIndex + 2];
						d = tileData[iIndex + transformIndex + 3];
					} else {
						a = scale * cosTheta;
						b = scale * sinTheta;
						c = -b;
						d = a;
					}
					ox = center.x * a + center.y * c;
					oy = center.x * b + center.y * d;
					tx = x - ox;
					ty = y - oy;
					tMa = (a * oMa + b * oMc) * rw;
					tMb = (a * oMb + b * oMd) * rw;
					tMc = (c * oMa + d * oMc) * rh;
					tMd = (c * oMb + d * oMd) * rh;
					tMtx = tx * oMa + ty * oMc + oMtx;
					tMty = tx * oMb + ty * oMd + oMty;
					bIndex = this.batchedSprites * 4 * this.elementsPerVertex;
					this.positions[bIndex] = tMtx;
					this.positions[bIndex + 1] = tMty;
					this.positions[bIndex + 5] = tMa + tMtx;
					this.positions[bIndex + 6] = tMb + tMty;
					this.positions[bIndex + 10] = tMa + tMc + tMtx;
					this.positions[bIndex + 11] = tMd + tMb + tMty;
					this.positions[bIndex + 15] = tMc + tMtx;
					this.positions[bIndex + 16] = tMd + tMty;
					var val;
					var val1;
					var val2 = this.colors[bIndex + 19] = ((alpha * 255 | 0) & 255) << 24 | tint;
					val1 = this.colors[bIndex + 14] = val2;
					val = this.colors[bIndex + 9] = val1;
					this.colors[bIndex + 4] = val;
					this.positions[bIndex + 2] = tuvx;
					this.positions[bIndex + 3] = tuvy;
					this.positions[bIndex + 7] = tuvw;
					this.positions[bIndex + 8] = tuvy;
					this.positions[bIndex + 12] = tuvw;
					this.positions[bIndex + 13] = tuvh;
					this.positions[bIndex + 17] = tuvx;
					this.positions[bIndex + 18] = tuvh;
					this.writtenVertexBytes = bIndex + 20;
					this.setState(this.batchedSprites, texture, smooth, blendMode, object.__worldColorTransform, flashShader, false);
					this.batchedSprites++;
				}
				iIndex += numValues;
			}
		}
		, fillVertices: function (index, width, height, matrix, uvs, color, pixelSnapping) {
			if (color == null) color = -1;
			var a = matrix.a;
			var b = matrix.b;
			var c = matrix.c;
			var d = matrix.d;
			var tx = matrix.tx;
			var ty = matrix.ty;
			if (pixelSnapping == null || pixelSnapping == openfl_display_PixelSnapping.NEVER) {
				this.positions[index] = tx;
				this.positions[index + 1] = ty;
				this.positions[index + 5] = a * width + tx;
				this.positions[index + 6] = b * width + ty;
				this.positions[index + 10] = a * width + c * height + tx;
				this.positions[index + 11] = d * height + b * width + ty;
				this.positions[index + 15] = c * height + tx;
				this.positions[index + 16] = d * height + ty;
			} else {
				var val = Math.round(tx);
				this.positions[index] = val;
				var val1 = Math.round(ty);
				this.positions[index + 1] = val1;
				var val2 = Math.round(a * width + tx);
				this.positions[index + 5] = val2;
				var val3 = Math.round(b * width + ty);
				this.positions[index + 6] = val3;
				var val4 = Math.round(a * width + c * height + tx);
				this.positions[index + 10] = val4;
				var val5 = Math.round(d * height + b * width + ty);
				this.positions[index + 11] = val5;
				var val6 = Math.round(c * height + tx);
				this.positions[index + 15] = val6;
				var val7 = Math.round(d * height + ty);
				this.positions[index + 16] = val7;
			}
			if (this.enableColor) {
				var val8;
				var val9;
				var val10 = this.colors[index + 19] = color;
				val9 = this.colors[index + 14] = val10;
				val8 = this.colors[index + 9] = val9;
				this.colors[index + 4] = val8;
			}
			this.positions[index + 2] = uvs.x0;
			this.positions[index + 3] = uvs.y0;
			this.positions[index + 7] = uvs.x1;
			this.positions[index + 8] = uvs.y1;
			this.positions[index + 12] = uvs.x2;
			this.positions[index + 13] = uvs.y2;
			this.positions[index + 17] = uvs.x3;
			this.positions[index + 18] = uvs.y3;
			this.writtenVertexBytes = index + 20;
		}
		, enableAttributes: function (color) {
			if (color == null) color = -1;
			this.enableColor = color != -1;
			if (this.enableColor != this.lastEnableColor) {
				this.flush();
				this.lastEnableColor = this.enableColor;
			}
			this.attributes[2].enabled = this.lastEnableColor;
			this.elementsPerVertex = this.getElementsPerVertex();
		}
		, flush: function () {
			if (this.batchedSprites == 0) return;
			if (this.clipRect != null) {
				this.gl.enable(this.gl.SCISSOR_TEST);
				this.gl.scissor(Math.floor(this.clipRect.x), Math.floor(this.clipRect.y), Math.ceil(this.clipRect.width), Math.ceil(this.clipRect.height));
			}
			if (this.dirty) {
				this.dirty = false;
				this.renderSession.activeTextures = 1;
				this.vertexArray.bind();
				this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
			}
			if (this.writtenVertexBytes > this.vertexArraySize * 0.5) this.vertexArray.upload(this.positions); else {
				var view = this.positions.subarray(0, this.writtenVertexBytes);
				this.vertexArray.upload(view);
			}
			var nextState;
			var batchSize = 0;
			var start = 0;
			this.currentState.shader = null;
			this.currentState.shaderData = null;
			this.currentState.texture = null;
			this.currentState.textureSmooth = false;
			this.currentState.blendMode = this.renderSession.blendModeManager.currentBlendMode;
			this.currentState.colorTransform = null;
			this.currentState.skipColorTransformAlpha = false;
			var _g1 = 0;
			var _g = this.batchedSprites;
			while (_g1 < _g) {
				var i = _g1++;
				nextState = this.states[i];
				this.currentState.skipColorTransformAlpha = nextState.skipColorTransformAlpha;
				if (!nextState.equals(this.currentState)) {
					this.renderBatch(this.currentState, batchSize, start);
					start = i;
					batchSize = 0;
					this.currentState.shader = nextState.shader;
					this.currentState.shaderData = nextState.shaderData;
					this.currentState.texture = nextState.texture;
					this.currentState.textureSmooth = nextState.textureSmooth;
					this.currentState.blendMode = nextState.blendMode;
					this.currentState.colorTransform = nextState.colorTransform;
				}
				batchSize++;
			}
			this.renderBatch(this.currentState, batchSize, start);
			this.batchedSprites = 0;
			this.writtenVertexBytes = 0;
			if (this.clipRect != null) this.gl.disable(this.gl.SCISSOR_TEST);
		}
		, renderBatch: function (state, size, start) {
			if (size == 0 || state.texture == null) return;
			var shader;
			if (state.shader == null) shader = this.renderSession.shaderManager.defaultShader; else shader = state.shader;
			this.renderSession.shaderManager.setShader(shader);
			shader.bindVertexArray(this.vertexArray);
			this.renderSession.blendModeManager.setBlendMode(shader.blendMode != null ? shader.blendMode : state.blendMode);
			this.gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uProjectionMatrix"), false, this.renderSession.projectionMatrix.toArray(true));
			if (state.colorTransform != null) {
				this.gl.uniform1i(shader.getUniformLocation("openfl_uUseColorTransform"), 1);
				var ct = state.colorTransform;
				this.gl.uniform4f(shader.getUniformLocation("openfl_uColorMultiplier"), ct.redMultiplier, ct.greenMultiplier, ct.blueMultiplier, state.skipColorTransformAlpha ? 1 : ct.alphaMultiplier);
				this.gl.uniform4f(shader.getUniformLocation("openfl_uColorOffset"), ct.redOffset / 255., ct.greenOffset / 255., ct.blueOffset / 255., ct.alphaOffset / 255.);
			} else {
				this.gl.uniform1i(shader.getUniformLocation("openfl_uUseColorTransform"), 0);
				this.gl.uniform4f(shader.getUniformLocation("openfl_uColorMultiplier"), 1, 1, 1, 1);
				this.gl.uniform4f(shader.getUniformLocation("openfl_uColorOffset"), 0, 0, 0, 0);
			}
			this.gl.activeTexture(this.gl.TEXTURE0);
			this.gl.bindTexture(this.gl.TEXTURE_2D, state.texture);
			this.gl.uniform1i(shader.getUniformLocation("openfl_uSampler0"), 0);
			if (shader.smooth != null && shader.smooth || state.textureSmooth) {
				this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);
				this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR);
			} else {
				this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.NEAREST);
				this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.NEAREST);
			}
			this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, shader.wrapS);
			this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, shader.wrapT);
			shader.applyData(state.shaderData, this.renderSession);
			this.gl.drawElements(this.gl.TRIANGLES, size * 6, this.gl.UNSIGNED_SHORT, start * 6 * 2);
			this.renderSession.drawCount++;
		}
		, setState: function (index, texture, smooth, blendMode, colorTransform, shader, skipAlpha) {
			if (skipAlpha == null) skipAlpha = false;
			if (smooth == null) smooth = false;
			var state = this.states[index];
			if (state == null) state = this.states[index] = new openfl__$internal_renderer_opengl_utils__$SpriteBatch_State();
			state.texture = texture;
			state.textureSmooth = smooth;
			state.blendMode = blendMode;
			if (colorTransform != null && colorTransform.__isDefault()) state.colorTransform = null; else state.colorTransform = colorTransform;
			state.skipColorTransformAlpha = skipAlpha;
			if (shader == null) {
				state.shader = null;
				state.shaderData = null;
			} else {
				state.shader = shader.__shader;
				state.shaderData = shader.data;
			}
		}
		, setContext: function (gl) {
			this.gl = gl;
			this.vertexArray.setContext(gl, this.positions);
			this.indexBuffer = gl.createBuffer();
			gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
			gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.indices, gl.STATIC_DRAW);
		}
		, prepareShader: function (flashShader, bd) {
			if (flashShader != null) {
				flashShader.__init(this.gl);
				flashShader.__shader.wrapS = flashShader.repeatX;
				flashShader.__shader.wrapT = flashShader.repeatY;
				flashShader.__shader.smooth = flashShader.smooth;
				flashShader.__shader.blendMode = flashShader.blendMode;
				var objSize = flashShader.data.get(openfl_display_Shader.uObjectSize);
				var texSize = flashShader.data.get(openfl_display_Shader.uTextureSize);
				if (bd != null) {
					objSize.value[0] = bd.width;
					objSize.value[1] = bd.height;
					if (bd.__pingPongTexture != null) {
						texSize.value[0] = bd.__pingPongTexture.get_renderTexture().__width;
						texSize.value[1] = bd.__pingPongTexture.get_renderTexture().__height;
					} else {
						texSize.value[0] = bd.width;
						texSize.value[1] = bd.height;
					}
				} else {
					objSize.value[0] = 0;
					objSize.value[1] = 0;
					texSize.value[0] = 0;
					texSize.value[1] = 0;
				}
			}
		}
		, getElementsPerVertex: function () {
			var r = 0;
			var _g = 0;
			var _g1 = this.attributes;
			while (_g < _g1.length) {
				var a = _g1[_g];
				++_g;
				if (a.enabled) r += Math.floor(a.components * a.getElementsBytes() / 4);
			}
			return r;
		}
		, __class__: openfl__$internal_renderer_opengl_utils_SpriteBatch
	};
	var openfl__$internal_renderer_opengl_utils__$SpriteBatch_State = function () {
		this.skipColorTransformAlpha = false;
		this.textureSmooth = true;
	};
	$hxClasses["openfl._internal.renderer.opengl.utils._SpriteBatch.State"] = openfl__$internal_renderer_opengl_utils__$SpriteBatch_State;
	openfl__$internal_renderer_opengl_utils__$SpriteBatch_State.__name__ = ["openfl", "_internal", "renderer", "opengl", "utils", "_SpriteBatch", "State"];
	openfl__$internal_renderer_opengl_utils__$SpriteBatch_State.prototype = {
		equals: function (other) {
			return (this.shader == null && other.shader == null || this.shader != null && other.shader != null && this.shader.ID == other.shader.ID) && this.texture == other.texture && this.textureSmooth == other.textureSmooth && this.blendMode == other.blendMode && (this.colorTransform == null && other.colorTransform == null || this.colorTransform != null && other.colorTransform != null && this.colorTransform.__equals(other.colorTransform, this.skipColorTransformAlpha));
		}
		, destroy: function () {
			this.texture = null;
			this.colorTransform = null;
		}
		, __class__: openfl__$internal_renderer_opengl_utils__$SpriteBatch_State
	};
	var openfl__$internal_renderer_opengl_utils_StencilManager = function (gl) {
		this.stencilMask = 0;
		this.stencilStack = [];
		this.setContext(gl);
		this.reverse = true;
		this.count = 0;
	};
	$hxClasses["openfl._internal.renderer.opengl.utils.StencilManager"] = openfl__$internal_renderer_opengl_utils_StencilManager;
	openfl__$internal_renderer_opengl_utils_StencilManager.__name__ = ["openfl", "_internal", "renderer", "opengl", "utils", "StencilManager"];
	openfl__$internal_renderer_opengl_utils_StencilManager.prototype = {
		prepareGraphics: function (fill, renderSession, translationMatrix) {
			var shader = renderSession.shaderManager.fillShader;
			renderSession.shaderManager.setShader(shader);
			this.gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uTranslationMatrix"), false, translationMatrix);
			this.gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uProjectionMatrix"), false, renderSession.projectionMatrix.toArray(true));
			fill.vertexArray.bind();
			shader.bindVertexArray(fill.vertexArray);
			this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, fill.indexBuffer);
		}
		, pushBucket: function (bucket, renderSession, translationMatrix, isMask) {
			if (isMask == null) isMask = false;
			if (!isMask) {
				this.gl.enable(this.gl.STENCIL_TEST);
				this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
				this.gl.stencilMask(255);
				this.gl.colorMask(false, false, false, false);
				this.gl.stencilFunc(this.gl.NEVER, 1, 255);
				this.gl.stencilOp(this.gl.INVERT, this.gl.KEEP, this.gl.KEEP);
				this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
			}
			var _g = 0;
			var _g1 = bucket.fills;
			while (_g < _g1.length) {
				var fill = _g1[_g];
				++_g;
				if (fill.available) continue;
				this.prepareGraphics(fill, renderSession, translationMatrix);
				this.gl.drawElements(fill.drawMode, fill.glIndices.length, this.gl.UNSIGNED_SHORT, 0);
			}
			if (!isMask) {
				this.gl.colorMask(true, true, true, renderSession.renderer.transparent);
				this.gl.stencilOp(this.gl.KEEP, this.gl.KEEP, this.gl.KEEP);
				this.gl.stencilFunc(this.gl.EQUAL, 255, 255);
			}
		}
		, popBucket: function (object, bucket, renderSession) {
			this.gl.disable(this.gl.STENCIL_TEST);
		}
		, pushMask: function (object, renderSession) {
			var maskGraphics = object.__maskGraphics;
			if (maskGraphics == null || maskGraphics.__commands.get_length() <= 0) return;
			if (this.stencilMask == 0) {
				this.gl.enable(this.gl.STENCIL_TEST);
				this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
			}
			this.stencilMask++;
			if (maskGraphics.__dirty) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.updateGraphics(object, maskGraphics, renderSession.gl);
			var func;
			if (this.stencilMask == 1) func = this.gl.NEVER; else func = this.gl.EQUAL;
			var ref = this.stencilMask;
			var mask = 255 - this.stencilMask;
			this.gl.stencilMask(255);
			this.gl.colorMask(false, false, false, false);
			this.gl.stencilFunc(func, ref, mask);
			this.gl.stencilOp(this.gl.REPLACE, this.gl.KEEP, this.gl.KEEP);
			var glStack = maskGraphics.__glStack[openfl__$internal_renderer_opengl_GLRenderer.glContextId];
			var bucket;
			var translationMatrix = object.__worldTransform;
			var _g1 = 0;
			var _g = glStack.buckets.length;
			while (_g1 < _g) {
				var i = _g1++;
				bucket = glStack.buckets[i];
				if (bucket.overrideMatrix != null) translationMatrix = bucket.overrideMatrix; else translationMatrix = object.__worldTransform;
				var _g2 = bucket.mode;
				switch (_g2[1]) {
					case 1: case 2:
						this.pushBucket(bucket, renderSession, translationMatrix.toArray(true), true);
						break;
					default:
				}
			}
			this.gl.colorMask(true, true, true, renderSession.renderer.transparent);
			this.gl.stencilOp(this.gl.KEEP, this.gl.KEEP, this.gl.KEEP);
			this.gl.stencilFunc(this.gl.EQUAL, this.stencilMask, 255);
		}
		, popMask: function (object, renderSession) {
			this.stencilMask--;
			if (this.stencilMask <= 0) {
				this.gl.disable(this.gl.STENCIL_TEST);
				this.stencilMask = 0;
			}
		}
		, bindGraphics: function (object, glData, renderSession) {
		}
		, destroy: function () {
			this.stencilStack = null;
			this.gl = null;
		}
		, popStencil: function (object, glData, renderSession) {
			this.stencilStack.pop();
			this.count--;
			if (this.stencilStack.length == 0) this.gl.disable(this.gl.STENCIL_TEST); else {
				var level = this.count;
				this.bindGraphics(object, glData, renderSession);
				this.gl.colorMask(false, false, false, false);
				if (glData.mode == 1) {
					this.reverse = !this.reverse;
					if (this.reverse) {
						this.gl.stencilFunc(this.gl.EQUAL, 255 - (level + 1), 255);
						this.gl.stencilOp(this.gl.KEEP, this.gl.KEEP, this.gl.INCR);
					} else {
						this.gl.stencilFunc(this.gl.EQUAL, level + 1, 255);
						this.gl.stencilOp(this.gl.KEEP, this.gl.KEEP, this.gl.DECR);
					}
					this.gl.drawElements(this.gl.TRIANGLE_FAN, 4, this.gl.UNSIGNED_SHORT, (glData.indices.length - 4) * 2);
					this.gl.stencilFunc(this.gl.ALWAYS, 0, 255);
					this.gl.stencilOp(this.gl.KEEP, this.gl.KEEP, this.gl.INVERT);
					this.gl.drawElements(this.gl.TRIANGLE_FAN, glData.indices.length - 4, this.gl.UNSIGNED_SHORT, 0);
					if (!this.reverse) this.gl.stencilFunc(this.gl.EQUAL, 255 - level, 255); else this.gl.stencilFunc(this.gl.EQUAL, level, 255);
				} else {
					if (!this.reverse) {
						this.gl.stencilFunc(this.gl.EQUAL, 255 - (level + 1), 255);
						this.gl.stencilOp(this.gl.KEEP, this.gl.KEEP, this.gl.INCR);
					} else {
						this.gl.stencilFunc(this.gl.EQUAL, level + 1, 255);
						this.gl.stencilOp(this.gl.KEEP, this.gl.KEEP, this.gl.DECR);
					}
					this.gl.drawElements(this.gl.TRIANGLE_STRIP, glData.indices.length, this.gl.UNSIGNED_SHORT, 0);
					if (!this.reverse) this.gl.stencilFunc(this.gl.EQUAL, 255 - level, 255); else this.gl.stencilFunc(this.gl.EQUAL, level, 255);
				}
				this.gl.colorMask(true, true, true, true);
				this.gl.stencilOp(this.gl.KEEP, this.gl.KEEP, this.gl.KEEP);
			}
		}
		, pushStencil: function (object, glData, renderSession) {
			this.bindGraphics(object, glData, renderSession);
			if (this.stencilStack.length == 0) {
				this.gl.enable(this.gl.STENCIL_TEST);
				this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
				this.reverse = true;
				this.count = 0;
			}
			this.stencilStack.push(glData);
			var level = this.count;
			this.gl.colorMask(false, false, false, false);
			this.gl.stencilFunc(this.gl.ALWAYS, 0, 255);
			this.gl.stencilOp(this.gl.KEEP, this.gl.KEEP, this.gl.INVERT);
			if (glData.mode == 1) {
				this.gl.drawElements(this.gl.TRIANGLE_FAN, glData.indices.length - 4, this.gl.UNSIGNED_SHORT, 0);
				if (this.reverse) {
					this.gl.stencilFunc(this.gl.EQUAL, 255 - level, 255);
					this.gl.stencilOp(this.gl.KEEP, this.gl.KEEP, this.gl.DECR);
				} else {
					this.gl.stencilFunc(this.gl.EQUAL, level, 255);
					this.gl.stencilOp(this.gl.KEEP, this.gl.KEEP, this.gl.INCR);
				}
				this.gl.drawElements(this.gl.TRIANGLE_FAN, 4, this.gl.UNSIGNED_SHORT, (glData.indices.length - 4) * 2);
				if (this.reverse) this.gl.stencilFunc(this.gl.EQUAL, 255 - (level + 1), 255); else this.gl.stencilFunc(this.gl.EQUAL, level + 1, 255);
				this.reverse = !this.reverse;
			} else {
				if (!this.reverse) {
					this.gl.stencilFunc(this.gl.EQUAL, 255 - level, 255);
					this.gl.stencilOp(this.gl.KEEP, this.gl.KEEP, this.gl.DECR);
				} else {
					this.gl.stencilFunc(this.gl.EQUAL, level, 255);
					this.gl.stencilOp(this.gl.KEEP, this.gl.KEEP, this.gl.INCR);
				}
				this.gl.drawElements(this.gl.TRIANGLE_STRIP, glData.indices.length, this.gl.UNSIGNED_SHORT, 0);
				if (!this.reverse) this.gl.stencilFunc(this.gl.EQUAL, 255 - (level + 1), 255); else this.gl.stencilFunc(this.gl.EQUAL, level + 1, 255);
			}
			this.gl.colorMask(true, true, true, true);
			this.gl.stencilOp(this.gl.KEEP, this.gl.KEEP, this.gl.KEEP);
			this.count++;
		}
		, setContext: function (gl) {
			this.gl = gl;
		}
		, __class__: openfl__$internal_renderer_opengl_utils_StencilManager
	};
	var openfl__$internal_renderer_opengl_utils_VertexArray = function (attributes, size, isStatic) {
		if (isStatic == null) isStatic = false;
		if (size == null) size = 0;
		this.isStatic = false;
		this.size = 0;
		this.attributes = [];
		this.size = size;
		this.attributes = attributes;
		if (size > 0) this.buffer = new ArrayBuffer(size);
		this.isStatic = isStatic;
	};
	$hxClasses["openfl._internal.renderer.opengl.utils.VertexArray"] = openfl__$internal_renderer_opengl_utils_VertexArray;
	openfl__$internal_renderer_opengl_utils_VertexArray.__name__ = ["openfl", "_internal", "renderer", "opengl", "utils", "VertexArray"];
	openfl__$internal_renderer_opengl_utils_VertexArray.prototype = {
		bind: function () {
			this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.glBuffer);
		}
		, unbind: function () {
			this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
		}
		, upload: function (view) {
			this.gl.bufferSubData(this.gl.ARRAY_BUFFER, 0, view);
		}
		, destroy: function () {
			this.gl.deleteBuffer(this.glBuffer);
			this.buffer = null;
		}
		, setContext: function (gl, view) {
			this.gl = gl;
			this.glBuffer = gl.createBuffer();
			gl.bindBuffer(gl.ARRAY_BUFFER, this.glBuffer);
			gl.bufferData(gl.ARRAY_BUFFER, view, this.isStatic ? gl.STATIC_DRAW : gl.DYNAMIC_DRAW);
		}
		, get_stride: function () {
			var s = 0;
			var _g = 0;
			var _g1 = this.attributes;
			while (_g < _g1.length) {
				var a = _g1[_g];
				++_g;
				if (a.enabled) s += Math.floor(a.components * a.getElementsBytes() / 4) * 4;
			}
			return s;
		}
		, __class__: openfl__$internal_renderer_opengl_utils_VertexArray
		, __properties__: { get_stride: "get_stride" }
	};
	var openfl__$internal_text_TextEngine = function (textField) {
		this.textField = textField;
		this.width = 100;
		this.height = 100;
		this.text = "";
		this.bounds = new openfl_geom_Rectangle(0, 0, 0, 0);
		this.type = openfl_text_TextFieldType.DYNAMIC;
		this.autoSize = openfl_text_TextFieldAutoSize.NONE;
		this.displayAsPassword = false;
		this.embedFonts = false;
		this.selectable = true;
		this.borderColor = 0;
		this.border = false;
		this.backgroundColor = 16777215;
		this.background = false;
		this.gridFitType = openfl_text_GridFitType.PIXEL;
		this.maxChars = 0;
		this.multiline = false;
		this.sharpness = 0;
		this.scrollH = 0;
		this.scrollV = 1;
		this.wordWrap = false;
		this.lineAscents = [];
		this.lineBreaks = [];
		this.lineDescents = [];
		this.lineLeadings = [];
		this.lineHeights = [];
		this.lineWidths = [];
		this.layoutGroups = [];
		this.textFormatRanges = [];
		openfl__$internal_text_TextEngine.__canvas = window.document.createElement("canvas");
		openfl__$internal_text_TextEngine.__context = openfl__$internal_text_TextEngine.__canvas.getContext("2d");
	};
	$hxClasses["openfl._internal.text.TextEngine"] = openfl__$internal_text_TextEngine;
	openfl__$internal_text_TextEngine.__name__ = ["openfl", "_internal", "text", "TextEngine"];
	openfl__$internal_text_TextEngine.__canvas = null;
	openfl__$internal_text_TextEngine.__context = null;
	openfl__$internal_text_TextEngine.findFont = function (name) {
		return null;
	};
	openfl__$internal_text_TextEngine.getFont = function (format) {
		var font;
		if (format.italic) font = "italic "; else font = "normal ";
		font += "normal ";
		if (format.bold) font += "bold "; else font += "normal ";
		font += format.size + "px";
		font += "/" + (format.size + format.leading + 6) + "px ";
		font += "" + (function ($this) {
			var $r;
			var _g = format.font;
			$r = (function ($this) {
				var $r;
				switch (_g) {
					case "_sans":
						$r = "sans-serif";
						break;
					case "_serif":
						$r = "serif";
						break;
					case "_typewriter":
						$r = "monospace";
						break;
					default:
						$r = "'" + format.font + "'";
				}
				return $r;
			}($this));
			return $r;
		}(this));
		return font;
	};
	openfl__$internal_text_TextEngine.getFontInstance = function (format) {
		return null;
	};
	openfl__$internal_text_TextEngine.prototype = {
		getBounds: function () {
			var padding;
			if (this.border) padding = 1; else padding = 0;
			this.bounds.width = this.width + padding;
			this.bounds.height = this.height + padding;
		}
		, getLine: function (index) {
			if (index < 0 || index > this.lineBreaks.length + 1) return null;
			if (this.lineBreaks.length == 0) return this.text; else return this.text.substring(index > 0 ? this.lineBreaks[index - 1] : 0, this.lineBreaks[index]);
		}
		, getLineMeasurements: function () {
			this.lineAscents.splice(0, this.lineAscents.length);
			this.lineDescents.splice(0, this.lineDescents.length);
			this.lineLeadings.splice(0, this.lineLeadings.length);
			this.lineHeights.splice(0, this.lineHeights.length);
			this.lineWidths.splice(0, this.lineWidths.length);
			var currentLineAscent = 0.0;
			var currentLineDescent = 0.0;
			var currentLineLeading = null;
			var currentLineHeight = 0.0;
			var currentLineWidth = 0.0;
			this.textWidth = 0;
			this.textHeight = 0;
			this.numLines = 1;
			this.bottomScrollV = 0;
			this.maxScrollH = 0;
			var _g = 0;
			var _g1 = this.layoutGroups;
			while (_g < _g1.length) {
				var group = _g1[_g];
				++_g;
				while (group.lineIndex > this.numLines - 1) {
					this.lineAscents.push(currentLineAscent);
					this.lineDescents.push(currentLineDescent);
					this.lineLeadings.push(currentLineLeading != null ? currentLineLeading : 0);
					this.lineHeights.push(currentLineHeight);
					this.lineWidths.push(currentLineWidth);
					currentLineAscent = 0;
					currentLineDescent = 0;
					currentLineLeading = null;
					currentLineHeight = 0;
					currentLineWidth = 0;
					this.numLines++;
					if (this.textHeight <= this.height - 2) this.bottomScrollV++;
				}
				currentLineAscent = Math.max(currentLineAscent, group.ascent);
				currentLineDescent = Math.max(currentLineDescent, group.descent);
				if (currentLineLeading == null) currentLineLeading = group.leading; else currentLineLeading = Std["int"](Math.max(currentLineLeading, group.leading));
				currentLineHeight = Math.max(currentLineHeight, group.height);
				currentLineWidth = group.offsetX - 2 + group.width;
				if (currentLineWidth > this.textWidth) this.textWidth = currentLineWidth;
				this.textHeight = group.offsetY - 2 + group.ascent + group.descent;
			}
			this.lineAscents.push(currentLineAscent);
			this.lineDescents.push(currentLineDescent);
			this.lineLeadings.push(currentLineLeading != null ? currentLineLeading : 0);
			this.lineHeights.push(currentLineHeight);
			this.lineWidths.push(currentLineWidth);
			if (this.numLines == 1) {
				this.bottomScrollV = 1;
				if (currentLineLeading > 0) this.textHeight += currentLineLeading;
			} else if (this.textHeight <= this.height - 2) this.bottomScrollV++;
			if (this.textWidth > this.width - 4) this.maxScrollH = this.textWidth - this.width + 4 | 0; else this.maxScrollH = 0;
			this.maxScrollV = this.numLines - this.bottomScrollV + 1;
		}
		, getLayoutGroups: function () {
			var _g = this;
			this.layoutGroups.splice(0, this.layoutGroups.length);
			var rangeIndex = -1;
			var formatRange = null;
			var font = null;
			var currentFormat = openfl_text_TextField.__defaultTextFormat.clone();
			var leading = 0;
			var ascent = 0.0;
			var descent = 0.0;
			var layoutGroup;
			var advances;
			var widthValue;
			var heightValue = 0.0;
			var spaceWidth = 0.0;
			var previousSpaceIndex = 0;
			var spaceIndex = this.text.indexOf(" ");
			var breakIndex = this.text.indexOf("\n");
			var marginRight = 0.0;
			var offsetX = 2.0;
			var offsetY = 2.0;
			var textIndex = 0;
			var lineIndex = 0;
			var lineFormat = null;
			if (rangeIndex < _g.textFormatRanges.length - 1) {
				rangeIndex++;
				formatRange = _g.textFormatRanges[rangeIndex];
				currentFormat.__merge(formatRange.format);
				openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
				ascent = currentFormat.size;
				descent = currentFormat.size * 0.185;
				leading = currentFormat.leading;
				heightValue = ascent + descent + leading;
				if (spaceIndex > -1) spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
			}
			lineFormat = formatRange.format;
			var wrap;
			while (textIndex < this.text.length) if (breakIndex > -1 && (spaceIndex == -1 || breakIndex < spaceIndex) && formatRange.end >= breakIndex) {
				layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format, textIndex, breakIndex);
				var text = this.text;
				var advances1 = [];
				var _g1 = textIndex;
				while (_g1 < breakIndex) {
					var i = _g1++;
					advances1.push(openfl__$internal_text_TextEngine.__context.measureText(text.charAt(i)).width);
				}
				layoutGroup.advances = advances1;
				layoutGroup.offsetX = offsetX;
				layoutGroup.ascent = ascent;
				layoutGroup.descent = descent;
				layoutGroup.leading = leading;
				layoutGroup.lineIndex = lineIndex;
				layoutGroup.offsetY = offsetY;
				var advances2 = layoutGroup.advances;
				var width = 0.0;
				var _g2 = 0;
				while (_g2 < advances2.length) {
					var advance = advances2[_g2];
					++_g2;
					width += advance;
				}
				layoutGroup.width = width;
				layoutGroup.height = heightValue;
				this.layoutGroups.push(layoutGroup);
				offsetY += heightValue;
				offsetX = 2;
				if (this.wordWrap && layoutGroup.offsetX + layoutGroup.width > this.width - 2) {
					layoutGroup.offsetY = offsetY;
					layoutGroup.offsetX = offsetX;
					offsetY += heightValue;
					lineIndex++;
				}
				textIndex = breakIndex + 1;
				breakIndex = this.text.indexOf("\n", textIndex);
				lineIndex++;
				if (formatRange.end == breakIndex) {
					if (rangeIndex < _g.textFormatRanges.length - 1) {
						rangeIndex++;
						formatRange = _g.textFormatRanges[rangeIndex];
						currentFormat.__merge(formatRange.format);
						openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
						ascent = currentFormat.size;
						descent = currentFormat.size * 0.185;
						leading = currentFormat.leading;
						heightValue = ascent + descent + leading;
						if (spaceIndex > -1) spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
					}
					lineFormat = formatRange.format;
				}
			} else if (formatRange.end >= spaceIndex && spaceIndex > -1) {
				layoutGroup = null;
				wrap = false;
				while (true) {
					if (spaceIndex == -1) spaceIndex = formatRange.end;
					var text1 = this.text;
					var advances3 = [];
					var _g3 = textIndex;
					while (_g3 < spaceIndex) {
						var i1 = _g3++;
						advances3.push(openfl__$internal_text_TextEngine.__context.measureText(text1.charAt(i1)).width);
					}
					advances = advances3;
					var width1 = 0.0;
					var _g4 = 0;
					while (_g4 < advances.length) {
						var advance1 = advances[_g4];
						++_g4;
						width1 += advance1;
					}
					widthValue = width1;
					if (this.wordWrap) {
						if (offsetX + widthValue > this.width - 2) wrap = true;
					}
					if (wrap) {
						offsetY += heightValue;
						var i2 = this.layoutGroups.length - 1;
						var offsetCount = 0;
						while (true) {
							layoutGroup = this.layoutGroups[i2];
							if (i2 > 0 && layoutGroup.startIndex > previousSpaceIndex) offsetCount++; else break;
							i2--;
						}
						lineIndex++;
						offsetX = 2;
						if (offsetCount > 0) {
							var bumpX = this.layoutGroups[this.layoutGroups.length - offsetCount].offsetX;
							var _g11 = this.layoutGroups.length - offsetCount;
							var _g5 = this.layoutGroups.length;
							while (_g11 < _g5) {
								var i3 = _g11++;
								layoutGroup = this.layoutGroups[i3];
								layoutGroup.offsetX -= bumpX;
								layoutGroup.offsetY = offsetY;
								layoutGroup.lineIndex = lineIndex;
								offsetX += layoutGroup.width;
							}
						}
						layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format, textIndex, spaceIndex);
						layoutGroup.advances = advances;
						layoutGroup.offsetX = offsetX;
						layoutGroup.ascent = ascent;
						layoutGroup.descent = descent;
						layoutGroup.leading = leading;
						layoutGroup.lineIndex = lineIndex;
						layoutGroup.offsetY = offsetY;
						layoutGroup.width = widthValue;
						layoutGroup.height = heightValue;
						this.layoutGroups.push(layoutGroup);
						offsetX = widthValue + spaceWidth;
						marginRight = spaceWidth;
						wrap = false;
					} else {
						if (layoutGroup != null && textIndex == spaceIndex) {
							if (formatRange.format.align != openfl_text_TextFormatAlign.JUSTIFY) layoutGroup.endIndex = spaceIndex;
							layoutGroup.advances.push(spaceWidth);
							marginRight += spaceWidth;
						} else if (layoutGroup == null || lineFormat.align == openfl_text_TextFormatAlign.JUSTIFY) {
							layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format, textIndex, spaceIndex);
							layoutGroup.advances = advances;
							layoutGroup.offsetX = offsetX;
							layoutGroup.ascent = ascent;
							layoutGroup.descent = descent;
							layoutGroup.leading = leading;
							layoutGroup.lineIndex = lineIndex;
							layoutGroup.offsetY = offsetY;
							layoutGroup.width = widthValue;
							layoutGroup.height = heightValue;
							this.layoutGroups.push(layoutGroup);
							layoutGroup.advances.push(spaceWidth);
							marginRight = spaceWidth;
						} else {
							layoutGroup.endIndex = spaceIndex;
							layoutGroup.advances = layoutGroup.advances.concat(advances);
							layoutGroup.width += marginRight + widthValue;
							layoutGroup.advances.push(spaceWidth);
							marginRight = spaceWidth;
						}
						offsetX += widthValue + spaceWidth;
					}
					textIndex = spaceIndex + 1;
					previousSpaceIndex = spaceIndex;
					spaceIndex = this.text.indexOf(" ", previousSpaceIndex + 1);
					if (formatRange.end <= previousSpaceIndex) {
						layoutGroup = null;
						if (rangeIndex < _g.textFormatRanges.length - 1) {
							rangeIndex++;
							formatRange = _g.textFormatRanges[rangeIndex];
							currentFormat.__merge(formatRange.format);
							openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
							ascent = currentFormat.size;
							descent = currentFormat.size * 0.185;
							leading = currentFormat.leading;
							heightValue = ascent + descent + leading;
							if (spaceIndex > -1) spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
						}
					}
					if (spaceIndex > breakIndex && breakIndex > -1 || textIndex > this.text.length || spaceIndex > formatRange.end || spaceIndex == -1 && breakIndex > -1) break;
				}
			} else {
				if (textIndex >= formatRange.end) break;
				layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format, textIndex, formatRange.end);
				var text2 = this.text;
				var advances4 = [];
				var _g6 = textIndex;
				while (_g6 < formatRange.end) {
					var i4 = _g6++;
					advances4.push(openfl__$internal_text_TextEngine.__context.measureText(text2.charAt(i4)).width);
				}
				layoutGroup.advances = advances4;
				layoutGroup.offsetX = offsetX;
				layoutGroup.ascent = ascent;
				layoutGroup.descent = descent;
				layoutGroup.leading = leading;
				layoutGroup.lineIndex = lineIndex;
				layoutGroup.offsetY = offsetY;
				var advances5 = layoutGroup.advances;
				var width2 = 0.0;
				var _g7 = 0;
				while (_g7 < advances5.length) {
					var advance2 = advances5[_g7];
					++_g7;
					width2 += advance2;
				}
				layoutGroup.width = width2;
				layoutGroup.height = heightValue;
				this.layoutGroups.push(layoutGroup);
				offsetX += layoutGroup.width;
				textIndex = formatRange.end;
				if (rangeIndex < _g.textFormatRanges.length - 1) {
					rangeIndex++;
					formatRange = _g.textFormatRanges[rangeIndex];
					currentFormat.__merge(formatRange.format);
					openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
					ascent = currentFormat.size;
					descent = currentFormat.size * 0.185;
					leading = currentFormat.leading;
					heightValue = ascent + descent + leading;
					if (spaceIndex > -1) spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
				}
			}
		}
		, setTextAlignment: function () {
			var lineIndex = -1;
			var offsetX = 0.0;
			var group;
			var lineLength;
			var _g1 = 0;
			var _g = this.layoutGroups.length;
			while (_g1 < _g) {
				var i = _g1++;
				group = this.layoutGroups[i];
				if (group.lineIndex != lineIndex) {
					lineIndex = group.lineIndex;
					var _g2 = group.format.align;
					switch (_g2[1]) {
						case 3:
							if (this.lineWidths[lineIndex] < this.width - 4) offsetX = Math.round((this.width - 4 - this.lineWidths[lineIndex]) / 2); else offsetX = 0;
							break;
						case 1:
							if (this.lineWidths[lineIndex] < this.width - 4) offsetX = Math.round(this.width - 4 - this.lineWidths[lineIndex]); else offsetX = 0;
							break;
						case 2:
							if (this.lineWidths[lineIndex] < this.width - 4) {
								lineLength = 1;
								var _g4 = i + 1;
								var _g3 = this.layoutGroups.length;
								while (_g4 < _g3) {
									var j = _g4++;
									if (this.layoutGroups[j].lineIndex == lineIndex) lineLength++; else break;
								}
								if (lineLength > 1) {
									group = this.layoutGroups[i + lineLength - 1];
									if (group.endIndex < this.text.length && this.text.charAt(group.endIndex) != "\n") {
										offsetX = (this.width - 4 - this.lineWidths[lineIndex]) / (lineLength - 1);
										var _g31 = 1;
										while (_g31 < lineLength) {
											var j1 = _g31++;
											this.layoutGroups[i + j1].offsetX += offsetX * j1;
										}
									}
								}
							}
							offsetX = 0;
							break;
						default:
							offsetX = 0;
					}
				}
				if (offsetX > 0) group.offsetX += offsetX;
			}
		}
		, update: function () {
			if (this.text == null || StringTools.trim(this.text) == "" || this.textFormatRanges.length == 0) {
				this.lineAscents.splice(0, this.lineAscents.length);
				this.lineBreaks.splice(0, this.lineBreaks.length);
				this.lineDescents.splice(0, this.lineDescents.length);
				this.lineLeadings.splice(0, this.lineLeadings.length);
				this.lineHeights.splice(0, this.lineHeights.length);
				this.lineWidths.splice(0, this.lineWidths.length);
				this.layoutGroups.splice(0, this.layoutGroups.length);
				this.textWidth = 0;
				this.textHeight = 0;
				this.numLines = 1;
				this.maxScrollH = 0;
				this.maxScrollV = 1;
				this.bottomScrollV = 1;
			} else {
				this.getLayoutGroups();
				this.getLineMeasurements();
				this.setTextAlignment();
			}
			this.getBounds();
		}
		, __class__: openfl__$internal_text_TextEngine
	};
	var openfl__$internal_text_TextFormatRange = function (format, start, end) {
		this.format = format;
		this.start = start;
		this.end = end;
	};
	$hxClasses["openfl._internal.text.TextFormatRange"] = openfl__$internal_text_TextFormatRange;
	openfl__$internal_text_TextFormatRange.__name__ = ["openfl", "_internal", "text", "TextFormatRange"];
	openfl__$internal_text_TextFormatRange.prototype = {
		__class__: openfl__$internal_text_TextFormatRange
	};
	var openfl__$internal_text_TextLayoutGroup = function (format, startIndex, endIndex) {
		this.format = format;
		this.startIndex = startIndex;
		this.endIndex = endIndex;
	};
	$hxClasses["openfl._internal.text.TextLayoutGroup"] = openfl__$internal_text_TextLayoutGroup;
	openfl__$internal_text_TextLayoutGroup.__name__ = ["openfl", "_internal", "text", "TextLayoutGroup"];
	openfl__$internal_text_TextLayoutGroup.prototype = {
		__class__: openfl__$internal_text_TextLayoutGroup
	};
	var openfl_display_Application = function () {
		lime_app_Application.call(this);
		if (openfl_Lib.application == null) openfl_Lib.application = this;
	};
	$hxClasses["openfl.display.Application"] = openfl_display_Application;
	openfl_display_Application.__name__ = ["openfl", "display", "Application"];
	openfl_display_Application.__super__ = lime_app_Application;
	openfl_display_Application.prototype = $extend(lime_app_Application.prototype, {
		create: function (config) {
			this.config = config;
			this.backend.create(config);
			if (config != null) {
				if (Object.prototype.hasOwnProperty.call(config, "fps")) this.backend.setFrameRate(config.fps);
				if (Object.prototype.hasOwnProperty.call(config, "windows")) {
					var _g = 0;
					var _g1 = config.windows;
					while (_g < _g1.length) {
						var windowConfig = _g1[_g];
						++_g;
						var $window = new openfl_display_Window(windowConfig);
						this.createWindow($window);
						break;
					}
				}
				if (this.preloader == null || this.preloader.complete) this.onPreloadComplete();
			}
		}
		, __class__: openfl_display_Application
	});
	var openfl_display_Bitmap = function (bitmapData, pixelSnapping, smoothing) {
		if (smoothing == null) smoothing = false;
		openfl_display_DisplayObject.call(this);
		this.bitmapData = bitmapData;
		this.pixelSnapping = pixelSnapping;
		this.smoothing = smoothing;
		if (pixelSnapping == null) this.pixelSnapping = openfl_display_PixelSnapping.AUTO;
	};
	$hxClasses["openfl.display.Bitmap"] = openfl_display_Bitmap;
	openfl_display_Bitmap.__name__ = ["openfl", "display", "Bitmap"];
	openfl_display_Bitmap.__super__ = openfl_display_DisplayObject;
	openfl_display_Bitmap.prototype = $extend(openfl_display_DisplayObject.prototype, {
		__getBounds: function (rect, matrix) {
			if (this.bitmapData != null) {
				var bounds = openfl_geom_Rectangle.__temp;
				bounds.setTo(0, 0, this.bitmapData.width, this.bitmapData.height);
				bounds.__transform(bounds, matrix);
				rect.__expand(bounds.x, bounds.y, bounds.width, bounds.height);
			}
		}
		, __hitTest: function (x, y, shapeFlag, stack, interactiveOnly) {
			if (!this.get_visible() || this.__isMask || this.bitmapData == null) return false;
			if (this.get_mask() != null && !this.get_mask().__hitTestMask(x, y)) return false;
			this.__getWorldTransform();
			var px = this.__worldTransform.__transformInverseX(x, y);
			var py = this.__worldTransform.__transformInverseY(x, y);
			if (px > 0 && py > 0 && px <= this.bitmapData.width && py <= this.bitmapData.height) {
				if (stack != null && !interactiveOnly) stack.push(this);
				return true;
			}
			return false;
		}
		, __hitTestMask: function (x, y) {
			if (this.bitmapData == null) return false;
			this.__getWorldTransform();
			var px = this.__worldTransform.__transformInverseX(x, y);
			var py = this.__worldTransform.__transformInverseY(x, y);
			if (px > 0 && py > 0 && px <= this.bitmapData.width && py <= this.bitmapData.height) return true;
			return false;
		}
		, __renderCairo: function (renderSession) {
			openfl__$internal_renderer_cairo_CairoBitmap.render(this, renderSession);
		}
		, __renderCairoMask: function (renderSession) {
			renderSession.cairo.rectangle(0, 0, this.get_width(), this.get_height());
		}
		, __renderCanvas: function (renderSession) {
			openfl__$internal_renderer_canvas_CanvasBitmap.render(this, renderSession);
		}
		, __renderCanvasMask: function (renderSession) {
			renderSession.context.rect(0, 0, this.get_width(), this.get_height());
		}
		, __renderDOM: function (renderSession) {
			if (this.stage != null && this.__worldVisible && this.__renderable && this.bitmapData != null && this.bitmapData.__isValid) {
				if (this.bitmapData.image.buffer.__srcImage != null) openfl__$internal_renderer_dom_DOMBitmap.renderImage(this, renderSession); else openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(this, renderSession);
			} else {
				if (this.__image != null) {
					renderSession.element.removeChild(this.__image);
					this.__image = null;
					this.__style = null;
				}
				if (this.__canvas != null) {
					renderSession.element.removeChild(this.__canvas);
					this.__canvas = null;
					this.__style = null;
				}
			}
		}
		, __renderGL: function (renderSession) {
			if (this.__cacheAsBitmap) {
				this.__cacheGL(renderSession);
				return;
			}
			if (this.__scrollRect != null) renderSession.maskManager.pushRect(this.__scrollRect, this.__renderTransform);
			if (this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.pushMask(this);
			if (!this.__renderable || this.__worldAlpha <= 0 || this.bitmapData == null || !this.bitmapData.__isValid) null; else renderSession.spriteBatch.renderBitmapData(this.bitmapData, this.smoothing, this.__renderTransform, this.__worldColorTransform, this.__worldAlpha, this.__blendMode, this.__shader, this.pixelSnapping);
			if (this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.popMask();
			if (this.__scrollRect != null) renderSession.maskManager.popRect();
		}
		, __updateMask: function (maskGraphics) {
			maskGraphics.__commands.overrideMatrix(this.__worldTransform);
			maskGraphics.beginFill(0);
			maskGraphics.drawRect(0, 0, this.bitmapData.width, this.bitmapData.height);
			if (maskGraphics.__bounds == null) maskGraphics.__bounds = new openfl_geom_Rectangle();
			this.__getBounds(maskGraphics.__bounds, openfl_geom_Matrix.__identity);
			openfl_display_DisplayObject.prototype.__updateMask.call(this, maskGraphics);
		}
		, get_height: function () {
			if (this.bitmapData != null) return this.bitmapData.height * this.get_scaleY();
			return 0;
		}
		, set_height: function (value) {
			if (this.bitmapData != null) {
				if (value != this.bitmapData.height) this.set_scaleY(value / this.bitmapData.height);
				return value;
			}
			return 0;
		}
		, get_width: function () {
			if (this.bitmapData != null) return this.bitmapData.width * this.get_scaleX();
			return 0;
		}
		, set_width: function (value) {
			if (this.bitmapData != null) {
				if (value != this.bitmapData.width) this.set_scaleX(value / this.bitmapData.width);
				return value;
			}
			return 0;
		}
		, __class__: openfl_display_Bitmap
	});
	var openfl_display_BitmapData = function (width, height, transparent, fillColor) {
		if (fillColor == null) fillColor = -1;
		if (transparent == null) transparent = true;
		this.__usingPingPongTexture = false;
		this.transparent = transparent;
		if (width == null) width = 0; else width = width;
		if (height == null) height = 0; else height = height;
		if (width < 0) width = 0; else width = width;
		if (height < 0) height = 0; else height = height;
		this.width = width;
		this.height = height;
		this.rect = new openfl_geom_Rectangle(0, 0, width, height);
		if (width > 0 && height > 0) {
			if (transparent) {
				if ((fillColor & -16777216) == 0) fillColor = 0;
			} else fillColor = -16777216 | fillColor & 16777215;
			fillColor = fillColor << 8 | fillColor >> 24 & 255;
			this.image = new lime_graphics_Image(null, 0, 0, width, height, fillColor);
			this.image.set_transparent(transparent);
			this.__isValid = true;
		}
		this.__createUVs();
		this.__worldTransform = new openfl_geom_Matrix();
		this.__worldColorTransform = new openfl_geom_ColorTransform();
	};
	$hxClasses["openfl.display.BitmapData"] = openfl_display_BitmapData;
	openfl_display_BitmapData.__name__ = ["openfl", "display", "BitmapData"];
	openfl_display_BitmapData.__interfaces__ = [openfl_display_IBitmapDrawable];
	openfl_display_BitmapData.fromBase64 = function (base64, type, onload) {
		var bitmapData = new openfl_display_BitmapData(0, 0, true);
		bitmapData.__fromBase64(base64, type, onload);
		return bitmapData;
	};
	openfl_display_BitmapData.fromBytes = function (bytes, rawAlpha, onload) {
		var bitmapData = new openfl_display_BitmapData(0, 0, true);
		bitmapData.__fromBytes(bytes, rawAlpha, onload);
		return bitmapData;
	};
	openfl_display_BitmapData.fromCanvas = function (canvas, transparent) {
		if (transparent == null) transparent = true;
		if (canvas == null) return null;
		var bitmapData = new openfl_display_BitmapData(0, 0, transparent);
		bitmapData.__fromImage(lime_graphics_Image.fromCanvas(canvas));
		bitmapData.image.set_transparent(transparent);
		return bitmapData;
	};
	openfl_display_BitmapData.fromFile = function (path, onload, onerror) {
		var bitmapData = new openfl_display_BitmapData(0, 0, true);
		bitmapData.__fromFile(path, onload, onerror);
		return bitmapData;
	};
	openfl_display_BitmapData.fromImage = function (image, transparent) {
		if (transparent == null) transparent = true;
		if (image == null || image.buffer == null) return null;
		var bitmapData = new openfl_display_BitmapData(0, 0, transparent);
		bitmapData.__fromImage(image);
		bitmapData.image.set_transparent(transparent);
		return bitmapData;
	};
	openfl_display_BitmapData.__ucompare = function (n1, n2) {
		var tmp1;
		var tmp2;
		tmp1 = n1 >> 24 & 255;
		tmp2 = n2 >> 24 & 255;
		if (tmp1 != tmp2) if (tmp1 > tmp2) return 1; else return -1; else {
			tmp1 = n1 >> 16 & 255;
			tmp2 = n2 >> 16 & 255;
			if (tmp1 != tmp2) if (tmp1 > tmp2) return 1; else return -1; else {
				tmp1 = n1 >> 8 & 255;
				tmp2 = n2 >> 8 & 255;
				if (tmp1 != tmp2) if (tmp1 > tmp2) return 1; else return -1; else {
					tmp1 = n1 & 255;
					tmp2 = n2 & 255;
					if (tmp1 != tmp2) if (tmp1 > tmp2) return 1; else return -1; else return 0;
				}
			}
		}
	};
	openfl_display_BitmapData.__asRenderTexture = function (width, height) {
		if (height == null) height = 0;
		if (width == null) width = 0;
		var b = new openfl_display_BitmapData(0, 0);
		b.__resize(width, height);
		return b;
	};
	openfl_display_BitmapData.prototype = {
		applyFilter: function (sourceBitmapData, sourceRect, destPoint, filter) {
			if (!this.__isValid || sourceBitmapData == null || !sourceBitmapData.__isValid) return;
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.image);
			lime_graphics_utils_ImageCanvasUtil.createImageData(this.image);
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceBitmapData.image);
			lime_graphics_utils_ImageCanvasUtil.createImageData(sourceBitmapData.image);
			filter.__applyFilter(this.image.buffer.__srcImageData, sourceBitmapData.image.buffer.__srcImageData, sourceRect, destPoint);
			this.image.dirty = true;
		}
		, clone: function () {
			if (!this.__isValid) return new openfl_display_BitmapData(this.width, this.height, this.transparent); else return openfl_display_BitmapData.fromImage(this.image.clone(), this.transparent);
		}
		, colorTransform: function (rect, colorTransform) {
			if (!this.__isValid) return;
			this.image.colorTransform(rect.__toLimeRectangle(), colorTransform.__toLimeColorMatrix());
			this.__usingPingPongTexture = false;
		}
		, compare: function (otherBitmapData) {
			if (otherBitmapData == this) return 0; else if (otherBitmapData == null) return -1; else if (this.__isValid == false || otherBitmapData.__isValid == false) return -2; else if (this.width != otherBitmapData.width) return -3; else if (this.height != otherBitmapData.height) return -4;
			if (this.image != null && otherBitmapData.image != null && this.image.get_format() == otherBitmapData.image.get_format()) {
				var bytes = this.image.get_data();
				var otherBytes = otherBitmapData.image.get_data();
				var equal = true;
				var _g1 = 0;
				var _g = bytes.length;
				while (_g1 < _g) {
					var i = _g1++;
					if (bytes[i] != otherBytes[i]) {
						equal = false;
						break;
					}
				}
				if (equal) return 0;
			}
			var bitmapData = null;
			var foundDifference;
			var pixel;
			var otherPixel;
			var comparePixel;
			var r;
			var g;
			var b;
			var a;
			var _g11 = 0;
			var _g2 = this.height;
			while (_g11 < _g2) {
				var y = _g11++;
				var _g3 = 0;
				var _g21 = this.width;
				while (_g3 < _g21) {
					var x = _g3++;
					foundDifference = false;
					pixel = this.getPixel32(x, y);
					otherPixel = otherBitmapData.getPixel32(x, y);
					comparePixel = 0;
					if (pixel != otherPixel) {
						r = (pixel >> 16 & 255) - (otherPixel >> 16 & 255);
						g = (pixel >> 8 & 255) - (otherPixel >> 8 & 255);
						b = (pixel & 255) - (otherPixel & 255);
						if (r < 0) r *= -1;
						if (g < 0) g *= -1;
						if (b < 0) b *= -1;
						if (r == 0 && g == 0 && b == 0) {
							a = (pixel >> 24 & 255) - (otherPixel >> 24 & 255);
							if (a != 0) {
								comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | 16711680 | (comparePixel >> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
								255;
								comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | (comparePixel >> 16 & 255 & 255) << 16 | 65280 | comparePixel & 255 & 255;
								255;
								comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | (comparePixel >> 16 & 255 & 255) << 16 | (comparePixel >> 8 & 255 & 255) << 8 | 255;
								255;
								comparePixel = (a & 255) << 24 | (comparePixel >> 16 & 255 & 255) << 16 | (comparePixel >> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
								a;
								foundDifference = true;
							}
						} else {
							comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | (r & 255) << 16 | (comparePixel >> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
							r;
							comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | (comparePixel >> 16 & 255 & 255) << 16 | (g & 255) << 8 | comparePixel & 255 & 255;
							g;
							comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | (comparePixel >> 16 & 255 & 255) << 16 | (comparePixel >> 8 & 255 & 255) << 8 | b & 255;
							b;
							comparePixel = -16777216 | (comparePixel >> 16 & 255 & 255) << 16 | (comparePixel >> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
							255;
							foundDifference = true;
						}
					}
					if (foundDifference) {
						if (bitmapData == null) bitmapData = new openfl_display_BitmapData(this.width, this.height, this.transparent || otherBitmapData.transparent, 0);
						bitmapData.setPixel32(x, y, comparePixel);
					}
				}
			}
			if (bitmapData == null) return 0;
			return bitmapData;
		}
		, copyChannel: function (sourceBitmapData, sourceRect, destPoint, sourceChannel, destChannel) {
			if (!this.__isValid) return;
			var sourceChannel1;
			switch (sourceChannel) {
				case 1:
					sourceChannel1 = lime_graphics_ImageChannel.RED;
					break;
				case 2:
					sourceChannel1 = lime_graphics_ImageChannel.GREEN;
					break;
				case 4:
					sourceChannel1 = lime_graphics_ImageChannel.BLUE;
					break;
				case 8:
					sourceChannel1 = lime_graphics_ImageChannel.ALPHA;
					break;
				default:
					return;
			}
			var destChannel1;
			switch (destChannel) {
				case 1:
					destChannel1 = lime_graphics_ImageChannel.RED;
					break;
				case 2:
					destChannel1 = lime_graphics_ImageChannel.GREEN;
					break;
				case 4:
					destChannel1 = lime_graphics_ImageChannel.BLUE;
					break;
				case 8:
					destChannel1 = lime_graphics_ImageChannel.ALPHA;
					break;
				default:
					return;
			}
			this.image.copyChannel(sourceBitmapData.image, sourceRect.__toLimeRectangle(), destPoint.__toLimeVector2(), sourceChannel1, destChannel1);
			this.__usingPingPongTexture = false;
		}
		, copyPixels: function (sourceBitmapData, sourceRect, destPoint, alphaBitmapData, alphaPoint, mergeAlpha) {
			if (mergeAlpha == null) mergeAlpha = false;
			if (!this.__isValid || sourceBitmapData == null) return;
			this.image.copyPixels(sourceBitmapData.image, sourceRect.__toLimeRectangle(), destPoint.__toLimeVector2(), alphaBitmapData != null ? alphaBitmapData.image : null, alphaPoint != null ? alphaPoint.__toLimeVector2() : null, mergeAlpha);
			this.__usingPingPongTexture = false;
		}
		, dispose: function () {
			this.image = null;
			this.width = 0;
			this.height = 0;
			this.rect = null;
			this.__isValid = false;
			if (this.__texture != null) {
				var renderer = openfl_Lib.current.stage.__renderer;
				if (renderer != null) {
					var renderSession = renderer.renderSession;
					var gl = renderSession.gl;
					if (gl != null) {
						gl.deleteTexture(this.__texture);
						this.__texture = null;
					}
				}
			}
			if (this.__pingPongTexture != null) {
				this.__pingPongTexture.destroy();
				this.__pingPongTexture = null;
			}
		}
		, draw: function (source, matrix, colorTransform, blendMode, clipRect, smoothing) {
			if (smoothing == null) smoothing = false;
			if (!this.__isValid) return;
			if (colorTransform != null) {
				var copy = new openfl_display_BitmapData(Reflect.getProperty(source, "width"), Reflect.getProperty(source, "height"), true, 0);
				copy.draw(source);
				copy.colorTransform(copy.rect, colorTransform);
				source = copy;
			}
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.image);
			lime_graphics_utils_ImageCanvasUtil.sync(this.image, true);
			var buffer = this.image.buffer;
			var renderSession = new openfl__$internal_renderer_RenderSession();
			renderSession.context = buffer.__srcContext;
			renderSession.roundPixels = true;
			renderSession.maskManager = new openfl__$internal_renderer_canvas_CanvasMaskManager(renderSession);
			if (!smoothing) {
				buffer.__srcContext.mozImageSmoothingEnabled = false;
				buffer.__srcContext.msImageSmoothingEnabled = false;
				buffer.__srcContext.imageSmoothingEnabled = false;
			}
			if (clipRect != null) renderSession.maskManager.pushRect(clipRect, new openfl_geom_Matrix());
			var matrixCache = source.__worldTransform;
			source.__updateTransforms(matrix != null ? matrix : new openfl_geom_Matrix());
			source.__updateChildren(false);
			source.__renderCanvas(renderSession);
			source.__updateTransforms(matrixCache);
			source.__updateChildren(true);
			if (!smoothing) {
				buffer.__srcContext.mozImageSmoothingEnabled = true;
				buffer.__srcContext.msImageSmoothingEnabled = true;
				buffer.__srcContext.imageSmoothingEnabled = true;
			}
			if (clipRect != null) renderSession.maskManager.popMask();
			buffer.__srcContext.setTransform(1, 0, 0, 1, 0, 0);
			buffer.__srcImageData = null;
			buffer.data = null;
		}
		, encode: function (rect, compressor, byteArray) {
			if (!this.__isValid || rect == null) return byteArray = null;
			if (js_Boot.__instanceof(compressor, openfl_display_PNGEncoderOptions)) return byteArray = this.image.encode("png"); else if (js_Boot.__instanceof(compressor, openfl_display_JPEGEncoderOptions)) return byteArray = this.image.encode("jpg", (js_Boot.__cast(compressor, openfl_display_JPEGEncoderOptions)).quality);
			return byteArray = null;
		}
		, fillRect: function (rect, color) {
			if (!this.__isValid || rect == null) return;
			if (this.transparent && (color & -16777216) == 0) color = 0;
			this.image.fillRect(rect.__toLimeRectangle(), color, 1);
			this.__usingPingPongTexture = false;
		}
		, floodFill: function (x, y, color) {
			if (!this.__isValid) return;
			this.image.floodFill(x, y, color, 1);
			this.__usingPingPongTexture = false;
		}
		, generateFilterRect: function (sourceRect, filter) {
			return sourceRect.clone();
		}
		, getBuffer: function (gl) {
			if (this.__buffer == null) {
				var data = [this.width, this.height, 0, 1, 1, 0, this.height, 0, 0, 1, this.width, 0, 0, 1, 0, 0, 0, 0, 0, 0];
				this.__buffer = gl.createBuffer();
				gl.bindBuffer(gl.ARRAY_BUFFER, this.__buffer);
				gl.bufferData(gl.ARRAY_BUFFER, (function ($this) {
					var $r;
					var this1;
					if (data != null) this1 = new Float32Array(data); else this1 = null;
					$r = this1;
					return $r;
				}(this)), gl.STATIC_DRAW);
				gl.bindBuffer(gl.ARRAY_BUFFER, null);
			}
			return this.__buffer;
		}
		, getColorBoundsRect: function (mask, color, findColor) {
			if (findColor == null) findColor = true;
			if (!this.__isValid) return new openfl_geom_Rectangle(0, 0, this.width, this.height);
			if (!this.transparent || (mask >> 24 & 255) > 0) {
				var color1 = color;
				if ((color1 >> 24 & 255) == 0) color1 = 0;
			}
			var rect = this.image.getColorBoundsRect(mask, color, findColor, 1);
			return new openfl_geom_Rectangle(rect.x, rect.y, rect.width, rect.height);
		}
		, getPixel: function (x, y) {
			if (!this.__isValid) return 0;
			return this.image.getPixel(x, y, 1);
		}
		, getPixel32: function (x, y) {
			if (!this.__isValid) return 0;
			return this.image.getPixel32(x, y, 1);
		}
		, getPixels: function (rect) {
			if (!this.__isValid) return null;
			if (rect == null) rect = this.rect;
			return this.image.getPixels(rect.__toLimeRectangle(), 1);
		}
		, getSurface: function () {
			if (!this.__isValid) return null;
			if (this.__surface == null) this.__surface = lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.fromImage(this.image);
			return this.__surface;
		}
		, getTexture: function (gl) {
			if (!this.__isValid) return null;
			if (this.__usingPingPongTexture && this.__pingPongTexture != null) return this.__pingPongTexture.get_texture();
			if (this.__texture == null) {
				this.__texture = gl.createTexture();
				gl.bindTexture(gl.TEXTURE_2D, this.__texture);
				gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
				gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
				gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
				gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
				this.image.dirty = true;
			}
			if (this.image != null && this.image.dirty) {
				var internalFormat;
				var format;
				if (this.__surface != null) lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.flush(this.__surface);
				if (this.image.buffer.bitsPerPixel == 1) {
					internalFormat = gl.ALPHA;
					format = gl.ALPHA;
				} else {
					internalFormat = gl.RGBA;
					format = gl.RGBA;
				}
				gl.bindTexture(gl.TEXTURE_2D, this.__texture);
				var textureImage = this.image;
				if (!textureImage.get_premultiplied() && textureImage.get_transparent() || textureImage.get_format() != 0) {
					textureImage = textureImage.clone();
					textureImage.set_format(0);
					textureImage.set_premultiplied(true);
				}
				gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, this.width, this.height, 0, format, gl.UNSIGNED_BYTE, textureImage.get_data());
				gl.bindTexture(gl.TEXTURE_2D, null);
				this.image.dirty = false;
			}
			return this.__texture;
		}
		, getVector: function (rect) {
			var pixels = this.getPixels(rect);
			var length = pixels.length / 4 | 0;
			var result;
			var this1;
			this1 = new openfl_VectorData();
			var this2;
			this2 = new Array(length);
			this1.data = this2;
			this1.length = length;
			this1.fixed = true;
			result = this1;
			var _g = 0;
			while (_g < length) {
				var i = _g++;
				var value = pixels.readUnsignedInt();
				if (!result.fixed) {
					if (i >= result.length) result.length = i + 1;
					if (result.data.length < result.length) {
						var data;
						var this3;
						this3 = new Array(result.data.length + 10);
						data = this3;
						haxe_ds__$Vector_Vector_$Impl_$.blit(result.data, 0, data, 0, result.data.length);
						result.data = data;
					}
				}
				result.data[i] = value;
			}
			return result;
		}
		, histogram: function (hRect) {
			var rect;
			if (hRect != null) rect = hRect; else rect = new openfl_geom_Rectangle(0, 0, this.width, this.height);
			var pixels = this.getPixels(rect);
			var result;
			var _g = [];
			var _g1 = 0;
			while (_g1 < 4) {
				var i = _g1++;
				_g.push((function ($this) {
					var $r;
					var _g2 = [];
					{
						var _g3 = 0;
						while (_g3 < 256) {
							var j = _g3++;
							_g2.push(0);
						}
					}
					$r = _g2;
					return $r;
				}(this)));
			}
			result = _g;
			var _g21 = 0;
			var _g11 = pixels.length;
			while (_g21 < _g11) {
				var i1 = _g21++;
				++result[i1 % 4][pixels.readUnsignedByte()];
			}
			return result;
		}
		, hitTest: function (firstPoint, firstAlphaThreshold, secondObject, secondBitmapDataPoint, secondAlphaThreshold) {
			if (secondAlphaThreshold == null) secondAlphaThreshold = 1;
			if (!this.__isValid) return false;
			if (js_Boot.__instanceof(secondObject, openfl_display_Bitmap)) secondObject = (js_Boot.__cast(secondObject, openfl_display_Bitmap)).bitmapData;
			if (js_Boot.__instanceof(secondObject, openfl_geom_Point)) {
				var secondPoint = secondObject;
				var x = secondPoint.x - firstPoint.x | 0;
				var y = secondPoint.y - firstPoint.y | 0;
				if (this.rect.contains(x, y)) {
					var pixel = this.getPixel32(x, y);
					if ((pixel >> 24 & 255) >= firstAlphaThreshold) return true;
				}
			} else if (js_Boot.__instanceof(secondObject, openfl_display_BitmapData)) {
				var secondBitmapData = secondObject;
				var x1;
				var y1;
				if (secondBitmapDataPoint == null) {
					x1 = 0;
					y1 = 0;
				} else {
					x1 = secondBitmapDataPoint.x - firstPoint.x | 0;
					y1 = secondBitmapDataPoint.y - firstPoint.y | 0;
				}
				if (this.rect.contains(x1, y1)) {
					var hitRect = openfl_geom_Rectangle.__temp;
					hitRect.setTo(x1, y1, Math.min(secondBitmapData.width, this.width - x1), Math.min(secondBitmapData.height, this.height - y1));
					var pixels = this.getPixels(hitRect);
					hitRect.offset(-x1, -y1);
					var testPixels = secondBitmapData.getPixels(hitRect);
					var length = hitRect.width * hitRect.height | 0;
					var pixel1;
					var testPixel;
					var _g = 0;
					while (_g < length) {
						var i = _g++;
						pixel1 = pixels.readUnsignedInt();
						testPixel = testPixels.readUnsignedInt();
						if ((pixel1 >> 24 & 255) >= firstAlphaThreshold && (testPixel >> 24 & 255) >= secondAlphaThreshold) return true;
					}
					return false;
				}
			} else if (js_Boot.__instanceof(secondObject, openfl_geom_Rectangle)) {
				var secondRectangle = openfl_geom_Rectangle.__temp;
				secondRectangle.copyFrom(secondObject);
				secondRectangle.offset(-firstPoint.x, -firstPoint.y);
				secondRectangle.__contract(0, 0, this.width, this.height);
				if (secondRectangle.width > 0 && secondRectangle.height > 0) {
					var pixels1 = this.getPixels(secondRectangle);
					var length1 = pixels1.length / 4 | 0;
					var pixel2;
					var _g1 = 0;
					while (_g1 < length1) {
						var i1 = _g1++;
						pixel2 = pixels1.readUnsignedInt();
						if ((pixel2 >> 24 & 255) >= firstAlphaThreshold) return true;
					}
				}
			}
			return false;
		}
		, lock: function () {
		}
		, merge: function (sourceBitmapData, sourceRect, destPoint, redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier) {
			if (!this.__isValid || sourceBitmapData == null || !sourceBitmapData.__isValid || sourceRect == null || destPoint == null) return;
			this.image.merge(sourceBitmapData.image, sourceRect.__toLimeRectangle(), destPoint.__toLimeVector2(), redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier);
			this.__usingPingPongTexture = false;
		}
		, noise: function (randomSeed, low, high, channelOptions, grayScale) {
			if (grayScale == null) grayScale = false;
			if (channelOptions == null) channelOptions = 7;
			if (high == null) high = 255;
			if (low == null) low = 0;
			if (!this.__isValid) return;
			openfl_Lib.notImplemented("BitmapData.noise");
		}
		, paletteMap: function (sourceBitmapData, sourceRect, destPoint, redArray, greenArray, blueArray, alphaArray) {
			var sw = sourceRect.width | 0;
			var sh = sourceRect.height | 0;
			var pixels = this.getPixels(sourceRect);
			pixels.position = 0;
			var pixelValue;
			var r;
			var g;
			var b;
			var a;
			var color;
			var c1;
			var c2;
			var c3;
			var c4;
			var _g1 = 0;
			var _g = sh * sw;
			while (_g1 < _g) {
				var i = _g1++;
				pixelValue = pixels.readUnsignedInt();
				if (alphaArray == null) c1 = pixelValue & -16777216; else c1 = alphaArray[pixelValue >> 24 & 255];
				if (redArray == null) c2 = pixelValue & 16711680; else c2 = redArray[pixelValue >> 16 & 255];
				if (greenArray == null) c3 = pixelValue & 65280; else c3 = greenArray[pixelValue >> 8 & 255];
				if (blueArray == null) c4 = pixelValue & 255; else c4 = blueArray[pixelValue & 255];
				a = (c1 >> 24 & 255) + (c2 >> 24 & 255) + (c3 >> 24 & 255) + (c4 >> 24 & 255);
				if (a > 255) a == 255;
				r = (c1 >> 16 & 255) + (c2 >> 16 & 255) + (c3 >> 16 & 255) + (c4 >> 16 & 255);
				if (r > 255) r == 255;
				g = (c1 >> 8 & 255) + (c2 >> 8 & 255) + (c3 >> 8 & 255) + (c4 >> 8 & 255);
				if (g > 255) g == 255;
				b = (c1 & 255) + (c2 & 255) + (c3 & 255) + (c4 & 255);
				if (b > 255) b == 255;
				color = a << 24 | r << 16 | g << 8 | b;
				pixels.position = i * 4;
				pixels.writeUnsignedInt(color);
			}
			pixels.position = 0;
			var destRect = new openfl_geom_Rectangle(destPoint.x, destPoint.y, sw, sh);
			this.setPixels(destRect, pixels);
		}
		, perlinNoise: function (baseX, baseY, numOctaves, randomSeed, stitch, fractalNoise, channelOptions, grayScale, offsets) {
			if (grayScale == null) grayScale = false;
			if (channelOptions == null) channelOptions = 7;
			openfl_Lib.notImplemented("BitmapData.perlinNoise");
		}
		, scroll: function (x, y) {
			if (!this.__isValid) return;
			this.image.scroll(x, y);
			this.__usingPingPongTexture = false;
		}
		, setPixel: function (x, y, color) {
			if (!this.__isValid) return;
			this.image.setPixel(x, y, color, 1);
			this.__usingPingPongTexture = false;
		}
		, setPixel32: function (x, y, color) {
			if (!this.__isValid) return;
			this.image.setPixel32(x, y, color, 1);
			this.__usingPingPongTexture = false;
		}
		, setPixels: function (rect, byteArray) {
			if (!this.__isValid || rect == null) return;
			this.image.setPixels(rect.__toLimeRectangle(), byteArray, 1);
			this.__usingPingPongTexture = false;
		}
		, setVector: function (rect, inputVector) {
			var byteArray = new lime_utils_ByteArray();
			byteArray.set_length(inputVector.length * 4);
			var _g = 0;
			while (_g < inputVector.length) {
				var color = inputVector.data[_g];
				++_g;
				byteArray.writeUnsignedInt(color);
			}
			byteArray.position = 0;
			this.setPixels(rect, byteArray);
		}
		, threshold: function (sourceBitmapData, sourceRect, destPoint, operation, threshold, color, mask, copySource) {
			if (copySource == null) copySource = false;
			if (mask == null) mask = -1;
			if (color == null) color = 0;
			if (sourceBitmapData == null || sourceRect == null || destPoint == null || sourceRect.x > sourceBitmapData.width || sourceRect.y > sourceBitmapData.height || destPoint.x > this.width || destPoint.y > this.height) return 0;
			if (sourceBitmapData == this && sourceRect.equals(this.rect) && destPoint.x == 0 && destPoint.y == 0) {
				var hits = 0;
				var memory = new lime_utils_ByteArray(this.width * this.height * 4);
				memory = this.getPixels(this.rect);
				memory.position = 0;
				openfl_Memory.select(memory);
				var thresholdMask = threshold & mask;
				var width_yy;
				var position;
				var pixelMask;
				var pixelValue;
				var i;
				var test;
				var _g1 = 0;
				var _g = this.height;
				while (_g1 < _g) {
					var yy = _g1++;
					width_yy = this.width * yy;
					var _g3 = 0;
					var _g2 = this.width;
					while (_g3 < _g2) {
						var xx = _g3++;
						position = (width_yy + xx) * 4;
						pixelValue = openfl_Memory.getI32(position);
						pixelMask = pixelValue & mask;
						i = openfl_display_BitmapData.__ucompare(pixelMask, thresholdMask);
						test = false;
						if (operation == "==") test = i == 0; else if (operation == "<") test = i == -1; else if (operation == ">") test = i == 1; else if (operation == "!=") test = i != 0; else if (operation == "<=") test = i == 0 || i == -1; else if (operation == ">=") test = i == 0 || i == 1;
						if (test) {
							openfl_Memory.setI32(position, color);
							hits++;
						}
					}
				}
				memory.position = 0;
				this.setPixels(this.rect, memory);
				openfl_Memory.select(null);
				return hits;
			} else {
				sourceRect = sourceRect.clone();
				if (sourceRect.get_right() > sourceBitmapData.width) sourceRect.width = sourceBitmapData.width - sourceRect.x;
				if (sourceRect.get_bottom() > sourceBitmapData.height) sourceRect.height = sourceBitmapData.height - sourceRect.y;
				var targetRect = sourceRect.clone();
				targetRect.offsetPoint(destPoint);
				if (targetRect.get_right() > this.width) targetRect.width = this.width - targetRect.x;
				if (targetRect.get_bottom() > this.height) targetRect.height = this.height - targetRect.y;
				sourceRect.width = Math.min(sourceRect.width, targetRect.width);
				sourceRect.height = Math.min(sourceRect.height, targetRect.height);
				var sx = sourceRect.x | 0;
				var sy = sourceRect.y | 0;
				var sw = sourceRect.width | 0;
				var sh = sourceRect.height | 0;
				var dx = destPoint.x | 0;
				var dy = destPoint.y | 0;
				var bw = this.width - sw - dx;
				var bh = this.height - sh - dy;
				var dw;
				if (bw < 0) dw = sw + (this.width - sw - dx); else dw = sw;
				var dh;
				if (bw < 0) dh = sh + (this.height - sh - dy); else dh = sh;
				var hits1 = 0;
				var canvasMemory = sw * sh * 4;
				var sourceMemory = sw * sh * 4;
				var totalMemory = canvasMemory + sourceMemory;
				var memory1 = new lime_utils_ByteArray(totalMemory);
				memory1.position = 0;
				var pixels = sourceBitmapData.getPixels(sourceRect);
				if (copySource) memory1.writeBytes(pixels); else memory1.writeBytes(this.getPixels(targetRect));
				memory1.position = canvasMemory;
				memory1.writeBytes(pixels);
				memory1.position = 0;
				openfl_Memory.select(memory1);
				var thresholdMask1 = threshold & mask;
				var position1;
				var pixelMask1;
				var pixelValue1;
				var i1;
				var test1;
				var _g4 = 0;
				while (_g4 < dh) {
					var yy1 = _g4++;
					var _g11 = 0;
					while (_g11 < dw) {
						var xx1 = _g11++;
						position1 = (xx1 + sx + (yy1 + sy) * sw) * 4;
						pixelValue1 = openfl_Memory.getI32(canvasMemory + position1);
						pixelMask1 = pixelValue1 & mask;
						i1 = openfl_display_BitmapData.__ucompare(pixelMask1, thresholdMask1);
						test1 = false;
						if (operation == "==") test1 = i1 == 0; else if (operation == "<") test1 = i1 == -1; else if (operation == ">") test1 = i1 == 1; else if (operation == "!=") test1 = i1 != 0; else if (operation == "<=") test1 = i1 == 0 || i1 == -1; else if (operation == ">=") test1 = i1 == 0 || i1 == 1;
						if (test1) {
							openfl_Memory.setI32(position1, color);
							hits1++;
						}
					}
				}
				memory1.position = 0;
				this.setPixels(targetRect, memory1);
				openfl_Memory.select(null);
				return hits1;
			}
		}
		, unlock: function (changeRect) {
		}
		, __createUVs: function (x0, y0, x1, y1, x2, y2, x3, y3) {
			if (y3 == null) y3 = 1;
			if (x3 == null) x3 = 0;
			if (y2 == null) y2 = 1;
			if (x2 == null) x2 = 1;
			if (y1 == null) y1 = 0;
			if (x1 == null) x1 = 1;
			if (y0 == null) y0 = 0;
			if (x0 == null) x0 = 0;
			if (this.__uvData == null) this.__uvData = new openfl_display_TextureUvs();
			this.__uvData.x0 = x0;
			this.__uvData.y0 = y0;
			this.__uvData.x1 = x1;
			this.__uvData.y1 = y1;
			this.__uvData.x2 = x2;
			this.__uvData.y2 = y2;
			this.__uvData.x3 = x3;
			this.__uvData.y3 = y3;
		}
		, __drawGL: function (renderSession, source, matrix, colorTransform, blendMode, clipRect, smoothing, drawSelf, clearBuffer, readPixels, powerOfTwo) {
			if (powerOfTwo == null) powerOfTwo = true;
			if (readPixels == null) readPixels = false;
			if (clearBuffer == null) clearBuffer = false;
			if (drawSelf == null) drawSelf = false;
			if (smoothing == null) smoothing = false;
			this.__pingPongTexture = openfl__$internal_renderer_opengl_GLBitmap.pushFramebuffer(renderSession, this.__pingPongTexture, this.rect, smoothing, this.transparent, clearBuffer, powerOfTwo);
			openfl__$internal_renderer_opengl_GLBitmap.drawBitmapDrawable(renderSession, drawSelf ? this : null, source, matrix, colorTransform, blendMode, clipRect);
			openfl__$internal_renderer_opengl_GLBitmap.popFramebuffer(renderSession, readPixels ? this.image : null);
			var uv = this.__pingPongTexture.get_renderTexture().__uvData;
			this.__createUVs(uv.x0, uv.y0, uv.x1, uv.y1, uv.x2, uv.y2, uv.x3, uv.y3);
			this.__isValid = true;
			this.__usingPingPongTexture = true;
		}
		, __fromBase64: function (base64, type, onload) {
			var _g = this;
			lime_graphics_Image.fromBase64(base64, type, function (image) {
				_g.__fromImage(image);
				if (onload != null) onload(_g);
			});
		}
		, __fromBytes: function (bytes, rawAlpha, onload) {
			var _g = this;
			lime_graphics_Image.fromBytes(bytes, function (image) {
				_g.__fromImage(image);
				if (rawAlpha != null) {
					lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
					lime_graphics_utils_ImageCanvasUtil.createImageData(image);
					var data = image.buffer.data;
					var _g2 = 0;
					var _g1 = rawAlpha.length;
					while (_g2 < _g1) {
						var i = _g2++;
						var val = rawAlpha.readUnsignedByte();
						data[i * 4 + 3] = val;
					}
					image.dirty = true;
				}
				if (onload != null) onload(_g);
			});
		}
		, __fromFile: function (path, onload, onerror) {
			var _g = this;
			lime_graphics_Image.fromFile(path, function (image) {
				_g.__fromImage(image);
				if (onload != null) onload(_g);
			}, onerror);
		}
		, __fromImage: function (image) {
			if (image != null && image.buffer != null) {
				this.image = image;
				this.width = image.width;
				this.height = image.height;
				this.rect = new openfl_geom_Rectangle(0, 0, image.width, image.height);
				this.__isValid = true;
			}
		}
		, __renderCairo: function (renderSession) {
			if (!this.__isValid) return;
			var cairo = renderSession.cairo;
			if (this.__worldTransform == null) this.__worldTransform = new openfl_geom_Matrix();
			var transform = this.__worldTransform;
			if (renderSession.roundPixels) {
				var matrix = transform.__toMatrix3();
				matrix.tx = Math.round(matrix.tx);
				matrix.ty = Math.round(matrix.ty);
				cairo.set_matrix(matrix);
			} else cairo.set_matrix(transform.__toMatrix3());
			var surface = this.getSurface();
			if (surface != null) {
				var pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(surface);
				if (cairo.get_antialias() == 1) lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern, 3); else lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern, 1);
				cairo.set_source(pattern);
				cairo.paint();
			}
		}
		, __renderCairoMask: function (renderSession) {
		}
		, __renderCanvas: function (renderSession) {
			if (!this.__isValid) return;
			lime_graphics_utils_ImageCanvasUtil.sync(this.image, false);
			var context = renderSession.context;
			if (this.__worldTransform == null) this.__worldTransform = new openfl_geom_Matrix();
			context.globalAlpha = 1;
			var transform = this.__worldTransform;
			if (renderSession.roundPixels) context.setTransform(transform.a, transform.b, transform.c, transform.d, transform.tx | 0, transform.ty | 0); else context.setTransform(transform.a, transform.b, transform.c, transform.d, transform.tx, transform.ty);
			context.drawImage(this.image.get_src(), 0, 0);
		}
		, __renderCanvasMask: function (renderSession) {
		}
		, __renderGL: function (renderSession) {
			renderSession.spriteBatch.renderBitmapData(this, false, this.__worldTransform, this.__worldColorTransform, this.__worldColorTransform.alphaMultiplier, this.__blendMode, this.__shader);
		}
		, __updateTransforms: function (overrideTransform) {
			if (overrideTransform == null) this.__worldTransform.identity(); else this.__worldTransform = overrideTransform;
		}
		, __sync: function () {
			lime_graphics_utils_ImageCanvasUtil.sync(this.image, false);
		}
		, __updateChildren: function (transformOnly) {
		}
		, __updateMask: function (maskGraphics) {
		}
		, __resize: function (width, height) {
			this.width = width;
			this.height = height;
			this.rect.width = width;
			this.rect.height = height;
		}
		, __class__: openfl_display_BitmapData
	};
	var openfl_display_TextureUvs = function () {
		this.y3 = 0;
		this.y2 = 0;
		this.y1 = 0;
		this.y0 = 0;
		this.x3 = 0;
		this.x2 = 0;
		this.x1 = 0;
		this.x0 = 0;
	};
	$hxClasses["openfl.display.TextureUvs"] = openfl_display_TextureUvs;
	openfl_display_TextureUvs.__name__ = ["openfl", "display", "TextureUvs"];
	openfl_display_TextureUvs.prototype = {
		reset: function () {
			this.x0 = this.x1 = this.x2 = this.x3 = this.y0 = this.y1 = this.y2 = this.y3 = 0;
		}
		, __class__: openfl_display_TextureUvs
	};
	var openfl_display_BitmapDataChannel = function () { };
	$hxClasses["openfl.display.BitmapDataChannel"] = openfl_display_BitmapDataChannel;
	openfl_display_BitmapDataChannel.__name__ = ["openfl", "display", "BitmapDataChannel"];
	var openfl_display_BlendMode = $hxClasses["openfl.display.BlendMode"] = { __ename__: ["openfl", "display", "BlendMode"], __constructs__: ["ADD", "ALPHA", "DARKEN", "DIFFERENCE", "ERASE", "HARDLIGHT", "INVERT", "LAYER", "LIGHTEN", "MULTIPLY", "NORMAL", "OVERLAY", "SCREEN", "SUBTRACT"] };
	openfl_display_BlendMode.ADD = ["ADD", 0];
	openfl_display_BlendMode.ADD.toString = $estr;
	openfl_display_BlendMode.ADD.__enum__ = openfl_display_BlendMode;
	openfl_display_BlendMode.ALPHA = ["ALPHA", 1];
	openfl_display_BlendMode.ALPHA.toString = $estr;
	openfl_display_BlendMode.ALPHA.__enum__ = openfl_display_BlendMode;
	openfl_display_BlendMode.DARKEN = ["DARKEN", 2];
	openfl_display_BlendMode.DARKEN.toString = $estr;
	openfl_display_BlendMode.DARKEN.__enum__ = openfl_display_BlendMode;
	openfl_display_BlendMode.DIFFERENCE = ["DIFFERENCE", 3];
	openfl_display_BlendMode.DIFFERENCE.toString = $estr;
	openfl_display_BlendMode.DIFFERENCE.__enum__ = openfl_display_BlendMode;
	openfl_display_BlendMode.ERASE = ["ERASE", 4];
	openfl_display_BlendMode.ERASE.toString = $estr;
	openfl_display_BlendMode.ERASE.__enum__ = openfl_display_BlendMode;
	openfl_display_BlendMode.HARDLIGHT = ["HARDLIGHT", 5];
	openfl_display_BlendMode.HARDLIGHT.toString = $estr;
	openfl_display_BlendMode.HARDLIGHT.__enum__ = openfl_display_BlendMode;
	openfl_display_BlendMode.INVERT = ["INVERT", 6];
	openfl_display_BlendMode.INVERT.toString = $estr;
	openfl_display_BlendMode.INVERT.__enum__ = openfl_display_BlendMode;
	openfl_display_BlendMode.LAYER = ["LAYER", 7];
	openfl_display_BlendMode.LAYER.toString = $estr;
	openfl_display_BlendMode.LAYER.__enum__ = openfl_display_BlendMode;
	openfl_display_BlendMode.LIGHTEN = ["LIGHTEN", 8];
	openfl_display_BlendMode.LIGHTEN.toString = $estr;
	openfl_display_BlendMode.LIGHTEN.__enum__ = openfl_display_BlendMode;
	openfl_display_BlendMode.MULTIPLY = ["MULTIPLY", 9];
	openfl_display_BlendMode.MULTIPLY.toString = $estr;
	openfl_display_BlendMode.MULTIPLY.__enum__ = openfl_display_BlendMode;
	openfl_display_BlendMode.NORMAL = ["NORMAL", 10];
	openfl_display_BlendMode.NORMAL.toString = $estr;
	openfl_display_BlendMode.NORMAL.__enum__ = openfl_display_BlendMode;
	openfl_display_BlendMode.OVERLAY = ["OVERLAY", 11];
	openfl_display_BlendMode.OVERLAY.toString = $estr;
	openfl_display_BlendMode.OVERLAY.__enum__ = openfl_display_BlendMode;
	openfl_display_BlendMode.SCREEN = ["SCREEN", 12];
	openfl_display_BlendMode.SCREEN.toString = $estr;
	openfl_display_BlendMode.SCREEN.__enum__ = openfl_display_BlendMode;
	openfl_display_BlendMode.SUBTRACT = ["SUBTRACT", 13];
	openfl_display_BlendMode.SUBTRACT.toString = $estr;
	openfl_display_BlendMode.SUBTRACT.__enum__ = openfl_display_BlendMode;
	var openfl_display_CapsStyle = $hxClasses["openfl.display.CapsStyle"] = { __ename__: ["openfl", "display", "CapsStyle"], __constructs__: ["NONE", "ROUND", "SQUARE"] };
	openfl_display_CapsStyle.NONE = ["NONE", 0];
	openfl_display_CapsStyle.NONE.toString = $estr;
	openfl_display_CapsStyle.NONE.__enum__ = openfl_display_CapsStyle;
	openfl_display_CapsStyle.ROUND = ["ROUND", 1];
	openfl_display_CapsStyle.ROUND.toString = $estr;
	openfl_display_CapsStyle.ROUND.__enum__ = openfl_display_CapsStyle;
	openfl_display_CapsStyle.SQUARE = ["SQUARE", 2];
	openfl_display_CapsStyle.SQUARE.toString = $estr;
	openfl_display_CapsStyle.SQUARE.__enum__ = openfl_display_CapsStyle;
	var openfl_display_DirectRenderer = function (type) {
		if (type == null) type = "DirectRenderer";
		openfl_display_DisplayObject.call(this);
	};
	$hxClasses["openfl.display.DirectRenderer"] = openfl_display_DirectRenderer;
	openfl_display_DirectRenderer.__name__ = ["openfl", "display", "DirectRenderer"];
	openfl_display_DirectRenderer.__super__ = openfl_display_DisplayObject;
	openfl_display_DirectRenderer.prototype = $extend(openfl_display_DisplayObject.prototype, {
		get_render: function () {
			return this.__render;
		}
		, set_render: function (value) {
			return this.__render = value;
		}
		, __class__: openfl_display_DirectRenderer
		, __properties__: $extend(openfl_display_DisplayObject.prototype.__properties__, { set_render: "set_render", get_render: "get_render" })
	});
	var openfl_display_FrameLabel = function (name, frame) {
		openfl_events_EventDispatcher.call(this);
		this.__name = name;
		this.__frame = frame;
	};
	$hxClasses["openfl.display.FrameLabel"] = openfl_display_FrameLabel;
	openfl_display_FrameLabel.__name__ = ["openfl", "display", "FrameLabel"];
	openfl_display_FrameLabel.__super__ = openfl_events_EventDispatcher;
	openfl_display_FrameLabel.prototype = $extend(openfl_events_EventDispatcher.prototype, {
		get_frame: function () {
			return this.__frame;
		}
		, get_name: function () {
			return this.__name;
		}
		, __class__: openfl_display_FrameLabel
		, __properties__: { get_name: "get_name", get_frame: "get_frame" }
	});
	var openfl_display_GradientType = $hxClasses["openfl.display.GradientType"] = { __ename__: ["openfl", "display", "GradientType"], __constructs__: ["RADIAL", "LINEAR"] };
	openfl_display_GradientType.RADIAL = ["RADIAL", 0];
	openfl_display_GradientType.RADIAL.toString = $estr;
	openfl_display_GradientType.RADIAL.__enum__ = openfl_display_GradientType;
	openfl_display_GradientType.LINEAR = ["LINEAR", 1];
	openfl_display_GradientType.LINEAR.toString = $estr;
	openfl_display_GradientType.LINEAR.__enum__ = openfl_display_GradientType;
	var openfl_display_Graphics = function () {
		this.__glStack = [];
		this.__dirty = true;
		this.__commands = new openfl__$internal_renderer_DrawCommandBuffer();
		this.__strokePadding = 0;
		this.__positionX = 0;
		this.__positionY = 0;
		this.__hardware = true;
		this.moveTo(0, 0);
	};
	$hxClasses["openfl.display.Graphics"] = openfl_display_Graphics;
	openfl_display_Graphics.__name__ = ["openfl", "display", "Graphics"];
	openfl_display_Graphics.prototype = {
		beginBitmapFill: function (bitmap, matrix, repeat, smooth) {
			if (smooth == null) smooth = false;
			if (repeat == null) repeat = true;
			this.__commands.beginBitmapFill(bitmap, matrix != null ? new openfl_geom_Matrix(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty) : null, repeat, smooth);
			this.__visible = true;
		}
		, beginFill: function (color, alpha) {
			if (alpha == null) alpha = 1;
			if (color == null) color = 0;
			this.__commands.beginFill(color & 16777215, alpha);
			if (alpha > 0) this.__visible = true;
		}
		, beginGradientFill: function (type, colors, alphas, ratios, matrix, spreadMethod, interpolationMethod, focalPointRatio) {
			this.__commands.beginGradientFill(type, colors, alphas, ratios, matrix, spreadMethod, interpolationMethod, focalPointRatio);
			this.__hardware = false;
			var _g = 0;
			while (_g < alphas.length) {
				var alpha = alphas[_g];
				++_g;
				if (alpha > 0) {
					this.__visible = true;
					break;
				}
			}
		}
		, clear: function () {
			this.__commands.clear();
			this.__strokePadding = 0;
			if (this.__bounds != null) {
				this.set___dirty(true);
				this.__transformDirty = true;
				this.__bounds = null;
			}
			this.__visible = false;
			this.__hardware = true;
			this.moveTo(0, 0);
		}
		, copyFrom: function (sourceGraphics) {
			this.__bounds = sourceGraphics.__bounds.clone();
			this.__commands = sourceGraphics.__commands.copy();
			this.set___dirty(true);
			this.__strokePadding = sourceGraphics.__strokePadding;
			this.__positionX = sourceGraphics.__positionX;
			this.__positionY = sourceGraphics.__positionY;
			this.__transformDirty = true;
			this.__visible = sourceGraphics.__visible;
		}
		, cubicCurveTo: function (controlX1, controlY1, controlX2, controlY2, anchorX, anchorY) {
			this.__inflateBounds(this.__positionX - this.__strokePadding, this.__positionY - this.__strokePadding);
			this.__inflateBounds(this.__positionX + this.__strokePadding, this.__positionY + this.__strokePadding);
			var ix1;
			var iy1;
			var ix2;
			var iy2;
			ix1 = anchorX;
			ix2 = anchorX;
			if (!((controlX1 < anchorX && controlX1 > this.__positionX || controlX1 > anchorX && controlX1 < this.__positionX) && (controlX2 < anchorX && controlX2 > this.__positionX || controlX2 > anchorX && controlX2 < this.__positionX))) {
				var u = 2 * this.__positionX - 4 * controlX1 + 2 * controlX2;
				var v = controlX1 - this.__positionX;
				var w = -this.__positionX + 3 * controlX1 + anchorX - 3 * controlX2;
				var t1 = (-u + Math.sqrt(u * u - 4 * v * w)) / (2 * w);
				var t2 = (-u - Math.sqrt(u * u - 4 * v * w)) / (2 * w);
				if (t1 > 0 && t1 < 1) ix1 = this.__calculateBezierCubicPoint(t1, this.__positionX, controlX1, controlX2, anchorX);
				if (t2 > 0 && t2 < 1) ix2 = this.__calculateBezierCubicPoint(t2, this.__positionX, controlX1, controlX2, anchorX);
			}
			iy1 = anchorY;
			iy2 = anchorY;
			if (!((controlY1 < anchorY && controlY1 > this.__positionX || controlY1 > anchorY && controlY1 < this.__positionX) && (controlY2 < anchorY && controlY2 > this.__positionX || controlY2 > anchorY && controlY2 < this.__positionX))) {
				var u1 = 2 * this.__positionX - 4 * controlY1 + 2 * controlY2;
				var v1 = controlY1 - this.__positionX;
				var w1 = -this.__positionX + 3 * controlY1 + anchorY - 3 * controlY2;
				var t11 = (-u1 + Math.sqrt(u1 * u1 - 4 * v1 * w1)) / (2 * w1);
				var t21 = (-u1 - Math.sqrt(u1 * u1 - 4 * v1 * w1)) / (2 * w1);
				if (t11 > 0 && t11 < 1) iy1 = this.__calculateBezierCubicPoint(t11, this.__positionX, controlY1, controlY2, anchorY);
				if (t21 > 0 && t21 < 1) iy2 = this.__calculateBezierCubicPoint(t21, this.__positionX, controlY1, controlY2, anchorY);
			}
			this.__inflateBounds(ix1 - this.__strokePadding, iy1 - this.__strokePadding);
			this.__inflateBounds(ix1 + this.__strokePadding, iy1 + this.__strokePadding);
			this.__inflateBounds(ix2 - this.__strokePadding, iy2 - this.__strokePadding);
			this.__inflateBounds(ix2 + this.__strokePadding, iy2 + this.__strokePadding);
			this.__positionX = anchorX;
			this.__positionY = anchorY;
			this.__commands.cubicCurveTo(controlX1, controlY1, controlX2, controlY2, anchorX, anchorY);
			this.__hardware = false;
			this.set___dirty(true);
		}
		, curveTo: function (controlX, controlY, anchorX, anchorY) {
			this.__inflateBounds(this.__positionX - this.__strokePadding, this.__positionY - this.__strokePadding);
			this.__inflateBounds(this.__positionX + this.__strokePadding, this.__positionY + this.__strokePadding);
			var ix;
			var iy;
			if (controlX < anchorX && controlX > this.__positionX || controlX > anchorX && controlX < this.__positionX) ix = anchorX; else {
				var tx = (this.__positionX - controlX) / (this.__positionX - 2 * controlX + anchorX);
				ix = this.__calculateBezierQuadPoint(tx, this.__positionX, controlX, anchorX);
			}
			if (controlY < anchorY && controlY > this.__positionY || controlY > anchorY && controlY < this.__positionY) iy = anchorY; else {
				var ty = (this.__positionY - controlY) / (this.__positionY - 2 * controlY + anchorY);
				iy = this.__calculateBezierQuadPoint(ty, this.__positionY, controlY, anchorY);
			}
			this.__inflateBounds(ix - this.__strokePadding, iy - this.__strokePadding);
			this.__inflateBounds(ix + this.__strokePadding, iy + this.__strokePadding);
			this.__positionX = anchorX;
			this.__positionY = anchorY;
			this.__commands.curveTo(controlX, controlY, anchorX, anchorY);
			this.__hardware = false;
			this.set___dirty(true);
		}
		, drawCircle: function (x, y, radius) {
			if (radius <= 0) return;
			this.__inflateBounds(x - radius - this.__strokePadding, y - radius - this.__strokePadding);
			this.__inflateBounds(x + radius + this.__strokePadding, y + radius + this.__strokePadding);
			this.__commands.drawCircle(x, y, radius);
			this.__hardware = false;
			this.set___dirty(true);
		}
		, drawEllipse: function (x, y, width, height) {
			if (width <= 0 || height <= 0) return;
			this.__inflateBounds(x - this.__strokePadding, y - this.__strokePadding);
			this.__inflateBounds(x + width + this.__strokePadding, y + height + this.__strokePadding);
			this.__commands.drawEllipse(x, y, width, height);
			this.__hardware = false;
			this.set___dirty(true);
		}
		, drawGraphicsData: function (graphicsData) {
			var fill;
			var bitmapFill;
			var gradientFill;
			var stroke;
			var path;
			var _g = 0;
			while (_g < graphicsData.length) {
				var graphics = graphicsData.data[_g];
				++_g;
				if (js_Boot.__instanceof(graphics, openfl_display_GraphicsSolidFill)) {
					fill = graphics;
					this.beginFill(fill.color, fill.alpha);
				} else if (js_Boot.__instanceof(graphics, openfl_display_GraphicsBitmapFill)) {
					bitmapFill = graphics;
					this.beginBitmapFill(bitmapFill.bitmapData, bitmapFill.matrix, bitmapFill.repeat, bitmapFill.smooth);
				} else if (js_Boot.__instanceof(graphics, openfl_display_GraphicsGradientFill)) {
					gradientFill = graphics;
					this.beginGradientFill(gradientFill.type, gradientFill.colors, gradientFill.alphas, gradientFill.ratios, gradientFill.matrix, gradientFill.spreadMethod, gradientFill.interpolationMethod, gradientFill.focalPointRatio);
				} else if (js_Boot.__instanceof(graphics, openfl_display_GraphicsStroke)) {
					stroke = graphics;
					if (js_Boot.__instanceof(stroke.fill, openfl_display_GraphicsSolidFill)) {
						fill = stroke.fill;
						this.lineStyle(stroke.thickness, fill.color, fill.alpha, stroke.pixelHinting, stroke.scaleMode, stroke.caps, stroke.joints, stroke.miterLimit);
					} else {
						this.lineStyle(stroke.thickness, 0, 1, stroke.pixelHinting, stroke.scaleMode, stroke.caps, stroke.joints, stroke.miterLimit);
						if (js_Boot.__instanceof(stroke.fill, openfl_display_GraphicsBitmapFill)) {
							bitmapFill = stroke.fill;
							this.lineBitmapStyle(bitmapFill.bitmapData, bitmapFill.matrix, bitmapFill.repeat, bitmapFill.smooth);
						} else if (js_Boot.__instanceof(stroke.fill, openfl_display_GraphicsGradientFill)) {
							gradientFill = stroke.fill;
							this.lineGradientStyle(gradientFill.type, gradientFill.colors, gradientFill.alphas, gradientFill.ratios, gradientFill.matrix, gradientFill.spreadMethod, gradientFill.interpolationMethod, gradientFill.focalPointRatio);
						}
					}
				} else if (js_Boot.__instanceof(graphics, openfl_display_GraphicsPath)) {
					path = graphics;
					this.drawPath(path.commands, path.data, path.winding);
				} else if (js_Boot.__instanceof(graphics, openfl_display_GraphicsEndFill)) this.endFill();
			}
		}
		, drawPath: function (commands, data, winding) {
			var dataIndex = 0;
			var _g = 0;
			try {
				while (_g < commands.length) {
					var command = commands.data[_g];
					++_g;
					if (command != null) switch (command) {
						case 1:
							this.moveTo(data.data[dataIndex], data.data[dataIndex + 1]);
							dataIndex += 2;
							break;
						case 2:
							this.lineTo(data.data[dataIndex], data.data[dataIndex + 1]);
							dataIndex += 2;
							break;
						case 4:
							this.moveTo(data.data[dataIndex + 2], data.data[dataIndex + 3]);
							throw "__break__";
							dataIndex += 4;
							break;
						case 5:
							this.lineTo(data.data[dataIndex + 2], data.data[dataIndex + 3]);
							throw "__break__";
							dataIndex += 4;
							break;
						case 3:
							this.curveTo(data.data[dataIndex], data.data[dataIndex + 1], data.data[dataIndex + 2], data.data[dataIndex + 3]);
							dataIndex += 4;
							break;
						case 6:
							this.cubicCurveTo(data.data[dataIndex], data.data[dataIndex + 1], data.data[dataIndex + 2], data.data[dataIndex + 3], data.data[dataIndex + 4], data.data[dataIndex + 5]);
							dataIndex += 6;
							break;
						default:
					} else {
					}
				}
			} catch (e) { if (e != "__break__") throw e; }
		}
		, drawRect: function (x, y, width, height) {
			if (width <= 0 || height <= 0) return;
			this.__inflateBounds(x - this.__strokePadding, y - this.__strokePadding);
			this.__inflateBounds(x + width + this.__strokePadding, y + height + this.__strokePadding);
			this.__commands.drawRect(x, y, width, height);
			this.set___dirty(true);
		}
		, drawRoundRect: function (x, y, width, height, rx, ry) {
			if (ry == null) ry = -1;
			if (width <= 0 || height <= 0) return;
			this.__inflateBounds(x - this.__strokePadding, y - this.__strokePadding);
			this.__inflateBounds(x + width + this.__strokePadding, y + height + this.__strokePadding);
			this.__commands.drawRoundRect(x, y, width, height, rx, ry);
			this.__hardware = false;
			this.set___dirty(true);
		}
		, drawRoundRectComplex: function (x, y, width, height, topLeftRadius, topRightRadius, bottomLeftRadius, bottomRightRadius) {
			openfl_Lib.notImplemented("Graphics.drawRoundRectComplex");
		}
		, drawTiles: function (sheet, tileData, smooth, flags, shader, count) {
			if (count == null) count = -1;
			if (flags == null) flags = 0;
			if (smooth == null) smooth = false;
			var useScale = (flags & 1) > 0;
			var useRotation = (flags & 2) > 0;
			var useRGB = (flags & 4) > 0;
			var useAlpha = (flags & 8) > 0;
			var useTransform = (flags & 16) > 0;
			var useRect = (flags & 32) > 0;
			var useOrigin = (flags & 64) > 0;
			var rect = openfl_geom_Rectangle.__temp;
			var matrix = openfl_geom_Matrix.__temp;
			var numValues = 3;
			var totalCount = count;
			if (count < 0) totalCount = tileData.length;
			if (useTransform || useScale || useRotation || useRGB || useAlpha) {
				var scaleIndex = 0;
				var rotationIndex = 0;
				var transformIndex = 0;
				if (useRect) if (useOrigin) numValues = 8; else numValues = 6;
				if (useScale) {
					scaleIndex = numValues;
					numValues++;
				}
				if (useRotation) {
					rotationIndex = numValues;
					numValues++;
				}
				if (useTransform) {
					transformIndex = numValues;
					numValues += 4;
				}
				if (useRGB) numValues += 3;
				if (useAlpha) numValues++;
				var itemCount = totalCount / numValues | 0;
				var index = 0;
				var cacheID = -1;
				var x;
				var y;
				var id;
				var scale;
				var rotation;
				var tileWidth;
				var tileHeight;
				var originX;
				var originY;
				var tile = null;
				var tilePoint = null;
				while (index < totalCount) {
					x = tileData[index];
					y = tileData[index + 1];
					if (!useRect) id = tileData[index + 2] | 0; else id = -1;
					scale = 1.0;
					rotation = 0.0;
					if (useScale) scale = tileData[index + scaleIndex];
					if (useRotation) rotation = tileData[index + rotationIndex];
					if (id < 0) tile = null; else if (!useRect && cacheID != id) {
						cacheID = id;
						tile = sheet.__tileRects[id];
						tilePoint = sheet.__centerPoints[id];
					} else if (useRect) {
						tile = sheet.__rectTile;
						tile.setTo(tileData[index + 2], tileData[index + 3], tileData[index + 4], tileData[index + 5]);
						tilePoint = sheet.__point;
						if (useOrigin) {
							tilePoint.x = tileData[index + 6] / tile.width;
							tilePoint.y = tileData[index + 7] / tile.height;
						} else {
							tilePoint.x = 0;
							tilePoint.y = 0;
						}
					}
					if (tile != null) {
						if (useTransform) {
							rect.setTo(0, 0, tile.width, tile.height);
							matrix.setTo(tileData[index + transformIndex], tileData[index + transformIndex + 1], tileData[index + transformIndex + 2], tileData[index + transformIndex + 3], 0, 0);
							originX = tilePoint.x * tile.width;
							originY = tilePoint.y * tile.height;
							matrix.translate(x - (originX * matrix.a + originY * matrix.c + matrix.tx), y - (originX * matrix.b + originY * matrix.d + matrix.ty));
							rect.__transform(rect, matrix);
							this.__inflateBounds(rect.x, rect.y);
							this.__inflateBounds(rect.get_right(), rect.get_bottom());
						} else {
							tileWidth = tile.width * scale;
							tileHeight = tile.height * scale;
							x -= tilePoint.x * tileWidth;
							y -= tilePoint.y * tileHeight;
							if (rotation != 0) {
								rect.setTo(0, 0, tileWidth, tileHeight);
								matrix.identity();
								matrix.rotate(rotation);
								matrix.translate(x, y);
								rect.__transform(rect, matrix);
								this.__inflateBounds(rect.x, rect.y);
								this.__inflateBounds(rect.get_right(), rect.get_bottom());
							} else {
								this.__inflateBounds(x, y);
								this.__inflateBounds(x + tileWidth, y + tileHeight);
							}
						}
					}
					index += numValues;
				}
			} else {
				var x1;
				var y1;
				var id1;
				var tile1;
				var centerPoint;
				var originX1;
				var originY1;
				var rect1 = openfl_geom_Rectangle.__temp;
				var index1 = 0;
				while (index1 < totalCount) {
					x1 = tileData[index1++];
					y1 = tileData[index1++];
					if (!useRect) id1 = Std["int"](tileData[index1++]); else id1 = -1;
					originX1 = 0.0;
					originY1 = 0.0;
					if (useRect) {
						rect1.setTo(tileData[index1++], tileData[index1++], tileData[index1++], tileData[index1++]);
						if (useOrigin) {
							originX1 = tileData[index1++];
							originY1 = tileData[index1++];
						}
						this.__inflateBounds(x1 - originX1, y1 - originY1);
						this.__inflateBounds(x1 - originX1 + rect1.width, y1 - originY1 + rect1.height);
					} else {
						tile1 = sheet.__tileRects[id1];
						if (tile1 != null) {
							centerPoint = sheet.__centerPoints[id1];
							originX1 = centerPoint.x * tile1.width;
							originY1 = centerPoint.y * tile1.height;
							this.__inflateBounds(x1 - originX1, y1 - originY1);
							this.__inflateBounds(x1 - originX1 + tile1.width, y1 - originY1 + tile1.height);
						}
					}
				}
			}
			this.__commands.drawTiles(sheet, tileData, smooth, flags, shader, count);
			this.set___dirty(true);
			this.__visible = true;
		}
		, drawTriangles: function (vertices, indices, uvtData, culling, colors, blendMode) {
			if (blendMode == null) blendMode = 0;
			var vlen = vertices.length / 2 | 0;
			if (culling == null) culling = openfl_display_TriangleCulling.NONE;
			if (indices == null) {
				if (vlen % 3 != 0) throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Not enough vertices to close a triangle."));
				var this1;
				this1 = new openfl_VectorData();
				var this2;
				this2 = new Array(0);
				this1.data = this2;
				this1.length = 0;
				this1.fixed = false;
				indices = this1;
				var _g = 0;
				while (_g < vlen) {
					var i = _g++;
					if (!indices.fixed) {
						indices.length++;
						if (indices.data.length < indices.length) {
							var data;
							var this3;
							this3 = new Array(indices.data.length + 10);
							data = this3;
							haxe_ds__$Vector_Vector_$Impl_$.blit(indices.data, 0, data, 0, indices.data.length);
							indices.data = data;
						}
						indices.data[indices.length - 1] = i;
					}
					indices.length;
				}
			}
			this.__inflateBounds(0, 0);
			var tmpx = -Infinity;
			var tmpy = -Infinity;
			var maxX = -Infinity;
			var maxY = -Infinity;
			var _g1 = 0;
			while (_g1 < vlen) {
				var i1 = _g1++;
				tmpx = vertices.data[i1 * 2];
				tmpy = vertices.data[i1 * 2 + 1];
				if (maxX < tmpx) maxX = tmpx;
				if (maxY < tmpy) maxY = tmpy;
			}
			this.__inflateBounds(maxX, maxY);
			this.__commands.drawTriangles(vertices, indices, uvtData, culling, colors, blendMode);
			this.set___dirty(true);
			this.__visible = true;
		}
		, endFill: function () {
			this.__commands.endFill();
		}
		, lineBitmapStyle: function (bitmap, matrix, repeat, smooth) {
			if (smooth == null) smooth = false;
			if (repeat == null) repeat = true;
			this.__commands.lineBitmapStyle(bitmap, matrix != null ? new openfl_geom_Matrix(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty) : null, repeat, smooth);
		}
		, lineGradientStyle: function (type, colors, alphas, ratios, matrix, spreadMethod, interpolationMethod, focalPointRatio) {
			this.__commands.lineGradientStyle(type, colors, alphas, ratios, matrix, spreadMethod, interpolationMethod, focalPointRatio);
		}
		, lineStyle: function (thickness, color, alpha, pixelHinting, scaleMode, caps, joints, miterLimit) {
			if (thickness != null) {
				if (joints == openfl_display_JointStyle.MITER) {
					if (thickness > this.__strokePadding) this.__strokePadding = thickness;
				} else if (thickness / 2 > this.__strokePadding) this.__strokePadding = thickness / 2;
			}
			this.__commands.lineStyle(thickness, color, alpha, pixelHinting, scaleMode, caps, joints, miterLimit);
			if (thickness != null) this.__visible = true;
		}
		, lineTo: function (x, y) {
			this.__inflateBounds(this.__positionX - this.__strokePadding, this.__positionY - this.__strokePadding);
			this.__inflateBounds(this.__positionX + this.__strokePadding, this.__positionY + this.__strokePadding);
			this.__positionX = x;
			this.__positionY = y;
			this.__inflateBounds(this.__positionX - this.__strokePadding, this.__positionY - this.__strokePadding);
			this.__inflateBounds(this.__positionX + this.__strokePadding * 2, this.__positionY + this.__strokePadding);
			this.__commands.lineTo(x, y);
			this.__hardware = false;
			this.set___dirty(true);
		}
		, moveTo: function (x, y) {
			this.__positionX = x;
			this.__positionY = y;
			this.__commands.moveTo(x, y);
		}
		, __calculateBezierCubicPoint: function (t, p1, p2, p3, p4) {
			var iT = 1 - t;
			return p1 * (iT * iT * iT) + 3 * p2 * t * (iT * iT) + 3 * p3 * iT * (t * t) + p4 * (t * t * t);
		}
		, __calculateBezierQuadPoint: function (t, p1, p2, p3) {
			var iT = 1 - t;
			return iT * iT * p1 + 2 * iT * t * p2 + t * t * p3;
		}
		, __getBounds: function (rect, matrix) {
			if (this.__bounds == null) return;
			var bounds = openfl_geom_Rectangle.__temp;
			this.__bounds.__transform(bounds, matrix);
			rect.__expand(bounds.x, bounds.y, bounds.width, bounds.height);
		}
		, __hitTest: function (x, y, shapeFlag, matrix) {
			if (this.__bounds == null) return false;
			var px = matrix.__transformInverseX(x, y);
			var py = matrix.__transformInverseY(x, y);
			if (px > this.__bounds.x && py > this.__bounds.y && this.__bounds.contains(px, py)) {
				if (shapeFlag) return openfl__$internal_renderer_canvas_CanvasGraphics.hitTest(this, px, py);
				return true;
			}
			return false;
		}
		, __inflateBounds: function (x, y) {
			if (this.__bounds == null) {
				this.__bounds = new openfl_geom_Rectangle(x, y, 0, 0);
				this.__transformDirty = true;
				return;
			}
			if (x < this.__bounds.x) {
				this.__bounds.width += this.__bounds.x - x;
				this.__bounds.x = x;
				this.__transformDirty = true;
			}
			if (y < this.__bounds.y) {
				this.__bounds.height += this.__bounds.y - y;
				this.__bounds.y = y;
				this.__transformDirty = true;
			}
			if (x > this.__bounds.x + this.__bounds.width) this.__bounds.width = x - this.__bounds.x;
			if (y > this.__bounds.y + this.__bounds.height) this.__bounds.height = y - this.__bounds.y;
		}
		, set___dirty: function (value) {
			if (value && this.__owner != null) this.__owner.__setRenderDirty();
			return this.__dirty = value;
		}
		, __class__: openfl_display_Graphics
		, __properties__: { set___dirty: "set___dirty" }
	};
	var openfl_display_IGraphicsFill = function () { };
	$hxClasses["openfl.display.IGraphicsFill"] = openfl_display_IGraphicsFill;
	openfl_display_IGraphicsFill.__name__ = ["openfl", "display", "IGraphicsFill"];
	openfl_display_IGraphicsFill.prototype = {
		__class__: openfl_display_IGraphicsFill
	};
	var openfl_display_IGraphicsData = function () { };
	$hxClasses["openfl.display.IGraphicsData"] = openfl_display_IGraphicsData;
	openfl_display_IGraphicsData.__name__ = ["openfl", "display", "IGraphicsData"];
	openfl_display_IGraphicsData.prototype = {
		__class__: openfl_display_IGraphicsData
	};
	var openfl_display_GraphicsBitmapFill = function (bitmapData, matrix, repeat, smooth) {
		if (smooth == null) smooth = false;
		if (repeat == null) repeat = true;
		this.bitmapData = bitmapData;
		this.matrix = matrix;
		this.repeat = repeat;
		this.smooth = smooth;
		this.__graphicsDataType = openfl_display_GraphicsDataType.BITMAP;
		this.__graphicsFillType = openfl_display_GraphicsFillType.BITMAP_FILL;
	};
	$hxClasses["openfl.display.GraphicsBitmapFill"] = openfl_display_GraphicsBitmapFill;
	openfl_display_GraphicsBitmapFill.__name__ = ["openfl", "display", "GraphicsBitmapFill"];
	openfl_display_GraphicsBitmapFill.__interfaces__ = [openfl_display_IGraphicsFill, openfl_display_IGraphicsData];
	openfl_display_GraphicsBitmapFill.prototype = {
		__class__: openfl_display_GraphicsBitmapFill
	};
	var openfl_display_GraphicsEndFill = function () {
		this.__graphicsDataType = openfl_display_GraphicsDataType.END;
		this.__graphicsFillType = openfl_display_GraphicsFillType.END_FILL;
	};
	$hxClasses["openfl.display.GraphicsEndFill"] = openfl_display_GraphicsEndFill;
	openfl_display_GraphicsEndFill.__name__ = ["openfl", "display", "GraphicsEndFill"];
	openfl_display_GraphicsEndFill.__interfaces__ = [openfl_display_IGraphicsFill, openfl_display_IGraphicsData];
	openfl_display_GraphicsEndFill.prototype = {
		__class__: openfl_display_GraphicsEndFill
	};
	var openfl_display_GraphicsGradientFill = function (type, colors, alphas, ratios, matrix, spreadMethod, interpolationMethod, focalPointRatio) {
		if (focalPointRatio == null) focalPointRatio = 0;
		if (type == null) type = openfl_display_GradientType.LINEAR;
		if (spreadMethod == null) spreadMethod = openfl_display_SpreadMethod.PAD;
		if (interpolationMethod == null) interpolationMethod = openfl_display_InterpolationMethod.RGB;
		this.type = type;
		this.colors = colors;
		this.alphas = alphas;
		this.ratios = ratios;
		this.matrix = matrix;
		this.spreadMethod = spreadMethod;
		this.interpolationMethod = interpolationMethod;
		this.focalPointRatio = focalPointRatio;
		this.__graphicsDataType = openfl_display_GraphicsDataType.GRADIENT;
		this.__graphicsFillType = openfl_display_GraphicsFillType.GRADIENT_FILL;
	};
	$hxClasses["openfl.display.GraphicsGradientFill"] = openfl_display_GraphicsGradientFill;
	openfl_display_GraphicsGradientFill.__name__ = ["openfl", "display", "GraphicsGradientFill"];
	openfl_display_GraphicsGradientFill.__interfaces__ = [openfl_display_IGraphicsFill, openfl_display_IGraphicsData];
	openfl_display_GraphicsGradientFill.prototype = {
		__class__: openfl_display_GraphicsGradientFill
	};
	var openfl_display_IGraphicsPath = function () { };
	$hxClasses["openfl.display.IGraphicsPath"] = openfl_display_IGraphicsPath;
	openfl_display_IGraphicsPath.__name__ = ["openfl", "display", "IGraphicsPath"];
	var openfl_display_GraphicsPath = function (commands, data, winding) {
		if (winding == null) winding = openfl_display_GraphicsPathWinding.EVEN_ODD;
		this.commands = commands;
		this.data = data;
		this.winding = winding;
		this.__graphicsDataType = openfl_display_GraphicsDataType.PATH;
	};
	$hxClasses["openfl.display.GraphicsPath"] = openfl_display_GraphicsPath;
	openfl_display_GraphicsPath.__name__ = ["openfl", "display", "GraphicsPath"];
	openfl_display_GraphicsPath.__interfaces__ = [openfl_display_IGraphicsPath, openfl_display_IGraphicsData];
	openfl_display_GraphicsPath.prototype = {
		curveTo: function (controlX, controlY, anchorX, anchorY) {
			if (this.commands != null && this.data != null) {
				var this1 = this.commands;
				if (!this1.fixed) {
					this1.length++;
					if (this1.data.length < this1.length) {
						var data;
						var this2;
						this2 = new Array(this1.data.length + 10);
						data = this2;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, data, 0, this1.data.length);
						this1.data = data;
					}
					this1.data[this1.length - 1] = 3;
				}
				this1.length;
				var this3 = this.data;
				if (!this3.fixed) {
					this3.length++;
					if (this3.data.length < this3.length) {
						var data1;
						var this4;
						this4 = new Array(this3.data.length + 10);
						data1 = this4;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data, 0, data1, 0, this3.data.length);
						this3.data = data1;
					}
					this3.data[this3.length - 1] = anchorX;
				}
				this3.length;
				var this5 = this.data;
				if (!this5.fixed) {
					this5.length++;
					if (this5.data.length < this5.length) {
						var data2;
						var this6;
						this6 = new Array(this5.data.length + 10);
						data2 = this6;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data, 0, data2, 0, this5.data.length);
						this5.data = data2;
					}
					this5.data[this5.length - 1] = anchorY;
				}
				this5.length;
				var this7 = this.data;
				if (!this7.fixed) {
					this7.length++;
					if (this7.data.length < this7.length) {
						var data3;
						var this8;
						this8 = new Array(this7.data.length + 10);
						data3 = this8;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data, 0, data3, 0, this7.data.length);
						this7.data = data3;
					}
					this7.data[this7.length - 1] = controlX;
				}
				this7.length;
				var this9 = this.data;
				if (!this9.fixed) {
					this9.length++;
					if (this9.data.length < this9.length) {
						var data4;
						var this10;
						this10 = new Array(this9.data.length + 10);
						data4 = this10;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data, 0, data4, 0, this9.data.length);
						this9.data = data4;
					}
					this9.data[this9.length - 1] = controlY;
				}
				this9.length;
			}
		}
		, lineTo: function (x, y) {
			if (this.commands != null && this.data != null) {
				var this1 = this.commands;
				if (!this1.fixed) {
					this1.length++;
					if (this1.data.length < this1.length) {
						var data;
						var this2;
						this2 = new Array(this1.data.length + 10);
						data = this2;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, data, 0, this1.data.length);
						this1.data = data;
					}
					this1.data[this1.length - 1] = 2;
				}
				this1.length;
				var this3 = this.data;
				if (!this3.fixed) {
					this3.length++;
					if (this3.data.length < this3.length) {
						var data1;
						var this4;
						this4 = new Array(this3.data.length + 10);
						data1 = this4;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data, 0, data1, 0, this3.data.length);
						this3.data = data1;
					}
					this3.data[this3.length - 1] = x;
				}
				this3.length;
				var this5 = this.data;
				if (!this5.fixed) {
					this5.length++;
					if (this5.data.length < this5.length) {
						var data2;
						var this6;
						this6 = new Array(this5.data.length + 10);
						data2 = this6;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data, 0, data2, 0, this5.data.length);
						this5.data = data2;
					}
					this5.data[this5.length - 1] = y;
				}
				this5.length;
			}
		}
		, moveTo: function (x, y) {
			if (this.commands != null && this.data != null) {
				var this1 = this.commands;
				if (!this1.fixed) {
					this1.length++;
					if (this1.data.length < this1.length) {
						var data;
						var this2;
						this2 = new Array(this1.data.length + 10);
						data = this2;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, data, 0, this1.data.length);
						this1.data = data;
					}
					this1.data[this1.length - 1] = 1;
				}
				this1.length;
				var this3 = this.data;
				if (!this3.fixed) {
					this3.length++;
					if (this3.data.length < this3.length) {
						var data1;
						var this4;
						this4 = new Array(this3.data.length + 10);
						data1 = this4;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data, 0, data1, 0, this3.data.length);
						this3.data = data1;
					}
					this3.data[this3.length - 1] = x;
				}
				this3.length;
				var this5 = this.data;
				if (!this5.fixed) {
					this5.length++;
					if (this5.data.length < this5.length) {
						var data2;
						var this6;
						this6 = new Array(this5.data.length + 10);
						data2 = this6;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data, 0, data2, 0, this5.data.length);
						this5.data = data2;
					}
					this5.data[this5.length - 1] = y;
				}
				this5.length;
			}
		}
		, wideLineTo: function (x, y) {
			if (this.commands != null && this.data != null) {
				var this1 = this.commands;
				if (!this1.fixed) {
					this1.length++;
					if (this1.data.length < this1.length) {
						var data;
						var this2;
						this2 = new Array(this1.data.length + 10);
						data = this2;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, data, 0, this1.data.length);
						this1.data = data;
					}
					this1.data[this1.length - 1] = 2;
				}
				this1.length;
				var this3 = this.data;
				if (!this3.fixed) {
					this3.length++;
					if (this3.data.length < this3.length) {
						var data1;
						var this4;
						this4 = new Array(this3.data.length + 10);
						data1 = this4;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data, 0, data1, 0, this3.data.length);
						this3.data = data1;
					}
					this3.data[this3.length - 1] = x;
				}
				this3.length;
				var this5 = this.data;
				if (!this5.fixed) {
					this5.length++;
					if (this5.data.length < this5.length) {
						var data2;
						var this6;
						this6 = new Array(this5.data.length + 10);
						data2 = this6;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data, 0, data2, 0, this5.data.length);
						this5.data = data2;
					}
					this5.data[this5.length - 1] = y;
				}
				this5.length;
			}
		}
		, wideMoveTo: function (x, y) {
			if (this.commands != null && this.data != null) {
				var this1 = this.commands;
				if (!this1.fixed) {
					this1.length++;
					if (this1.data.length < this1.length) {
						var data;
						var this2;
						this2 = new Array(this1.data.length + 10);
						data = this2;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, data, 0, this1.data.length);
						this1.data = data;
					}
					this1.data[this1.length - 1] = 1;
				}
				this1.length;
				var this3 = this.data;
				if (!this3.fixed) {
					this3.length++;
					if (this3.data.length < this3.length) {
						var data1;
						var this4;
						this4 = new Array(this3.data.length + 10);
						data1 = this4;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data, 0, data1, 0, this3.data.length);
						this3.data = data1;
					}
					this3.data[this3.length - 1] = x;
				}
				this3.length;
				var this5 = this.data;
				if (!this5.fixed) {
					this5.length++;
					if (this5.data.length < this5.length) {
						var data2;
						var this6;
						this6 = new Array(this5.data.length + 10);
						data2 = this6;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data, 0, data2, 0, this5.data.length);
						this5.data = data2;
					}
					this5.data[this5.length - 1] = y;
				}
				this5.length;
			}
		}
		, __class__: openfl_display_GraphicsPath
	};
	var openfl_display_GraphicsPathCommand = function () { };
	$hxClasses["openfl.display.GraphicsPathCommand"] = openfl_display_GraphicsPathCommand;
	openfl_display_GraphicsPathCommand.__name__ = ["openfl", "display", "GraphicsPathCommand"];
	var openfl_display_GraphicsPathWinding = $hxClasses["openfl.display.GraphicsPathWinding"] = { __ename__: ["openfl", "display", "GraphicsPathWinding"], __constructs__: ["EVEN_ODD", "NON_ZERO"] };
	openfl_display_GraphicsPathWinding.EVEN_ODD = ["EVEN_ODD", 0];
	openfl_display_GraphicsPathWinding.EVEN_ODD.toString = $estr;
	openfl_display_GraphicsPathWinding.EVEN_ODD.__enum__ = openfl_display_GraphicsPathWinding;
	openfl_display_GraphicsPathWinding.NON_ZERO = ["NON_ZERO", 1];
	openfl_display_GraphicsPathWinding.NON_ZERO.toString = $estr;
	openfl_display_GraphicsPathWinding.NON_ZERO.__enum__ = openfl_display_GraphicsPathWinding;
	var openfl_display_GraphicsSolidFill = function (color, alpha) {
		if (alpha == null) alpha = 1;
		if (color == null) color = 0;
		this.alpha = alpha;
		this.color = color;
		this.__graphicsDataType = openfl_display_GraphicsDataType.SOLID;
		this.__graphicsFillType = openfl_display_GraphicsFillType.SOLID_FILL;
	};
	$hxClasses["openfl.display.GraphicsSolidFill"] = openfl_display_GraphicsSolidFill;
	openfl_display_GraphicsSolidFill.__name__ = ["openfl", "display", "GraphicsSolidFill"];
	openfl_display_GraphicsSolidFill.__interfaces__ = [openfl_display_IGraphicsFill, openfl_display_IGraphicsData];
	openfl_display_GraphicsSolidFill.prototype = {
		__class__: openfl_display_GraphicsSolidFill
	};
	var openfl_display_IGraphicsStroke = function () { };
	$hxClasses["openfl.display.IGraphicsStroke"] = openfl_display_IGraphicsStroke;
	openfl_display_IGraphicsStroke.__name__ = ["openfl", "display", "IGraphicsStroke"];
	var openfl_display_GraphicsStroke = function (thickness, pixelHinting, scaleMode, caps, joints, miterLimit, fill) {
		if (miterLimit == null) miterLimit = 3;
		if (pixelHinting == null) pixelHinting = false;
		if (thickness == null) thickness = 0.0;
		if (caps != null) this.caps = caps; else this.caps = openfl_display_CapsStyle.NONE;
		this.fill = fill;
		if (joints != null) this.joints = joints; else this.joints = openfl_display_JointStyle.ROUND;
		this.miterLimit = miterLimit;
		this.pixelHinting = pixelHinting;
		if (scaleMode != null) this.scaleMode = scaleMode; else this.scaleMode = openfl_display_LineScaleMode.NORMAL;
		this.thickness = thickness;
		this.__graphicsDataType = openfl_display_GraphicsDataType.STROKE;
	};
	$hxClasses["openfl.display.GraphicsStroke"] = openfl_display_GraphicsStroke;
	openfl_display_GraphicsStroke.__name__ = ["openfl", "display", "GraphicsStroke"];
	openfl_display_GraphicsStroke.__interfaces__ = [openfl_display_IGraphicsStroke, openfl_display_IGraphicsData];
	openfl_display_GraphicsStroke.prototype = {
		__class__: openfl_display_GraphicsStroke
	};
	var openfl_display_GraphicsDataType = $hxClasses["openfl.display.GraphicsDataType"] = { __ename__: ["openfl", "display", "GraphicsDataType"], __constructs__: ["STROKE", "SOLID", "GRADIENT", "PATH", "BITMAP", "END"] };
	openfl_display_GraphicsDataType.STROKE = ["STROKE", 0];
	openfl_display_GraphicsDataType.STROKE.toString = $estr;
	openfl_display_GraphicsDataType.STROKE.__enum__ = openfl_display_GraphicsDataType;
	openfl_display_GraphicsDataType.SOLID = ["SOLID", 1];
	openfl_display_GraphicsDataType.SOLID.toString = $estr;
	openfl_display_GraphicsDataType.SOLID.__enum__ = openfl_display_GraphicsDataType;
	openfl_display_GraphicsDataType.GRADIENT = ["GRADIENT", 2];
	openfl_display_GraphicsDataType.GRADIENT.toString = $estr;
	openfl_display_GraphicsDataType.GRADIENT.__enum__ = openfl_display_GraphicsDataType;
	openfl_display_GraphicsDataType.PATH = ["PATH", 3];
	openfl_display_GraphicsDataType.PATH.toString = $estr;
	openfl_display_GraphicsDataType.PATH.__enum__ = openfl_display_GraphicsDataType;
	openfl_display_GraphicsDataType.BITMAP = ["BITMAP", 4];
	openfl_display_GraphicsDataType.BITMAP.toString = $estr;
	openfl_display_GraphicsDataType.BITMAP.__enum__ = openfl_display_GraphicsDataType;
	openfl_display_GraphicsDataType.END = ["END", 5];
	openfl_display_GraphicsDataType.END.toString = $estr;
	openfl_display_GraphicsDataType.END.__enum__ = openfl_display_GraphicsDataType;
	var openfl_display_GraphicsFillType = $hxClasses["openfl.display.GraphicsFillType"] = { __ename__: ["openfl", "display", "GraphicsFillType"], __constructs__: ["SOLID_FILL", "GRADIENT_FILL", "BITMAP_FILL", "END_FILL"] };
	openfl_display_GraphicsFillType.SOLID_FILL = ["SOLID_FILL", 0];
	openfl_display_GraphicsFillType.SOLID_FILL.toString = $estr;
	openfl_display_GraphicsFillType.SOLID_FILL.__enum__ = openfl_display_GraphicsFillType;
	openfl_display_GraphicsFillType.GRADIENT_FILL = ["GRADIENT_FILL", 1];
	openfl_display_GraphicsFillType.GRADIENT_FILL.toString = $estr;
	openfl_display_GraphicsFillType.GRADIENT_FILL.__enum__ = openfl_display_GraphicsFillType;
	openfl_display_GraphicsFillType.BITMAP_FILL = ["BITMAP_FILL", 2];
	openfl_display_GraphicsFillType.BITMAP_FILL.toString = $estr;
	openfl_display_GraphicsFillType.BITMAP_FILL.__enum__ = openfl_display_GraphicsFillType;
	openfl_display_GraphicsFillType.END_FILL = ["END_FILL", 3];
	openfl_display_GraphicsFillType.END_FILL.toString = $estr;
	openfl_display_GraphicsFillType.END_FILL.__enum__ = openfl_display_GraphicsFillType;
	var openfl_display_InterpolationMethod = $hxClasses["openfl.display.InterpolationMethod"] = { __ename__: ["openfl", "display", "InterpolationMethod"], __constructs__: ["RGB", "LINEAR_RGB"] };
	openfl_display_InterpolationMethod.RGB = ["RGB", 0];
	openfl_display_InterpolationMethod.RGB.toString = $estr;
	openfl_display_InterpolationMethod.RGB.__enum__ = openfl_display_InterpolationMethod;
	openfl_display_InterpolationMethod.LINEAR_RGB = ["LINEAR_RGB", 1];
	openfl_display_InterpolationMethod.LINEAR_RGB.toString = $estr;
	openfl_display_InterpolationMethod.LINEAR_RGB.__enum__ = openfl_display_InterpolationMethod;
	var openfl_display_JPEGEncoderOptions = function (quality) {
		if (quality == null) quality = 80;
		this.quality = quality;
	};
	$hxClasses["openfl.display.JPEGEncoderOptions"] = openfl_display_JPEGEncoderOptions;
	openfl_display_JPEGEncoderOptions.__name__ = ["openfl", "display", "JPEGEncoderOptions"];
	openfl_display_JPEGEncoderOptions.prototype = {
		__class__: openfl_display_JPEGEncoderOptions
	};
	var openfl_display_JointStyle = $hxClasses["openfl.display.JointStyle"] = { __ename__: ["openfl", "display", "JointStyle"], __constructs__: ["MITER", "ROUND", "BEVEL"] };
	openfl_display_JointStyle.MITER = ["MITER", 0];
	openfl_display_JointStyle.MITER.toString = $estr;
	openfl_display_JointStyle.MITER.__enum__ = openfl_display_JointStyle;
	openfl_display_JointStyle.ROUND = ["ROUND", 1];
	openfl_display_JointStyle.ROUND.toString = $estr;
	openfl_display_JointStyle.ROUND.__enum__ = openfl_display_JointStyle;
	openfl_display_JointStyle.BEVEL = ["BEVEL", 2];
	openfl_display_JointStyle.BEVEL.toString = $estr;
	openfl_display_JointStyle.BEVEL.__enum__ = openfl_display_JointStyle;
	var openfl_display_LineScaleMode = $hxClasses["openfl.display.LineScaleMode"] = { __ename__: ["openfl", "display", "LineScaleMode"], __constructs__: ["HORIZONTAL", "NONE", "NORMAL", "VERTICAL"] };
	openfl_display_LineScaleMode.HORIZONTAL = ["HORIZONTAL", 0];
	openfl_display_LineScaleMode.HORIZONTAL.toString = $estr;
	openfl_display_LineScaleMode.HORIZONTAL.__enum__ = openfl_display_LineScaleMode;
	openfl_display_LineScaleMode.NONE = ["NONE", 1];
	openfl_display_LineScaleMode.NONE.toString = $estr;
	openfl_display_LineScaleMode.NONE.__enum__ = openfl_display_LineScaleMode;
	openfl_display_LineScaleMode.NORMAL = ["NORMAL", 2];
	openfl_display_LineScaleMode.NORMAL.toString = $estr;
	openfl_display_LineScaleMode.NORMAL.__enum__ = openfl_display_LineScaleMode;
	openfl_display_LineScaleMode.VERTICAL = ["VERTICAL", 3];
	openfl_display_LineScaleMode.VERTICAL.toString = $estr;
	openfl_display_LineScaleMode.VERTICAL.__enum__ = openfl_display_LineScaleMode;
	var openfl_display_Loader = function () {
		openfl_display_Sprite.call(this);
		this.contentLoaderInfo = openfl_display_LoaderInfo.create(this);
	};
	$hxClasses["openfl.display.Loader"] = openfl_display_Loader;
	openfl_display_Loader.__name__ = ["openfl", "display", "Loader"];
	openfl_display_Loader.__super__ = openfl_display_Sprite;
	openfl_display_Loader.prototype = $extend(openfl_display_Sprite.prototype, {
		close: function () {
			openfl_Lib.notImplemented("Loader.close");
		}
		, load: function (request, context) {
			var extension = "";
			var parts = request.url.split(".");
			if (parts.length > 0) extension = parts[parts.length - 1].toLowerCase();
			if (extension.indexOf("?") != -1) extension = extension.split("?")[0];
			var transparent = true;
			this.contentLoaderInfo.url = request.url;
			if (request.contentType == null && request.contentType != "") switch (extension) {
				case "swf":
					this.contentLoaderInfo.contentType = "application/x-shockwave-flash";
					break;
				case "jpg": case "jpeg":
					transparent = false;
					this.contentLoaderInfo.contentType = "image/jpeg";
					break;
				case "png":
					this.contentLoaderInfo.contentType = "image/png";
					break;
				case "gif":
					this.contentLoaderInfo.contentType = "image/gif";
					break;
				default:
					this.contentLoaderInfo.contentType = "application/x-www-form-urlencoded";
			} else this.contentLoaderInfo.contentType = request.contentType;
			var worker = new lime_system_BackgroundWorker();
			worker.doWork.add(function (_) {
				var path = request.url;
				openfl_display_BitmapData.fromFile(path, function (bitmapData) {
					worker.sendComplete(bitmapData);
				}, function () {
					worker.sendError(openfl_events_IOErrorEvent.IO_ERROR);
				});
			});
			worker.onError.add($bind(this, this.BitmapData_onError));
			worker.onComplete.add($bind(this, this.BitmapData_onLoad));
			worker.run();
		}
		, loadBytes: function (buffer) {
			var worker = new lime_system_BackgroundWorker();
			worker.doWork.add(function (_) {
				openfl_display_BitmapData.fromBytes(buffer, null, function (bitmapData) {
					worker.sendComplete(bitmapData);
				});
			});
			worker.onComplete.add($bind(this, this.BitmapData_onLoad));
			worker.run();
		}
		, unload: function () {
			if (this.get_numChildren() > 0) {
				while (this.get_numChildren() > 0) this.removeChildAt(0);
				this.content = null;
				this.contentLoaderInfo.url = null;
				this.contentLoaderInfo.contentType = null;
				this.contentLoaderInfo.content = null;
				this.contentLoaderInfo.bytesLoaded = 0;
				this.contentLoaderInfo.bytesTotal = 0;
				this.contentLoaderInfo.width = 0;
				this.contentLoaderInfo.height = 0;
				var event = new openfl_events_Event(openfl_events_Event.UNLOAD);
				event.currentTarget = this;
				this.__dispatchEvent(event);
			}
		}
		, unloadAndStop: function (gc) {
			if (gc == null) gc = true;
			openfl_Lib.notImplemented("Loader.unloadAndStop");
		}
		, BitmapData_onLoad: function (bitmapData) {
			this.contentLoaderInfo.content = new openfl_display_Bitmap(bitmapData);
			this.content = this.contentLoaderInfo.content;
			this.addChild(this.contentLoaderInfo.content);
			var event = new openfl_events_Event(openfl_events_Event.COMPLETE);
			event.target = this.contentLoaderInfo;
			event.currentTarget = this.contentLoaderInfo;
			this.contentLoaderInfo.dispatchEvent(event);
		}
		, BitmapData_onError: function (_) {
			var event = new openfl_events_IOErrorEvent(openfl_events_IOErrorEvent.IO_ERROR);
			event.target = this.contentLoaderInfo;
			event.currentTarget = this.contentLoaderInfo;
			this.contentLoaderInfo.dispatchEvent(event);
		}
		, __class__: openfl_display_Loader
	});
	var openfl_display_OpenGLView = function () {
		openfl_display_DirectRenderer.call(this, "OpenGLView");
		if (!this.__added) {
			this.__added = true;
			haxe_Log.trace("Warning: OpenGLView is not available in HTML5 canvas rendering mode", { fileName: "OpenGLView.hx", lineNumber: 66, className: "openfl.display.OpenGLView", methodName: "new" });
			haxe_Log.trace("Please compile your project using -Ddom or -Dwebgl (beta) to enable", { fileName: "OpenGLView.hx", lineNumber: 67, className: "openfl.display.OpenGLView", methodName: "new" });
		}
	};
	$hxClasses["openfl.display.OpenGLView"] = openfl_display_OpenGLView;
	openfl_display_OpenGLView.__name__ = ["openfl", "display", "OpenGLView"];
	openfl_display_OpenGLView.__properties__ = { get_isSupported: "get_isSupported" }
	openfl_display_OpenGLView.isSupported = null;
	openfl_display_OpenGLView.get_isSupported = function () {
		return false;
	};
	openfl_display_OpenGLView.__super__ = openfl_display_DirectRenderer;
	openfl_display_OpenGLView.prototype = $extend(openfl_display_DirectRenderer.prototype, {
		__renderCanvas: function (renderSession) {
		}
		, __renderDOM: function (renderSession) {
			if (this.stage != null && this.__worldVisible && this.__renderable) {
				if (!this.__added) {
					renderSession.element.appendChild(this.__canvas);
					this.__added = true;
					openfl__$internal_renderer_dom_DOMRenderer.initializeElement(this, this.__canvas, renderSession);
				}
				if (this.__context != null) {
					var rect = null;
					if (this.get_scrollRect() == null) rect = new openfl_geom_Rectangle(0, 0, this.stage.stageWidth, this.stage.stageHeight); else rect = new openfl_geom_Rectangle(this.get_x() + this.get_scrollRect().x, this.get_y() + this.get_scrollRect().y, this.get_scrollRect().width, this.get_scrollRect().height);
					if (this.__render != null) this.__render(rect);
				}
			} else if (this.__added) {
				renderSession.element.removeChild(this.__canvas);
				this.__added = false;
			}
		}
		, __renderGL: function (renderSession) {
			if (this.stage != null && this.__renderable) {
				var rect = null;
				if (this.get_scrollRect() == null) rect = new openfl_geom_Rectangle(0, 0, this.stage.stageWidth, this.stage.stageHeight); else rect = new openfl_geom_Rectangle(this.get_x() + this.get_scrollRect().x, this.get_y() + this.get_scrollRect().y, this.get_scrollRect().width, this.get_scrollRect().height);
				if (this.__render != null) this.__render(rect);
				renderSession.shaderManager.setShader(null);
				renderSession.blendModeManager.setBlendMode(null);
			}
		}
		, __class__: openfl_display_OpenGLView
	});
	var openfl_display_PNGEncoderOptions = function (fastCompression) {
		if (fastCompression == null) fastCompression = false;
		this.fastCompression = fastCompression;
	};
	$hxClasses["openfl.display.PNGEncoderOptions"] = openfl_display_PNGEncoderOptions;
	openfl_display_PNGEncoderOptions.__name__ = ["openfl", "display", "PNGEncoderOptions"];
	openfl_display_PNGEncoderOptions.prototype = {
		__class__: openfl_display_PNGEncoderOptions
	};
	var openfl_display_PixelSnapping = $hxClasses["openfl.display.PixelSnapping"] = { __ename__: ["openfl", "display", "PixelSnapping"], __constructs__: ["NEVER", "AUTO", "ALWAYS"] };
	openfl_display_PixelSnapping.NEVER = ["NEVER", 0];
	openfl_display_PixelSnapping.NEVER.toString = $estr;
	openfl_display_PixelSnapping.NEVER.__enum__ = openfl_display_PixelSnapping;
	openfl_display_PixelSnapping.AUTO = ["AUTO", 1];
	openfl_display_PixelSnapping.AUTO.toString = $estr;
	openfl_display_PixelSnapping.AUTO.__enum__ = openfl_display_PixelSnapping;
	openfl_display_PixelSnapping.ALWAYS = ["ALWAYS", 2];
	openfl_display_PixelSnapping.ALWAYS.toString = $estr;
	openfl_display_PixelSnapping.ALWAYS.__enum__ = openfl_display_PixelSnapping;
	var openfl_display_Preloader = function (display) {
		lime_app_Preloader.call(this);
		if (display != null) {
			this.display = display;
			openfl_Lib.current.addChild(display);
			if (js_Boot.__instanceof(display, NMEPreloader)) (js_Boot.__cast(display, NMEPreloader)).onInit();
		}
	};
	$hxClasses["openfl.display.Preloader"] = openfl_display_Preloader;
	openfl_display_Preloader.__name__ = ["openfl", "display", "Preloader"];
	openfl_display_Preloader.__super__ = lime_app_Preloader;
	openfl_display_Preloader.prototype = $extend(lime_app_Preloader.prototype, {
		load: function (urls, types) {
			var sounds = [];
			var url = null;
			var _g1 = 0;
			var _g = urls.length;
			while (_g1 < _g) {
				var i = _g1++;
				url = urls[i];
				var _g2 = types[i];
				switch (_g2) {
					case "MUSIC": case "SOUND":
						var sound = haxe_io_Path.withoutExtension(url);
						if (!HxOverrides.remove(sounds, sound)) this.total++;
						sounds.push(sound);
						break;
					default:
				}
			}
			var _g3 = 0;
			while (_g3 < sounds.length) {
				var soundName = sounds[_g3];
				++_g3;
				var sound1 = new openfl_media_Sound();
				sound1.addEventListener(openfl_events_Event.COMPLETE, $bind(this, this.sound_onComplete));
				sound1.addEventListener(openfl_events_IOErrorEvent.IO_ERROR, $bind(this, this.sound_onIOError));
				sound1.load(new openfl_net_URLRequest(soundName + ".ogg"));
			}
			lime_app_Preloader.prototype.load.call(this, urls, types);
		}
		, start: function () {
			if (this.display != null && js_Boot.__instanceof(this.display, NMEPreloader)) {
				this.display.addEventListener(openfl_events_Event.COMPLETE, $bind(this, this.display_onComplete));
				(js_Boot.__cast(this.display, NMEPreloader)).onLoaded();
			} else lime_app_Preloader.prototype.start.call(this);
		}
		, update: function (loaded, total) {
			if (this.display != null && js_Boot.__instanceof(this.display, NMEPreloader)) (js_Boot.__cast(this.display, NMEPreloader)).onUpdate(loaded, total);
		}
		, display_onComplete: function (event) {
			this.display.removeEventListener(openfl_events_Event.COMPLETE, $bind(this, this.display_onComplete));
			openfl_Lib.current.removeChild(this.display);
			openfl_Lib.current.stage.set_focus(null);
			this.display = null;
			lime_app_Preloader.prototype.start.call(this);
		}
		, sound_onComplete: function (event) {
			this.loaded++;
			this.onProgress.dispatch(this.loaded, this.total);
			if (this.loaded == this.total) this.start();
		}
		, sound_onIOError: function (event) {
			this.loaded++;
			this.onProgress.dispatch(this.loaded, this.total);
			if (this.loaded == this.total) this.start();
		}
		, __class__: openfl_display_Preloader
	});
	var openfl_display_Shader = function (precision) {
		if (precision == null) precision = 1;
		this.__dirty = true;
		this.repeatY = 33071;
		this.repeatX = 33071;
		this.precision = 1;
		this.precision = precision;
		this.data = new haxe_ds_StringMap();
		var value = new openfl_display_GLShaderParameter("vec2");
		this.data.set(openfl_display_Shader.uObjectSize, value);
		var value1 = new openfl_display_GLShaderParameter("vec2");
		this.data.set(openfl_display_Shader.uTextureSize, value1);
	};
	$hxClasses["openfl.display.Shader"] = openfl_display_Shader;
	openfl_display_Shader.__name__ = ["openfl", "display", "Shader"];
	openfl_display_Shader.prototype = {
		__init: function (gl) {
			var dirty = this.__dirty;
			if (dirty) {
				if (this.__shader != null) this.__shader.destroy();
				this.__shader = new openfl__$internal_renderer_opengl_shaders2_Shader(gl);
				if (this.__vertexCode != null) this.__shader.vertexString = this.__vertexCode; else this.__shader.vertexString = openfl__$internal_renderer_opengl_shaders2_DefaultShader.VERTEX_SRC.join("\n");
				this.__shader.fragmentString = this.__fragmentCode;
				this.__dirty = false;
			}
			this.__shader.init(dirty);
		}
		, __buildFragmentCode: function (code) {
			var output = [];
			output.push("#ifdef GL_ES");
			output.push((function ($this) {
				var $r;
				var _g = $this.precision;
				$r = (function ($this) {
					var $r;
					switch (_g) {
						case 2:
							$r = "precision highp float;";
							break;
						case 1:
							$r = "precision mediump float;";
							break;
						default:
							$r = "precision lowp float;";
					}
					return $r;
				}($this));
				return $r;
			}(this)));
			output.push("#endif");
			output = output.concat(openfl_display_Shader.fragmentHeader);
			output.push(code);
			this.__fragmentCode = output.join("\n");
		}
		, __buildVertexCode: function (code) {
			var output = [];
			output.push("#ifdef GL_ES");
			output.push((function ($this) {
				var $r;
				var _g = $this.precision;
				$r = (function ($this) {
					var $r;
					switch (_g) {
						case 2:
							$r = "precision highp float;";
							break;
						case 1:
							$r = "precision mediump float;";
							break;
						default:
							$r = "precision lowp float;";
					}
					return $r;
				}($this));
				return $r;
			}(this)));
			output.push("#endif");
			output = output.concat(openfl_display_Shader.vertexHeader);
			output.push(code);
			this.__vertexCode = output.join("\n");
		}
		, __class__: openfl_display_Shader
	};
	var openfl_display_GLShaderParameter = function (type, arraySize) {
		this.internalType = 0;
		this.transpose = false;
		this.repeatY = 33071;
		this.repeatX = 33071;
		this.smooth = false;
		this.arraySize = 0;
		this.size = 0;
		this.type = type;
		if (arraySize == null) this.arraySize = 0; else this.arraySize = arraySize;
		this.__init();
	};
	$hxClasses["openfl.display.GLShaderParameter"] = openfl_display_GLShaderParameter;
	openfl_display_GLShaderParameter.__name__ = ["openfl", "display", "GLShaderParameter"];
	openfl_display_GLShaderParameter.prototype = {
		__init: function () {
			var _g = this.type;
			var v = _g;
			var m = _g;
			switch (_g) {
				case "bool":
					this.internalType = 1;
					this.size = 1;
					if (this.internalType == 4) throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
					this.value = [0.0];
					break;
				case "int":
					this.internalType = 1;
					this.size = 1;
					if (this.internalType == 4) throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
					this.value = [0.0];
					break;
				case "float":
					this.internalType = 2;
					this.size = 1;
					if (this.internalType == 4) throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
					this.value = [0.0];
					break;
				case "sampler2D":
					if (v.indexOf("vec") > -1) {
						if (StringTools.startsWith(this.type, "b") || StringTools.startsWith(this.type, "i")) this.internalType = 1; else this.internalType = 2;
						var s = Std.parseInt(this.type.charAt(this.type.length - 1));
						this.size = s;
						this.set_value((function ($this) {
							var $r;
							var _g1 = [];
							{
								var _g3 = 0;
								var _g2 = $this.size;
								while (_g3 < _g2) {
									var i = _g3++;
									_g1.push(0.0);
								}
							}
							$r = _g1;
							return $r;
						}(this)));
					} else if (m.indexOf("mat") > -1) {
						this.internalType = 3;
						var s1 = Std.parseInt(this.type.charAt(this.type.length - 1));
						this.size = s1;
						if (this.internalType == 4) throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
						var _g11 = this.size;
						switch (_g11) {
							case 2:
								this.value = [1, 0, 1, 0];
								break;
							case 3:
								this.value = [1, 0, 0, 0, 1, 0, 0, 0, 1];
								break;
							case 4:
								this.value = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
								break;
							default:
								this.value = [0];
						}
					} else {
						this.internalType = 4;
						this.size = 0;
					}
					break;
				case "samplerCube":
					if (v.indexOf("vec") > -1) {
						if (StringTools.startsWith(this.type, "b") || StringTools.startsWith(this.type, "i")) this.internalType = 1; else this.internalType = 2;
						var s2 = Std.parseInt(this.type.charAt(this.type.length - 1));
						this.size = s2;
						this.set_value((function ($this) {
							var $r;
							var _g12 = [];
							{
								var _g31 = 0;
								var _g21 = $this.size;
								while (_g31 < _g21) {
									var i1 = _g31++;
									_g12.push(0.0);
								}
							}
							$r = _g12;
							return $r;
						}(this)));
					} else if (m.indexOf("mat") > -1) {
						this.internalType = 3;
						var s3 = Std.parseInt(this.type.charAt(this.type.length - 1));
						this.size = s3;
						if (this.internalType == 4) throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
						var _g13 = this.size;
						switch (_g13) {
							case 2:
								this.value = [1, 0, 1, 0];
								break;
							case 3:
								this.value = [1, 0, 0, 0, 1, 0, 0, 0, 1];
								break;
							case 4:
								this.value = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
								break;
							default:
								this.value = [0];
						}
					} else {
						this.internalType = 4;
						this.size = 0;
					}
					break;
				default:
					if (v.indexOf("vec") > -1) {
						if (StringTools.startsWith(this.type, "b") || StringTools.startsWith(this.type, "i")) this.internalType = 1; else this.internalType = 2;
						var s4 = Std.parseInt(this.type.charAt(this.type.length - 1));
						this.size = s4;
						this.set_value((function ($this) {
							var $r;
							var _g14 = [];
							{
								var _g32 = 0;
								var _g22 = $this.size;
								while (_g32 < _g22) {
									var i2 = _g32++;
									_g14.push(0.0);
								}
							}
							$r = _g14;
							return $r;
						}(this)));
					} else if (m.indexOf("mat") > -1) {
						this.internalType = 3;
						var s5 = Std.parseInt(this.type.charAt(this.type.length - 1));
						this.size = s5;
						if (this.internalType == 4) throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
						var _g15 = this.size;
						switch (_g15) {
							case 2:
								this.value = [1, 0, 1, 0];
								break;
							case 3:
								this.value = [1, 0, 0, 0, 1, 0, 0, 0, 1];
								break;
							case 4:
								this.value = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
								break;
							default:
								this.value = [0];
						}
					} else {
						this.internalType = 0;
						haxe_Log.trace("Can't initialize value for type " + this.type, { fileName: "Shader.hx", lineNumber: 307, className: "openfl.display.GLShaderParameter", methodName: "__init" });
					}
			}
		}
		, set_value: function (v) {
			if (this.internalType == 4) throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
			return this.value = v;
		}
		, set_bitmap: function (v) {
			if (this.internalType != 4) throw new js__$Boot_HaxeError("This parameter doesn't accept a bitmap, use value instead");
			return this.bitmap = v;
		}
		, __class__: openfl_display_GLShaderParameter
		, __properties__: { set_bitmap: "set_bitmap", set_value: "set_value" }
	};
	var openfl_display_Shape = function () {
		openfl_display_DisplayObject.call(this);
	};
	$hxClasses["openfl.display.Shape"] = openfl_display_Shape;
	openfl_display_Shape.__name__ = ["openfl", "display", "Shape"];
	openfl_display_Shape.__super__ = openfl_display_DisplayObject;
	openfl_display_Shape.prototype = $extend(openfl_display_DisplayObject.prototype, {
		get_graphics: function () {
			if (this.__graphics == null) {
				this.__graphics = new openfl_display_Graphics();
				this.__graphics.__owner = this;
			}
			return this.__graphics;
		}
		, __class__: openfl_display_Shape
		, __properties__: $extend(openfl_display_DisplayObject.prototype.__properties__, { get_graphics: "get_graphics" })
	});
	var openfl_display_SpreadMethod = $hxClasses["openfl.display.SpreadMethod"] = { __ename__: ["openfl", "display", "SpreadMethod"], __constructs__: ["REPEAT", "REFLECT", "PAD"] };
	openfl_display_SpreadMethod.REPEAT = ["REPEAT", 0];
	openfl_display_SpreadMethod.REPEAT.toString = $estr;
	openfl_display_SpreadMethod.REPEAT.__enum__ = openfl_display_SpreadMethod;
	openfl_display_SpreadMethod.REFLECT = ["REFLECT", 1];
	openfl_display_SpreadMethod.REFLECT.toString = $estr;
	openfl_display_SpreadMethod.REFLECT.__enum__ = openfl_display_SpreadMethod;
	openfl_display_SpreadMethod.PAD = ["PAD", 2];
	openfl_display_SpreadMethod.PAD.toString = $estr;
	openfl_display_SpreadMethod.PAD.__enum__ = openfl_display_SpreadMethod;
	var openfl_display_Stage = function (window, color) {
		openfl_display_DisplayObjectContainer.call(this);
		this.application = window.application;
		this.window = window;
		if (color == null) {
			this.__transparent = true;
			this.set_color(0);
		} else this.set_color(color);
		this.set_name(null);
		this.__deltaTime = 0;
		this.__displayState = openfl_display_StageDisplayState.NORMAL;
		this.__mouseX = 0;
		this.__mouseY = 0;
		this.__lastClickTime = 0;
		this.stageWidth = window.__width * window.__scale | 0;
		this.stageHeight = window.__height * window.__scale | 0;
		this.stage = this;
		this.align = openfl_display_StageAlign.TOP_LEFT;
		this.allowsFullScreen = false;
		this.allowsFullScreenInteractive = false;
		this.quality = openfl_display_StageQuality.HIGH;
		this.scaleMode = openfl_display_StageScaleMode.NO_SCALE;
		this.stageFocusRect = true;
		this.__macKeyboard = /AppleWebKit/.test(navigator.userAgent) && /Mobile\/\w+/.test(navigator.userAgent) || /Mac/.test(navigator.platform);
		this.__clearBeforeRender = true;
		this.__stack = [];
		this.__mouseOutStack = [];
		var this1;
		this1 = new openfl_VectorData();
		var this2;
		this2 = new Array(0);
		this1.data = this2;
		this1.length = 0;
		this1.fixed = false;
		this.stage3Ds = this1;
		var this3 = this.stage3Ds;
		var x = new openfl_display_Stage3D();
		if (!this3.fixed) {
			this3.length++;
			if (this3.data.length < this3.length) {
				var data;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data = this4;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data, 0, data, 0, this3.data.length);
				this3.data = data;
			}
			this3.data[this3.length - 1] = x;
		}
		this3.length;
		if (openfl_Lib.current.stage == null) this.stage.addChild(openfl_Lib.current);
	};
	$hxClasses["openfl.display.Stage"] = openfl_display_Stage;
	openfl_display_Stage.__name__ = ["openfl", "display", "Stage"];
	openfl_display_Stage.__interfaces__ = [lime_app_IModule];
	openfl_display_Stage.__super__ = openfl_display_DisplayObjectContainer;
	openfl_display_Stage.prototype = $extend(openfl_display_DisplayObjectContainer.prototype, {
		globalToLocal: function (pos) {
			return pos.clone();
		}
		, invalidate: function () {
			this.__invalidated = true;
		}
		, localToGlobal: function (pos) {
			return pos.clone();
		}
		, onGamepadAxisMove: function (gamepad, axis, value) {
			openfl_ui_GameInput.__onGamepadAxisMove(gamepad, axis, value);
		}
		, onGamepadButtonDown: function (gamepad, button) {
			openfl_ui_GameInput.__onGamepadButtonDown(gamepad, button);
		}
		, onGamepadButtonUp: function (gamepad, button) {
			openfl_ui_GameInput.__onGamepadButtonUp(gamepad, button);
		}
		, onGamepadConnect: function (gamepad) {
			openfl_ui_GameInput.__onGamepadConnect(gamepad);
		}
		, onGamepadDisconnect: function (gamepad) {
			openfl_ui_GameInput.__onGamepadDisconnect(gamepad);
		}
		, onJoystickAxisMove: function (joystick, axis, value) {
		}
		, onJoystickButtonDown: function (joystick, button) {
		}
		, onJoystickButtonUp: function (joystick, button) {
		}
		, onJoystickConnect: function (joystick) {
		}
		, onJoystickDisconnect: function (joystick) {
		}
		, onJoystickHatMove: function (joystick, hat, position) {
		}
		, onJoystickTrackballMove: function (joystick, trackball, value) {
		}
		, onKeyDown: function (window, keyCode, modifier) {
			if (this.window == null || this.window != window) return;
			this.__onKey(openfl_events_KeyboardEvent.KEY_DOWN, keyCode, modifier);
		}
		, onKeyUp: function (window, keyCode, modifier) {
			if (this.window == null || this.window != window) return;
			this.__onKey(openfl_events_KeyboardEvent.KEY_UP, keyCode, modifier);
		}
		, onModuleExit: function (code) {
			if (this.window != null) {
				var event = new openfl_events_Event(openfl_events_Event.DEACTIVATE);
				this.__broadcast(event, true);
			}
		}
		, onMouseDown: function (window, x, y, button) {
			if (this.window == null || this.window != window) return;
			var type;
			switch (button) {
				case 1:
					type = openfl_events_MouseEvent.MIDDLE_MOUSE_DOWN;
					break;
				case 2:
					type = openfl_events_MouseEvent.RIGHT_MOUSE_DOWN;
					break;
				default:
					type = openfl_events_MouseEvent.MOUSE_DOWN;
			}
			this.__onMouse(type, x * window.__scale | 0, y * window.__scale | 0, button);
		}
		, onMouseMove: function (window, x, y) {
			if (this.window == null || this.window != window) return;
			this.__onMouse(openfl_events_MouseEvent.MOUSE_MOVE, x * window.__scale | 0, y * window.__scale | 0, 0);
		}
		, onMouseMoveRelative: function (window, x, y) {
		}
		, onMouseUp: function (window, x, y, button) {
			if (this.window == null || this.window != window) return;
			var type;
			switch (button) {
				case 1:
					type = openfl_events_MouseEvent.MIDDLE_MOUSE_UP;
					break;
				case 2:
					type = openfl_events_MouseEvent.RIGHT_MOUSE_UP;
					break;
				default:
					type = openfl_events_MouseEvent.MOUSE_UP;
			}
			this.__onMouse(type, x * window.__scale | 0, y * window.__scale | 0, button);
		}
		, onMouseWheel: function (window, deltaX, deltaY) {
			if (this.window == null || this.window != window) return;
			this.__onMouseWheel(deltaX * window.__scale | 0, deltaY * window.__scale | 0);
		}
		, onPreloadComplete: function () {
		}
		, onPreloadProgress: function (loaded, total) {
		}
		, onRenderContextLost: function (renderer) {
		}
		, onRenderContextRestored: function (renderer, context) {
		}
		, onTextEdit: function (window, text, start, length) {
		}
		, onTextInput: function (window, text) {
			if (this.window == null || this.window != window) return;
			var stack = [];
			if (this.__focus == null) this.__getInteractive(stack); else this.__focus.__getInteractive(stack);
			var event = new openfl_events_TextEvent(openfl_events_TextEvent.TEXT_INPUT, true, false, text);
			if (stack.length > 0) {
				stack.reverse();
				this.__fireEvent(event, stack);
			} else this.__broadcast(event, true);
		}
		, onTouchMove: function (touch) {
			this.__onTouch("touchMove", touch);
		}
		, onTouchEnd: function (touch) {
			this.__onTouch("touchEnd", touch);
		}
		, onTouchStart: function (touch) {
			this.__onTouch("touchBegin", touch);
		}
		, onWindowActivate: function (window) {
			if (this.window == null || this.window != window) return;
			var event = new openfl_events_Event(openfl_events_Event.ACTIVATE);
			this.__broadcast(event, true);
		}
		, onWindowClose: function (window) {
			if (this.window == window) this.window = null;
		}
		, onWindowCreate: function (window) {
			if (this.window == null || this.window != window) return;
			if (window.renderer != null) {
				var _g = window.renderer.context;
				switch (_g[1]) {
					case 0:
						var gl = _g[2];
						this.__renderer = new openfl__$internal_renderer_opengl_GLRenderer(this.stageWidth, this.stageHeight, gl);
						break;
					case 1:
						var context = _g[2];
						this.__renderer = new openfl__$internal_renderer_canvas_CanvasRenderer(this.stageWidth, this.stageHeight, context);
						break;
					case 2:
						var element = _g[2];
						this.__renderer = new openfl__$internal_renderer_dom_DOMRenderer(this.stageWidth, this.stageHeight, element);
						break;
					case 4:
						var cairo = _g[2];
						this.__renderer = new openfl__$internal_renderer_cairo_CairoRenderer(this.stageWidth, this.stageHeight, cairo);
						break;
					case 5:
						var ctx = _g[2];
						this.__renderer = new openfl__$internal_renderer_console_ConsoleRenderer(this.stageWidth, this.stageHeight, ctx);
						break;
					default:
				}
			}
		}
		, onWindowDeactivate: function (window) {
			if (this.window == null || this.window != window) return;
			var event = new openfl_events_Event(openfl_events_Event.DEACTIVATE);
			this.__broadcast(event, true);
		}
		, onWindowEnter: function (window) {
		}
		, onWindowFocusIn: function (window) {
			if (this.window == null || this.window != window) return;
			var event = new openfl_events_FocusEvent(openfl_events_FocusEvent.FOCUS_IN, true, false, null, false, 0);
			this.__broadcast(event, true);
		}
		, onWindowFocusOut: function (window) {
			if (this.window == null || this.window != window) return;
			var event = new openfl_events_FocusEvent(openfl_events_FocusEvent.FOCUS_OUT, true, false, null, false, 0);
			this.__broadcast(event, true);
		}
		, onWindowFullscreen: function (window) {
		}
		, onWindowLeave: function (window) {
			if (this.window == null || this.window != window) return;
			this.__dispatchEvent(new openfl_events_Event(openfl_events_Event.MOUSE_LEAVE));
		}
		, onWindowMinimize: function (window) {
		}
		, onWindowMove: function (window, x, y) {
		}
		, onWindowResize: function (window, width, height) {
			if (this.window == null || this.window != window) return;
			this.stageWidth = width * window.__scale | 0;
			this.stageHeight = height * window.__scale | 0;
			if (this.__renderer != null) this.__renderer.resize(this.stageWidth, this.stageHeight);
			var event = new openfl_events_Event(openfl_events_Event.RESIZE);
			this.__broadcast(event, false);
		}
		, onWindowRestore: function (window) {
		}
		, render: function (renderer) {
			if (renderer.window == null || renderer.window != this.window) return;
			if (this.application != null && this.application.windows.length > 0) {
				if (!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
				if (!this.__renderDirty) {
					this.__updateCachedBitmap = true;
					this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
					this.__renderDirty = true;
					openfl_display_DisplayObject.__worldRenderDirty++;
				}
			}
			if (this.__rendering) return;
			this.__rendering = true;
			this.__broadcast(new openfl_events_Event(openfl_events_Event.ENTER_FRAME), true);
			if (this.__invalidated) {
				this.__invalidated = false;
				this.__broadcast(new openfl_events_Event(openfl_events_Event.RENDER), true);
			}
			this.__renderable = true;
			this.__enterFrame(this.__deltaTime);
			this.__deltaTime = 0;
			this.__update(false, true);
			if (this.__renderer != null) {
				{
					var _g = renderer.context;
					switch (_g[1]) {
						case 4:
							var cairo = _g[2];
							(js_Boot.__cast(this.__renderer, openfl__$internal_renderer_cairo_CairoRenderer)).cairo = cairo;
							this.__renderer.renderSession.cairo = cairo;
							break;
						default:
					}
				}
				this.__renderer.render(this);
			}
			this.__rendering = false;
		}
		, update: function (deltaTime) {
			this.__deltaTime = deltaTime;
		}
		, __drag: function (mouse) {
			var parent = this.__dragObject.parent;
			if (parent != null) mouse = parent.globalToLocal(mouse);
			var x = mouse.x + this.__dragOffsetX;
			var y = mouse.y + this.__dragOffsetY;
			if (this.__dragBounds != null) {
				if (x < this.__dragBounds.x) x = this.__dragBounds.x; else if (x > this.__dragBounds.get_right()) x = this.__dragBounds.get_right();
				if (y < this.__dragBounds.y) y = this.__dragBounds.y; else if (y > this.__dragBounds.get_bottom()) y = this.__dragBounds.get_bottom();
			}
			this.__dragObject.set_x(x);
			this.__dragObject.set_y(y);
		}
		, __fireEvent: function (event, stack) {
			var length = stack.length;
			if (length == 0) {
				event.eventPhase = openfl_events_EventPhase.AT_TARGET;
				event.target.__broadcast(event, false);
			} else {
				event.eventPhase = openfl_events_EventPhase.CAPTURING_PHASE;
				event.target = stack[stack.length - 1];
				var _g1 = 0;
				var _g = length - 1;
				while (_g1 < _g) {
					var i = _g1++;
					stack[i].__broadcast(event, false);
					if (event.__isCancelled) return;
				}
				event.eventPhase = openfl_events_EventPhase.AT_TARGET;
				event.target.__broadcast(event, false);
				if (event.__isCancelled) return;
				if (event.bubbles) {
					event.eventPhase = openfl_events_EventPhase.BUBBLING_PHASE;
					var i1 = length - 2;
					while (i1 >= 0) {
						stack[i1].__broadcast(event, false);
						if (event.__isCancelled) return;
						i1--;
					}
				}
			}
		}
		, __getInteractive: function (stack) {
			if (stack != null) stack.push(this);
			return true;
		}
		, __onKey: function (type, keyCode, modifier) {
			openfl_events_MouseEvent.__altKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier);
			openfl_events_MouseEvent.__commandKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier);
			openfl_events_MouseEvent.__ctrlKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier);
			openfl_events_MouseEvent.__shiftKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier);
			var stack = [];
			if (this.__focus == null) this.__getInteractive(stack); else this.__focus.__getInteractive(stack);
			if (stack.length > 0) {
				var keyLocation;
				switch (keyCode) {
					case 1073742048: case 1073742049: case 1073742050: case 1073742051:
						keyLocation = 1;
						break;
					case 1073742052: case 1073742053: case 1073742054: case 1073742055:
						keyLocation = 2;
						break;
					case 1073741908: case 1073741909: case 1073741910: case 1073741911: case 1073741912: case 1073741913: case 1073741914: case 1073741915: case 1073741916: case 1073741917: case 1073741918: case 1073741919: case 1073741920: case 1073741921: case 1073741922: case 1073741923: case 1073742044:
						keyLocation = 3;
						break;
					default:
						keyLocation = 0;
				}
				var keyCode1;
				switch (keyCode) {
					case 8:
						keyCode1 = 8;
						break;
					case 9:
						keyCode1 = 9;
						break;
					case 13:
						keyCode1 = 13;
						break;
					case 27:
						keyCode1 = 27;
						break;
					case 32:
						keyCode1 = 32;
						break;
					case 33:
						keyCode1 = 49;
						break;
					case 34:
						keyCode1 = 222;
						break;
					case 35:
						keyCode1 = 51;
						break;
					case 36:
						keyCode1 = 52;
						break;
					case 37:
						keyCode1 = 53;
						break;
					case 38:
						keyCode1 = 55;
						break;
					case 39:
						keyCode1 = 222;
						break;
					case 40:
						keyCode1 = 57;
						break;
					case 41:
						keyCode1 = 48;
						break;
					case 42:
						keyCode1 = 56;
						break;
					case 44:
						keyCode1 = 188;
						break;
					case 45:
						keyCode1 = 189;
						break;
					case 46:
						keyCode1 = 190;
						break;
					case 47:
						keyCode1 = 191;
						break;
					case 48:
						keyCode1 = 48;
						break;
					case 49:
						keyCode1 = 49;
						break;
					case 50:
						keyCode1 = 50;
						break;
					case 51:
						keyCode1 = 51;
						break;
					case 52:
						keyCode1 = 52;
						break;
					case 53:
						keyCode1 = 53;
						break;
					case 54:
						keyCode1 = 54;
						break;
					case 55:
						keyCode1 = 55;
						break;
					case 56:
						keyCode1 = 56;
						break;
					case 57:
						keyCode1 = 57;
						break;
					case 58:
						keyCode1 = 186;
						break;
					case 59:
						keyCode1 = 186;
						break;
					case 60:
						keyCode1 = 60;
						break;
					case 61:
						keyCode1 = 187;
						break;
					case 62:
						keyCode1 = 190;
						break;
					case 63:
						keyCode1 = 191;
						break;
					case 64:
						keyCode1 = 50;
						break;
					case 91:
						keyCode1 = 219;
						break;
					case 92:
						keyCode1 = 220;
						break;
					case 93:
						keyCode1 = 221;
						break;
					case 94:
						keyCode1 = 54;
						break;
					case 95:
						keyCode1 = 189;
						break;
					case 96:
						keyCode1 = 192;
						break;
					case 97:
						keyCode1 = 65;
						break;
					case 98:
						keyCode1 = 66;
						break;
					case 99:
						keyCode1 = 67;
						break;
					case 100:
						keyCode1 = 68;
						break;
					case 101:
						keyCode1 = 69;
						break;
					case 102:
						keyCode1 = 70;
						break;
					case 103:
						keyCode1 = 71;
						break;
					case 104:
						keyCode1 = 72;
						break;
					case 105:
						keyCode1 = 73;
						break;
					case 106:
						keyCode1 = 74;
						break;
					case 107:
						keyCode1 = 75;
						break;
					case 108:
						keyCode1 = 76;
						break;
					case 109:
						keyCode1 = 77;
						break;
					case 110:
						keyCode1 = 78;
						break;
					case 111:
						keyCode1 = 79;
						break;
					case 112:
						keyCode1 = 80;
						break;
					case 113:
						keyCode1 = 81;
						break;
					case 114:
						keyCode1 = 82;
						break;
					case 115:
						keyCode1 = 83;
						break;
					case 116:
						keyCode1 = 84;
						break;
					case 117:
						keyCode1 = 85;
						break;
					case 118:
						keyCode1 = 86;
						break;
					case 119:
						keyCode1 = 87;
						break;
					case 120:
						keyCode1 = 88;
						break;
					case 121:
						keyCode1 = 89;
						break;
					case 122:
						keyCode1 = 90;
						break;
					case 127:
						keyCode1 = 46;
						break;
					case 1073741881:
						keyCode1 = 20;
						break;
					case 1073741882:
						keyCode1 = 112;
						break;
					case 1073741883:
						keyCode1 = 113;
						break;
					case 1073741884:
						keyCode1 = 114;
						break;
					case 1073741885:
						keyCode1 = 115;
						break;
					case 1073741886:
						keyCode1 = 116;
						break;
					case 1073741887:
						keyCode1 = 117;
						break;
					case 1073741888:
						keyCode1 = 118;
						break;
					case 1073741889:
						keyCode1 = 119;
						break;
					case 1073741890:
						keyCode1 = 120;
						break;
					case 1073741891:
						keyCode1 = 121;
						break;
					case 1073741892:
						keyCode1 = 122;
						break;
					case 1073741893:
						keyCode1 = 123;
						break;
					case 1073741894:
						keyCode1 = 301;
						break;
					case 1073741895:
						keyCode1 = 145;
						break;
					case 1073741896:
						keyCode1 = 19;
						break;
					case 1073741897:
						keyCode1 = 45;
						break;
					case 1073741898:
						keyCode1 = 36;
						break;
					case 1073741899:
						keyCode1 = 33;
						break;
					case 1073741901:
						keyCode1 = 35;
						break;
					case 1073741902:
						keyCode1 = 34;
						break;
					case 1073741903:
						keyCode1 = 39;
						break;
					case 1073741904:
						keyCode1 = 37;
						break;
					case 1073741905:
						keyCode1 = 40;
						break;
					case 1073741906:
						keyCode1 = 38;
						break;
					case 1073741907:
						keyCode1 = 144;
						break;
					case 1073741908:
						keyCode1 = 111;
						break;
					case 1073741909:
						keyCode1 = 106;
						break;
					case 1073741910:
						keyCode1 = 109;
						break;
					case 1073741911:
						keyCode1 = 107;
						break;
					case 1073741912:
						keyCode1 = 108;
						break;
					case 1073741913:
						keyCode1 = 97;
						break;
					case 1073741914:
						keyCode1 = 98;
						break;
					case 1073741915:
						keyCode1 = 99;
						break;
					case 1073741916:
						keyCode1 = 100;
						break;
					case 1073741917:
						keyCode1 = 101;
						break;
					case 1073741918:
						keyCode1 = 102;
						break;
					case 1073741919:
						keyCode1 = 103;
						break;
					case 1073741920:
						keyCode1 = 104;
						break;
					case 1073741921:
						keyCode1 = 105;
						break;
					case 1073741922:
						keyCode1 = 96;
						break;
					case 1073741923:
						keyCode1 = 110;
						break;
					case 1073741925:
						keyCode1 = 302;
						break;
					case 1073741928:
						keyCode1 = 124;
						break;
					case 1073741929:
						keyCode1 = 125;
						break;
					case 1073741930:
						keyCode1 = 126;
						break;
					case 1073741982:
						keyCode1 = 13;
						break;
					case 1073742044:
						keyCode1 = 110;
						break;
					case 1073742048:
						keyCode1 = 17;
						break;
					case 1073742049:
						keyCode1 = 16;
						break;
					case 1073742050:
						keyCode1 = 18;
						break;
					case 1073742051:
						keyCode1 = 15;
						break;
					case 1073742052:
						keyCode1 = 17;
						break;
					case 1073742053:
						keyCode1 = 16;
						break;
					case 1073742054:
						keyCode1 = 18;
						break;
					case 1073742055:
						keyCode1 = 15;
						break;
					default:
						keyCode1 = keyCode;
				}
				var charCode = openfl_ui_Keyboard.__getCharCode(keyCode1, lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier));
				var event = new openfl_events_KeyboardEvent(type, true, false, charCode, keyCode1, keyLocation, this.__macKeyboard ? lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier) : lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier), lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier), lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier), lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier), lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier));
				stack.reverse();
				this.__fireEvent(event, stack);
			}
		}
		, __onMouse: function (type, x, y, button) {
			if (button > 2) return;
			this.__mouseX = x;
			this.__mouseY = y;
			var stack = [];
			var target = null;
			var targetPoint = new openfl_geom_Point(x, y);
			if (this.__hitTest(x, y, true, stack, true)) target = stack[stack.length - 1]; else {
				target = this;
				stack = [this];
			}
			if (target == null) target = this;
			if (type == openfl_events_MouseEvent.MOUSE_DOWN) {
				if (target.get_tabEnabled()) this.set_focus(target); else this.set_focus(null);
			}
			this.__fireEvent(openfl_events_MouseEvent.__create(type, button, this.__mouseX, this.__mouseY, target == this ? targetPoint : target.globalToLocal(targetPoint), target), stack);
			var clickType;
			switch (type) {
				case "mouseUp":
					clickType = openfl_events_MouseEvent.CLICK;
					break;
				case "middleMouseUp":
					clickType = openfl_events_MouseEvent.MIDDLE_CLICK;
					break;
				case "rightMouseUp":
					clickType = openfl_events_MouseEvent.RIGHT_CLICK;
					break;
				default:
					clickType = null;
			}
			if (clickType != null) {
				this.__fireEvent(openfl_events_MouseEvent.__create(clickType, button, this.__mouseX, this.__mouseY, target == this ? targetPoint : target.globalToLocal(targetPoint), target), stack);
				if (type == openfl_events_MouseEvent.MOUSE_UP && (js_Boot.__cast(target, openfl_display_InteractiveObject)).doubleClickEnabled) {
					var currentTime = openfl_Lib.getTimer();
					if (currentTime - this.__lastClickTime < 500) {
						this.__fireEvent(openfl_events_MouseEvent.__create(openfl_events_MouseEvent.DOUBLE_CLICK, button, this.__mouseX, this.__mouseY, target == this ? targetPoint : target.globalToLocal(targetPoint), target), stack);
						this.__lastClickTime = 0;
					} else this.__lastClickTime = currentTime;
				}
			}
			var cursor = null;
			var _g = 0;
			while (_g < stack.length) {
				var target1 = stack[_g];
				++_g;
				cursor = target1.__getCursor();
				if (cursor != null) {
					lime_ui_Mouse.set_cursor(cursor);
					break;
				}
			}
			if (cursor == null) lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.ARROW);
			var _g1 = 0;
			var _g11 = this.__mouseOutStack;
			while (_g1 < _g11.length) {
				var target2 = _g11[_g1];
				++_g1;
				if (HxOverrides.indexOf(stack, target2, 0) == -1) {
					HxOverrides.remove(this.__mouseOutStack, target2);
					var localPoint = target2.globalToLocal(targetPoint);
					target2.__dispatchEvent(new openfl_events_MouseEvent(openfl_events_MouseEvent.MOUSE_OUT, false, false, localPoint.x, localPoint.y, target2));
				}
			}
			var _g2 = 0;
			while (_g2 < stack.length) {
				var target3 = stack[_g2];
				++_g2;
				if (HxOverrides.indexOf(this.__mouseOutStack, target3, 0) == -1) {
					if (target3.hasEventListener(openfl_events_MouseEvent.MOUSE_OVER)) {
						var localPoint1 = target3.globalToLocal(targetPoint);
						target3.__dispatchEvent(new openfl_events_MouseEvent(openfl_events_MouseEvent.MOUSE_OVER, false, false, localPoint1.x, localPoint1.y, target3));
					}
					if (target3.hasEventListener(openfl_events_MouseEvent.MOUSE_OUT)) this.__mouseOutStack.push(target3);
				}
			}
			if (this.__dragObject != null) this.__drag(targetPoint);
		}
		, __onMouseWheel: function (deltaX, deltaY) {
			var x = this.__mouseX;
			var y = this.__mouseY;
			var stack = [];
			if (!this.__hitTest(x, y, false, stack, true)) stack = [this];
			var target = stack[stack.length - 1];
			var targetPoint = new openfl_geom_Point(x, y);
			var delta = deltaY | 0;
			this.__fireEvent(openfl_events_MouseEvent.__create(openfl_events_MouseEvent.MOUSE_WHEEL, 0, this.__mouseX, this.__mouseY, target == this ? targetPoint : target.globalToLocal(targetPoint), target, delta), stack);
		}
		, __onTouch: function (type, touch) {
			var point = new openfl_geom_Point(touch.x * this.stageWidth, touch.y * this.stageHeight);
			this.__mouseX = point.x;
			this.__mouseY = point.y;
			var __stack = [];
			if (this.__hitTest(touch.x, touch.y, false, __stack, true)) {
				var target = __stack[__stack.length - 1];
				if (target == null) target = this;
				var localPoint = target.globalToLocal(point);
				var touchEvent = openfl_events_TouchEvent.__create(type, null, this.__mouseX, this.__mouseY, localPoint, target);
				touchEvent.touchPointID = touch.id;
				touchEvent.isPrimaryTouchPoint = true;
				this.__fireEvent(touchEvent, __stack);
			} else {
				var touchEvent1 = openfl_events_TouchEvent.__create(type, null, this.__mouseX, this.__mouseY, point, this);
				touchEvent1.touchPointID = touch.id;
				touchEvent1.isPrimaryTouchPoint = true;
				this.__fireEvent(touchEvent1, [this.stage]);
			}
		}
		, __resize: function () {
		}
		, __startDrag: function (sprite, lockCenter, bounds) {
			if (bounds == null) this.__dragBounds = null; else this.__dragBounds = bounds.clone();
			this.__dragObject = sprite;
			if (this.__dragObject != null) {
				if (lockCenter) {
					this.__dragOffsetX = -this.__dragObject.get_width() / 2;
					this.__dragOffsetY = -this.__dragObject.get_height() / 2;
				} else {
					var mouse = new openfl_geom_Point(this.get_mouseX(), this.get_mouseY());
					var parent = this.__dragObject.parent;
					if (parent != null) mouse = parent.globalToLocal(mouse);
					this.__dragOffsetX = this.__dragObject.get_x() - mouse.x;
					this.__dragOffsetY = this.__dragObject.get_y() - mouse.y;
				}
			}
		}
		, __stopDrag: function (sprite) {
			this.__dragBounds = null;
			this.__dragObject = null;
		}
		, __update: function (transformOnly, updateChildren, maskGrahpics) {
			if (transformOnly) {
				if (openfl_display_DisplayObject.__worldTransformDirty > 0) {
					openfl_display_DisplayObjectContainer.prototype.__update.call(this, true, updateChildren, maskGrahpics);
					if (updateChildren) {
						openfl_display_DisplayObject.__worldTransformDirty = 0;
						this.__dirty = true;
					}
				}
			} else if (openfl_display_DisplayObject.__worldTransformDirty > 0 || this.__dirty || openfl_display_DisplayObject.__worldRenderDirty > 0) {
				openfl_display_DisplayObjectContainer.prototype.__update.call(this, false, updateChildren, maskGrahpics);
				if (updateChildren) {
					openfl_display_DisplayObject.__worldTransformDirty = 0;
					openfl_display_DisplayObject.__worldRenderDirty = 0;
					this.__dirty = false;
				}
			}
		}
		, get_mouseX: function () {
			return this.__mouseX;
		}
		, get_mouseY: function () {
			return this.__mouseY;
		}
		, canvas_onContextLost: function (event) {
		}
		, canvas_onContextRestored: function (event) {
		}
		, get_color: function () {
			return this.__color;
		}
		, set_color: function (value) {
			var r = (value & 16711680) >>> 16;
			var g = (value & 65280) >>> 8;
			var b = value & 255;
			this.__colorSplit = [r / 255, g / 255, b / 255];
			this.__colorString = "#" + StringTools.hex(value, 6);
			return this.__color = value;
		}
		, get_displayState: function () {
			return this.__displayState;
		}
		, set_displayState: function (value) {
			if (this.window != null) switch (value[1]) {
				case 0:
					if (this.window.__fullscreen) {
						this.window.set_fullscreen(false);
						this.dispatchEvent(new openfl_events_FullScreenEvent(openfl_events_FullScreenEvent.FULL_SCREEN, false, false, false, true));
					}
					break;
				default:
					if (!this.window.__fullscreen) {
						this.window.set_fullscreen(true);
						this.dispatchEvent(new openfl_events_FullScreenEvent(openfl_events_FullScreenEvent.FULL_SCREEN, false, false, true, true));
					}
			}
			return this.__displayState = value;
		}
		, get_focus: function () {
			return this.__focus;
		}
		, set_focus: function (value) {
			if (value != this.__focus) {
				var oldFocus = this.__focus;
				this.__focus = value;
				if (oldFocus != null) {
					var event = new openfl_events_FocusEvent(openfl_events_FocusEvent.FOCUS_OUT, true, false, this.__focus, false, 0);
					this.__stack = [];
					oldFocus.__getInteractive(this.__stack);
					this.__stack.reverse();
					this.__fireEvent(event, this.__stack);
				}
				if (this.__focus != null) {
					var event1 = new openfl_events_FocusEvent(openfl_events_FocusEvent.FOCUS_IN, true, false, oldFocus, false, 0);
					this.__stack = [];
					value.__getInteractive(this.__stack);
					this.__stack.reverse();
					this.__fireEvent(event1, this.__stack);
				}
			}
			return this.__focus;
		}
		, get_frameRate: function () {
			if (this.application != null) return this.application.backend.getFrameRate();
			return 0;
		}
		, set_frameRate: function (value) {
			if (this.application != null) return this.application.backend.setFrameRate(value);
			return value;
		}
		, __class__: openfl_display_Stage
		, __properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__, { set_frameRate: "set_frameRate", get_frameRate: "get_frameRate", set_focus: "set_focus", get_focus: "get_focus", set_displayState: "set_displayState", get_displayState: "get_displayState", set_color: "set_color", get_color: "get_color" })
	});
	var openfl_display_Stage3D = function () {
		openfl_events_EventDispatcher.call(this);
	};
	$hxClasses["openfl.display.Stage3D"] = openfl_display_Stage3D;
	openfl_display_Stage3D.__name__ = ["openfl", "display", "Stage3D"];
	openfl_display_Stage3D.__super__ = openfl_events_EventDispatcher;
	openfl_display_Stage3D.prototype = $extend(openfl_events_EventDispatcher.prototype, {
		requestContext3D: function (context3DRenderMode) {
			if (context3DRenderMode == null) context3DRenderMode = "";
			var _g = this;
			if (openfl_display_OpenGLView.get_isSupported()) haxe_Timer.delay(function () {
				_g.context3D = new openfl_display3D_Context3D();
				_g.dispatchEvent(new openfl_events_Event(openfl_events_Event.CONTEXT3D_CREATE));
			}, 1); else haxe_Timer.delay(function () {
				_g.dispatchEvent(new openfl_events_ErrorEvent(openfl_events_ErrorEvent.ERROR));
			}, 1);
		}
		, __class__: openfl_display_Stage3D
	});
	var openfl_display_StageAlign = $hxClasses["openfl.display.StageAlign"] = { __ename__: ["openfl", "display", "StageAlign"], __constructs__: ["TOP_RIGHT", "TOP_LEFT", "TOP", "RIGHT", "LEFT", "BOTTOM_RIGHT", "BOTTOM_LEFT", "BOTTOM"] };
	openfl_display_StageAlign.TOP_RIGHT = ["TOP_RIGHT", 0];
	openfl_display_StageAlign.TOP_RIGHT.toString = $estr;
	openfl_display_StageAlign.TOP_RIGHT.__enum__ = openfl_display_StageAlign;
	openfl_display_StageAlign.TOP_LEFT = ["TOP_LEFT", 1];
	openfl_display_StageAlign.TOP_LEFT.toString = $estr;
	openfl_display_StageAlign.TOP_LEFT.__enum__ = openfl_display_StageAlign;
	openfl_display_StageAlign.TOP = ["TOP", 2];
	openfl_display_StageAlign.TOP.toString = $estr;
	openfl_display_StageAlign.TOP.__enum__ = openfl_display_StageAlign;
	openfl_display_StageAlign.RIGHT = ["RIGHT", 3];
	openfl_display_StageAlign.RIGHT.toString = $estr;
	openfl_display_StageAlign.RIGHT.__enum__ = openfl_display_StageAlign;
	openfl_display_StageAlign.LEFT = ["LEFT", 4];
	openfl_display_StageAlign.LEFT.toString = $estr;
	openfl_display_StageAlign.LEFT.__enum__ = openfl_display_StageAlign;
	openfl_display_StageAlign.BOTTOM_RIGHT = ["BOTTOM_RIGHT", 5];
	openfl_display_StageAlign.BOTTOM_RIGHT.toString = $estr;
	openfl_display_StageAlign.BOTTOM_RIGHT.__enum__ = openfl_display_StageAlign;
	openfl_display_StageAlign.BOTTOM_LEFT = ["BOTTOM_LEFT", 6];
	openfl_display_StageAlign.BOTTOM_LEFT.toString = $estr;
	openfl_display_StageAlign.BOTTOM_LEFT.__enum__ = openfl_display_StageAlign;
	openfl_display_StageAlign.BOTTOM = ["BOTTOM", 7];
	openfl_display_StageAlign.BOTTOM.toString = $estr;
	openfl_display_StageAlign.BOTTOM.__enum__ = openfl_display_StageAlign;
	var openfl_display_StageDisplayState = $hxClasses["openfl.display.StageDisplayState"] = { __ename__: ["openfl", "display", "StageDisplayState"], __constructs__: ["NORMAL", "FULL_SCREEN", "FULL_SCREEN_INTERACTIVE"] };
	openfl_display_StageDisplayState.NORMAL = ["NORMAL", 0];
	openfl_display_StageDisplayState.NORMAL.toString = $estr;
	openfl_display_StageDisplayState.NORMAL.__enum__ = openfl_display_StageDisplayState;
	openfl_display_StageDisplayState.FULL_SCREEN = ["FULL_SCREEN", 1];
	openfl_display_StageDisplayState.FULL_SCREEN.toString = $estr;
	openfl_display_StageDisplayState.FULL_SCREEN.__enum__ = openfl_display_StageDisplayState;
	openfl_display_StageDisplayState.FULL_SCREEN_INTERACTIVE = ["FULL_SCREEN_INTERACTIVE", 2];
	openfl_display_StageDisplayState.FULL_SCREEN_INTERACTIVE.toString = $estr;
	openfl_display_StageDisplayState.FULL_SCREEN_INTERACTIVE.__enum__ = openfl_display_StageDisplayState;
	var openfl_display_StageQuality = $hxClasses["openfl.display.StageQuality"] = { __ename__: ["openfl", "display", "StageQuality"], __constructs__: ["BEST", "HIGH", "MEDIUM", "LOW"] };
	openfl_display_StageQuality.BEST = ["BEST", 0];
	openfl_display_StageQuality.BEST.toString = $estr;
	openfl_display_StageQuality.BEST.__enum__ = openfl_display_StageQuality;
	openfl_display_StageQuality.HIGH = ["HIGH", 1];
	openfl_display_StageQuality.HIGH.toString = $estr;
	openfl_display_StageQuality.HIGH.__enum__ = openfl_display_StageQuality;
	openfl_display_StageQuality.MEDIUM = ["MEDIUM", 2];
	openfl_display_StageQuality.MEDIUM.toString = $estr;
	openfl_display_StageQuality.MEDIUM.__enum__ = openfl_display_StageQuality;
	openfl_display_StageQuality.LOW = ["LOW", 3];
	openfl_display_StageQuality.LOW.toString = $estr;
	openfl_display_StageQuality.LOW.__enum__ = openfl_display_StageQuality;
	var openfl_display_StageScaleMode = $hxClasses["openfl.display.StageScaleMode"] = { __ename__: ["openfl", "display", "StageScaleMode"], __constructs__: ["SHOW_ALL", "NO_SCALE", "NO_BORDER", "EXACT_FIT"] };
	openfl_display_StageScaleMode.SHOW_ALL = ["SHOW_ALL", 0];
	openfl_display_StageScaleMode.SHOW_ALL.toString = $estr;
	openfl_display_StageScaleMode.SHOW_ALL.__enum__ = openfl_display_StageScaleMode;
	openfl_display_StageScaleMode.NO_SCALE = ["NO_SCALE", 1];
	openfl_display_StageScaleMode.NO_SCALE.toString = $estr;
	openfl_display_StageScaleMode.NO_SCALE.__enum__ = openfl_display_StageScaleMode;
	openfl_display_StageScaleMode.NO_BORDER = ["NO_BORDER", 2];
	openfl_display_StageScaleMode.NO_BORDER.toString = $estr;
	openfl_display_StageScaleMode.NO_BORDER.__enum__ = openfl_display_StageScaleMode;
	openfl_display_StageScaleMode.EXACT_FIT = ["EXACT_FIT", 3];
	openfl_display_StageScaleMode.EXACT_FIT.toString = $estr;
	openfl_display_StageScaleMode.EXACT_FIT.__enum__ = openfl_display_StageScaleMode;
	var openfl_display_Tilesheet = function (image) {
		this.__bitmap = image;
		this.__centerPoints = [];
		this.__tileRects = [];
		this.__tileUVs = [];
		this.__rectTile = new openfl_geom_Rectangle();
		this.__rectUV = new openfl_geom_Rectangle();
		this.__point = new openfl_geom_Point();
	};
	$hxClasses["openfl.display.Tilesheet"] = openfl_display_Tilesheet;
	openfl_display_Tilesheet.__name__ = ["openfl", "display", "Tilesheet"];
	openfl_display_Tilesheet.prototype = {
		addTileRect: function (rectangle, centerPoint) {
			this.__tileRects.push(rectangle);
			if (centerPoint == null) centerPoint = openfl_display_Tilesheet.__defaultPoint;
			this.__centerPoints.push(centerPoint);
			this.__tileUVs.push(new openfl_geom_Rectangle(rectangle.get_left() / this.__bitmap.width, rectangle.get_top() / this.__bitmap.height, rectangle.get_right() / this.__bitmap.width, rectangle.get_bottom() / this.__bitmap.height));
			return this.__tileRects.length - 1;
		}
		, drawTiles: function (graphics, tileData, smooth, flags, count) {
			if (count == null) count = -1;
			if (flags == null) flags = 0;
			if (smooth == null) smooth = false;
			graphics.drawTiles(this, tileData, smooth, flags, null, count);
		}
		, getTileCenter: function (index) {
			return this.__centerPoints[index];
		}
		, getTileRect: function (index) {
			return this.__tileRects[index];
		}
		, getTileUVs: function (index) {
			return this.__tileUVs[index];
		}
		, __class__: openfl_display_Tilesheet
	};
	var openfl_display_TriangleCulling = $hxClasses["openfl.display.TriangleCulling"] = { __ename__: ["openfl", "display", "TriangleCulling"], __constructs__: ["NEGATIVE", "NONE", "POSITIVE"] };
	openfl_display_TriangleCulling.NEGATIVE = ["NEGATIVE", 0];
	openfl_display_TriangleCulling.NEGATIVE.toString = $estr;
	openfl_display_TriangleCulling.NEGATIVE.__enum__ = openfl_display_TriangleCulling;
	openfl_display_TriangleCulling.NONE = ["NONE", 1];
	openfl_display_TriangleCulling.NONE.toString = $estr;
	openfl_display_TriangleCulling.NONE.__enum__ = openfl_display_TriangleCulling;
	openfl_display_TriangleCulling.POSITIVE = ["POSITIVE", 2];
	openfl_display_TriangleCulling.POSITIVE.toString = $estr;
	openfl_display_TriangleCulling.POSITIVE.__enum__ = openfl_display_TriangleCulling;
	var openfl_display_Window = function (config) {
		lime_ui_Window.call(this, config);
	};
	$hxClasses["openfl.display.Window"] = openfl_display_Window;
	openfl_display_Window.__name__ = ["openfl", "display", "Window"];
	openfl_display_Window.__super__ = lime_ui_Window;
	openfl_display_Window.prototype = $extend(lime_ui_Window.prototype, {
		create: function (application) {
			lime_ui_Window.prototype.create.call(this, application);
			this.stage = new openfl_display_Stage(this, Object.prototype.hasOwnProperty.call(this.config, "background") ? this.config.background : 16777215);
			application.addModule(this.stage);
		}
		, __class__: openfl_display_Window
	});
	var openfl_display3D_Context3D = function () {
		this.disposed = false;
		this._yFlip = 1;
		this.vertexBuffersCreated = [];
		this.indexBuffersCreated = [];
		this.programsCreated = [];
		this.texturesCreated = [];
		this.samplerParameters = [];
		var _g1 = 0;
		var _g = openfl_display3D_Context3D.MAX_SAMPLERS;
		while (_g1 < _g) {
			var i = _g1++;
			this.samplerParameters[i] = new openfl_display3D__$Context3D_SamplerState();
			this.samplerParameters[i].wrap = openfl_display3D_Context3DWrapMode.CLAMP;
			this.samplerParameters[i].filter = openfl_display3D_Context3DTextureFilter.LINEAR;
			this.samplerParameters[i].mipfilter = openfl_display3D_Context3DMipFilter.MIPNONE;
		}
		var stage = openfl_Lib.current.stage;
		this.ogl = new openfl_display_OpenGLView();
		this.ogl.set_scrollRect(new openfl_geom_Rectangle(0, 0, stage.stageWidth, stage.stageHeight));
		this.scrollRect = this.ogl.get_scrollRect().clone();
		this.ogl.set_width(stage.stageWidth);
		this.ogl.set_height(stage.stageHeight);
		stage.addChildAt(this.ogl, 0);
	};
	$hxClasses["openfl.display3D.Context3D"] = openfl_display3D_Context3D;
	openfl_display3D_Context3D.__name__ = ["openfl", "display3D", "Context3D"];
	openfl_display3D_Context3D.prototype = {
		clear: function (red, green, blue, alpha, depth, stencil, mask) {
			if (mask == null) mask = 17664;
			if (stencil == null) stencil = 0;
			if (depth == null) depth = 1;
			if (alpha == null) alpha = 1;
			if (blue == null) blue = 0;
			if (green == null) green = 0;
			if (red == null) red = 0;
			if (!this.drawing) {
				this.__updateBlendStatus();
				this.drawing = true;
			}
			lime_graphics_opengl_GL.context.clearColor(red, green, blue, alpha);
			lime_graphics_opengl_GL.context.clearDepth(depth);
			lime_graphics_opengl_GL.context.clearStencil(stencil);
			lime_graphics_opengl_GL.context.clear(mask);
		}
		, configureBackBuffer: function (width, height, antiAlias, enableDepthAndStencil) {
			if (enableDepthAndStencil == null) enableDepthAndStencil = true;
			if (enableDepthAndStencil) {
				lime_graphics_opengl_GL.context.enable(2929);
				lime_graphics_opengl_GL.context.enable(2960);
			}
			this.ogl.set_scrollRect(new openfl_geom_Rectangle(0, 0, width, height));
			this.ogl.set_width(width);
			this.ogl.set_height(height);
			this.scrollRect = this.ogl.get_scrollRect().clone();
			lime_graphics_opengl_GL.context.viewport(this.scrollRect.x | 0, this.scrollRect.y | 0, this.scrollRect.width | 0, this.scrollRect.height | 0);
		}
		, createCubeTexture: function (size, format, optimizeForRenderToTexture, streamingLevels) {
			if (streamingLevels == null) streamingLevels = 0;
			var texture = new openfl_display3D_textures_CubeTexture(this, lime_graphics_opengl_GL.context.createTexture(), size);
			this.texturesCreated.push(texture);
			return texture;
		}
		, createIndexBuffer: function (numIndices) {
			var indexBuffer = new openfl_display3D_IndexBuffer3D(this, lime_graphics_opengl_GL.context.createBuffer(), numIndices);
			this.indexBuffersCreated.push(indexBuffer);
			return indexBuffer;
		}
		, createProgram: function () {
			var program = new openfl_display3D_Program3D(this, lime_graphics_opengl_GL.context.createProgram());
			this.programsCreated.push(program);
			return program;
		}
		, createRectangleTexture: function (width, height, format, optimizeForRenderToTexture) {
			var texture = new openfl_display3D_textures_RectangleTexture(this, lime_graphics_opengl_GL.context.createTexture(), optimizeForRenderToTexture, width, height);
			this.texturesCreated.push(texture);
			return texture;
		}
		, createTexture: function (width, height, format, optimizeForRenderToTexture, streamingLevels) {
			if (streamingLevels == null) streamingLevels = 0;
			var texture = new openfl_display3D_textures_Texture(this, lime_graphics_opengl_GL.context.createTexture(), optimizeForRenderToTexture, width, height);
			this.texturesCreated.push(texture);
			return texture;
		}
		, createVertexBuffer: function (numVertices, data32PerVertex) {
			var vertexBuffer = new openfl_display3D_VertexBuffer3D(this, lime_graphics_opengl_GL.context.createBuffer(), numVertices, data32PerVertex);
			this.vertexBuffersCreated.push(vertexBuffer);
			return vertexBuffer;
		}
		, __deleteTexture: function (texture) {
			if (texture.glTexture == null) return;
			HxOverrides.remove(this.texturesCreated, texture);
			lime_graphics_opengl_GL.context.deleteTexture(texture.glTexture);
			texture.glTexture = null;
		}
		, __deleteVertexBuffer: function (buffer) {
			if (buffer.glBuffer == null) return;
			HxOverrides.remove(this.vertexBuffersCreated, buffer);
			lime_graphics_opengl_GL.context.deleteBuffer(buffer.glBuffer);
			buffer.glBuffer = null;
		}
		, __deleteIndexBuffer: function (buffer) {
			if (buffer.glBuffer == null) return;
			HxOverrides.remove(this.indexBuffersCreated, buffer);
			lime_graphics_opengl_GL.context.deleteBuffer(buffer.glBuffer);
			buffer.glBuffer = null;
		}
		, __deleteProgram: function (program) {
			if (program.glProgram == null) return;
			HxOverrides.remove(this.programsCreated, program);
			lime_graphics_opengl_GL.context.deleteProgram(program.glProgram);
			program.glProgram = null;
		}
		, dispose: function () {
			var _g = 0;
			var _g1 = this.vertexBuffersCreated;
			while (_g < _g1.length) {
				var vertexBuffer = _g1[_g];
				++_g;
				vertexBuffer.dispose();
			}
			this.vertexBuffersCreated = null;
			var _g2 = 0;
			var _g11 = this.indexBuffersCreated;
			while (_g2 < _g11.length) {
				var indexBuffer = _g11[_g2];
				++_g2;
				indexBuffer.dispose();
			}
			this.indexBuffersCreated = null;
			var _g3 = 0;
			var _g12 = this.programsCreated;
			while (_g3 < _g12.length) {
				var program = _g12[_g3];
				++_g3;
				program.dispose();
			}
			this.programsCreated = null;
			this.samplerParameters = null;
			var _g4 = 0;
			var _g13 = this.texturesCreated;
			while (_g4 < _g13.length) {
				var texture = _g13[_g4];
				++_g4;
				texture.dispose();
			}
			this.texturesCreated = null;
			if (this.framebuffer != null) {
				lime_graphics_opengl_GL.context.deleteFramebuffer(this.framebuffer);
				this.framebuffer = null;
			}
			if (this.renderbuffer != null) {
				lime_graphics_opengl_GL.context.deleteRenderbuffer(this.renderbuffer);
				this.renderbuffer = null;
			}
			this.disposed = true;
		}
		, drawToBitmapData: function (destination) {
		}
		, drawTriangles: function (indexBuffer, firstIndex, numTriangles) {
			if (numTriangles == null) numTriangles = -1;
			if (firstIndex == null) firstIndex = 0;
			var location = lime_graphics_opengl_GL.context.getUniformLocation(this.currentProgram.glProgram, "yflip");
			lime_graphics_opengl_GL.context.uniform1f(location, this._yFlip);
			if (!this.drawing) throw new js__$Boot_HaxeError(new openfl_errors_Error("Need to clear before drawing if the buffer has not been cleared since the last present() call."));
			var numIndices;
			if (numTriangles == -1) numIndices = indexBuffer.numIndices; else numIndices = numTriangles * 3;
			var byteOffset = firstIndex * 2;
			lime_graphics_opengl_GL.context.bindBuffer(34963, indexBuffer.glBuffer);
			lime_graphics_opengl_GL.context.drawElements(4, numIndices, 5123, byteOffset);
		}
		, present: function () {
			this.drawing = false;
			lime_graphics_opengl_GL.context.useProgram(null);
			lime_graphics_opengl_GL.context.bindBuffer(34962, null);
			lime_graphics_opengl_GL.context.disable(2884);
			if (this.framebuffer != null) lime_graphics_opengl_GL.context.bindFramebuffer(36160, null);
			if (this.renderbuffer != null) lime_graphics_opengl_GL.context.bindRenderbuffer(36161, null);
		}
		, removeRenderMethod: function (func) {
			this.ogl.set_render(null);
		}
		, setBlendFactors: function (sourceFactor, destinationFactor) {
			this.blendEnabled = true;
			this.blendSourceFactor = sourceFactor;
			this.blendDestinationFactor = destinationFactor;
			this.__updateBlendStatus();
		}
		, setColorMask: function (red, green, blue, alpha) {
			lime_graphics_opengl_GL.context.colorMask(red, green, blue, alpha);
		}
		, setCulling: function (triangleFaceToCull) {
			if (triangleFaceToCull == 0) lime_graphics_opengl_GL.context.disable(2884); else {
				lime_graphics_opengl_GL.context.enable(2884);
				switch (triangleFaceToCull) {
					case 1029:
						lime_graphics_opengl_GL.context.cullFace(1029);
						break;
					case 1028:
						lime_graphics_opengl_GL.context.cullFace(1028);
						break;
					case 1032:
						lime_graphics_opengl_GL.context.cullFace(1032);
						break;
					default:
						throw new js__$Boot_HaxeError("Unknown Context3DTriangleFace type.");
				}
			}
			switch (triangleFaceToCull) {
				case 1029:
					this._yFlip = -1;
					break;
				case 1028:
					this._yFlip = 1;
					break;
				case 1032:
					this._yFlip = 1;
					break;
				case 0:
					this._yFlip = 1;
					break;
				default:
					throw new js__$Boot_HaxeError("Unknown culling mode " + triangleFaceToCull + ".");
			}
		}
		, setDepthTest: function (depthMask, passCompareMode) {
			lime_graphics_opengl_GL.context.depthFunc(passCompareMode);
			lime_graphics_opengl_GL.context.depthMask(depthMask);
		}
		, setGLSLProgramConstantsFromByteArray: function (locationName, data, byteArrayOffset) {
			if (byteArrayOffset == null) byteArrayOffset = 0;
			data.position = byteArrayOffset;
			var location = lime_graphics_opengl_GL.context.getUniformLocation(this.currentProgram.glProgram, locationName);
			lime_graphics_opengl_GL.uniform4f(location, data.readFloat(), data.readFloat(), data.readFloat(), data.readFloat());
		}
		, setGLSLProgramConstantsFromMatrix: function (locationName, matrix, transposedMatrix) {
			if (transposedMatrix == null) transposedMatrix = false;
			var location = lime_graphics_opengl_GL.context.getUniformLocation(this.currentProgram.glProgram, locationName);
			lime_graphics_opengl_GL.uniformMatrix4fv(location, !transposedMatrix, (function ($this) {
				var $r;
				var array;
				{
					var this2 = matrix.rawData;
					var value = [];
					var _g1 = 0;
					var _g = this2.data.length;
					while (_g1 < _g) {
						var i = _g1++;
						value.push(this2.data[i]);
					}
					array = value;
				}
				var this1;
				if (array != null) this1 = new Float32Array(array); else this1 = null;
				$r = this1;
				return $r;
			}(this)));
		}
		, setGLSLProgramConstantsFromVector4: function (locationName, data, startIndex) {
			if (startIndex == null) startIndex = 0;
			var location = lime_graphics_opengl_GL.context.getUniformLocation(this.currentProgram.glProgram, locationName);
			lime_graphics_opengl_GL.context.uniform4f(location, data[startIndex], data[startIndex + 1], data[startIndex + 2], data[startIndex + 3]);
		}
		, setGLSLTextureAt: function (locationName, texture, textureIndex) {
			switch (textureIndex) {
				case 0:
					lime_graphics_opengl_GL.context.activeTexture(33984);
					break;
				case 1:
					lime_graphics_opengl_GL.context.activeTexture(33985);
					break;
				case 2:
					lime_graphics_opengl_GL.context.activeTexture(33986);
					break;
				case 3:
					lime_graphics_opengl_GL.context.activeTexture(33987);
					break;
				case 4:
					lime_graphics_opengl_GL.context.activeTexture(33988);
					break;
				case 5:
					lime_graphics_opengl_GL.context.activeTexture(33989);
					break;
				case 6:
					lime_graphics_opengl_GL.context.activeTexture(33990);
					break;
				case 7:
					lime_graphics_opengl_GL.context.activeTexture(33991);
					break;
				default:
					throw new js__$Boot_HaxeError("Does not support texture8 or more");
			}
			if (texture == null) {
				lime_graphics_opengl_GL.context.bindTexture(3553, null);
				lime_graphics_opengl_GL.context.bindTexture(34067, null);
				return;
			}
			var location = lime_graphics_opengl_GL.context.getUniformLocation(this.currentProgram.glProgram, locationName);
			if (js_Boot.__instanceof(texture, openfl_display3D_textures_Texture)) {
				lime_graphics_opengl_GL.bindTexture(3553, (js_Boot.__cast(texture, openfl_display3D_textures_Texture)).glTexture);
				lime_graphics_opengl_GL.context.uniform1i(location, textureIndex);
			} else if (js_Boot.__instanceof(texture, openfl_display3D_textures_RectangleTexture)) {
				lime_graphics_opengl_GL.bindTexture(3553, (js_Boot.__cast(texture, openfl_display3D_textures_RectangleTexture)).glTexture);
				lime_graphics_opengl_GL.context.uniform1i(location, textureIndex);
			} else if (js_Boot.__instanceof(texture, openfl_display3D_textures_CubeTexture)) {
				lime_graphics_opengl_GL.bindTexture(34067, (js_Boot.__cast(texture, openfl_display3D_textures_CubeTexture)).glTexture);
				lime_graphics_opengl_GL.context.uniform1i(location, textureIndex);
			} else throw new js__$Boot_HaxeError("Texture of type " + Type.getClassName(texture == null ? null : js_Boot.getClass(texture)) + " not supported yet");
			var parameters = this.samplerParameters[textureIndex];
			if (parameters != null) this.setTextureParameters(texture, parameters.wrap, parameters.filter, parameters.mipfilter); else this.setTextureParameters(texture, openfl_display3D_Context3DWrapMode.CLAMP, openfl_display3D_Context3DTextureFilter.NEAREST, openfl_display3D_Context3DMipFilter.MIPNONE);
		}
		, setGLSLVertexBufferAt: function (locationName, buffer, bufferOffset, format) {
			if (bufferOffset == null) bufferOffset = 0;
			var location;
			if (this.currentProgram != null && this.currentProgram.glProgram != null) location = lime_graphics_opengl_GL.context.getAttribLocation(this.currentProgram.glProgram, locationName); else location = -1;
			if (buffer == null) {
				if (location > -1) lime_graphics_opengl_GL.context.disableVertexAttribArray(location);
				return;
			}
			lime_graphics_opengl_GL.context.bindBuffer(34962, buffer.glBuffer);
			var dimension = 4;
			var type = 5126;
			var numBytes = 4;
			if (format == openfl_display3D_Context3DVertexBufferFormat.BYTES_4) {
				dimension = 4;
				type = 5126;
				numBytes = 4;
			} else if (format == openfl_display3D_Context3DVertexBufferFormat.FLOAT_1) {
				dimension = 1;
				type = 5126;
				numBytes = 4;
			} else if (format == openfl_display3D_Context3DVertexBufferFormat.FLOAT_2) {
				dimension = 2;
				type = 5126;
				numBytes = 4;
			} else if (format == openfl_display3D_Context3DVertexBufferFormat.FLOAT_3) {
				dimension = 3;
				type = 5126;
				numBytes = 4;
			} else if (format == openfl_display3D_Context3DVertexBufferFormat.FLOAT_4) {
				dimension = 4;
				type = 5126;
				numBytes = 4;
			} else throw new js__$Boot_HaxeError("Buffer format " + Std.string(format) + " is not supported");
			lime_graphics_opengl_GL.context.enableVertexAttribArray(location);
			lime_graphics_opengl_GL.context.vertexAttribPointer(location, dimension, type, false, buffer.data32PerVertex * numBytes, bufferOffset * numBytes);
		}
		, setProgram: function (program3D) {
			var glProgram = null;
			if (program3D != null) glProgram = program3D.glProgram;
			lime_graphics_opengl_GL.context.useProgram(glProgram);
			this.currentProgram = program3D;
		}
		, setProgramConstantsFromByteArray: function (programType, firstRegister, numRegisters, data, byteArrayOffset) {
			data.position = byteArrayOffset;
			var _g = 0;
			while (_g < numRegisters) {
				var i = _g++;
				var locationName = this.__getUniformLocationNameFromAgalRegisterIndex(programType, firstRegister + i);
				this.setGLSLProgramConstantsFromByteArray(locationName, data);
			}
		}
		, setProgramConstantsFromMatrix: function (programType, firstRegister, matrix, transposedMatrix) {
			if (transposedMatrix == null) transposedMatrix = false;
			var d = matrix.rawData;
			if (transposedMatrix) {
				this.setProgramConstantsFromVector(programType, firstRegister, [d.data[0], d.data[4], d.data[8], d.data[12]], 1);
				this.setProgramConstantsFromVector(programType, firstRegister + 1, [d.data[1], d.data[5], d.data[9], d.data[13]], 1);
				this.setProgramConstantsFromVector(programType, firstRegister + 2, [d.data[2], d.data[6], d.data[10], d.data[14]], 1);
				this.setProgramConstantsFromVector(programType, firstRegister + 3, [d.data[3], d.data[7], d.data[11], d.data[15]], 1);
			} else {
				this.setProgramConstantsFromVector(programType, firstRegister, [d.data[0], d.data[1], d.data[2], d.data[3]], 1);
				this.setProgramConstantsFromVector(programType, firstRegister + 1, [d.data[4], d.data[5], d.data[6], d.data[7]], 1);
				this.setProgramConstantsFromVector(programType, firstRegister + 2, [d.data[8], d.data[9], d.data[10], d.data[11]], 1);
				this.setProgramConstantsFromVector(programType, firstRegister + 3, [d.data[12], d.data[13], d.data[14], d.data[15]], 1);
			}
		}
		, setProgramConstantsFromVector: function (programType, firstRegister, data, numRegisters) {
			if (numRegisters == null) numRegisters = 1;
			var _g = 0;
			while (_g < numRegisters) {
				var i = _g++;
				var currentIndex = i * 4;
				var locationName = this.__getUniformLocationNameFromAgalRegisterIndex(programType, firstRegister + i);
				this.setGLSLProgramConstantsFromVector4(locationName, data, currentIndex);
			}
		}
		, setRenderMethod: function (func) {
			this.ogl.set_render(function (rect) {
				func(null);
			});
		}
		, setRenderToBackBuffer: function () {
			lime_graphics_opengl_GL.context.disable(2929);
			lime_graphics_opengl_GL.context.disable(2960);
			lime_graphics_opengl_GL.context.disable(3089);
			if (this.framebuffer != null) lime_graphics_opengl_GL.context.bindFramebuffer(36160, null);
			if (this.renderbuffer != null) lime_graphics_opengl_GL.context.bindRenderbuffer(36161, null);
			lime_graphics_opengl_GL.context.viewport(this.scrollRect.x | 0, this.scrollRect.y | 0, this.scrollRect.width | 0, this.scrollRect.height | 0);
		}
		, setRenderToTexture: function (texture, enableDepthAndStencil, antiAlias, surfaceSelector) {
			if (surfaceSelector == null) surfaceSelector = 0;
			if (antiAlias == null) antiAlias = 0;
			if (enableDepthAndStencil == null) enableDepthAndStencil = false;
			if (this.framebuffer == null) this.framebuffer = lime_graphics_opengl_GL.context.createFramebuffer();
			lime_graphics_opengl_GL.context.bindFramebuffer(36160, this.framebuffer);
			if (this.renderbuffer == null) this.renderbuffer = lime_graphics_opengl_GL.context.createRenderbuffer();
			lime_graphics_opengl_GL.context.bindRenderbuffer(36161, this.renderbuffer);
			lime_graphics_opengl_GL.context.renderbufferStorage(36161, 6408, texture.width, texture.height);
			lime_graphics_opengl_GL.context.framebufferTexture2D(36160, 36064, 3553, texture.glTexture, 0);
			lime_graphics_opengl_GL.context.renderbufferStorage(36161, 34041, texture.width, texture.height);
			lime_graphics_opengl_GL.context.framebufferRenderbuffer(36160, 33306, 36161, this.renderbuffer);
			if (enableDepthAndStencil) {
				lime_graphics_opengl_GL.context.enable(2929);
				lime_graphics_opengl_GL.context.enable(2960);
			}
			lime_graphics_opengl_GL.context.bindTexture(3553, texture.glTexture);
			lime_graphics_opengl_GL.context.texImage2D(3553, 0, 6408, texture.width, texture.height, 0, 6408, 5121, null);
			lime_graphics_opengl_GL.context.texParameteri(3553, 10240, 9729);
			lime_graphics_opengl_GL.context.texParameteri(3553, 10241, 9985);
			lime_graphics_opengl_GL.context.viewport(0, 0, texture.width, texture.height);
		}
		, setSamplerStateAt: function (sampler, wrap, filter, mipfilter) {
			if (0 <= sampler && sampler < openfl_display3D_Context3D.MAX_SAMPLERS) {
				this.samplerParameters[sampler].wrap = wrap;
				this.samplerParameters[sampler].filter = filter;
				this.samplerParameters[sampler].mipfilter = mipfilter;
			} else throw new js__$Boot_HaxeError("Sampler is out of bounds.");
		}
		, setScissorRectangle: function (rectangle) {
			if (rectangle == null) {
				lime_graphics_opengl_GL.context.disable(3089);
				return;
			}
			lime_graphics_opengl_GL.context.enable(3089);
			lime_graphics_opengl_GL.context.scissor(rectangle.x | 0, rectangle.y | 0, rectangle.width | 0, rectangle.height | 0);
		}
		, setStencilActions: function (triangleFace, compareMode, actionOnBothPass, actionOnDepthFail, actionOnDepthPassStencilFail) {
			this.stencilCompareMode = compareMode;
			lime_graphics_opengl_GL.context.stencilOp(actionOnBothPass, actionOnDepthFail, actionOnDepthPassStencilFail);
			lime_graphics_opengl_GL.context.stencilFunc(this.stencilCompareMode, this.stencilRef, this.stencilReadMask);
		}
		, setStencilReferenceValue: function (referenceValue, readMask, writeMask) {
			if (writeMask == null) writeMask = 255;
			if (readMask == null) readMask = 255;
			this.stencilReadMask = readMask;
			this.stencilRef = referenceValue;
			lime_graphics_opengl_GL.context.stencilFunc(this.stencilCompareMode, this.stencilRef, this.stencilReadMask);
			lime_graphics_opengl_GL.context.stencilMask(writeMask);
		}
		, setTextureAt: function (sampler, texture) {
			var locationName = "fs" + sampler;
			this.setGLSLTextureAt(locationName, texture, sampler);
		}
		, setTextureParameters: function (texture, wrap, filter, mipfilter) {
			if (!openfl_display3D_Context3D.anisotropySupportTested) {
				var ext = lime_graphics_opengl_GL.context.getExtension("EXT_texture_filter_anisotropic");
				if (ext == null || Reflect.field(ext, "MAX_TEXTURE_MAX_ANISOTROPY_EXT") == null) ext = lime_graphics_opengl_GL.context.getExtension("MOZ_EXT_texture_filter_anisotropic");
				if (ext == null || Reflect.field(ext, "MAX_TEXTURE_MAX_ANISOTROPY_EXT") == null) ext = lime_graphics_opengl_GL.context.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
				openfl_display3D_Context3D.supportsAnisotropy = ext != null;
				if (openfl_display3D_Context3D.supportsAnisotropy) {
					openfl_display3D_Context3D.maxSupportedAnisotropy = lime_graphics_opengl_GL.getParameter(ext.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
					lime_graphics_opengl_GL.context.texParameteri(3553, openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT, openfl_display3D_Context3D.maxSupportedAnisotropy);
				}
				openfl_display3D_Context3D.anisotropySupportTested = true;
			}
			if (js_Boot.__instanceof(texture, openfl_display3D_textures_Texture)) {
				switch (wrap[1]) {
					case 0:
						lime_graphics_opengl_GL.context.texParameteri(3553, 10242, 33071);
						lime_graphics_opengl_GL.context.texParameteri(3553, 10243, 33071);
						break;
					case 1:
						lime_graphics_opengl_GL.context.texParameteri(3553, 10242, 10497);
						lime_graphics_opengl_GL.context.texParameteri(3553, 10243, 10497);
						break;
				}
				switch (filter[1]) {
					case 4:
						lime_graphics_opengl_GL.context.texParameteri(3553, 10240, 9729);
						if (openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(3553, openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT, 1);
						break;
					case 5:
						lime_graphics_opengl_GL.context.texParameteri(3553, 10240, 9728);
						if (openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(3553, openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT, 1);
						break;
					case 0:
						if (openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553, openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT, _$UInt_UInt_$Impl_$.gt(2, openfl_display3D_Context3D.maxSupportedAnisotropy) ? _$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy) : 2);
						break;
					case 1:
						if (openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553, openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT, _$UInt_UInt_$Impl_$.gt(4, openfl_display3D_Context3D.maxSupportedAnisotropy) ? _$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy) : 4);
						break;
					case 2:
						if (openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553, openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT, _$UInt_UInt_$Impl_$.gt(8, openfl_display3D_Context3D.maxSupportedAnisotropy) ? _$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy) : 8);
						break;
					case 3:
						if (openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553, openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT, _$UInt_UInt_$Impl_$.gt(16, openfl_display3D_Context3D.maxSupportedAnisotropy) ? _$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy) : 16);
						break;
				}
				switch (mipfilter[1]) {
					case 0:
						lime_graphics_opengl_GL.context.texParameteri(3553, 10241, 9987);
						break;
					case 1:
						lime_graphics_opengl_GL.context.texParameteri(3553, 10241, 9984);
						break;
					case 2:
						lime_graphics_opengl_GL.context.texParameteri(3553, 10241, filter == openfl_display3D_Context3DTextureFilter.NEAREST ? 9728 : 9729);
						break;
				}
				var tex = texture;
				if (mipfilter != openfl_display3D_Context3DMipFilter.MIPNONE && !tex.mipmapsGenerated) {
					lime_graphics_opengl_GL.context.generateMipmap(3553);
					tex.mipmapsGenerated = true;
				}
			} else if (js_Boot.__instanceof(texture, openfl_display3D_textures_RectangleTexture)) {
				lime_graphics_opengl_GL.context.texParameteri(3553, 10242, 33071);
				lime_graphics_opengl_GL.context.texParameteri(3553, 10243, 33071);
				switch (filter[1]) {
					case 4:
						lime_graphics_opengl_GL.context.texParameteri(3553, 10240, 9729);
						if (openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(3553, openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT, 1);
						break;
					case 5:
						lime_graphics_opengl_GL.context.texParameteri(3553, 10240, 9728);
						if (openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(3553, openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT, 1);
						break;
					case 0:
						if (openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553, openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT, _$UInt_UInt_$Impl_$.gt(2, openfl_display3D_Context3D.maxSupportedAnisotropy) ? _$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy) : 2);
						break;
					case 1:
						if (openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553, openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT, _$UInt_UInt_$Impl_$.gt(4, openfl_display3D_Context3D.maxSupportedAnisotropy) ? _$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy) : 4);
						break;
					case 2:
						if (openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553, openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT, _$UInt_UInt_$Impl_$.gt(8, openfl_display3D_Context3D.maxSupportedAnisotropy) ? _$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy) : 8);
						break;
					case 3:
						if (openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553, openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT, _$UInt_UInt_$Impl_$.gt(16, openfl_display3D_Context3D.maxSupportedAnisotropy) ? _$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy) : 16);
						break;
				}
				lime_graphics_opengl_GL.context.texParameteri(3553, 10241, filter == openfl_display3D_Context3DTextureFilter.NEAREST ? 9728 : 9729);
			} else if (js_Boot.__instanceof(texture, openfl_display3D_textures_CubeTexture)) {
				switch (wrap[1]) {
					case 0:
						lime_graphics_opengl_GL.context.texParameteri(34067, 10242, 33071);
						lime_graphics_opengl_GL.context.texParameteri(34067, 10243, 33071);
						break;
					case 1:
						lime_graphics_opengl_GL.context.texParameteri(34067, 10242, 10497);
						lime_graphics_opengl_GL.context.texParameteri(34067, 10243, 10497);
						break;
				}
				switch (filter[1]) {
					case 4:
						lime_graphics_opengl_GL.context.texParameteri(34067, 10240, 9729);
						if (openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(34067, openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT, 1);
						break;
					case 5:
						lime_graphics_opengl_GL.context.texParameteri(34067, 10240, 9728);
						if (openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(34067, openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT, 1);
						break;
					case 0:
						if (openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(34067, openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT, _$UInt_UInt_$Impl_$.gt(2, openfl_display3D_Context3D.maxSupportedAnisotropy) ? _$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy) : 2);
						break;
					case 1:
						if (openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(34067, openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT, _$UInt_UInt_$Impl_$.gt(4, openfl_display3D_Context3D.maxSupportedAnisotropy) ? _$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy) : 4);
						break;
					case 2:
						if (openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(34067, openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT, _$UInt_UInt_$Impl_$.gt(8, openfl_display3D_Context3D.maxSupportedAnisotropy) ? _$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy) : 8);
						break;
					case 3:
						if (openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(34067, openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT, _$UInt_UInt_$Impl_$.gt(16, openfl_display3D_Context3D.maxSupportedAnisotropy) ? _$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy) : 16);
						break;
				}
				switch (mipfilter[1]) {
					case 0:
						lime_graphics_opengl_GL.context.texParameteri(34067, 10241, 9987);
						break;
					case 1:
						lime_graphics_opengl_GL.context.texParameteri(34067, 10241, 9984);
						break;
					case 2:
						lime_graphics_opengl_GL.context.texParameteri(34067, 10241, filter == openfl_display3D_Context3DTextureFilter.NEAREST ? 9728 : 9729);
						break;
				}
				var cubetex = texture;
				if (mipfilter != openfl_display3D_Context3DMipFilter.MIPNONE && !cubetex.mipmapsGenerated) {
					lime_graphics_opengl_GL.context.generateMipmap(34067);
					cubetex.mipmapsGenerated = true;
				}
			} else throw new js__$Boot_HaxeError("Texture of type " + Type.getClassName(texture == null ? null : js_Boot.getClass(texture)) + " not supported yet");
		}
		, setVertexBufferAt: function (index, buffer, bufferOffset, format) {
			if (bufferOffset == null) bufferOffset = 0;
			var locationName = "va" + index;
			this.setGLSLVertexBufferAt(locationName, buffer, bufferOffset, format);
		}
		, __getUniformLocationNameFromAgalRegisterIndex: function (programType, firstRegister) {
			if (programType == openfl_display3D_Context3DProgramType.VERTEX) return "vc" + firstRegister; else if (programType == openfl_display3D_Context3DProgramType.FRAGMENT) return "fc" + firstRegister;
			throw new js__$Boot_HaxeError("Program Type " + Std.string(programType) + " not supported");
		}
		, __updateBlendStatus: function () {
			if (this.blendEnabled) {
				lime_graphics_opengl_GL.context.enable(3042);
				lime_graphics_opengl_GL.context.blendEquation(32774);
				lime_graphics_opengl_GL.context.blendFunc(this.blendSourceFactor, this.blendDestinationFactor);
			} else lime_graphics_opengl_GL.context.disable(3042);
		}
		, __class__: openfl_display3D_Context3D
	};
	var openfl_display3D__$Context3D_SamplerState = function () {
	};
	$hxClasses["openfl.display3D._Context3D.SamplerState"] = openfl_display3D__$Context3D_SamplerState;
	openfl_display3D__$Context3D_SamplerState.__name__ = ["openfl", "display3D", "_Context3D", "SamplerState"];
	openfl_display3D__$Context3D_SamplerState.prototype = {
		__class__: openfl_display3D__$Context3D_SamplerState
	};
	var openfl_display3D_Context3DClearMask = function () { };
	$hxClasses["openfl.display3D.Context3DClearMask"] = openfl_display3D_Context3DClearMask;
	openfl_display3D_Context3DClearMask.__name__ = ["openfl", "display3D", "Context3DClearMask"];
	var openfl_display3D_Context3DMipFilter = $hxClasses["openfl.display3D.Context3DMipFilter"] = { __ename__: ["openfl", "display3D", "Context3DMipFilter"], __constructs__: ["MIPLINEAR", "MIPNEAREST", "MIPNONE"] };
	openfl_display3D_Context3DMipFilter.MIPLINEAR = ["MIPLINEAR", 0];
	openfl_display3D_Context3DMipFilter.MIPLINEAR.toString = $estr;
	openfl_display3D_Context3DMipFilter.MIPLINEAR.__enum__ = openfl_display3D_Context3DMipFilter;
	openfl_display3D_Context3DMipFilter.MIPNEAREST = ["MIPNEAREST", 1];
	openfl_display3D_Context3DMipFilter.MIPNEAREST.toString = $estr;
	openfl_display3D_Context3DMipFilter.MIPNEAREST.__enum__ = openfl_display3D_Context3DMipFilter;
	openfl_display3D_Context3DMipFilter.MIPNONE = ["MIPNONE", 2];
	openfl_display3D_Context3DMipFilter.MIPNONE.toString = $estr;
	openfl_display3D_Context3DMipFilter.MIPNONE.__enum__ = openfl_display3D_Context3DMipFilter;
	var openfl_display3D_Context3DProgramType = $hxClasses["openfl.display3D.Context3DProgramType"] = { __ename__: ["openfl", "display3D", "Context3DProgramType"], __constructs__: ["VERTEX", "FRAGMENT"] };
	openfl_display3D_Context3DProgramType.VERTEX = ["VERTEX", 0];
	openfl_display3D_Context3DProgramType.VERTEX.toString = $estr;
	openfl_display3D_Context3DProgramType.VERTEX.__enum__ = openfl_display3D_Context3DProgramType;
	openfl_display3D_Context3DProgramType.FRAGMENT = ["FRAGMENT", 1];
	openfl_display3D_Context3DProgramType.FRAGMENT.toString = $estr;
	openfl_display3D_Context3DProgramType.FRAGMENT.__enum__ = openfl_display3D_Context3DProgramType;
	var openfl_display3D_Context3DTextureFilter = $hxClasses["openfl.display3D.Context3DTextureFilter"] = { __ename__: ["openfl", "display3D", "Context3DTextureFilter"], __constructs__: ["ANISOTROPIC2X", "ANISOTROPIC4X", "ANISOTROPIC8X", "ANISOTROPIC16X", "LINEAR", "NEAREST"] };
	openfl_display3D_Context3DTextureFilter.ANISOTROPIC2X = ["ANISOTROPIC2X", 0];
	openfl_display3D_Context3DTextureFilter.ANISOTROPIC2X.toString = $estr;
	openfl_display3D_Context3DTextureFilter.ANISOTROPIC2X.__enum__ = openfl_display3D_Context3DTextureFilter;
	openfl_display3D_Context3DTextureFilter.ANISOTROPIC4X = ["ANISOTROPIC4X", 1];
	openfl_display3D_Context3DTextureFilter.ANISOTROPIC4X.toString = $estr;
	openfl_display3D_Context3DTextureFilter.ANISOTROPIC4X.__enum__ = openfl_display3D_Context3DTextureFilter;
	openfl_display3D_Context3DTextureFilter.ANISOTROPIC8X = ["ANISOTROPIC8X", 2];
	openfl_display3D_Context3DTextureFilter.ANISOTROPIC8X.toString = $estr;
	openfl_display3D_Context3DTextureFilter.ANISOTROPIC8X.__enum__ = openfl_display3D_Context3DTextureFilter;
	openfl_display3D_Context3DTextureFilter.ANISOTROPIC16X = ["ANISOTROPIC16X", 3];
	openfl_display3D_Context3DTextureFilter.ANISOTROPIC16X.toString = $estr;
	openfl_display3D_Context3DTextureFilter.ANISOTROPIC16X.__enum__ = openfl_display3D_Context3DTextureFilter;
	openfl_display3D_Context3DTextureFilter.LINEAR = ["LINEAR", 4];
	openfl_display3D_Context3DTextureFilter.LINEAR.toString = $estr;
	openfl_display3D_Context3DTextureFilter.LINEAR.__enum__ = openfl_display3D_Context3DTextureFilter;
	openfl_display3D_Context3DTextureFilter.NEAREST = ["NEAREST", 5];
	openfl_display3D_Context3DTextureFilter.NEAREST.toString = $estr;
	openfl_display3D_Context3DTextureFilter.NEAREST.__enum__ = openfl_display3D_Context3DTextureFilter;
	var openfl_display3D_Context3DTextureFormat = $hxClasses["openfl.display3D.Context3DTextureFormat"] = { __ename__: ["openfl", "display3D", "Context3DTextureFormat"], __constructs__: ["BGRA", "COMPRESSED", "COMPRESSED_ALPHA"] };
	openfl_display3D_Context3DTextureFormat.BGRA = ["BGRA", 0];
	openfl_display3D_Context3DTextureFormat.BGRA.toString = $estr;
	openfl_display3D_Context3DTextureFormat.BGRA.__enum__ = openfl_display3D_Context3DTextureFormat;
	openfl_display3D_Context3DTextureFormat.COMPRESSED = ["COMPRESSED", 1];
	openfl_display3D_Context3DTextureFormat.COMPRESSED.toString = $estr;
	openfl_display3D_Context3DTextureFormat.COMPRESSED.__enum__ = openfl_display3D_Context3DTextureFormat;
	openfl_display3D_Context3DTextureFormat.COMPRESSED_ALPHA = ["COMPRESSED_ALPHA", 2];
	openfl_display3D_Context3DTextureFormat.COMPRESSED_ALPHA.toString = $estr;
	openfl_display3D_Context3DTextureFormat.COMPRESSED_ALPHA.__enum__ = openfl_display3D_Context3DTextureFormat;
	var openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$ = {};
	$hxClasses["openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_"] = openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$;
	openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.__name__ = ["openfl", "display3D", "_Context3DTriangleFace", "Context3DTriangleFace_Impl_"];
	openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$._new = function (a) {
		return a;
	};
	openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.fromInt = function (s) {
		return s;
	};
	openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.toInt = function (this1) {
		return this1;
	};
	var openfl_display3D_Context3DVertexBufferFormat = $hxClasses["openfl.display3D.Context3DVertexBufferFormat"] = { __ename__: ["openfl", "display3D", "Context3DVertexBufferFormat"], __constructs__: ["BYTES_4", "FLOAT_1", "FLOAT_2", "FLOAT_3", "FLOAT_4"] };
	openfl_display3D_Context3DVertexBufferFormat.BYTES_4 = ["BYTES_4", 0];
	openfl_display3D_Context3DVertexBufferFormat.BYTES_4.toString = $estr;
	openfl_display3D_Context3DVertexBufferFormat.BYTES_4.__enum__ = openfl_display3D_Context3DVertexBufferFormat;
	openfl_display3D_Context3DVertexBufferFormat.FLOAT_1 = ["FLOAT_1", 1];
	openfl_display3D_Context3DVertexBufferFormat.FLOAT_1.toString = $estr;
	openfl_display3D_Context3DVertexBufferFormat.FLOAT_1.__enum__ = openfl_display3D_Context3DVertexBufferFormat;
	openfl_display3D_Context3DVertexBufferFormat.FLOAT_2 = ["FLOAT_2", 2];
	openfl_display3D_Context3DVertexBufferFormat.FLOAT_2.toString = $estr;
	openfl_display3D_Context3DVertexBufferFormat.FLOAT_2.__enum__ = openfl_display3D_Context3DVertexBufferFormat;
	openfl_display3D_Context3DVertexBufferFormat.FLOAT_3 = ["FLOAT_3", 3];
	openfl_display3D_Context3DVertexBufferFormat.FLOAT_3.toString = $estr;
	openfl_display3D_Context3DVertexBufferFormat.FLOAT_3.__enum__ = openfl_display3D_Context3DVertexBufferFormat;
	openfl_display3D_Context3DVertexBufferFormat.FLOAT_4 = ["FLOAT_4", 4];
	openfl_display3D_Context3DVertexBufferFormat.FLOAT_4.toString = $estr;
	openfl_display3D_Context3DVertexBufferFormat.FLOAT_4.__enum__ = openfl_display3D_Context3DVertexBufferFormat;
	var openfl_display3D_Context3DWrapMode = $hxClasses["openfl.display3D.Context3DWrapMode"] = { __ename__: ["openfl", "display3D", "Context3DWrapMode"], __constructs__: ["CLAMP", "REPEAT"] };
	openfl_display3D_Context3DWrapMode.CLAMP = ["CLAMP", 0];
	openfl_display3D_Context3DWrapMode.CLAMP.toString = $estr;
	openfl_display3D_Context3DWrapMode.CLAMP.__enum__ = openfl_display3D_Context3DWrapMode;
	openfl_display3D_Context3DWrapMode.REPEAT = ["REPEAT", 1];
	openfl_display3D_Context3DWrapMode.REPEAT.toString = $estr;
	openfl_display3D_Context3DWrapMode.REPEAT.__enum__ = openfl_display3D_Context3DWrapMode;
	var openfl_display3D_IndexBuffer3D = function (context, glBuffer, numIndices) {
		this.context = context;
		this.glBuffer = glBuffer;
		this.numIndices = numIndices;
	};
	$hxClasses["openfl.display3D.IndexBuffer3D"] = openfl_display3D_IndexBuffer3D;
	openfl_display3D_IndexBuffer3D.__name__ = ["openfl", "display3D", "IndexBuffer3D"];
	openfl_display3D_IndexBuffer3D.prototype = {
		dispose: function () {
			this.context.__deleteIndexBuffer(this);
		}
		, uploadFromByteArray: function (byteArray, byteArrayOffset, startOffset, count) {
			var bytesPerIndex = 2;
			lime_graphics_opengl_GL.context.bindBuffer(34963, this.glBuffer);
			var length = count * bytesPerIndex;
			var offset = byteArrayOffset + startOffset * bytesPerIndex;
			var indices;
			var this1;
			if (length != null) this1 = new Int16Array(length); else this1 = null;
			indices = this1;
			byteArray.position = offset;
			var i = 0;
			while (byteArray.position < length + offset) {
				var val = byteArray.readUnsignedByte();
				indices[i] = val;
				i++;
			}
			lime_graphics_opengl_GL.context.bufferData(34963, indices, 35044);
		}
		, uploadFromVector: function (data, startOffset, count) {
			lime_graphics_opengl_GL.context.bindBuffer(34963, this.glBuffer);
			var indices;
			var this1;
			if (count != null) this1 = new Int16Array(count); else this1 = null;
			indices = this1;
			var _g1 = startOffset;
			var _g = startOffset + count;
			while (_g1 < _g) {
				var i = _g1++;
				indices[i] = data.data[i];
			}
			lime_graphics_opengl_GL.context.bufferData(34963, indices, 35044);
		}
		, __class__: openfl_display3D_IndexBuffer3D
	};
	var openfl_display3D_Program3D = function (context, program) {
		this.context = context;
		this.glProgram = program;
	};
	$hxClasses["openfl.display3D.Program3D"] = openfl_display3D_Program3D;
	openfl_display3D_Program3D.__name__ = ["openfl", "display3D", "Program3D"];
	openfl_display3D_Program3D.prototype = {
		dispose: function () {
			this.context.__deleteProgram(this);
		}
		, upload: function (vertexShader, fragmentShader) {
			lime_graphics_opengl_GL.context.attachShader(this.glProgram, vertexShader);
			lime_graphics_opengl_GL.context.attachShader(this.glProgram, fragmentShader);
			lime_graphics_opengl_GL.context.linkProgram(this.glProgram);
			if (lime_graphics_opengl_GL.context.getProgramParameter(this.glProgram, 35714) == 0) {
				var result = lime_graphics_opengl_GL.context.getProgramInfoLog(this.glProgram);
				if (result != "") throw new js__$Boot_HaxeError(result);
			}
		}
		, __class__: openfl_display3D_Program3D
	};
	var openfl_display3D_VertexBuffer3D = function (context, glBuffer, numVertices, data32PerVertex) {
		this.context = context;
		this.glBuffer = glBuffer;
		this.numVertices = numVertices;
		this.data32PerVertex = data32PerVertex;
	};
	$hxClasses["openfl.display3D.VertexBuffer3D"] = openfl_display3D_VertexBuffer3D;
	openfl_display3D_VertexBuffer3D.__name__ = ["openfl", "display3D", "VertexBuffer3D"];
	openfl_display3D_VertexBuffer3D.prototype = {
		dispose: function () {
			this.context.__deleteVertexBuffer(this);
		}
		, uploadFromByteArray: function (byteArray, byteArrayOffset, startOffset, count) {
			var bytesPerVertex = this.data32PerVertex * 4;
			lime_graphics_opengl_GL.context.bindBuffer(34962, this.glBuffer);
			var length = count * bytesPerVertex;
			var offset = byteArrayOffset + startOffset * bytesPerVertex;
			var float32Array;
			var this1;
			if (length != null) this1 = new Float32Array(length); else this1 = null;
			float32Array = this1;
			byteArray.position = offset;
			var i = 0;
			while (byteArray.position < length + offset) {
				var val = byteArray.readUnsignedByte();
				float32Array[i] = val;
				i++;
			}
			lime_graphics_opengl_GL.context.bufferData(34962, float32Array, 35044);
		}
		, uploadFromFloat32Array: function (data, startVertex, numVertices) {
			lime_graphics_opengl_GL.context.bindBuffer(34962, this.glBuffer);
			lime_graphics_opengl_GL.context.bufferData(34962, data, 35044);
		}
		, uploadFromVector: function (data, startVertex, numVertices) {
			var bytesPerVertex = this.data32PerVertex * 4;
			lime_graphics_opengl_GL.context.bindBuffer(34962, this.glBuffer);
			var length = numVertices * this.data32PerVertex;
			var offset = startVertex;
			var float32Array;
			var this1;
			if (length != null) this1 = new Float32Array(length); else this1 = null;
			float32Array = this1;
			var _g1 = startVertex;
			var _g = startVertex + length;
			while (_g1 < _g) {
				var i = _g1++;
				float32Array[i] = data.data[i];
			}
			lime_graphics_opengl_GL.context.bufferData(34962, float32Array, 35044);
			float32Array = null;
		}
		, __class__: openfl_display3D_VertexBuffer3D
	};
	var openfl_display3D_textures_TextureBase = function (context, glTexture, width, height) {
		if (height == null) height = 0;
		if (width == null) width = 0;
		openfl_events_EventDispatcher.call(this);
		this.context = context;
		this.width = width;
		this.height = height;
		this.glTexture = glTexture;
	};
	$hxClasses["openfl.display3D.textures.TextureBase"] = openfl_display3D_textures_TextureBase;
	openfl_display3D_textures_TextureBase.__name__ = ["openfl", "display3D", "textures", "TextureBase"];
	openfl_display3D_textures_TextureBase.__super__ = openfl_events_EventDispatcher;
	openfl_display3D_textures_TextureBase.prototype = $extend(openfl_events_EventDispatcher.prototype, {
		dispose: function () {
			this.context.__deleteTexture(this);
		}
		, __class__: openfl_display3D_textures_TextureBase
	});
	var openfl_display3D_textures_CubeTexture = function (context, glTexture, size) {
		openfl_display3D_textures_TextureBase.call(this, context, glTexture, size, size);
		this.size = size;
		this.mipmapsGenerated = false;
		this._textures = [];
		var _g = 0;
		while (_g < 6) {
			var i = _g++;
			this._textures[i] = lime_graphics_opengl_GL.context.createTexture();
		}
	};
	$hxClasses["openfl.display3D.textures.CubeTexture"] = openfl_display3D_textures_CubeTexture;
	openfl_display3D_textures_CubeTexture.__name__ = ["openfl", "display3D", "textures", "CubeTexture"];
	openfl_display3D_textures_CubeTexture.__super__ = openfl_display3D_textures_TextureBase;
	openfl_display3D_textures_CubeTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype, {
		glTextureAt: function (index) {
			return this._textures[index];
		}
		, uploadCompressedTextureFromByteArray: function (data, byteArrayOffset, async) {
			if (async == null) async = false;
		}
		, uploadFromBitmapData: function (bitmapData, side, miplevel) {
			if (miplevel == null) miplevel = 0;
			var source = bitmapData.image.get_data();
			lime_graphics_opengl_GL.context.bindTexture(34067, this.glTexture);
			switch (side) {
				case 0:
					lime_graphics_opengl_GL.context.texImage2D(34069, miplevel, 6408, bitmapData.width, bitmapData.height, 0, 6408, 5121, source);
					break;
				case 1:
					lime_graphics_opengl_GL.context.texImage2D(34070, miplevel, 6408, bitmapData.width, bitmapData.height, 0, 6408, 5121, source);
					break;
				case 2:
					lime_graphics_opengl_GL.context.texImage2D(34071, miplevel, 6408, bitmapData.width, bitmapData.height, 0, 6408, 5121, source);
					break;
				case 3:
					lime_graphics_opengl_GL.context.texImage2D(34072, miplevel, 6408, bitmapData.width, bitmapData.height, 0, 6408, 5121, source);
					break;
				case 4:
					lime_graphics_opengl_GL.context.texImage2D(34073, miplevel, 6408, bitmapData.width, bitmapData.height, 0, 6408, 5121, source);
					break;
				case 5:
					lime_graphics_opengl_GL.context.texImage2D(34074, miplevel, 6408, bitmapData.width, bitmapData.height, 0, 6408, 5121, source);
					break;
				default:
					throw new js__$Boot_HaxeError("unknown side type");
			}
			lime_graphics_opengl_GL.context.bindTexture(34067, null);
		}
		, uploadFromByteArray: function (data, byteArrayOffset, side, miplevel) {
			if (miplevel == null) miplevel = 0;
		}
		, __class__: openfl_display3D_textures_CubeTexture
	});
	var openfl_display3D_textures_RectangleTexture = function (context, glTexture, optimize, width, height) {
		this.optimizeForRenderToTexture = optimize;
		if (this.optimizeForRenderToTexture == null) this.optimizeForRenderToTexture = false;
		openfl_display3D_textures_TextureBase.call(this, context, glTexture, width, height);
	};
	$hxClasses["openfl.display3D.textures.RectangleTexture"] = openfl_display3D_textures_RectangleTexture;
	openfl_display3D_textures_RectangleTexture.__name__ = ["openfl", "display3D", "textures", "RectangleTexture"];
	openfl_display3D_textures_RectangleTexture.__super__ = openfl_display3D_textures_TextureBase;
	openfl_display3D_textures_RectangleTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype, {
		uploadFromBitmapData: function (bitmapData, miplevel) {
			if (miplevel == null) miplevel = 0;
			var p = lime_utils_ByteArray.__ofBuffer(bitmapData.image.get_data().buffer);
			this.width = bitmapData.width;
			this.height = bitmapData.height;
			this.uploadFromByteArray(p, 0);
		}
		, uploadFromByteArray: function (data, byteArrayOffset) {
			lime_graphics_opengl_GL.context.bindTexture(3553, this.glTexture);
			if (this.optimizeForRenderToTexture) lime_graphics_opengl_GL.context.pixelStorei(37440, 1);
			lime_graphics_opengl_GL.context.texParameteri(3553, 10240, 9728);
			lime_graphics_opengl_GL.context.texParameteri(3553, 10241, 9728);
			lime_graphics_opengl_GL.context.texParameteri(3553, 10242, 33071);
			lime_graphics_opengl_GL.context.texParameteri(3553, 10243, 33071);
			var source;
			var elements = data.length;
			var this1;
			if (elements != null) this1 = new Uint8Array(elements); else this1 = null;
			source = this1;
			data.position = byteArrayOffset;
			var i = 0;
			while (data.position < data.length) {
				var val = data.readUnsignedByte();
				source[i] = val;
				i++;
			}
			lime_graphics_opengl_GL.context.texImage2D(3553, 0, 6408, this.width, this.height, 0, 6408, 5121, source);
			lime_graphics_opengl_GL.context.bindTexture(3553, null);
		}
		, __class__: openfl_display3D_textures_RectangleTexture
	});
	var openfl_display3D_textures_Texture = function (context, glTexture, optimize, width, height) {
		this.optimizeForRenderToTexture = optimize;
		this.mipmapsGenerated = false;
		if (this.optimizeForRenderToTexture == null) this.optimizeForRenderToTexture = false;
		openfl_display3D_textures_TextureBase.call(this, context, glTexture, width, height);
	};
	$hxClasses["openfl.display3D.textures.Texture"] = openfl_display3D_textures_Texture;
	openfl_display3D_textures_Texture.__name__ = ["openfl", "display3D", "textures", "Texture"];
	openfl_display3D_textures_Texture.__super__ = openfl_display3D_textures_TextureBase;
	openfl_display3D_textures_Texture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype, {
		uploadCompressedTextureFromByteArray: function (data, byteArrayOffset, async) {
			if (async == null) async = false;
		}
		, uploadFromBitmapData: function (bitmapData, miplevel) {
			if (miplevel == null) miplevel = 0;
			var image = bitmapData.image;
			if (!image.get_premultiplied() && image.get_transparent()) {
				image = image.clone();
				image.set_premultiplied(true);
			}
			this.width = image.width;
			this.height = image.height;
			this.uploadFromUInt8Array(image.get_data(), miplevel);
		}
		, uploadFromByteArray: function (data, byteArrayOffset, miplevel) {
			if (miplevel == null) miplevel = 0;
			var source;
			var elements = data.length;
			var this1;
			if (elements != null) this1 = new Uint8Array(elements); else this1 = null;
			source = this1;
			data.position = byteArrayOffset;
			var i = 0;
			while (data.position < data.length) {
				var val = data.readUnsignedByte();
				source[i] = val;
				i++;
			}
			this.uploadFromUInt8Array(source, miplevel);
		}
		, uploadFromUInt8Array: function (data, miplevel) {
			if (miplevel == null) miplevel = 0;
			lime_graphics_opengl_GL.context.bindTexture(3553, this.glTexture);
			if (this.optimizeForRenderToTexture) {
				lime_graphics_opengl_GL.context.pixelStorei(37440, 1);
				lime_graphics_opengl_GL.context.texParameteri(3553, 10240, 9728);
				lime_graphics_opengl_GL.context.texParameteri(3553, 10241, 9728);
				lime_graphics_opengl_GL.context.texParameteri(3553, 10242, 33071);
				lime_graphics_opengl_GL.context.texParameteri(3553, 10243, 33071);
			}
			lime_graphics_opengl_GL.context.texImage2D(3553, miplevel, 6408, this.width, this.height, 0, 6408, 5121, data);
			lime_graphics_opengl_GL.context.bindTexture(3553, null);
		}
		, __class__: openfl_display3D_textures_Texture
	});
	var openfl_errors_Error = function (message, id) {
		if (id == null) id = 0;
		if (message == null) message = "";
		this.message = message;
		this.errorID = id;
		this.name = "Error";
	};
	$hxClasses["openfl.errors.Error"] = openfl_errors_Error;
	openfl_errors_Error.__name__ = ["openfl", "errors", "Error"];
	openfl_errors_Error.prototype = {
		getStackTrace: function () {
			return haxe_CallStack.toString(haxe_CallStack.exceptionStack());
		}
		, toString: function () {
			if (this.message != null) return this.message; else return "Error";
		}
		, __class__: openfl_errors_Error
	};
	var openfl_errors_ArgumentError = function (message) {
		if (message == null) message = "";
		openfl_errors_Error.call(this, message);
		this.name = "ArgumentError";
	};
	$hxClasses["openfl.errors.ArgumentError"] = openfl_errors_ArgumentError;
	openfl_errors_ArgumentError.__name__ = ["openfl", "errors", "ArgumentError"];
	openfl_errors_ArgumentError.__super__ = openfl_errors_Error;
	openfl_errors_ArgumentError.prototype = $extend(openfl_errors_Error.prototype, {
		__class__: openfl_errors_ArgumentError
	});
	var openfl_errors_IOError = function (message) {
		if (message == null) message = "";
		openfl_errors_Error.call(this, message);
		this.name = "IOError";
	};
	$hxClasses["openfl.errors.IOError"] = openfl_errors_IOError;
	openfl_errors_IOError.__name__ = ["openfl", "errors", "IOError"];
	openfl_errors_IOError.__super__ = openfl_errors_Error;
	openfl_errors_IOError.prototype = $extend(openfl_errors_Error.prototype, {
		__class__: openfl_errors_IOError
	});
	var openfl_errors_RangeError = function (message) {
		if (message == null) message = "";
		openfl_errors_Error.call(this, message, 0);
		this.name = "RangeError";
	};
	$hxClasses["openfl.errors.RangeError"] = openfl_errors_RangeError;
	openfl_errors_RangeError.__name__ = ["openfl", "errors", "RangeError"];
	openfl_errors_RangeError.__super__ = openfl_errors_Error;
	openfl_errors_RangeError.prototype = $extend(openfl_errors_Error.prototype, {
		__class__: openfl_errors_RangeError
	});
	var openfl_errors_SecurityError = function (message) {
		if (message == null) message = "";
		openfl_errors_Error.call(this, message, 0);
		this.name = "SecurityError";
	};
	$hxClasses["openfl.errors.SecurityError"] = openfl_errors_SecurityError;
	openfl_errors_SecurityError.__name__ = ["openfl", "errors", "SecurityError"];
	openfl_errors_SecurityError.__super__ = openfl_errors_Error;
	openfl_errors_SecurityError.prototype = $extend(openfl_errors_Error.prototype, {
		__class__: openfl_errors_SecurityError
	});
	var openfl_errors_TypeError = function (message) {
		if (message == null) message = "";
		openfl_errors_Error.call(this, message, 0);
		this.name = "TypeError";
	};
	$hxClasses["openfl.errors.TypeError"] = openfl_errors_TypeError;
	openfl_errors_TypeError.__name__ = ["openfl", "errors", "TypeError"];
	openfl_errors_TypeError.__super__ = openfl_errors_Error;
	openfl_errors_TypeError.prototype = $extend(openfl_errors_Error.prototype, {
		__class__: openfl_errors_TypeError
	});
	var openfl_events_Event = function (type, bubbles, cancelable) {
		if (cancelable == null) cancelable = false;
		if (bubbles == null) bubbles = false;
		this.type = type;
		this.bubbles = bubbles;
		this.cancelable = cancelable;
		this.eventPhase = openfl_events_EventPhase.AT_TARGET;
	};
	$hxClasses["openfl.events.Event"] = openfl_events_Event;
	openfl_events_Event.__name__ = ["openfl", "events", "Event"];
	openfl_events_Event.prototype = {
		clone: function () {
			var event = new openfl_events_Event(this.type, this.bubbles, this.cancelable);
			event.eventPhase = this.eventPhase;
			event.target = this.target;
			event.currentTarget = this.currentTarget;
			return event;
		}
		, isDefaultPrevented: function () {
			return this.__preventDefault;
		}
		, preventDefault: function () {
			if (this.cancelable) this.__preventDefault = true;
		}
		, stopImmediatePropagation: function () {
			this.__isCancelled = true;
			this.__isCancelledNow = true;
		}
		, stopPropagation: function () {
			this.__isCancelled = true;
		}
		, toString: function () {
			return "[Event type=\"" + this.type + "\" bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + "]";
		}
		, __class__: openfl_events_Event
	};
	var openfl_events_TextEvent = function (type, bubbles, cancelable, text) {
		if (text == null) text = "";
		if (cancelable == null) cancelable = false;
		if (bubbles == null) bubbles = false;
		openfl_events_Event.call(this, type, bubbles, cancelable);
		this.text = text;
	};
	$hxClasses["openfl.events.TextEvent"] = openfl_events_TextEvent;
	openfl_events_TextEvent.__name__ = ["openfl", "events", "TextEvent"];
	openfl_events_TextEvent.__super__ = openfl_events_Event;
	openfl_events_TextEvent.prototype = $extend(openfl_events_Event.prototype, {
		clone: function () {
			return new openfl_events_TextEvent(this.type, this.bubbles, this.cancelable, this.text);
		}
		, toString: function () {
			return "[TextEvent type=\"" + this.type + "\" bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " text=\"" + this.text + "\"]";
		}
		, __class__: openfl_events_TextEvent
	});
	var openfl_events_ErrorEvent = function (type, bubbles, cancelable, text, id) {
		if (id == null) id = 0;
		if (text == null) text = "";
		if (cancelable == null) cancelable = false;
		if (bubbles == null) bubbles = false;
		openfl_events_TextEvent.call(this, type, bubbles, cancelable, text);
		this.errorID = id;
	};
	$hxClasses["openfl.events.ErrorEvent"] = openfl_events_ErrorEvent;
	openfl_events_ErrorEvent.__name__ = ["openfl", "events", "ErrorEvent"];
	openfl_events_ErrorEvent.__super__ = openfl_events_TextEvent;
	openfl_events_ErrorEvent.prototype = $extend(openfl_events_TextEvent.prototype, {
		clone: function () {
			return new openfl_events_ErrorEvent(this.type, this.bubbles, this.cancelable, this.text, this.errorID);
		}
		, toString: function () {
			return "[ErrorEvent type=\"" + this.type + "\" bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " text=" + this.text + " errorID=" + this.errorID + "]";
		}
		, __class__: openfl_events_ErrorEvent
	});
	var openfl_events__$EventDispatcher_Listener = function (callback, useCapture, priority) {
		this.callback = callback;
		this.useCapture = useCapture;
		this.priority = priority;
	};
	$hxClasses["openfl.events._EventDispatcher.Listener"] = openfl_events__$EventDispatcher_Listener;
	openfl_events__$EventDispatcher_Listener.__name__ = ["openfl", "events", "_EventDispatcher", "Listener"];
	openfl_events__$EventDispatcher_Listener.prototype = {
		match: function (callback, useCapture) {
			return Reflect.compareMethods(this.callback, callback) && this.useCapture == useCapture;
		}
		, __class__: openfl_events__$EventDispatcher_Listener
	};
	var openfl_events_EventPhase = $hxClasses["openfl.events.EventPhase"] = { __ename__: ["openfl", "events", "EventPhase"], __constructs__: ["CAPTURING_PHASE", "AT_TARGET", "BUBBLING_PHASE"] };
	openfl_events_EventPhase.CAPTURING_PHASE = ["CAPTURING_PHASE", 0];
	openfl_events_EventPhase.CAPTURING_PHASE.toString = $estr;
	openfl_events_EventPhase.CAPTURING_PHASE.__enum__ = openfl_events_EventPhase;
	openfl_events_EventPhase.AT_TARGET = ["AT_TARGET", 1];
	openfl_events_EventPhase.AT_TARGET.toString = $estr;
	openfl_events_EventPhase.AT_TARGET.__enum__ = openfl_events_EventPhase;
	openfl_events_EventPhase.BUBBLING_PHASE = ["BUBBLING_PHASE", 2];
	openfl_events_EventPhase.BUBBLING_PHASE.toString = $estr;
	openfl_events_EventPhase.BUBBLING_PHASE.__enum__ = openfl_events_EventPhase;
	var openfl_events_FocusEvent = function (type, bubbles, cancelable, relatedObject, shiftKey, keyCode) {
		if (keyCode == null) keyCode = 0;
		if (shiftKey == null) shiftKey = false;
		if (cancelable == null) cancelable = false;
		if (bubbles == null) bubbles = false;
		openfl_events_Event.call(this, type, bubbles, cancelable);
		this.keyCode = keyCode;
		this.shiftKey = shiftKey;
		this.relatedObject = relatedObject;
	};
	$hxClasses["openfl.events.FocusEvent"] = openfl_events_FocusEvent;
	openfl_events_FocusEvent.__name__ = ["openfl", "events", "FocusEvent"];
	openfl_events_FocusEvent.__super__ = openfl_events_Event;
	openfl_events_FocusEvent.prototype = $extend(openfl_events_Event.prototype, {
		clone: function () {
			var event = new openfl_events_FocusEvent(this.type, this.bubbles, this.cancelable, this.relatedObject, this.shiftKey, this.keyCode);
			event.target = this.target;
			event.currentTarget = this.currentTarget;
			event.eventPhase = this.eventPhase;
			return event;
		}
		, toString: function () {
			return "[FocusEvent type=\"" + this.type + "\" bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " relatedObject=" + Std.string(this.relatedObject) + " shiftKey=" + Std.string(this.shiftKey) + " keyCode=" + this.keyCode + "]";
		}
		, __class__: openfl_events_FocusEvent
	});
	var openfl_events_FullScreenEvent = function (type, bubbles, cancelable, fullScreen, interactive) {
		if (interactive == null) interactive = false;
		if (fullScreen == null) fullScreen = false;
		if (cancelable == null) cancelable = false;
		if (bubbles == null) bubbles = false;
		openfl_events_Event.call(this, type, bubbles, cancelable);
		this.fullScreen = fullScreen;
		this.interactive = interactive;
	};
	$hxClasses["openfl.events.FullScreenEvent"] = openfl_events_FullScreenEvent;
	openfl_events_FullScreenEvent.__name__ = ["openfl", "events", "FullScreenEvent"];
	openfl_events_FullScreenEvent.__super__ = openfl_events_Event;
	openfl_events_FullScreenEvent.prototype = $extend(openfl_events_Event.prototype, {
		clone: function () {
			var event = new openfl_events_FullScreenEvent(this.type, this.bubbles, this.cancelable, this.fullScreen, this.interactive);
			event.target = this.target;
			event.currentTarget = this.currentTarget;
			event.eventPhase = this.eventPhase;
			return event;
		}
		, toString: function () {
			return "[FullscreenEvent type=\"" + this.type + "\" bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " fullscreen=" + Std.string(this.fullScreen) + " interactive=" + Std.string(this.interactive) + "]";
		}
		, __class__: openfl_events_FullScreenEvent
	});
	var openfl_events_GameInputEvent = function (type, bubbles, cancelable, device) {
		if (cancelable == null) cancelable = false;
		if (bubbles == null) bubbles = true;
		openfl_events_Event.call(this, type, bubbles, cancelable);
		this.device = device;
	};
	$hxClasses["openfl.events.GameInputEvent"] = openfl_events_GameInputEvent;
	openfl_events_GameInputEvent.__name__ = ["openfl", "events", "GameInputEvent"];
	openfl_events_GameInputEvent.__super__ = openfl_events_Event;
	openfl_events_GameInputEvent.prototype = $extend(openfl_events_Event.prototype, {
		clone: function () {
			return new openfl_events_GameInputEvent(this.type, this.bubbles, this.cancelable, this.device);
		}
		, toString: function () {
			return "[GameInputEvent type=\"" + this.type + "\" bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " device=" + Std.string(this.device) + "]";
		}
		, __class__: openfl_events_GameInputEvent
	});
	var openfl_events_HTTPStatusEvent = function (type, bubbles, cancelable, status) {
		if (status == null) status = 0;
		if (cancelable == null) cancelable = false;
		if (bubbles == null) bubbles = false;
		this.status = status;
		openfl_events_Event.call(this, type, bubbles, cancelable);
	};
	$hxClasses["openfl.events.HTTPStatusEvent"] = openfl_events_HTTPStatusEvent;
	openfl_events_HTTPStatusEvent.__name__ = ["openfl", "events", "HTTPStatusEvent"];
	openfl_events_HTTPStatusEvent.__super__ = openfl_events_Event;
	openfl_events_HTTPStatusEvent.prototype = $extend(openfl_events_Event.prototype, {
		__class__: openfl_events_HTTPStatusEvent
	});
	var openfl_events_IOErrorEvent = function (type, bubbles, cancelable, text, id) {
		if (id == null) id = 0;
		if (text == null) text = "";
		if (cancelable == null) cancelable = false;
		if (bubbles == null) bubbles = true;
		openfl_events_ErrorEvent.call(this, type, bubbles, cancelable, text, id);
	};
	$hxClasses["openfl.events.IOErrorEvent"] = openfl_events_IOErrorEvent;
	openfl_events_IOErrorEvent.__name__ = ["openfl", "events", "IOErrorEvent"];
	openfl_events_IOErrorEvent.__super__ = openfl_events_ErrorEvent;
	openfl_events_IOErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype, {
		clone: function () {
			return new openfl_events_IOErrorEvent(this.type, this.bubbles, this.cancelable, this.text, this.errorID);
		}
		, toString: function () {
			return "[IOErrorEvent type=\"" + this.type + "\" bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " text=" + this.text + " errorID=" + this.errorID + "]";
		}
		, __class__: openfl_events_IOErrorEvent
	});
	var openfl_events_KeyboardEvent = function (type, bubbles, cancelable, charCodeValue, keyCodeValue, keyLocationValue, ctrlKeyValue, altKeyValue, shiftKeyValue, controlKeyValue, commandKeyValue) {
		if (commandKeyValue == null) commandKeyValue = false;
		if (controlKeyValue == null) controlKeyValue = false;
		if (shiftKeyValue == null) shiftKeyValue = false;
		if (altKeyValue == null) altKeyValue = false;
		if (ctrlKeyValue == null) ctrlKeyValue = false;
		if (keyCodeValue == null) keyCodeValue = 0;
		if (charCodeValue == null) charCodeValue = 0;
		if (cancelable == null) cancelable = false;
		if (bubbles == null) bubbles = false;
		openfl_events_Event.call(this, type, bubbles, cancelable);
		this.charCode = charCodeValue;
		this.keyCode = keyCodeValue;
		if (keyLocationValue != null) this.keyLocation = keyLocationValue; else this.keyLocation = 0;
		this.ctrlKey = ctrlKeyValue;
		this.altKey = altKeyValue;
		this.shiftKey = shiftKeyValue;
		this.controlKey = controlKeyValue;
		this.commandKey = commandKeyValue;
	};
	$hxClasses["openfl.events.KeyboardEvent"] = openfl_events_KeyboardEvent;
	openfl_events_KeyboardEvent.__name__ = ["openfl", "events", "KeyboardEvent"];
	openfl_events_KeyboardEvent.__super__ = openfl_events_Event;
	openfl_events_KeyboardEvent.prototype = $extend(openfl_events_Event.prototype, {
		clone: function () {
			return new openfl_events_KeyboardEvent(this.type, this.bubbles, this.cancelable, this.charCode, this.keyCode, this.keyLocation, this.ctrlKey, this.altKey, this.shiftKey, this.controlKey, this.commandKey);
		}
		, toString: function () {
			return "[KeyboardEvent type=\"" + this.type + "\" bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " charCode=" + this.charCode + " keyCode=" + this.keyCode + " keyLocation=" + this.keyLocation + " ctrlKey=" + Std.string(this.ctrlKey) + " altKey=" + Std.string(this.altKey) + " shiftKey=" + Std.string(this.shiftKey) + "]";
		}
		, __class__: openfl_events_KeyboardEvent
	});
	var openfl_events_MouseEvent = function (type, bubbles, cancelable, localX, localY, relatedObject, ctrlKey, altKey, shiftKey, buttonDown, delta, commandKey, clickCount) {
		if (clickCount == null) clickCount = 0;
		if (commandKey == null) commandKey = false;
		if (delta == null) delta = 0;
		if (buttonDown == null) buttonDown = false;
		if (shiftKey == null) shiftKey = false;
		if (altKey == null) altKey = false;
		if (ctrlKey == null) ctrlKey = false;
		if (localY == null) localY = 0;
		if (localX == null) localX = 0;
		if (cancelable == null) cancelable = false;
		if (bubbles == null) bubbles = true;
		openfl_events_Event.call(this, type, bubbles, cancelable);
		this.shiftKey = shiftKey;
		this.altKey = altKey;
		this.ctrlKey = ctrlKey;
		this.bubbles = bubbles;
		this.relatedObject = relatedObject;
		this.delta = delta;
		this.localX = localX;
		this.localY = localY;
		this.buttonDown = buttonDown;
		this.commandKey = commandKey;
		this.clickCount = clickCount;
	};
	$hxClasses["openfl.events.MouseEvent"] = openfl_events_MouseEvent;
	openfl_events_MouseEvent.__name__ = ["openfl", "events", "MouseEvent"];
	openfl_events_MouseEvent.__altKey = null;
	openfl_events_MouseEvent.__buttonDown = null;
	openfl_events_MouseEvent.__commandKey = null;
	openfl_events_MouseEvent.__ctrlKey = null;
	openfl_events_MouseEvent.__shiftKey = null;
	openfl_events_MouseEvent.__create = function (type, button, stageX, stageY, local, target, delta) {
		if (delta == null) delta = 0;
		switch (type) {
			case "mouseDown":
				openfl_events_MouseEvent.__buttonDown = true;
				break;
			case "mouseUp":
				openfl_events_MouseEvent.__buttonDown = false;
				break;
			default:
		}
		var event = new openfl_events_MouseEvent(type, true, false, local.x, local.y, null, openfl_events_MouseEvent.__ctrlKey, openfl_events_MouseEvent.__altKey, openfl_events_MouseEvent.__shiftKey, openfl_events_MouseEvent.__buttonDown, delta, openfl_events_MouseEvent.__commandKey);
		event.stageX = stageX;
		event.stageY = stageY;
		event.target = target;
		return event;
	};
	openfl_events_MouseEvent.__super__ = openfl_events_Event;
	openfl_events_MouseEvent.prototype = $extend(openfl_events_Event.prototype, {
		clone: function () {
			return new openfl_events_MouseEvent(this.type, this.bubbles, this.cancelable, this.localX, this.localY, this.relatedObject, this.ctrlKey, this.altKey, this.shiftKey, this.buttonDown, this.delta, this.commandKey, this.clickCount);
		}
		, toString: function () {
			return "[MouseEvent type=\"" + this.type + "\" bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " localX=" + this.localX + " localY=" + this.localY + " relatedObject=" + Std.string(this.relatedObject) + " ctrlKey=" + Std.string(this.ctrlKey) + " altKey=" + Std.string(this.altKey) + " shiftKey=" + Std.string(this.shiftKey) + " buttonDown=" + Std.string(this.buttonDown) + " delta=" + this.delta + "]";
		}
		, updateAfterEvent: function () {
		}
		, __class__: openfl_events_MouseEvent
	});
	var openfl_events_ProgressEvent = function (type, bubbles, cancelable, bytesLoaded, bytesTotal) {
		if (bytesTotal == null) bytesTotal = 0;
		if (bytesLoaded == null) bytesLoaded = 0;
		if (cancelable == null) cancelable = false;
		if (bubbles == null) bubbles = false;
		openfl_events_Event.call(this, type, bubbles, cancelable);
		this.bytesLoaded = bytesLoaded;
		this.bytesTotal = bytesTotal;
	};
	$hxClasses["openfl.events.ProgressEvent"] = openfl_events_ProgressEvent;
	openfl_events_ProgressEvent.__name__ = ["openfl", "events", "ProgressEvent"];
	openfl_events_ProgressEvent.__super__ = openfl_events_Event;
	openfl_events_ProgressEvent.prototype = $extend(openfl_events_Event.prototype, {
		clone: function () {
			return new openfl_events_ProgressEvent(this.type, this.bubbles, this.cancelable, this.bytesLoaded, this.bytesTotal);
		}
		, toString: function () {
			return "[ProgressEvent type=\"" + this.type + "\" bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " bytesLoaded=" + this.bytesLoaded + " bytesTotal=" + this.bytesTotal + "]";
		}
		, __class__: openfl_events_ProgressEvent
	});
	var openfl_events_SecurityErrorEvent = function (type, bubbles, cancelable, text, id) {
		if (id == null) id = 0;
		if (text == null) text = "";
		if (cancelable == null) cancelable = false;
		if (bubbles == null) bubbles = false;
		openfl_events_ErrorEvent.call(this, type, bubbles, cancelable, text, id);
	};
	$hxClasses["openfl.events.SecurityErrorEvent"] = openfl_events_SecurityErrorEvent;
	openfl_events_SecurityErrorEvent.__name__ = ["openfl", "events", "SecurityErrorEvent"];
	openfl_events_SecurityErrorEvent.__super__ = openfl_events_ErrorEvent;
	openfl_events_SecurityErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype, {
		clone: function () {
			return new openfl_events_SecurityErrorEvent(this.type, this.bubbles, this.cancelable, this.text, this.errorID);
		}
		, toString: function () {
			return "[SecurityErrorEvent type=\"" + this.type + "\" bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " text=" + this.text + " errorID=" + this.errorID + "]";
		}
		, __class__: openfl_events_SecurityErrorEvent
	});
	var openfl_events_TouchEvent = function (type, bubbles, cancelable, localX, localY, sizeX, sizeY, relatedObject, ctrlKey, altKey, shiftKey, buttonDown, delta, commandKey, clickCount) {
		if (clickCount == null) clickCount = 0;
		if (commandKey == null) commandKey = false;
		if (delta == null) delta = 0;
		if (buttonDown == null) buttonDown = false;
		if (shiftKey == null) shiftKey = false;
		if (altKey == null) altKey = false;
		if (ctrlKey == null) ctrlKey = false;
		if (sizeY == null) sizeY = 1;
		if (sizeX == null) sizeX = 1;
		if (localY == null) localY = 0;
		if (localX == null) localX = 0;
		if (cancelable == null) cancelable = false;
		if (bubbles == null) bubbles = true;
		openfl_events_Event.call(this, type, bubbles, cancelable);
		this.shiftKey = shiftKey;
		this.altKey = altKey;
		this.ctrlKey = ctrlKey;
		this.bubbles = bubbles;
		this.relatedObject = relatedObject;
		this.delta = delta;
		this.localX = localX;
		this.localY = localY;
		this.sizeX = sizeX;
		this.sizeY = sizeY;
		this.buttonDown = buttonDown;
		this.commandKey = commandKey;
		this.pressure = 1;
		this.touchPointID = 0;
		this.isPrimaryTouchPoint = true;
	};
	$hxClasses["openfl.events.TouchEvent"] = openfl_events_TouchEvent;
	openfl_events_TouchEvent.__name__ = ["openfl", "events", "TouchEvent"];
	openfl_events_TouchEvent.__create = function (type, touch, stageX, stageY, local, target) {
		var evt = new openfl_events_TouchEvent(type, true, false, local.x, local.y, 1, 1, null, false, false, false, false, 0, false, 0);
		evt.stageX = stageX;
		evt.stageY = stageY;
		evt.target = target;
		return evt;
	};
	openfl_events_TouchEvent.__super__ = openfl_events_Event;
	openfl_events_TouchEvent.prototype = $extend(openfl_events_Event.prototype, {
		updateAfterEvent: function () {
		}
		, __class__: openfl_events_TouchEvent
	});
	var openfl_filters_BitmapFilter = function () {
		this.__saveLastFilter = false;
		this.__passes = 0;
		this.__dirty = true;
	};
	$hxClasses["openfl.filters.BitmapFilter"] = openfl_filters_BitmapFilter;
	openfl_filters_BitmapFilter.__name__ = ["openfl", "filters", "BitmapFilter"];
	openfl_filters_BitmapFilter.__tmpRenderTexture = null;
	openfl_filters_BitmapFilter.__expandBounds = function (filters, rect, matrix) {
		var r = openfl_geom_Rectangle.__temp;
		r.setEmpty();
		var _g = 0;
		while (_g < filters.length) {
			var filter = filters[_g];
			++_g;
			filter.__growBounds(r);
		}
		r.__transform(r, matrix);
		rect.__expand(r.x, r.y, r.width, r.height);
	};
	openfl_filters_BitmapFilter.__applyFilters = function (filters, renderSession, source, target, sourceRect, destPoint) {
		var same = target == source && target.__usingPingPongTexture;
		if (same) target.__pingPongTexture.useOldTexture = true;
		if (sourceRect == null) sourceRect = source.rect;
		var lastFilterOutput = null;
		var useLastFilter = false;
		var srcShader = source.__shader;
		var _g = 0;
		while (_g < filters.length) {
			var filter = filters[_g];
			++_g;
			useLastFilter = false;
			if (filter.__saveLastFilter) {
				target.__pingPongTexture.swap();
				target.__drawGL(renderSession, source, null, null, null, sourceRect, true, !target.__usingPingPongTexture, true);
				lastFilterOutput = target.__pingPongTexture.get_oldRenderTexture();
				target.__pingPongTexture.set_oldRenderTexture(openfl_filters_BitmapFilter.__tmpRenderTexture);
			}
			var _g2 = 0;
			var _g1 = filter.__passes;
			while (_g2 < _g1) {
				var pass = _g2++;
				useLastFilter = filter.__saveLastFilter && filter.__useLastFilter(pass);
				if (same && !useLastFilter) target.__pingPongTexture.swap();
				if (useLastFilter) {
					openfl_filters_BitmapFilter.__tmpRenderTexture = target.__pingPongTexture.get_oldRenderTexture();
					target.__pingPongTexture.set_oldRenderTexture(lastFilterOutput);
				}
				source.__shader = filter.__preparePass(pass);
				target.__drawGL(renderSession, source, null, null, null, sourceRect, true, !target.__usingPingPongTexture, !useLastFilter);
			}
		}
		source.__shader = srcShader;
		if (same) target.__pingPongTexture.useOldTexture = false;
	};
	openfl_filters_BitmapFilter.prototype = {
		clone: function () {
			return new openfl_filters_BitmapFilter();
		}
		, __applyFilter: function (sourceData, targetData, sourceRect, destPoint) {
		}
		, __growBounds: function (rect) {
		}
		, __preparePass: function (pass) {
			return null;
		}
		, __useLastFilter: function (pass) {
			return false;
		}
		, __class__: openfl_filters_BitmapFilter
	};
	var openfl_geom_Matrix3D = function (v) {
		if (v != null && v.length == 16) this.rawData = v; else {
			var value = [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0];
			var vectorData = new openfl_VectorData();
			vectorData.length = value.length;
			vectorData.fixed = true;
			var vec;
			var this1;
			this1 = new Array(value.length);
			vec = this1;
			var _g1 = 0;
			var _g = value.length;
			while (_g1 < _g) {
				var i = _g1++;
				vec[i] = value[i];
			}
			vectorData.data = vec;
			this.rawData = vectorData;
		}
	};
	$hxClasses["openfl.geom.Matrix3D"] = openfl_geom_Matrix3D;
	openfl_geom_Matrix3D.__name__ = ["openfl", "geom", "Matrix3D"];
	openfl_geom_Matrix3D.create2D = function (x, y, scale, rotation) {
		if (rotation == null) rotation = 0;
		if (scale == null) scale = 1;
		var theta = rotation * Math.PI / 180.0;
		var c = Math.cos(theta);
		var s = Math.sin(theta);
		return new openfl_geom_Matrix3D((function ($this) {
			var $r;
			var value = [c * scale, -s * scale, 0, 0, s * scale, c * scale, 0, 0, 0, 0, 1, 0, x, y, 0, 1];
			var vectorData = new openfl_VectorData();
			vectorData.length = value.length;
			vectorData.fixed = true;
			{
				var vec;
				var this1;
				this1 = new Array(value.length);
				vec = this1;
				var _g1 = 0;
				var _g = value.length;
				while (_g1 < _g) {
					var i = _g1++;
					vec[i] = value[i];
				}
				vectorData.data = vec;
			}
			$r = vectorData;
			return $r;
		}(this)));
	};
	openfl_geom_Matrix3D.createABCD = function (a, b, c, d, tx, ty) {
		return new openfl_geom_Matrix3D((function ($this) {
			var $r;
			var value = [a, b, 0, 0, c, d, 0, 0, 0, 0, 1, 0, tx, ty, 0, 1];
			var vectorData = new openfl_VectorData();
			vectorData.length = value.length;
			vectorData.fixed = true;
			{
				var vec;
				var this1;
				this1 = new Array(value.length);
				vec = this1;
				var _g1 = 0;
				var _g = value.length;
				while (_g1 < _g) {
					var i = _g1++;
					vec[i] = value[i];
				}
				vectorData.data = vec;
			}
			$r = vectorData;
			return $r;
		}(this)));
	};
	openfl_geom_Matrix3D.createOrtho = function (x0, x1, y0, y1, zNear, zFar) {
		var sx = 1.0 / (x1 - x0);
		var sy = 1.0 / (y1 - y0);
		var sz = 1.0 / (zFar - zNear);
		return new openfl_geom_Matrix3D((function ($this) {
			var $r;
			var value = [2.0 * sx, 0, 0, 0, 0, 2.0 * sy, 0, 0, 0, 0, -2. * sz, 0, -(x0 + x1) * sx, -(y0 + y1) * sy, -(zNear + zFar) * sz, 1];
			var vectorData = new openfl_VectorData();
			vectorData.length = value.length;
			vectorData.fixed = true;
			{
				var vec;
				var this1;
				this1 = new Array(value.length);
				vec = this1;
				var _g1 = 0;
				var _g = value.length;
				while (_g1 < _g) {
					var i = _g1++;
					vec[i] = value[i];
				}
				vectorData.data = vec;
			}
			$r = vectorData;
			return $r;
		}(this)));
	};
	openfl_geom_Matrix3D.interpolate = function (thisMat, toMat, percent) {
		var m = new openfl_geom_Matrix3D();
		var _g = 0;
		while (_g < 16) {
			var i = _g++;
			var this1 = m.rawData;
			if (!this1.fixed) {
				if (i >= this1.length) this1.length = i + 1;
				if (this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, data, 0, this1.data.length);
					this1.data = data;
				}
			}
			this1.data[i] = thisMat.rawData.data[i] + (toMat.rawData.data[i] - thisMat.rawData.data[i]) * percent;
		}
		return m;
	};
	openfl_geom_Matrix3D.getAxisRotation = function (x, y, z, degrees) {
		var m = new openfl_geom_Matrix3D();
		var a1 = new openfl_geom_Vector3D(x, y, z);
		var rad = -degrees * (Math.PI / 180);
		var c = Math.cos(rad);
		var s = Math.sin(rad);
		var t = 1.0 - c;
		var this1 = m.rawData;
		if (!this1.fixed) {
			if (0 >= this1.length) this1.length = 1;
			if (this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, data, 0, this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = c + a1.x * a1.x * t;
		var this3 = m.rawData;
		if (!this3.fixed) {
			if (5 >= this3.length) this3.length = 6;
			if (this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data, 0, data1, 0, this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[5] = c + a1.y * a1.y * t;
		var this5 = m.rawData;
		if (!this5.fixed) {
			if (10 >= this5.length) this5.length = 11;
			if (this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data, 0, data2, 0, this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[10] = c + a1.z * a1.z * t;
		var tmp1 = a1.x * a1.y * t;
		var tmp2 = a1.z * s;
		var this7 = m.rawData;
		if (!this7.fixed) {
			if (4 >= this7.length) this7.length = 5;
			if (this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data, 0, data3, 0, this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[4] = tmp1 + tmp2;
		var this9 = m.rawData;
		if (!this9.fixed) {
			if (1 >= this9.length) this9.length = 2;
			if (this9.data.length < this9.length) {
				var data4;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data4 = this10;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data, 0, data4, 0, this9.data.length);
				this9.data = data4;
			}
		}
		this9.data[1] = tmp1 - tmp2;
		tmp1 = a1.x * a1.z * t;
		tmp2 = a1.y * s;
		var this11 = m.rawData;
		if (!this11.fixed) {
			if (8 >= this11.length) this11.length = 9;
			if (this11.data.length < this11.length) {
				var data5;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data5 = this12;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data, 0, data5, 0, this11.data.length);
				this11.data = data5;
			}
		}
		this11.data[8] = tmp1 - tmp2;
		var this13 = m.rawData;
		if (!this13.fixed) {
			if (2 >= this13.length) this13.length = 3;
			if (this13.data.length < this13.length) {
				var data6;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data6 = this14;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data, 0, data6, 0, this13.data.length);
				this13.data = data6;
			}
		}
		this13.data[2] = tmp1 + tmp2;
		tmp1 = a1.y * a1.z * t;
		tmp2 = a1.x * s;
		var this15 = m.rawData;
		if (!this15.fixed) {
			if (9 >= this15.length) this15.length = 10;
			if (this15.data.length < this15.length) {
				var data7;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data7 = this16;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data, 0, data7, 0, this15.data.length);
				this15.data = data7;
			}
		}
		this15.data[9] = tmp1 + tmp2;
		var this17 = m.rawData;
		if (!this17.fixed) {
			if (6 >= this17.length) this17.length = 7;
			if (this17.data.length < this17.length) {
				var data8;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data8 = this18;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data, 0, data8, 0, this17.data.length);
				this17.data = data8;
			}
		}
		this17.data[6] = tmp1 - tmp2;
		return m;
	};
	openfl_geom_Matrix3D.prototype = {
		append: function (lhs) {
			var m111 = this.rawData.data[0];
			var m121 = this.rawData.data[4];
			var m131 = this.rawData.data[8];
			var m141 = this.rawData.data[12];
			var m112 = this.rawData.data[1];
			var m122 = this.rawData.data[5];
			var m132 = this.rawData.data[9];
			var m142 = this.rawData.data[13];
			var m113 = this.rawData.data[2];
			var m123 = this.rawData.data[6];
			var m133 = this.rawData.data[10];
			var m143 = this.rawData.data[14];
			var m114 = this.rawData.data[3];
			var m124 = this.rawData.data[7];
			var m134 = this.rawData.data[11];
			var m144 = this.rawData.data[15];
			var m211 = lhs.rawData.data[0];
			var m221 = lhs.rawData.data[4];
			var m231 = lhs.rawData.data[8];
			var m241 = lhs.rawData.data[12];
			var m212 = lhs.rawData.data[1];
			var m222 = lhs.rawData.data[5];
			var m232 = lhs.rawData.data[9];
			var m242 = lhs.rawData.data[13];
			var m213 = lhs.rawData.data[2];
			var m223 = lhs.rawData.data[6];
			var m233 = lhs.rawData.data[10];
			var m243 = lhs.rawData.data[14];
			var m214 = lhs.rawData.data[3];
			var m224 = lhs.rawData.data[7];
			var m234 = lhs.rawData.data[11];
			var m244 = lhs.rawData.data[15];
			var this1 = this.rawData;
			if (!this1.fixed) {
				if (0 >= this1.length) this1.length = 1;
				if (this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, data, 0, this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
			var this3 = this.rawData;
			if (!this3.fixed) {
				if (1 >= this3.length) this3.length = 2;
				if (this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data, 0, data1, 0, this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
			var this5 = this.rawData;
			if (!this5.fixed) {
				if (2 >= this5.length) this5.length = 3;
				if (this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data, 0, data2, 0, this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
			var this7 = this.rawData;
			if (!this7.fixed) {
				if (3 >= this7.length) this7.length = 4;
				if (this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data, 0, data3, 0, this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
			var this9 = this.rawData;
			if (!this9.fixed) {
				if (4 >= this9.length) this9.length = 5;
				if (this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data, 0, data4, 0, this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
			var this11 = this.rawData;
			if (!this11.fixed) {
				if (5 >= this11.length) this11.length = 6;
				if (this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data, 0, data5, 0, this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
			var this13 = this.rawData;
			if (!this13.fixed) {
				if (6 >= this13.length) this13.length = 7;
				if (this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data, 0, data6, 0, this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
			var this15 = this.rawData;
			if (!this15.fixed) {
				if (7 >= this15.length) this15.length = 8;
				if (this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data, 0, data7, 0, this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
			var this17 = this.rawData;
			if (!this17.fixed) {
				if (8 >= this17.length) this17.length = 9;
				if (this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data, 0, data8, 0, this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
			var this19 = this.rawData;
			if (!this19.fixed) {
				if (9 >= this19.length) this19.length = 10;
				if (this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data, 0, data9, 0, this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
			var this21 = this.rawData;
			if (!this21.fixed) {
				if (10 >= this21.length) this21.length = 11;
				if (this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data, 0, data10, 0, this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
			var this23 = this.rawData;
			if (!this23.fixed) {
				if (11 >= this23.length) this23.length = 12;
				if (this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data, 0, data11, 0, this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
			var this25 = this.rawData;
			if (!this25.fixed) {
				if (12 >= this25.length) this25.length = 13;
				if (this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data, 0, data12, 0, this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
			var this27 = this.rawData;
			if (!this27.fixed) {
				if (13 >= this27.length) this27.length = 14;
				if (this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data, 0, data13, 0, this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
			var this29 = this.rawData;
			if (!this29.fixed) {
				if (14 >= this29.length) this29.length = 15;
				if (this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data, 0, data14, 0, this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
			var this31 = this.rawData;
			if (!this31.fixed) {
				if (15 >= this31.length) this31.length = 16;
				if (this31.data.length < this31.length) {
					var data15;
					var this32;
					this32 = new Array(this31.data.length + 10);
					data15 = this32;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data, 0, data15, 0, this31.data.length);
					this31.data = data15;
				}
			}
			this31.data[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
		}
		, appendRotation: function (degrees, axis, pivotPoint) {
			var m = openfl_geom_Matrix3D.getAxisRotation(axis.x, axis.y, axis.z, degrees);
			if (pivotPoint != null) {
				var p = pivotPoint;
				m.appendTranslation(p.x, p.y, p.z);
			}
			this.append(m);
		}
		, appendScale: function (xScale, yScale, zScale) {
			this.append(new openfl_geom_Matrix3D((function ($this) {
				var $r;
				var value = [xScale, 0.0, 0.0, 0.0, 0.0, yScale, 0.0, 0.0, 0.0, 0.0, zScale, 0.0, 0.0, 0.0, 0.0, 1.0];
				var vectorData = new openfl_VectorData();
				vectorData.length = value.length;
				vectorData.fixed = true;
				{
					var vec;
					var this1;
					this1 = new Array(value.length);
					vec = this1;
					var _g1 = 0;
					var _g = value.length;
					while (_g1 < _g) {
						var i = _g1++;
						vec[i] = value[i];
					}
					vectorData.data = vec;
				}
				$r = vectorData;
				return $r;
			}(this))));
		}
		, appendTranslation: function (x, y, z) {
			var this1 = this.rawData;
			if (!this1.fixed) {
				if (12 >= this1.length) this1.length = 13;
				if (this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, data, 0, this1.data.length);
					this1.data = data;
				}
			}
			this1.data[12] = this.rawData.data[12] + x;
			var this3 = this.rawData;
			if (!this3.fixed) {
				if (13 >= this3.length) this3.length = 14;
				if (this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data, 0, data1, 0, this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[13] = this.rawData.data[13] + y;
			var this5 = this.rawData;
			if (!this5.fixed) {
				if (14 >= this5.length) this5.length = 15;
				if (this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data, 0, data2, 0, this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[14] = this.rawData.data[14] + z;
		}
		, clone: function () {
			return new openfl_geom_Matrix3D((function ($this) {
				var $r;
				var this1 = $this.rawData;
				var vectorData = new openfl_VectorData();
				vectorData.length = this1.length;
				vectorData.fixed = this1.fixed;
				{
					var this2;
					this2 = new Array(this1.length);
					vectorData.data = this2;
				}
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, vectorData.data, 0, this1.length);
				$r = vectorData;
				return $r;
			}(this)));
		}
		, copyColumnFrom: function (column, vector3D) {
			switch (column) {
				case 0:
					var this1 = this.rawData;
					if (!this1.fixed) {
						if (0 >= this1.length) this1.length = 1;
						if (this1.data.length < this1.length) {
							var data;
							var this2;
							this2 = new Array(this1.data.length + 10);
							data = this2;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, data, 0, this1.data.length);
							this1.data = data;
						}
					}
					this1.data[0] = vector3D.x;
					var this3 = this.rawData;
					if (!this3.fixed) {
						if (1 >= this3.length) this3.length = 2;
						if (this3.data.length < this3.length) {
							var data1;
							var this4;
							this4 = new Array(this3.data.length + 10);
							data1 = this4;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data, 0, data1, 0, this3.data.length);
							this3.data = data1;
						}
					}
					this3.data[1] = vector3D.y;
					var this5 = this.rawData;
					if (!this5.fixed) {
						if (2 >= this5.length) this5.length = 3;
						if (this5.data.length < this5.length) {
							var data2;
							var this6;
							this6 = new Array(this5.data.length + 10);
							data2 = this6;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data, 0, data2, 0, this5.data.length);
							this5.data = data2;
						}
					}
					this5.data[2] = vector3D.z;
					var this7 = this.rawData;
					if (!this7.fixed) {
						if (3 >= this7.length) this7.length = 4;
						if (this7.data.length < this7.length) {
							var data3;
							var this8;
							this8 = new Array(this7.data.length + 10);
							data3 = this8;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data, 0, data3, 0, this7.data.length);
							this7.data = data3;
						}
					}
					this7.data[3] = vector3D.w;
					break;
				case 1:
					var this9 = this.rawData;
					if (!this9.fixed) {
						if (4 >= this9.length) this9.length = 5;
						if (this9.data.length < this9.length) {
							var data4;
							var this10;
							this10 = new Array(this9.data.length + 10);
							data4 = this10;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data, 0, data4, 0, this9.data.length);
							this9.data = data4;
						}
					}
					this9.data[4] = vector3D.x;
					var this11 = this.rawData;
					if (!this11.fixed) {
						if (5 >= this11.length) this11.length = 6;
						if (this11.data.length < this11.length) {
							var data5;
							var this12;
							this12 = new Array(this11.data.length + 10);
							data5 = this12;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data, 0, data5, 0, this11.data.length);
							this11.data = data5;
						}
					}
					this11.data[5] = vector3D.y;
					var this13 = this.rawData;
					if (!this13.fixed) {
						if (6 >= this13.length) this13.length = 7;
						if (this13.data.length < this13.length) {
							var data6;
							var this14;
							this14 = new Array(this13.data.length + 10);
							data6 = this14;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data, 0, data6, 0, this13.data.length);
							this13.data = data6;
						}
					}
					this13.data[6] = vector3D.z;
					var this15 = this.rawData;
					if (!this15.fixed) {
						if (7 >= this15.length) this15.length = 8;
						if (this15.data.length < this15.length) {
							var data7;
							var this16;
							this16 = new Array(this15.data.length + 10);
							data7 = this16;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data, 0, data7, 0, this15.data.length);
							this15.data = data7;
						}
					}
					this15.data[7] = vector3D.w;
					break;
				case 2:
					var this17 = this.rawData;
					if (!this17.fixed) {
						if (8 >= this17.length) this17.length = 9;
						if (this17.data.length < this17.length) {
							var data8;
							var this18;
							this18 = new Array(this17.data.length + 10);
							data8 = this18;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data, 0, data8, 0, this17.data.length);
							this17.data = data8;
						}
					}
					this17.data[8] = vector3D.x;
					var this19 = this.rawData;
					if (!this19.fixed) {
						if (9 >= this19.length) this19.length = 10;
						if (this19.data.length < this19.length) {
							var data9;
							var this20;
							this20 = new Array(this19.data.length + 10);
							data9 = this20;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data, 0, data9, 0, this19.data.length);
							this19.data = data9;
						}
					}
					this19.data[9] = vector3D.y;
					var this21 = this.rawData;
					if (!this21.fixed) {
						if (10 >= this21.length) this21.length = 11;
						if (this21.data.length < this21.length) {
							var data10;
							var this22;
							this22 = new Array(this21.data.length + 10);
							data10 = this22;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data, 0, data10, 0, this21.data.length);
							this21.data = data10;
						}
					}
					this21.data[10] = vector3D.z;
					var this23 = this.rawData;
					if (!this23.fixed) {
						if (11 >= this23.length) this23.length = 12;
						if (this23.data.length < this23.length) {
							var data11;
							var this24;
							this24 = new Array(this23.data.length + 10);
							data11 = this24;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data, 0, data11, 0, this23.data.length);
							this23.data = data11;
						}
					}
					this23.data[11] = vector3D.w;
					break;
				case 3:
					var this25 = this.rawData;
					if (!this25.fixed) {
						if (12 >= this25.length) this25.length = 13;
						if (this25.data.length < this25.length) {
							var data12;
							var this26;
							this26 = new Array(this25.data.length + 10);
							data12 = this26;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data, 0, data12, 0, this25.data.length);
							this25.data = data12;
						}
					}
					this25.data[12] = vector3D.x;
					var this27 = this.rawData;
					if (!this27.fixed) {
						if (13 >= this27.length) this27.length = 14;
						if (this27.data.length < this27.length) {
							var data13;
							var this28;
							this28 = new Array(this27.data.length + 10);
							data13 = this28;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data, 0, data13, 0, this27.data.length);
							this27.data = data13;
						}
					}
					this27.data[13] = vector3D.y;
					var this29 = this.rawData;
					if (!this29.fixed) {
						if (14 >= this29.length) this29.length = 15;
						if (this29.data.length < this29.length) {
							var data14;
							var this30;
							this30 = new Array(this29.data.length + 10);
							data14 = this30;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data, 0, data14, 0, this29.data.length);
							this29.data = data14;
						}
					}
					this29.data[14] = vector3D.z;
					var this31 = this.rawData;
					if (!this31.fixed) {
						if (15 >= this31.length) this31.length = 16;
						if (this31.data.length < this31.length) {
							var data15;
							var this32;
							this32 = new Array(this31.data.length + 10);
							data15 = this32;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data, 0, data15, 0, this31.data.length);
							this31.data = data15;
						}
					}
					this31.data[15] = vector3D.w;
					break;
				default:
					throw new js__$Boot_HaxeError(new openfl_errors_Error("Error, Column " + column + " out of bounds [0, ..., 3]"));
			}
		}
		, copyColumnTo: function (column, vector3D) {
			switch (column) {
				case 0:
					vector3D.x = this.rawData.data[0];
					vector3D.y = this.rawData.data[1];
					vector3D.z = this.rawData.data[2];
					vector3D.w = this.rawData.data[3];
					break;
				case 1:
					vector3D.x = this.rawData.data[4];
					vector3D.y = this.rawData.data[5];
					vector3D.z = this.rawData.data[6];
					vector3D.w = this.rawData.data[7];
					break;
				case 2:
					vector3D.x = this.rawData.data[8];
					vector3D.y = this.rawData.data[9];
					vector3D.z = this.rawData.data[10];
					vector3D.w = this.rawData.data[11];
					break;
				case 3:
					vector3D.x = this.rawData.data[12];
					vector3D.y = this.rawData.data[13];
					vector3D.z = this.rawData.data[14];
					vector3D.w = this.rawData.data[15];
					break;
				default:
					throw new js__$Boot_HaxeError(new openfl_errors_Error("Error, Column " + column + " out of bounds [0, ..., 3]"));
			}
		}
		, copyFrom: function (other) {
			var this1 = other.rawData;
			var vectorData = new openfl_VectorData();
			vectorData.length = this1.length;
			vectorData.fixed = this1.fixed;
			var this2;
			this2 = new Array(this1.length);
			vectorData.data = this2;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, vectorData.data, 0, this1.length);
			this.rawData = vectorData;
		}
		, copyRawDataFrom: function (vector, index, transpose) {
			if (transpose == null) transpose = false;
			if (index == null) index = 0;
			if (transpose) this.transpose();
			var l = vector.length - index;
			var _g = 0;
			while (_g < l) {
				var c = _g++;
				var this1 = this.rawData;
				if (!this1.fixed) {
					if (c >= this1.length) this1.length = c + 1;
					if (this1.data.length < this1.length) {
						var data;
						var this2;
						this2 = new Array(this1.data.length + 10);
						data = this2;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, data, 0, this1.data.length);
						this1.data = data;
					}
				}
				this1.data[c] = vector.data[c + index];
			}
			if (transpose) this.transpose();
		}
		, copyRawDataTo: function (vector, index, transpose) {
			if (transpose == null) transpose = false;
			if (index == null) index = 0;
			if (transpose) this.transpose();
			var l = this.rawData.length;
			var _g = 0;
			while (_g < l) {
				var c = _g++;
				var key = c + index;
				if (!vector.fixed) {
					if (key >= vector.length) vector.length = key + 1;
					if (vector.data.length < vector.length) {
						var data;
						var this1;
						this1 = new Array(vector.data.length + 10);
						data = this1;
						haxe_ds__$Vector_Vector_$Impl_$.blit(vector.data, 0, data, 0, vector.data.length);
						vector.data = data;
					}
				}
				vector.data[key] = this.rawData.data[c];
			}
			if (transpose) this.transpose();
		}
		, copyRowFrom: function (row, vector3D) {
			switch (row) {
				case 0:
					var this1 = this.rawData;
					if (!this1.fixed) {
						if (0 >= this1.length) this1.length = 1;
						if (this1.data.length < this1.length) {
							var data;
							var this2;
							this2 = new Array(this1.data.length + 10);
							data = this2;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, data, 0, this1.data.length);
							this1.data = data;
						}
					}
					this1.data[0] = vector3D.x;
					var this3 = this.rawData;
					if (!this3.fixed) {
						if (4 >= this3.length) this3.length = 5;
						if (this3.data.length < this3.length) {
							var data1;
							var this4;
							this4 = new Array(this3.data.length + 10);
							data1 = this4;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data, 0, data1, 0, this3.data.length);
							this3.data = data1;
						}
					}
					this3.data[4] = vector3D.y;
					var this5 = this.rawData;
					if (!this5.fixed) {
						if (8 >= this5.length) this5.length = 9;
						if (this5.data.length < this5.length) {
							var data2;
							var this6;
							this6 = new Array(this5.data.length + 10);
							data2 = this6;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data, 0, data2, 0, this5.data.length);
							this5.data = data2;
						}
					}
					this5.data[8] = vector3D.z;
					var this7 = this.rawData;
					if (!this7.fixed) {
						if (12 >= this7.length) this7.length = 13;
						if (this7.data.length < this7.length) {
							var data3;
							var this8;
							this8 = new Array(this7.data.length + 10);
							data3 = this8;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data, 0, data3, 0, this7.data.length);
							this7.data = data3;
						}
					}
					this7.data[12] = vector3D.w;
					break;
				case 1:
					var this9 = this.rawData;
					if (!this9.fixed) {
						if (1 >= this9.length) this9.length = 2;
						if (this9.data.length < this9.length) {
							var data4;
							var this10;
							this10 = new Array(this9.data.length + 10);
							data4 = this10;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data, 0, data4, 0, this9.data.length);
							this9.data = data4;
						}
					}
					this9.data[1] = vector3D.x;
					var this11 = this.rawData;
					if (!this11.fixed) {
						if (5 >= this11.length) this11.length = 6;
						if (this11.data.length < this11.length) {
							var data5;
							var this12;
							this12 = new Array(this11.data.length + 10);
							data5 = this12;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data, 0, data5, 0, this11.data.length);
							this11.data = data5;
						}
					}
					this11.data[5] = vector3D.y;
					var this13 = this.rawData;
					if (!this13.fixed) {
						if (9 >= this13.length) this13.length = 10;
						if (this13.data.length < this13.length) {
							var data6;
							var this14;
							this14 = new Array(this13.data.length + 10);
							data6 = this14;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data, 0, data6, 0, this13.data.length);
							this13.data = data6;
						}
					}
					this13.data[9] = vector3D.z;
					var this15 = this.rawData;
					if (!this15.fixed) {
						if (13 >= this15.length) this15.length = 14;
						if (this15.data.length < this15.length) {
							var data7;
							var this16;
							this16 = new Array(this15.data.length + 10);
							data7 = this16;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data, 0, data7, 0, this15.data.length);
							this15.data = data7;
						}
					}
					this15.data[13] = vector3D.w;
					break;
				case 2:
					var this17 = this.rawData;
					if (!this17.fixed) {
						if (2 >= this17.length) this17.length = 3;
						if (this17.data.length < this17.length) {
							var data8;
							var this18;
							this18 = new Array(this17.data.length + 10);
							data8 = this18;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data, 0, data8, 0, this17.data.length);
							this17.data = data8;
						}
					}
					this17.data[2] = vector3D.x;
					var this19 = this.rawData;
					if (!this19.fixed) {
						if (6 >= this19.length) this19.length = 7;
						if (this19.data.length < this19.length) {
							var data9;
							var this20;
							this20 = new Array(this19.data.length + 10);
							data9 = this20;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data, 0, data9, 0, this19.data.length);
							this19.data = data9;
						}
					}
					this19.data[6] = vector3D.y;
					var this21 = this.rawData;
					if (!this21.fixed) {
						if (10 >= this21.length) this21.length = 11;
						if (this21.data.length < this21.length) {
							var data10;
							var this22;
							this22 = new Array(this21.data.length + 10);
							data10 = this22;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data, 0, data10, 0, this21.data.length);
							this21.data = data10;
						}
					}
					this21.data[10] = vector3D.z;
					var this23 = this.rawData;
					if (!this23.fixed) {
						if (14 >= this23.length) this23.length = 15;
						if (this23.data.length < this23.length) {
							var data11;
							var this24;
							this24 = new Array(this23.data.length + 10);
							data11 = this24;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data, 0, data11, 0, this23.data.length);
							this23.data = data11;
						}
					}
					this23.data[14] = vector3D.w;
					break;
				case 3:
					var this25 = this.rawData;
					if (!this25.fixed) {
						if (3 >= this25.length) this25.length = 4;
						if (this25.data.length < this25.length) {
							var data12;
							var this26;
							this26 = new Array(this25.data.length + 10);
							data12 = this26;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data, 0, data12, 0, this25.data.length);
							this25.data = data12;
						}
					}
					this25.data[3] = vector3D.x;
					var this27 = this.rawData;
					if (!this27.fixed) {
						if (7 >= this27.length) this27.length = 8;
						if (this27.data.length < this27.length) {
							var data13;
							var this28;
							this28 = new Array(this27.data.length + 10);
							data13 = this28;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data, 0, data13, 0, this27.data.length);
							this27.data = data13;
						}
					}
					this27.data[7] = vector3D.y;
					var this29 = this.rawData;
					if (!this29.fixed) {
						if (11 >= this29.length) this29.length = 12;
						if (this29.data.length < this29.length) {
							var data14;
							var this30;
							this30 = new Array(this29.data.length + 10);
							data14 = this30;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data, 0, data14, 0, this29.data.length);
							this29.data = data14;
						}
					}
					this29.data[11] = vector3D.z;
					var this31 = this.rawData;
					if (!this31.fixed) {
						if (15 >= this31.length) this31.length = 16;
						if (this31.data.length < this31.length) {
							var data15;
							var this32;
							this32 = new Array(this31.data.length + 10);
							data15 = this32;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data, 0, data15, 0, this31.data.length);
							this31.data = data15;
						}
					}
					this31.data[15] = vector3D.w;
					break;
				default:
					throw new js__$Boot_HaxeError(new openfl_errors_Error("Error, Row " + Std.string(_$UInt_UInt_$Impl_$.toFloat(row)) + " out of bounds [0, ..., 3]"));
			}
		}
		, copyRowTo: function (row, vector3D) {
			switch (row) {
				case 0:
					vector3D.x = this.rawData.data[0];
					vector3D.y = this.rawData.data[4];
					vector3D.z = this.rawData.data[8];
					vector3D.w = this.rawData.data[12];
					break;
				case 1:
					vector3D.x = this.rawData.data[1];
					vector3D.y = this.rawData.data[5];
					vector3D.z = this.rawData.data[9];
					vector3D.w = this.rawData.data[13];
					break;
				case 2:
					vector3D.x = this.rawData.data[2];
					vector3D.y = this.rawData.data[6];
					vector3D.z = this.rawData.data[10];
					vector3D.w = this.rawData.data[14];
					break;
				case 3:
					vector3D.x = this.rawData.data[3];
					vector3D.y = this.rawData.data[7];
					vector3D.z = this.rawData.data[11];
					vector3D.w = this.rawData.data[15];
					break;
				default:
					throw new js__$Boot_HaxeError(new openfl_errors_Error("Error, Row " + row + " out of bounds [0, ..., 3]"));
			}
		}
		, copyToMatrix3D: function (other) {
			var this1 = this.rawData;
			var vectorData = new openfl_VectorData();
			vectorData.length = this1.length;
			vectorData.fixed = this1.fixed;
			var this2;
			this2 = new Array(this1.length);
			vectorData.data = this2;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, vectorData.data, 0, this1.length);
			other.rawData = vectorData;
		}
		, decompose: function (orientationStyle) {
			if (orientationStyle == null) orientationStyle = openfl_geom_Orientation3D.EULER_ANGLES;
			var vec;
			var this1;
			this1 = new openfl_VectorData();
			var this2;
			this2 = new Array(0);
			this1.data = this2;
			this1.length = 0;
			this1.fixed = false;
			vec = this1;
			var m = this.clone();
			var mr;
			var this3 = m.rawData;
			var vectorData = new openfl_VectorData();
			vectorData.length = this3.length;
			vectorData.fixed = this3.fixed;
			var this4;
			this4 = new Array(this3.length);
			vectorData.data = this4;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data, 0, vectorData.data, 0, this3.length);
			mr = vectorData;
			var pos = new openfl_geom_Vector3D(mr.data[12], mr.data[13], mr.data[14]);
			{
				if (!mr.fixed) {
					if (12 >= mr.length) mr.length = 13;
					if (mr.data.length < mr.length) {
						var data;
						var this5;
						this5 = new Array(mr.data.length + 10);
						data = this5;
						haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data, 0, data, 0, mr.data.length);
						mr.data = data;
					}
				}
				mr.data[12] = 0;
			}
			{
				if (!mr.fixed) {
					if (13 >= mr.length) mr.length = 14;
					if (mr.data.length < mr.length) {
						var data1;
						var this6;
						this6 = new Array(mr.data.length + 10);
						data1 = this6;
						haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data, 0, data1, 0, mr.data.length);
						mr.data = data1;
					}
				}
				mr.data[13] = 0;
			}
			{
				if (!mr.fixed) {
					if (14 >= mr.length) mr.length = 15;
					if (mr.data.length < mr.length) {
						var data2;
						var this7;
						this7 = new Array(mr.data.length + 10);
						data2 = this7;
						haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data, 0, data2, 0, mr.data.length);
						mr.data = data2;
					}
				}
				mr.data[14] = 0;
			}
			var scale = new openfl_geom_Vector3D();
			scale.x = Math.sqrt(mr.data[0] * mr.data[0] + mr.data[1] * mr.data[1] + mr.data[2] * mr.data[2]);
			scale.y = Math.sqrt(mr.data[4] * mr.data[4] + mr.data[5] * mr.data[5] + mr.data[6] * mr.data[6]);
			scale.z = Math.sqrt(mr.data[8] * mr.data[8] + mr.data[9] * mr.data[9] + mr.data[10] * mr.data[10]);
			if (mr.data[0] * (mr.data[5] * mr.data[10] - mr.data[6] * mr.data[9]) - mr.data[1] * (mr.data[4] * mr.data[10] - mr.data[6] * mr.data[8]) + mr.data[2] * (mr.data[4] * mr.data[9] - mr.data[5] * mr.data[8]) < 0) scale.z = -scale.z;
			{
				if (!mr.fixed) {
					if (0 >= mr.length) mr.length = 1;
					if (mr.data.length < mr.length) {
						var data3;
						var this8;
						this8 = new Array(mr.data.length + 10);
						data3 = this8;
						haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data, 0, data3, 0, mr.data.length);
						mr.data = data3;
					}
				}
				mr.data[0] = mr.data[0] / scale.x;
			}
			{
				if (!mr.fixed) {
					if (1 >= mr.length) mr.length = 2;
					if (mr.data.length < mr.length) {
						var data4;
						var this9;
						this9 = new Array(mr.data.length + 10);
						data4 = this9;
						haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data, 0, data4, 0, mr.data.length);
						mr.data = data4;
					}
				}
				mr.data[1] = mr.data[1] / scale.x;
			}
			{
				if (!mr.fixed) {
					if (2 >= mr.length) mr.length = 3;
					if (mr.data.length < mr.length) {
						var data5;
						var this10;
						this10 = new Array(mr.data.length + 10);
						data5 = this10;
						haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data, 0, data5, 0, mr.data.length);
						mr.data = data5;
					}
				}
				mr.data[2] = mr.data[2] / scale.x;
			}
			{
				if (!mr.fixed) {
					if (4 >= mr.length) mr.length = 5;
					if (mr.data.length < mr.length) {
						var data6;
						var this11;
						this11 = new Array(mr.data.length + 10);
						data6 = this11;
						haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data, 0, data6, 0, mr.data.length);
						mr.data = data6;
					}
				}
				mr.data[4] = mr.data[4] / scale.y;
			}
			{
				if (!mr.fixed) {
					if (5 >= mr.length) mr.length = 6;
					if (mr.data.length < mr.length) {
						var data7;
						var this12;
						this12 = new Array(mr.data.length + 10);
						data7 = this12;
						haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data, 0, data7, 0, mr.data.length);
						mr.data = data7;
					}
				}
				mr.data[5] = mr.data[5] / scale.y;
			}
			{
				if (!mr.fixed) {
					if (6 >= mr.length) mr.length = 7;
					if (mr.data.length < mr.length) {
						var data8;
						var this13;
						this13 = new Array(mr.data.length + 10);
						data8 = this13;
						haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data, 0, data8, 0, mr.data.length);
						mr.data = data8;
					}
				}
				mr.data[6] = mr.data[6] / scale.y;
			}
			{
				if (!mr.fixed) {
					if (8 >= mr.length) mr.length = 9;
					if (mr.data.length < mr.length) {
						var data9;
						var this14;
						this14 = new Array(mr.data.length + 10);
						data9 = this14;
						haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data, 0, data9, 0, mr.data.length);
						mr.data = data9;
					}
				}
				mr.data[8] = mr.data[8] / scale.z;
			}
			{
				if (!mr.fixed) {
					if (9 >= mr.length) mr.length = 10;
					if (mr.data.length < mr.length) {
						var data10;
						var this15;
						this15 = new Array(mr.data.length + 10);
						data10 = this15;
						haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data, 0, data10, 0, mr.data.length);
						mr.data = data10;
					}
				}
				mr.data[9] = mr.data[9] / scale.z;
			}
			{
				if (!mr.fixed) {
					if (10 >= mr.length) mr.length = 11;
					if (mr.data.length < mr.length) {
						var data11;
						var this16;
						this16 = new Array(mr.data.length + 10);
						data11 = this16;
						haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data, 0, data11, 0, mr.data.length);
						mr.data = data11;
					}
				}
				mr.data[10] = mr.data[10] / scale.z;
			}
			var rot = new openfl_geom_Vector3D();
			if (orientationStyle != null) switch (orientationStyle[1]) {
				case 0:
					rot.w = Math.acos((mr.data[0] + mr.data[5] + mr.data[10] - 1) / 2);
					var len = Math.sqrt((mr.data[6] - mr.data[9]) * (mr.data[6] - mr.data[9]) + (mr.data[8] - mr.data[2]) * (mr.data[8] - mr.data[2]) + (mr.data[1] - mr.data[4]) * (mr.data[1] - mr.data[4]));
					if (len != 0) {
						rot.x = (mr.data[6] - mr.data[9]) / len;
						rot.y = (mr.data[8] - mr.data[2]) / len;
						rot.z = (mr.data[1] - mr.data[4]) / len;
					} else rot.x = rot.y = rot.z = 0;
					break;
				case 2:
					var tr = mr.data[0] + mr.data[5] + mr.data[10];
					if (tr > 0) {
						rot.w = Math.sqrt(1 + tr) / 2;
						rot.x = (mr.data[6] - mr.data[9]) / (4 * rot.w);
						rot.y = (mr.data[8] - mr.data[2]) / (4 * rot.w);
						rot.z = (mr.data[1] - mr.data[4]) / (4 * rot.w);
					} else if (mr.data[0] > mr.data[5] && mr.data[0] > mr.data[10]) {
						rot.x = Math.sqrt(1 + mr.data[0] - mr.data[5] - mr.data[10]) / 2;
						rot.w = (mr.data[6] - mr.data[9]) / (4 * rot.x);
						rot.y = (mr.data[1] + mr.data[4]) / (4 * rot.x);
						rot.z = (mr.data[8] + mr.data[2]) / (4 * rot.x);
					} else if (mr.data[5] > mr.data[10]) {
						rot.y = Math.sqrt(1 + mr.data[5] - mr.data[0] - mr.data[10]) / 2;
						rot.x = (mr.data[1] + mr.data[4]) / (4 * rot.y);
						rot.w = (mr.data[8] - mr.data[2]) / (4 * rot.y);
						rot.z = (mr.data[6] + mr.data[9]) / (4 * rot.y);
					} else {
						rot.z = Math.sqrt(1 + mr.data[10] - mr.data[0] - mr.data[5]) / 2;
						rot.x = (mr.data[8] + mr.data[2]) / (4 * rot.z);
						rot.y = (mr.data[6] + mr.data[9]) / (4 * rot.z);
						rot.w = (mr.data[1] - mr.data[4]) / (4 * rot.z);
					}
					break;
				case 1:
					rot.y = Math.asin(-mr.data[2]);
					if (mr.data[2] != 1 && mr.data[2] != -1) {
						rot.x = Math.atan2(mr.data[6], mr.data[10]);
						rot.z = Math.atan2(mr.data[1], mr.data[0]);
					} else {
						rot.z = 0;
						rot.x = Math.atan2(mr.data[4], mr.data[5]);
					}
					break;
			}
			if (!vec.fixed) {
				vec.length++;
				if (vec.data.length < vec.length) {
					var data12;
					var this17;
					this17 = new Array(vec.data.length + 10);
					data12 = this17;
					haxe_ds__$Vector_Vector_$Impl_$.blit(vec.data, 0, data12, 0, vec.data.length);
					vec.data = data12;
				}
				vec.data[vec.length - 1] = pos;
			}
			vec.length;
			if (!vec.fixed) {
				vec.length++;
				if (vec.data.length < vec.length) {
					var data13;
					var this18;
					this18 = new Array(vec.data.length + 10);
					data13 = this18;
					haxe_ds__$Vector_Vector_$Impl_$.blit(vec.data, 0, data13, 0, vec.data.length);
					vec.data = data13;
				}
				vec.data[vec.length - 1] = rot;
			}
			vec.length;
			if (!vec.fixed) {
				vec.length++;
				if (vec.data.length < vec.length) {
					var data14;
					var this19;
					this19 = new Array(vec.data.length + 10);
					data14 = this19;
					haxe_ds__$Vector_Vector_$Impl_$.blit(vec.data, 0, data14, 0, vec.data.length);
					vec.data = data14;
				}
				vec.data[vec.length - 1] = scale;
			}
			vec.length;
			return vec;
		}
		, deltaTransformVector: function (v) {
			var x = v.x;
			var y = v.y;
			var z = v.z;
			return new openfl_geom_Vector3D(x * this.rawData.data[0] + y * this.rawData.data[4] + z * this.rawData.data[8] + this.rawData.data[3], x * this.rawData.data[1] + y * this.rawData.data[5] + z * this.rawData.data[9] + this.rawData.data[7], x * this.rawData.data[2] + y * this.rawData.data[6] + z * this.rawData.data[10] + this.rawData.data[11], 0);
		}
		, identity: function () {
			{
				var value = [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0];
				var vectorData = new openfl_VectorData();
				vectorData.length = value.length;
				vectorData.fixed = true;
				var vec;
				var this1;
				this1 = new Array(value.length);
				vec = this1;
				var _g1 = 0;
				var _g = value.length;
				while (_g1 < _g) {
					var i = _g1++;
					vec[i] = value[i];
				}
				vectorData.data = vec;
				this.rawData = vectorData;
			}
		}
		, interpolateTo: function (toMat, percent) {
			var _g = 0;
			while (_g < 16) {
				var i = _g++;
				var this1 = this.rawData;
				if (!this1.fixed) {
					if (i >= this1.length) this1.length = i + 1;
					if (this1.data.length < this1.length) {
						var data;
						var this2;
						this2 = new Array(this1.data.length + 10);
						data = this2;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, data, 0, this1.data.length);
						this1.data = data;
					}
				}
				this1.data[i] = this.rawData.data[i] + (toMat.rawData.data[i] - this.rawData.data[i]) * percent;
			}
		}
		, invert: function () {
			var d = (this.rawData.data[0] * this.rawData.data[5] - this.rawData.data[4] * this.rawData.data[1]) * (this.rawData.data[10] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[11]) - (this.rawData.data[0] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[7]) + (this.rawData.data[0] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[7]) + (this.rawData.data[4] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[3]) - (this.rawData.data[4] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[3]) + (this.rawData.data[8] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[9]) * (this.rawData.data[2] * this.rawData.data[7] - this.rawData.data[6] * this.rawData.data[3]);
			var invertable = Math.abs(d) > 0.00000000001;
			if (invertable) {
				d = 1 / d;
				var m11 = this.rawData.data[0];
				var m21 = this.rawData.data[4];
				var m31 = this.rawData.data[8];
				var m41 = this.rawData.data[12];
				var m12 = this.rawData.data[1];
				var m22 = this.rawData.data[5];
				var m32 = this.rawData.data[9];
				var m42 = this.rawData.data[13];
				var m13 = this.rawData.data[2];
				var m23 = this.rawData.data[6];
				var m33 = this.rawData.data[10];
				var m43 = this.rawData.data[14];
				var m14 = this.rawData.data[3];
				var m24 = this.rawData.data[7];
				var m34 = this.rawData.data[11];
				var m44 = this.rawData.data[15];
				var this1 = this.rawData;
				if (!this1.fixed) {
					if (0 >= this1.length) this1.length = 1;
					if (this1.data.length < this1.length) {
						var data;
						var this2;
						this2 = new Array(this1.data.length + 10);
						data = this2;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, data, 0, this1.data.length);
						this1.data = data;
					}
				}
				this1.data[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
				var this3 = this.rawData;
				if (!this3.fixed) {
					if (1 >= this3.length) this3.length = 2;
					if (this3.data.length < this3.length) {
						var data1;
						var this4;
						this4 = new Array(this3.data.length + 10);
						data1 = this4;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data, 0, data1, 0, this3.data.length);
						this3.data = data1;
					}
				}
				this3.data[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
				var this5 = this.rawData;
				if (!this5.fixed) {
					if (2 >= this5.length) this5.length = 3;
					if (this5.data.length < this5.length) {
						var data2;
						var this6;
						this6 = new Array(this5.data.length + 10);
						data2 = this6;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data, 0, data2, 0, this5.data.length);
						this5.data = data2;
					}
				}
				this5.data[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
				var this7 = this.rawData;
				if (!this7.fixed) {
					if (3 >= this7.length) this7.length = 4;
					if (this7.data.length < this7.length) {
						var data3;
						var this8;
						this8 = new Array(this7.data.length + 10);
						data3 = this8;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data, 0, data3, 0, this7.data.length);
						this7.data = data3;
					}
				}
				this7.data[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
				var this9 = this.rawData;
				if (!this9.fixed) {
					if (4 >= this9.length) this9.length = 5;
					if (this9.data.length < this9.length) {
						var data4;
						var this10;
						this10 = new Array(this9.data.length + 10);
						data4 = this10;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data, 0, data4, 0, this9.data.length);
						this9.data = data4;
					}
				}
				this9.data[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
				var this11 = this.rawData;
				if (!this11.fixed) {
					if (5 >= this11.length) this11.length = 6;
					if (this11.data.length < this11.length) {
						var data5;
						var this12;
						this12 = new Array(this11.data.length + 10);
						data5 = this12;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data, 0, data5, 0, this11.data.length);
						this11.data = data5;
					}
				}
				this11.data[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
				var this13 = this.rawData;
				if (!this13.fixed) {
					if (6 >= this13.length) this13.length = 7;
					if (this13.data.length < this13.length) {
						var data6;
						var this14;
						this14 = new Array(this13.data.length + 10);
						data6 = this14;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data, 0, data6, 0, this13.data.length);
						this13.data = data6;
					}
				}
				this13.data[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
				var this15 = this.rawData;
				if (!this15.fixed) {
					if (7 >= this15.length) this15.length = 8;
					if (this15.data.length < this15.length) {
						var data7;
						var this16;
						this16 = new Array(this15.data.length + 10);
						data7 = this16;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data, 0, data7, 0, this15.data.length);
						this15.data = data7;
					}
				}
				this15.data[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
				var this17 = this.rawData;
				if (!this17.fixed) {
					if (8 >= this17.length) this17.length = 9;
					if (this17.data.length < this17.length) {
						var data8;
						var this18;
						this18 = new Array(this17.data.length + 10);
						data8 = this18;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data, 0, data8, 0, this17.data.length);
						this17.data = data8;
					}
				}
				this17.data[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
				var this19 = this.rawData;
				if (!this19.fixed) {
					if (9 >= this19.length) this19.length = 10;
					if (this19.data.length < this19.length) {
						var data9;
						var this20;
						this20 = new Array(this19.data.length + 10);
						data9 = this20;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data, 0, data9, 0, this19.data.length);
						this19.data = data9;
					}
				}
				this19.data[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
				var this21 = this.rawData;
				if (!this21.fixed) {
					if (10 >= this21.length) this21.length = 11;
					if (this21.data.length < this21.length) {
						var data10;
						var this22;
						this22 = new Array(this21.data.length + 10);
						data10 = this22;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data, 0, data10, 0, this21.data.length);
						this21.data = data10;
					}
				}
				this21.data[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
				var this23 = this.rawData;
				if (!this23.fixed) {
					if (11 >= this23.length) this23.length = 12;
					if (this23.data.length < this23.length) {
						var data11;
						var this24;
						this24 = new Array(this23.data.length + 10);
						data11 = this24;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data, 0, data11, 0, this23.data.length);
						this23.data = data11;
					}
				}
				this23.data[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
				var this25 = this.rawData;
				if (!this25.fixed) {
					if (12 >= this25.length) this25.length = 13;
					if (this25.data.length < this25.length) {
						var data12;
						var this26;
						this26 = new Array(this25.data.length + 10);
						data12 = this26;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data, 0, data12, 0, this25.data.length);
						this25.data = data12;
					}
				}
				this25.data[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
				var this27 = this.rawData;
				if (!this27.fixed) {
					if (13 >= this27.length) this27.length = 14;
					if (this27.data.length < this27.length) {
						var data13;
						var this28;
						this28 = new Array(this27.data.length + 10);
						data13 = this28;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data, 0, data13, 0, this27.data.length);
						this27.data = data13;
					}
				}
				this27.data[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
				var this29 = this.rawData;
				if (!this29.fixed) {
					if (14 >= this29.length) this29.length = 15;
					if (this29.data.length < this29.length) {
						var data14;
						var this30;
						this30 = new Array(this29.data.length + 10);
						data14 = this30;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data, 0, data14, 0, this29.data.length);
						this29.data = data14;
					}
				}
				this29.data[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
				var this31 = this.rawData;
				if (!this31.fixed) {
					if (15 >= this31.length) this31.length = 16;
					if (this31.data.length < this31.length) {
						var data15;
						var this32;
						this32 = new Array(this31.data.length + 10);
						data15 = this32;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data, 0, data15, 0, this31.data.length);
						this31.data = data15;
					}
				}
				this31.data[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
			}
			return invertable;
		}
		, pointAt: function (pos, at, up) {
			if (at == null) at = new openfl_geom_Vector3D(0, 0, -1);
			if (up == null) up = new openfl_geom_Vector3D(0, -1, 0);
			var dir = new openfl_geom_Vector3D(at.x - pos.x, at.y - pos.y, at.z - pos.z);
			var vup = new openfl_geom_Vector3D(up.x, up.y, up.z, up.w);
			var right;
			dir.normalize();
			vup.normalize();
			var dir2 = new openfl_geom_Vector3D(dir.x, dir.y, dir.z, dir.w);
			dir2.scaleBy(vup.x * dir.x + vup.y * dir.y + vup.z * dir.z);
			vup = new openfl_geom_Vector3D(vup.x - dir2.x, vup.y - dir2.y, vup.z - dir2.z);
			if (Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z) > 0) vup.normalize(); else if (dir.x != 0) vup = new openfl_geom_Vector3D(-dir.y, dir.x, 0); else vup = new openfl_geom_Vector3D(1, 0, 0);
			right = new openfl_geom_Vector3D(vup.y * dir.z - vup.z * dir.y, vup.z * dir.x - vup.x * dir.z, vup.x * dir.y - vup.y * dir.x, 1);
			right.normalize();
			var this1 = this.rawData;
			if (!this1.fixed) {
				if (0 >= this1.length) this1.length = 1;
				if (this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, data, 0, this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = right.x;
			var this3 = this.rawData;
			if (!this3.fixed) {
				if (4 >= this3.length) this3.length = 5;
				if (this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data, 0, data1, 0, this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[4] = right.y;
			var this5 = this.rawData;
			if (!this5.fixed) {
				if (8 >= this5.length) this5.length = 9;
				if (this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data, 0, data2, 0, this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[8] = right.z;
			var this7 = this.rawData;
			if (!this7.fixed) {
				if (12 >= this7.length) this7.length = 13;
				if (this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data, 0, data3, 0, this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[12] = 0.0;
			var this9 = this.rawData;
			if (!this9.fixed) {
				if (1 >= this9.length) this9.length = 2;
				if (this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data, 0, data4, 0, this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[1] = vup.x;
			var this11 = this.rawData;
			if (!this11.fixed) {
				if (5 >= this11.length) this11.length = 6;
				if (this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data, 0, data5, 0, this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[5] = vup.y;
			var this13 = this.rawData;
			if (!this13.fixed) {
				if (9 >= this13.length) this13.length = 10;
				if (this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data, 0, data6, 0, this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[9] = vup.z;
			var this15 = this.rawData;
			if (!this15.fixed) {
				if (13 >= this15.length) this15.length = 14;
				if (this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data, 0, data7, 0, this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[13] = 0.0;
			var this17 = this.rawData;
			if (!this17.fixed) {
				if (2 >= this17.length) this17.length = 3;
				if (this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data, 0, data8, 0, this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[2] = dir.x;
			var this19 = this.rawData;
			if (!this19.fixed) {
				if (6 >= this19.length) this19.length = 7;
				if (this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data, 0, data9, 0, this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[6] = dir.y;
			var this21 = this.rawData;
			if (!this21.fixed) {
				if (10 >= this21.length) this21.length = 11;
				if (this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data, 0, data10, 0, this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[10] = dir.z;
			var this23 = this.rawData;
			if (!this23.fixed) {
				if (14 >= this23.length) this23.length = 15;
				if (this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data, 0, data11, 0, this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[14] = 0.0;
			var this25 = this.rawData;
			if (!this25.fixed) {
				if (3 >= this25.length) this25.length = 4;
				if (this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data, 0, data12, 0, this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[3] = pos.x;
			var this27 = this.rawData;
			if (!this27.fixed) {
				if (7 >= this27.length) this27.length = 8;
				if (this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data, 0, data13, 0, this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[7] = pos.y;
			var this29 = this.rawData;
			if (!this29.fixed) {
				if (11 >= this29.length) this29.length = 12;
				if (this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data, 0, data14, 0, this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[11] = pos.z;
			var this31 = this.rawData;
			if (!this31.fixed) {
				if (15 >= this31.length) this31.length = 16;
				if (this31.data.length < this31.length) {
					var data15;
					var this32;
					this32 = new Array(this31.data.length + 10);
					data15 = this32;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data, 0, data15, 0, this31.data.length);
					this31.data = data15;
				}
			}
			this31.data[15] = 1.0;
		}
		, prepend: function (rhs) {
			var m111 = rhs.rawData.data[0];
			var m121 = rhs.rawData.data[4];
			var m131 = rhs.rawData.data[8];
			var m141 = rhs.rawData.data[12];
			var m112 = rhs.rawData.data[1];
			var m122 = rhs.rawData.data[5];
			var m132 = rhs.rawData.data[9];
			var m142 = rhs.rawData.data[13];
			var m113 = rhs.rawData.data[2];
			var m123 = rhs.rawData.data[6];
			var m133 = rhs.rawData.data[10];
			var m143 = rhs.rawData.data[14];
			var m114 = rhs.rawData.data[3];
			var m124 = rhs.rawData.data[7];
			var m134 = rhs.rawData.data[11];
			var m144 = rhs.rawData.data[15];
			var m211 = this.rawData.data[0];
			var m221 = this.rawData.data[4];
			var m231 = this.rawData.data[8];
			var m241 = this.rawData.data[12];
			var m212 = this.rawData.data[1];
			var m222 = this.rawData.data[5];
			var m232 = this.rawData.data[9];
			var m242 = this.rawData.data[13];
			var m213 = this.rawData.data[2];
			var m223 = this.rawData.data[6];
			var m233 = this.rawData.data[10];
			var m243 = this.rawData.data[14];
			var m214 = this.rawData.data[3];
			var m224 = this.rawData.data[7];
			var m234 = this.rawData.data[11];
			var m244 = this.rawData.data[15];
			var this1 = this.rawData;
			if (!this1.fixed) {
				if (0 >= this1.length) this1.length = 1;
				if (this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, data, 0, this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
			var this3 = this.rawData;
			if (!this3.fixed) {
				if (1 >= this3.length) this3.length = 2;
				if (this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data, 0, data1, 0, this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
			var this5 = this.rawData;
			if (!this5.fixed) {
				if (2 >= this5.length) this5.length = 3;
				if (this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data, 0, data2, 0, this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
			var this7 = this.rawData;
			if (!this7.fixed) {
				if (3 >= this7.length) this7.length = 4;
				if (this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data, 0, data3, 0, this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
			var this9 = this.rawData;
			if (!this9.fixed) {
				if (4 >= this9.length) this9.length = 5;
				if (this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data, 0, data4, 0, this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
			var this11 = this.rawData;
			if (!this11.fixed) {
				if (5 >= this11.length) this11.length = 6;
				if (this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data, 0, data5, 0, this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
			var this13 = this.rawData;
			if (!this13.fixed) {
				if (6 >= this13.length) this13.length = 7;
				if (this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data, 0, data6, 0, this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
			var this15 = this.rawData;
			if (!this15.fixed) {
				if (7 >= this15.length) this15.length = 8;
				if (this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data, 0, data7, 0, this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
			var this17 = this.rawData;
			if (!this17.fixed) {
				if (8 >= this17.length) this17.length = 9;
				if (this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data, 0, data8, 0, this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
			var this19 = this.rawData;
			if (!this19.fixed) {
				if (9 >= this19.length) this19.length = 10;
				if (this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data, 0, data9, 0, this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
			var this21 = this.rawData;
			if (!this21.fixed) {
				if (10 >= this21.length) this21.length = 11;
				if (this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data, 0, data10, 0, this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
			var this23 = this.rawData;
			if (!this23.fixed) {
				if (11 >= this23.length) this23.length = 12;
				if (this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data, 0, data11, 0, this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
			var this25 = this.rawData;
			if (!this25.fixed) {
				if (12 >= this25.length) this25.length = 13;
				if (this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data, 0, data12, 0, this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
			var this27 = this.rawData;
			if (!this27.fixed) {
				if (13 >= this27.length) this27.length = 14;
				if (this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data, 0, data13, 0, this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
			var this29 = this.rawData;
			if (!this29.fixed) {
				if (14 >= this29.length) this29.length = 15;
				if (this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data, 0, data14, 0, this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
			var this31 = this.rawData;
			if (!this31.fixed) {
				if (15 >= this31.length) this31.length = 16;
				if (this31.data.length < this31.length) {
					var data15;
					var this32;
					this32 = new Array(this31.data.length + 10);
					data15 = this32;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data, 0, data15, 0, this31.data.length);
					this31.data = data15;
				}
			}
			this31.data[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
		}
		, prependRotation: function (degrees, axis, pivotPoint) {
			var m = openfl_geom_Matrix3D.getAxisRotation(axis.x, axis.y, axis.z, degrees);
			if (pivotPoint != null) {
				var p = pivotPoint;
				m.appendTranslation(p.x, p.y, p.z);
			}
			this.prepend(m);
		}
		, prependScale: function (xScale, yScale, zScale) {
			this.prepend(new openfl_geom_Matrix3D((function ($this) {
				var $r;
				var value = [xScale, 0.0, 0.0, 0.0, 0.0, yScale, 0.0, 0.0, 0.0, 0.0, zScale, 0.0, 0.0, 0.0, 0.0, 1.0];
				var vectorData = new openfl_VectorData();
				vectorData.length = value.length;
				vectorData.fixed = true;
				{
					var vec;
					var this1;
					this1 = new Array(value.length);
					vec = this1;
					var _g1 = 0;
					var _g = value.length;
					while (_g1 < _g) {
						var i = _g1++;
						vec[i] = value[i];
					}
					vectorData.data = vec;
				}
				$r = vectorData;
				return $r;
			}(this))));
		}
		, prependTranslation: function (x, y, z) {
			var m = new openfl_geom_Matrix3D();
			m.set_position(new openfl_geom_Vector3D(x, y, z));
			this.prepend(m);
		}
		, recompose: function (components, orientationStyle) {
			if (components.length < 3 || components.data[2].x == 0 || components.data[2].y == 0 || components.data[2].z == 0) return false;
			if (orientationStyle == null) orientationStyle = openfl_geom_Orientation3D.EULER_ANGLES;
			this.identity();
			var scale = [];
			scale[0] = scale[1] = scale[2] = components.data[2].x;
			scale[4] = scale[5] = scale[6] = components.data[2].y;
			scale[8] = scale[9] = scale[10] = components.data[2].z;
			if (orientationStyle != null) switch (orientationStyle[1]) {
				case 1:
					var cx = Math.cos(components.data[1].x);
					var cy = Math.cos(components.data[1].y);
					var cz = Math.cos(components.data[1].z);
					var sx = Math.sin(components.data[1].x);
					var sy = Math.sin(components.data[1].y);
					var sz = Math.sin(components.data[1].z);
					var this1 = this.rawData;
					if (!this1.fixed) {
						if (0 >= this1.length) this1.length = 1;
						if (this1.data.length < this1.length) {
							var data;
							var this2;
							this2 = new Array(this1.data.length + 10);
							data = this2;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, data, 0, this1.data.length);
							this1.data = data;
						}
					}
					this1.data[0] = cy * cz * scale[0];
					var this3 = this.rawData;
					if (!this3.fixed) {
						if (1 >= this3.length) this3.length = 2;
						if (this3.data.length < this3.length) {
							var data1;
							var this4;
							this4 = new Array(this3.data.length + 10);
							data1 = this4;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data, 0, data1, 0, this3.data.length);
							this3.data = data1;
						}
					}
					this3.data[1] = cy * sz * scale[1];
					var this5 = this.rawData;
					if (!this5.fixed) {
						if (2 >= this5.length) this5.length = 3;
						if (this5.data.length < this5.length) {
							var data2;
							var this6;
							this6 = new Array(this5.data.length + 10);
							data2 = this6;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data, 0, data2, 0, this5.data.length);
							this5.data = data2;
						}
					}
					this5.data[2] = -sy * scale[2];
					var this7 = this.rawData;
					if (!this7.fixed) {
						if (3 >= this7.length) this7.length = 4;
						if (this7.data.length < this7.length) {
							var data3;
							var this8;
							this8 = new Array(this7.data.length + 10);
							data3 = this8;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data, 0, data3, 0, this7.data.length);
							this7.data = data3;
						}
					}
					this7.data[3] = 0;
					var this9 = this.rawData;
					if (!this9.fixed) {
						if (4 >= this9.length) this9.length = 5;
						if (this9.data.length < this9.length) {
							var data4;
							var this10;
							this10 = new Array(this9.data.length + 10);
							data4 = this10;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data, 0, data4, 0, this9.data.length);
							this9.data = data4;
						}
					}
					this9.data[4] = (sx * sy * cz - cx * sz) * scale[4];
					var this11 = this.rawData;
					if (!this11.fixed) {
						if (5 >= this11.length) this11.length = 6;
						if (this11.data.length < this11.length) {
							var data5;
							var this12;
							this12 = new Array(this11.data.length + 10);
							data5 = this12;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data, 0, data5, 0, this11.data.length);
							this11.data = data5;
						}
					}
					this11.data[5] = (sx * sy * sz + cx * cz) * scale[5];
					var this13 = this.rawData;
					if (!this13.fixed) {
						if (6 >= this13.length) this13.length = 7;
						if (this13.data.length < this13.length) {
							var data6;
							var this14;
							this14 = new Array(this13.data.length + 10);
							data6 = this14;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data, 0, data6, 0, this13.data.length);
							this13.data = data6;
						}
					}
					this13.data[6] = sx * cy * scale[6];
					var this15 = this.rawData;
					if (!this15.fixed) {
						if (7 >= this15.length) this15.length = 8;
						if (this15.data.length < this15.length) {
							var data7;
							var this16;
							this16 = new Array(this15.data.length + 10);
							data7 = this16;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data, 0, data7, 0, this15.data.length);
							this15.data = data7;
						}
					}
					this15.data[7] = 0;
					var this17 = this.rawData;
					if (!this17.fixed) {
						if (8 >= this17.length) this17.length = 9;
						if (this17.data.length < this17.length) {
							var data8;
							var this18;
							this18 = new Array(this17.data.length + 10);
							data8 = this18;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data, 0, data8, 0, this17.data.length);
							this17.data = data8;
						}
					}
					this17.data[8] = (cx * sy * cz + sx * sz) * scale[8];
					var this19 = this.rawData;
					if (!this19.fixed) {
						if (9 >= this19.length) this19.length = 10;
						if (this19.data.length < this19.length) {
							var data9;
							var this20;
							this20 = new Array(this19.data.length + 10);
							data9 = this20;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data, 0, data9, 0, this19.data.length);
							this19.data = data9;
						}
					}
					this19.data[9] = (cx * sy * sz - sx * cz) * scale[9];
					var this21 = this.rawData;
					if (!this21.fixed) {
						if (10 >= this21.length) this21.length = 11;
						if (this21.data.length < this21.length) {
							var data10;
							var this22;
							this22 = new Array(this21.data.length + 10);
							data10 = this22;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data, 0, data10, 0, this21.data.length);
							this21.data = data10;
						}
					}
					this21.data[10] = cx * cy * scale[10];
					var this23 = this.rawData;
					if (!this23.fixed) {
						if (11 >= this23.length) this23.length = 12;
						if (this23.data.length < this23.length) {
							var data11;
							var this24;
							this24 = new Array(this23.data.length + 10);
							data11 = this24;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data, 0, data11, 0, this23.data.length);
							this23.data = data11;
						}
					}
					this23.data[11] = 0;
					var this25 = this.rawData;
					if (!this25.fixed) {
						if (12 >= this25.length) this25.length = 13;
						if (this25.data.length < this25.length) {
							var data12;
							var this26;
							this26 = new Array(this25.data.length + 10);
							data12 = this26;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data, 0, data12, 0, this25.data.length);
							this25.data = data12;
						}
					}
					this25.data[12] = components.data[0].x;
					var this27 = this.rawData;
					if (!this27.fixed) {
						if (13 >= this27.length) this27.length = 14;
						if (this27.data.length < this27.length) {
							var data13;
							var this28;
							this28 = new Array(this27.data.length + 10);
							data13 = this28;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data, 0, data13, 0, this27.data.length);
							this27.data = data13;
						}
					}
					this27.data[13] = components.data[0].y;
					var this29 = this.rawData;
					if (!this29.fixed) {
						if (14 >= this29.length) this29.length = 15;
						if (this29.data.length < this29.length) {
							var data14;
							var this30;
							this30 = new Array(this29.data.length + 10);
							data14 = this30;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data, 0, data14, 0, this29.data.length);
							this29.data = data14;
						}
					}
					this29.data[14] = components.data[0].z;
					var this31 = this.rawData;
					if (!this31.fixed) {
						if (15 >= this31.length) this31.length = 16;
						if (this31.data.length < this31.length) {
							var data15;
							var this32;
							this32 = new Array(this31.data.length + 10);
							data15 = this32;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data, 0, data15, 0, this31.data.length);
							this31.data = data15;
						}
					}
					this31.data[15] = 1;
					break;
				default:
					var x = components.data[1].x;
					var y = components.data[1].y;
					var z = components.data[1].z;
					var w = components.data[1].w;
					if (Type.enumEq(orientationStyle, openfl_geom_Orientation3D.AXIS_ANGLE)) {
						x *= Math.sin(w / 2);
						y *= Math.sin(w / 2);
						z *= Math.sin(w / 2);
						w = Math.cos(w / 2);
					}
					var this33 = this.rawData;
					if (!this33.fixed) {
						if (0 >= this33.length) this33.length = 1;
						if (this33.data.length < this33.length) {
							var data16;
							var this34;
							this34 = new Array(this33.data.length + 10);
							data16 = this34;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this33.data, 0, data16, 0, this33.data.length);
							this33.data = data16;
						}
					}
					this33.data[0] = (1 - 2 * y * y - 2 * z * z) * scale[0];
					var this35 = this.rawData;
					if (!this35.fixed) {
						if (1 >= this35.length) this35.length = 2;
						if (this35.data.length < this35.length) {
							var data17;
							var this36;
							this36 = new Array(this35.data.length + 10);
							data17 = this36;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this35.data, 0, data17, 0, this35.data.length);
							this35.data = data17;
						}
					}
					this35.data[1] = (2 * x * y + 2 * w * z) * scale[1];
					var this37 = this.rawData;
					if (!this37.fixed) {
						if (2 >= this37.length) this37.length = 3;
						if (this37.data.length < this37.length) {
							var data18;
							var this38;
							this38 = new Array(this37.data.length + 10);
							data18 = this38;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this37.data, 0, data18, 0, this37.data.length);
							this37.data = data18;
						}
					}
					this37.data[2] = (2 * x * z - 2 * w * y) * scale[2];
					var this39 = this.rawData;
					if (!this39.fixed) {
						if (3 >= this39.length) this39.length = 4;
						if (this39.data.length < this39.length) {
							var data19;
							var this40;
							this40 = new Array(this39.data.length + 10);
							data19 = this40;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this39.data, 0, data19, 0, this39.data.length);
							this39.data = data19;
						}
					}
					this39.data[3] = 0;
					var this41 = this.rawData;
					if (!this41.fixed) {
						if (4 >= this41.length) this41.length = 5;
						if (this41.data.length < this41.length) {
							var data20;
							var this42;
							this42 = new Array(this41.data.length + 10);
							data20 = this42;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this41.data, 0, data20, 0, this41.data.length);
							this41.data = data20;
						}
					}
					this41.data[4] = (2 * x * y - 2 * w * z) * scale[4];
					var this43 = this.rawData;
					if (!this43.fixed) {
						if (5 >= this43.length) this43.length = 6;
						if (this43.data.length < this43.length) {
							var data21;
							var this44;
							this44 = new Array(this43.data.length + 10);
							data21 = this44;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this43.data, 0, data21, 0, this43.data.length);
							this43.data = data21;
						}
					}
					this43.data[5] = (1 - 2 * x * x - 2 * z * z) * scale[5];
					var this45 = this.rawData;
					if (!this45.fixed) {
						if (6 >= this45.length) this45.length = 7;
						if (this45.data.length < this45.length) {
							var data22;
							var this46;
							this46 = new Array(this45.data.length + 10);
							data22 = this46;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this45.data, 0, data22, 0, this45.data.length);
							this45.data = data22;
						}
					}
					this45.data[6] = (2 * y * z + 2 * w * x) * scale[6];
					var this47 = this.rawData;
					if (!this47.fixed) {
						if (7 >= this47.length) this47.length = 8;
						if (this47.data.length < this47.length) {
							var data23;
							var this48;
							this48 = new Array(this47.data.length + 10);
							data23 = this48;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this47.data, 0, data23, 0, this47.data.length);
							this47.data = data23;
						}
					}
					this47.data[7] = 0;
					var this49 = this.rawData;
					if (!this49.fixed) {
						if (8 >= this49.length) this49.length = 9;
						if (this49.data.length < this49.length) {
							var data24;
							var this50;
							this50 = new Array(this49.data.length + 10);
							data24 = this50;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this49.data, 0, data24, 0, this49.data.length);
							this49.data = data24;
						}
					}
					this49.data[8] = (2 * x * z + 2 * w * y) * scale[8];
					var this51 = this.rawData;
					if (!this51.fixed) {
						if (9 >= this51.length) this51.length = 10;
						if (this51.data.length < this51.length) {
							var data25;
							var this52;
							this52 = new Array(this51.data.length + 10);
							data25 = this52;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this51.data, 0, data25, 0, this51.data.length);
							this51.data = data25;
						}
					}
					this51.data[9] = (2 * y * z - 2 * w * x) * scale[9];
					var this53 = this.rawData;
					if (!this53.fixed) {
						if (10 >= this53.length) this53.length = 11;
						if (this53.data.length < this53.length) {
							var data26;
							var this54;
							this54 = new Array(this53.data.length + 10);
							data26 = this54;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this53.data, 0, data26, 0, this53.data.length);
							this53.data = data26;
						}
					}
					this53.data[10] = (1 - 2 * x * x - 2 * y * y) * scale[10];
					var this55 = this.rawData;
					if (!this55.fixed) {
						if (11 >= this55.length) this55.length = 12;
						if (this55.data.length < this55.length) {
							var data27;
							var this56;
							this56 = new Array(this55.data.length + 10);
							data27 = this56;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this55.data, 0, data27, 0, this55.data.length);
							this55.data = data27;
						}
					}
					this55.data[11] = 0;
					var this57 = this.rawData;
					if (!this57.fixed) {
						if (12 >= this57.length) this57.length = 13;
						if (this57.data.length < this57.length) {
							var data28;
							var this58;
							this58 = new Array(this57.data.length + 10);
							data28 = this58;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this57.data, 0, data28, 0, this57.data.length);
							this57.data = data28;
						}
					}
					this57.data[12] = components.data[0].x;
					var this59 = this.rawData;
					if (!this59.fixed) {
						if (13 >= this59.length) this59.length = 14;
						if (this59.data.length < this59.length) {
							var data29;
							var this60;
							this60 = new Array(this59.data.length + 10);
							data29 = this60;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this59.data, 0, data29, 0, this59.data.length);
							this59.data = data29;
						}
					}
					this59.data[13] = components.data[0].y;
					var this61 = this.rawData;
					if (!this61.fixed) {
						if (14 >= this61.length) this61.length = 15;
						if (this61.data.length < this61.length) {
							var data30;
							var this62;
							this62 = new Array(this61.data.length + 10);
							data30 = this62;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this61.data, 0, data30, 0, this61.data.length);
							this61.data = data30;
						}
					}
					this61.data[14] = components.data[0].z;
					var this63 = this.rawData;
					if (!this63.fixed) {
						if (15 >= this63.length) this63.length = 16;
						if (this63.data.length < this63.length) {
							var data31;
							var this64;
							this64 = new Array(this63.data.length + 10);
							data31 = this64;
							haxe_ds__$Vector_Vector_$Impl_$.blit(this63.data, 0, data31, 0, this63.data.length);
							this63.data = data31;
						}
					}
					this63.data[15] = 1;
			} else {
				var x = components.data[1].x;
				var y = components.data[1].y;
				var z = components.data[1].z;
				var w = components.data[1].w;
				if (Type.enumEq(orientationStyle, openfl_geom_Orientation3D.AXIS_ANGLE)) {
					x *= Math.sin(w / 2);
					y *= Math.sin(w / 2);
					z *= Math.sin(w / 2);
					w = Math.cos(w / 2);
				}
				var this33 = this.rawData;
				if (!this33.fixed) {
					if (0 >= this33.length) this33.length = 1;
					if (this33.data.length < this33.length) {
						var data16;
						var this34;
						this34 = new Array(this33.data.length + 10);
						data16 = this34;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this33.data, 0, data16, 0, this33.data.length);
						this33.data = data16;
					}
				}
				this33.data[0] = (1 - 2 * y * y - 2 * z * z) * scale[0];
				var this35 = this.rawData;
				if (!this35.fixed) {
					if (1 >= this35.length) this35.length = 2;
					if (this35.data.length < this35.length) {
						var data17;
						var this36;
						this36 = new Array(this35.data.length + 10);
						data17 = this36;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this35.data, 0, data17, 0, this35.data.length);
						this35.data = data17;
					}
				}
				this35.data[1] = (2 * x * y + 2 * w * z) * scale[1];
				var this37 = this.rawData;
				if (!this37.fixed) {
					if (2 >= this37.length) this37.length = 3;
					if (this37.data.length < this37.length) {
						var data18;
						var this38;
						this38 = new Array(this37.data.length + 10);
						data18 = this38;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this37.data, 0, data18, 0, this37.data.length);
						this37.data = data18;
					}
				}
				this37.data[2] = (2 * x * z - 2 * w * y) * scale[2];
				var this39 = this.rawData;
				if (!this39.fixed) {
					if (3 >= this39.length) this39.length = 4;
					if (this39.data.length < this39.length) {
						var data19;
						var this40;
						this40 = new Array(this39.data.length + 10);
						data19 = this40;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this39.data, 0, data19, 0, this39.data.length);
						this39.data = data19;
					}
				}
				this39.data[3] = 0;
				var this41 = this.rawData;
				if (!this41.fixed) {
					if (4 >= this41.length) this41.length = 5;
					if (this41.data.length < this41.length) {
						var data20;
						var this42;
						this42 = new Array(this41.data.length + 10);
						data20 = this42;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this41.data, 0, data20, 0, this41.data.length);
						this41.data = data20;
					}
				}
				this41.data[4] = (2 * x * y - 2 * w * z) * scale[4];
				var this43 = this.rawData;
				if (!this43.fixed) {
					if (5 >= this43.length) this43.length = 6;
					if (this43.data.length < this43.length) {
						var data21;
						var this44;
						this44 = new Array(this43.data.length + 10);
						data21 = this44;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this43.data, 0, data21, 0, this43.data.length);
						this43.data = data21;
					}
				}
				this43.data[5] = (1 - 2 * x * x - 2 * z * z) * scale[5];
				var this45 = this.rawData;
				if (!this45.fixed) {
					if (6 >= this45.length) this45.length = 7;
					if (this45.data.length < this45.length) {
						var data22;
						var this46;
						this46 = new Array(this45.data.length + 10);
						data22 = this46;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this45.data, 0, data22, 0, this45.data.length);
						this45.data = data22;
					}
				}
				this45.data[6] = (2 * y * z + 2 * w * x) * scale[6];
				var this47 = this.rawData;
				if (!this47.fixed) {
					if (7 >= this47.length) this47.length = 8;
					if (this47.data.length < this47.length) {
						var data23;
						var this48;
						this48 = new Array(this47.data.length + 10);
						data23 = this48;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this47.data, 0, data23, 0, this47.data.length);
						this47.data = data23;
					}
				}
				this47.data[7] = 0;
				var this49 = this.rawData;
				if (!this49.fixed) {
					if (8 >= this49.length) this49.length = 9;
					if (this49.data.length < this49.length) {
						var data24;
						var this50;
						this50 = new Array(this49.data.length + 10);
						data24 = this50;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this49.data, 0, data24, 0, this49.data.length);
						this49.data = data24;
					}
				}
				this49.data[8] = (2 * x * z + 2 * w * y) * scale[8];
				var this51 = this.rawData;
				if (!this51.fixed) {
					if (9 >= this51.length) this51.length = 10;
					if (this51.data.length < this51.length) {
						var data25;
						var this52;
						this52 = new Array(this51.data.length + 10);
						data25 = this52;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this51.data, 0, data25, 0, this51.data.length);
						this51.data = data25;
					}
				}
				this51.data[9] = (2 * y * z - 2 * w * x) * scale[9];
				var this53 = this.rawData;
				if (!this53.fixed) {
					if (10 >= this53.length) this53.length = 11;
					if (this53.data.length < this53.length) {
						var data26;
						var this54;
						this54 = new Array(this53.data.length + 10);
						data26 = this54;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this53.data, 0, data26, 0, this53.data.length);
						this53.data = data26;
					}
				}
				this53.data[10] = (1 - 2 * x * x - 2 * y * y) * scale[10];
				var this55 = this.rawData;
				if (!this55.fixed) {
					if (11 >= this55.length) this55.length = 12;
					if (this55.data.length < this55.length) {
						var data27;
						var this56;
						this56 = new Array(this55.data.length + 10);
						data27 = this56;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this55.data, 0, data27, 0, this55.data.length);
						this55.data = data27;
					}
				}
				this55.data[11] = 0;
				var this57 = this.rawData;
				if (!this57.fixed) {
					if (12 >= this57.length) this57.length = 13;
					if (this57.data.length < this57.length) {
						var data28;
						var this58;
						this58 = new Array(this57.data.length + 10);
						data28 = this58;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this57.data, 0, data28, 0, this57.data.length);
						this57.data = data28;
					}
				}
				this57.data[12] = components.data[0].x;
				var this59 = this.rawData;
				if (!this59.fixed) {
					if (13 >= this59.length) this59.length = 14;
					if (this59.data.length < this59.length) {
						var data29;
						var this60;
						this60 = new Array(this59.data.length + 10);
						data29 = this60;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this59.data, 0, data29, 0, this59.data.length);
						this59.data = data29;
					}
				}
				this59.data[13] = components.data[0].y;
				var this61 = this.rawData;
				if (!this61.fixed) {
					if (14 >= this61.length) this61.length = 15;
					if (this61.data.length < this61.length) {
						var data30;
						var this62;
						this62 = new Array(this61.data.length + 10);
						data30 = this62;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this61.data, 0, data30, 0, this61.data.length);
						this61.data = data30;
					}
				}
				this61.data[14] = components.data[0].z;
				var this63 = this.rawData;
				if (!this63.fixed) {
					if (15 >= this63.length) this63.length = 16;
					if (this63.data.length < this63.length) {
						var data31;
						var this64;
						this64 = new Array(this63.data.length + 10);
						data31 = this64;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this63.data, 0, data31, 0, this63.data.length);
						this63.data = data31;
					}
				}
				this63.data[15] = 1;
			}
			if (components.data[2].x == 0) {
				var this65 = this.rawData;
				if (!this65.fixed) {
					if (0 >= this65.length) this65.length = 1;
					if (this65.data.length < this65.length) {
						var data32;
						var this66;
						this66 = new Array(this65.data.length + 10);
						data32 = this66;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this65.data, 0, data32, 0, this65.data.length);
						this65.data = data32;
					}
				}
				this65.data[0] = 1e-15;
			}
			if (components.data[2].y == 0) {
				var this67 = this.rawData;
				if (!this67.fixed) {
					if (5 >= this67.length) this67.length = 6;
					if (this67.data.length < this67.length) {
						var data33;
						var this68;
						this68 = new Array(this67.data.length + 10);
						data33 = this68;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this67.data, 0, data33, 0, this67.data.length);
						this67.data = data33;
					}
				}
				this67.data[5] = 1e-15;
			}
			if (components.data[2].z == 0) {
				var this69 = this.rawData;
				if (!this69.fixed) {
					if (10 >= this69.length) this69.length = 11;
					if (this69.data.length < this69.length) {
						var data34;
						var this70;
						this70 = new Array(this69.data.length + 10);
						data34 = this70;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this69.data, 0, data34, 0, this69.data.length);
						this69.data = data34;
					}
				}
				this69.data[10] = 1e-15;
			}
			return !(components.data[2].x == 0 || components.data[2].y == 0 || components.data[2].y == 0);
		}
		, transformVector: function (v) {
			var x = v.x;
			var y = v.y;
			var z = v.z;
			return new openfl_geom_Vector3D(x * this.rawData.data[0] + y * this.rawData.data[4] + z * this.rawData.data[8] + this.rawData.data[12], x * this.rawData.data[1] + y * this.rawData.data[5] + z * this.rawData.data[9] + this.rawData.data[13], x * this.rawData.data[2] + y * this.rawData.data[6] + z * this.rawData.data[10] + this.rawData.data[14], x * this.rawData.data[3] + y * this.rawData.data[7] + z * this.rawData.data[11] + this.rawData.data[15]);
		}
		, transformVectors: function (vin, vout) {
			var i = 0;
			while (i + 3 <= vin.length) {
				var x = vin.data[i];
				var y = vin.data[i + 1];
				var z = vin.data[i + 2];
				{
					if (!vout.fixed) {
						if (i >= vout.length) vout.length = i + 1;
						if (vout.data.length < vout.length) {
							var data;
							var this1;
							this1 = new Array(vout.data.length + 10);
							data = this1;
							haxe_ds__$Vector_Vector_$Impl_$.blit(vout.data, 0, data, 0, vout.data.length);
							vout.data = data;
						}
					}
					vout.data[i] = x * this.rawData.data[0] + y * this.rawData.data[4] + z * this.rawData.data[8] + this.rawData.data[12];
				}
				var key = i + 1;
				if (!vout.fixed) {
					if (key >= vout.length) vout.length = key + 1;
					if (vout.data.length < vout.length) {
						var data1;
						var this2;
						this2 = new Array(vout.data.length + 10);
						data1 = this2;
						haxe_ds__$Vector_Vector_$Impl_$.blit(vout.data, 0, data1, 0, vout.data.length);
						vout.data = data1;
					}
				}
				vout.data[key] = x * this.rawData.data[1] + y * this.rawData.data[5] + z * this.rawData.data[9] + this.rawData.data[13];
				var key1 = i + 2;
				if (!vout.fixed) {
					if (key1 >= vout.length) vout.length = key1 + 1;
					if (vout.data.length < vout.length) {
						var data2;
						var this3;
						this3 = new Array(vout.data.length + 10);
						data2 = this3;
						haxe_ds__$Vector_Vector_$Impl_$.blit(vout.data, 0, data2, 0, vout.data.length);
						vout.data = data2;
					}
				}
				vout.data[key1] = x * this.rawData.data[2] + y * this.rawData.data[6] + z * this.rawData.data[10] + this.rawData.data[14];
				i += 3;
			}
		}
		, transpose: function () {
			var oRawData;
			var this1 = this.rawData;
			var vectorData = new openfl_VectorData();
			vectorData.length = this1.length;
			vectorData.fixed = this1.fixed;
			var this2;
			this2 = new Array(this1.length);
			vectorData.data = this2;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, vectorData.data, 0, this1.length);
			oRawData = vectorData;
			var this3 = this.rawData;
			if (!this3.fixed) {
				if (1 >= this3.length) this3.length = 2;
				if (this3.data.length < this3.length) {
					var data;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data, 0, data, 0, this3.data.length);
					this3.data = data;
				}
			}
			this3.data[1] = oRawData.data[4];
			var this5 = this.rawData;
			if (!this5.fixed) {
				if (2 >= this5.length) this5.length = 3;
				if (this5.data.length < this5.length) {
					var data1;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data1 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data, 0, data1, 0, this5.data.length);
					this5.data = data1;
				}
			}
			this5.data[2] = oRawData.data[8];
			var this7 = this.rawData;
			if (!this7.fixed) {
				if (3 >= this7.length) this7.length = 4;
				if (this7.data.length < this7.length) {
					var data2;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data2 = this8;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data, 0, data2, 0, this7.data.length);
					this7.data = data2;
				}
			}
			this7.data[3] = oRawData.data[12];
			var this9 = this.rawData;
			if (!this9.fixed) {
				if (4 >= this9.length) this9.length = 5;
				if (this9.data.length < this9.length) {
					var data3;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data3 = this10;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data, 0, data3, 0, this9.data.length);
					this9.data = data3;
				}
			}
			this9.data[4] = oRawData.data[1];
			var this11 = this.rawData;
			if (!this11.fixed) {
				if (6 >= this11.length) this11.length = 7;
				if (this11.data.length < this11.length) {
					var data4;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data4 = this12;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data, 0, data4, 0, this11.data.length);
					this11.data = data4;
				}
			}
			this11.data[6] = oRawData.data[9];
			var this13 = this.rawData;
			if (!this13.fixed) {
				if (7 >= this13.length) this13.length = 8;
				if (this13.data.length < this13.length) {
					var data5;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data5 = this14;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data, 0, data5, 0, this13.data.length);
					this13.data = data5;
				}
			}
			this13.data[7] = oRawData.data[13];
			var this15 = this.rawData;
			if (!this15.fixed) {
				if (8 >= this15.length) this15.length = 9;
				if (this15.data.length < this15.length) {
					var data6;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data6 = this16;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data, 0, data6, 0, this15.data.length);
					this15.data = data6;
				}
			}
			this15.data[8] = oRawData.data[2];
			var this17 = this.rawData;
			if (!this17.fixed) {
				if (9 >= this17.length) this17.length = 10;
				if (this17.data.length < this17.length) {
					var data7;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data7 = this18;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data, 0, data7, 0, this17.data.length);
					this17.data = data7;
				}
			}
			this17.data[9] = oRawData.data[6];
			var this19 = this.rawData;
			if (!this19.fixed) {
				if (11 >= this19.length) this19.length = 12;
				if (this19.data.length < this19.length) {
					var data8;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data8 = this20;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data, 0, data8, 0, this19.data.length);
					this19.data = data8;
				}
			}
			this19.data[11] = oRawData.data[14];
			var this21 = this.rawData;
			if (!this21.fixed) {
				if (12 >= this21.length) this21.length = 13;
				if (this21.data.length < this21.length) {
					var data9;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data9 = this22;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data, 0, data9, 0, this21.data.length);
					this21.data = data9;
				}
			}
			this21.data[12] = oRawData.data[3];
			var this23 = this.rawData;
			if (!this23.fixed) {
				if (13 >= this23.length) this23.length = 14;
				if (this23.data.length < this23.length) {
					var data10;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data10 = this24;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data, 0, data10, 0, this23.data.length);
					this23.data = data10;
				}
			}
			this23.data[13] = oRawData.data[7];
			var this25 = this.rawData;
			if (!this25.fixed) {
				if (14 >= this25.length) this25.length = 15;
				if (this25.data.length < this25.length) {
					var data11;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data11 = this26;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data, 0, data11, 0, this25.data.length);
					this25.data = data11;
				}
			}
			this25.data[14] = oRawData.data[11];
		}
		, get_determinant: function () {
			return (this.rawData.data[0] * this.rawData.data[5] - this.rawData.data[4] * this.rawData.data[1]) * (this.rawData.data[10] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[11]) - (this.rawData.data[0] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[7]) + (this.rawData.data[0] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[7]) + (this.rawData.data[4] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[3]) - (this.rawData.data[4] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[3]) + (this.rawData.data[8] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[9]) * (this.rawData.data[2] * this.rawData.data[7] - this.rawData.data[6] * this.rawData.data[3]);
		}
		, get_position: function () {
			return new openfl_geom_Vector3D(this.rawData.data[12], this.rawData.data[13], this.rawData.data[14]);
		}
		, set_position: function (val) {
			var this1 = this.rawData;
			if (!this1.fixed) {
				if (12 >= this1.length) this1.length = 13;
				if (this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, data, 0, this1.data.length);
					this1.data = data;
				}
			}
			this1.data[12] = val.x;
			var this3 = this.rawData;
			if (!this3.fixed) {
				if (13 >= this3.length) this3.length = 14;
				if (this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data, 0, data1, 0, this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[13] = val.y;
			var this5 = this.rawData;
			if (!this5.fixed) {
				if (14 >= this5.length) this5.length = 15;
				if (this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data, 0, data2, 0, this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[14] = val.z;
			return val;
		}
		, __class__: openfl_geom_Matrix3D
		, __properties__: { set_position: "set_position", get_position: "get_position", get_determinant: "get_determinant" }
	};
	var openfl_geom_Orientation3D = $hxClasses["openfl.geom.Orientation3D"] = { __ename__: ["openfl", "geom", "Orientation3D"], __constructs__: ["AXIS_ANGLE", "EULER_ANGLES", "QUATERNION"] };
	openfl_geom_Orientation3D.AXIS_ANGLE = ["AXIS_ANGLE", 0];
	openfl_geom_Orientation3D.AXIS_ANGLE.toString = $estr;
	openfl_geom_Orientation3D.AXIS_ANGLE.__enum__ = openfl_geom_Orientation3D;
	openfl_geom_Orientation3D.EULER_ANGLES = ["EULER_ANGLES", 1];
	openfl_geom_Orientation3D.EULER_ANGLES.toString = $estr;
	openfl_geom_Orientation3D.EULER_ANGLES.__enum__ = openfl_geom_Orientation3D;
	openfl_geom_Orientation3D.QUATERNION = ["QUATERNION", 2];
	openfl_geom_Orientation3D.QUATERNION.toString = $estr;
	openfl_geom_Orientation3D.QUATERNION.__enum__ = openfl_geom_Orientation3D;
	var openfl_geom_Transform = function (displayObject) {
		this.__colorTransform = new openfl_geom_ColorTransform();
		this.concatenatedColorTransform = new openfl_geom_ColorTransform();
		this.pixelBounds = new openfl_geom_Rectangle();
		this.__displayObject = displayObject;
		this.__hasMatrix = true;
	};
	$hxClasses["openfl.geom.Transform"] = openfl_geom_Transform;
	openfl_geom_Transform.__name__ = ["openfl", "geom", "Transform"];
	openfl_geom_Transform.prototype = {
		get_colorTransform: function () {
			return this.__colorTransform;
		}
		, set_colorTransform: function (value) {
			if (!this.__colorTransform.__equals(value)) {
				this.__colorTransform = value;
				if (value != null) this.__displayObject.set_alpha(value.alphaMultiplier);
				this.__displayObject.__setRenderDirty();
			}
			return this.__colorTransform;
		}
		, get_matrix: function () {
			if (this.__hasMatrix) return this.__displayObject.__transform.clone();
			return null;
		}
		, get_concatenatedMatrix: function () {
			if (this.__hasMatrix) return this.__displayObject.__getWorldTransform().clone();
			return null;
		}
		, set_matrix: function (value) {
			if (value == null) {
				this.__hasMatrix = false;
				return null;
			}
			this.__hasMatrix = true;
			this.__hasMatrix3D = false;
			if (this.__displayObject != null) {
				var rotation = 180 / Math.PI * Math.atan2(value.d, value.c) - 90;
				if (rotation != this.__displayObject.__rotation) {
					this.__displayObject.__rotation = rotation;
					var radians = rotation * (Math.PI / 180);
					this.__displayObject.__rotationSine = Math.sin(radians);
					this.__displayObject.__rotationCosine = Math.cos(radians);
				}
				this.__displayObject.__transform.copyFrom(value);
				this.__displayObject.__setTransformDirty();
			}
			return value;
		}
		, get_matrix3D: function () {
			if (this.__hasMatrix3D) {
				var matrix = this.__displayObject.__transform;
				return new openfl_geom_Matrix3D((function ($this) {
					var $r;
					var value = [matrix.a, matrix.b, 0.0, 0.0, matrix.c, matrix.d, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, matrix.tx, matrix.ty, 0.0, 1.0];
					var vectorData = new openfl_VectorData();
					vectorData.length = value.length;
					vectorData.fixed = true;
					{
						var vec;
						var this1;
						this1 = new Array(value.length);
						vec = this1;
						var _g1 = 0;
						var _g = value.length;
						while (_g1 < _g) {
							var i = _g1++;
							vec[i] = value[i];
						}
						vectorData.data = vec;
					}
					$r = vectorData;
					return $r;
				}(this)));
			}
			return null;
		}
		, set_matrix3D: function (value) {
			if (value == null) {
				this.__hasMatrix3D = false;
				return null;
			}
			this.__hasMatrix = false;
			this.__hasMatrix3D = true;
			if (this.__displayObject != null) {
				var rotation = 180 / Math.PI * Math.atan2(value.rawData.data[5], value.rawData.data[4]) - 90;
				if (rotation != this.__displayObject.__rotation) {
					this.__displayObject.__rotation = rotation;
					var radians = rotation * (Math.PI / 180);
					this.__displayObject.__rotationSine = Math.sin(radians);
					this.__displayObject.__rotationCosine = Math.cos(radians);
				}
				this.__displayObject.__transform.a = value.rawData.data[0];
				this.__displayObject.__transform.b = value.rawData.data[1];
				this.__displayObject.__transform.c = value.rawData.data[5];
				this.__displayObject.__transform.d = value.rawData.data[6];
				this.__displayObject.__transform.tx = value.rawData.data[12];
				this.__displayObject.__transform.ty = value.rawData.data[13];
				this.__displayObject.__setTransformDirty();
			}
			return value;
		}
		, __class__: openfl_geom_Transform
		, __properties__: { set_matrix3D: "set_matrix3D", get_matrix3D: "get_matrix3D", set_matrix: "set_matrix", get_matrix: "get_matrix", get_concatenatedMatrix: "get_concatenatedMatrix", set_colorTransform: "set_colorTransform", get_colorTransform: "get_colorTransform" }
	};
	var openfl_geom_Vector3D = function (x, y, z, w) {
		if (w == null) w = 0;
		if (z == null) z = 0;
		if (y == null) y = 0;
		if (x == null) x = 0;
		this.w = w;
		this.x = x;
		this.y = y;
		this.z = z;
	};
	$hxClasses["openfl.geom.Vector3D"] = openfl_geom_Vector3D;
	openfl_geom_Vector3D.__name__ = ["openfl", "geom", "Vector3D"];
	openfl_geom_Vector3D.__properties__ = { get_Z_AXIS: "get_Z_AXIS", get_Y_AXIS: "get_Y_AXIS", get_X_AXIS: "get_X_AXIS" }
	openfl_geom_Vector3D.X_AXIS = null;
	openfl_geom_Vector3D.Y_AXIS = null;
	openfl_geom_Vector3D.Z_AXIS = null;
	openfl_geom_Vector3D.angleBetween = function (a, b) {
		var la = Math.sqrt(a.x * a.x + a.y * a.y + a.z * a.z);
		var lb = Math.sqrt(b.x * b.x + b.y * b.y + b.z * b.z);
		var dot = a.x * b.x + a.y * b.y + a.z * b.z;
		if (la != 0) dot /= la;
		if (lb != 0) dot /= lb;
		return Math.acos(dot);
	};
	openfl_geom_Vector3D.distance = function (pt1, pt2) {
		var x = pt2.x - pt1.x;
		var y = pt2.y - pt1.y;
		var z = pt2.z - pt1.z;
		return Math.sqrt(x * x + y * y + z * z);
	};
	openfl_geom_Vector3D.get_X_AXIS = function () {
		return new openfl_geom_Vector3D(1, 0, 0);
	};
	openfl_geom_Vector3D.get_Y_AXIS = function () {
		return new openfl_geom_Vector3D(0, 1, 0);
	};
	openfl_geom_Vector3D.get_Z_AXIS = function () {
		return new openfl_geom_Vector3D(0, 0, 1);
	};
	openfl_geom_Vector3D.prototype = {
		add: function (a) {
			return new openfl_geom_Vector3D(this.x + a.x, this.y + a.y, this.z + a.z);
		}
		, clone: function () {
			return new openfl_geom_Vector3D(this.x, this.y, this.z, this.w);
		}
		, copyFrom: function (sourceVector3D) {
			this.x = sourceVector3D.x;
			this.y = sourceVector3D.y;
			this.z = sourceVector3D.z;
		}
		, crossProduct: function (a) {
			return new openfl_geom_Vector3D(this.y * a.z - this.z * a.y, this.z * a.x - this.x * a.z, this.x * a.y - this.y * a.x, 1);
		}
		, decrementBy: function (a) {
			this.x -= a.x;
			this.y -= a.y;
			this.z -= a.z;
		}
		, dotProduct: function (a) {
			return this.x * a.x + this.y * a.y + this.z * a.z;
		}
		, equals: function (toCompare, allFour) {
			if (allFour == null) allFour = false;
			return this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z && (!allFour || this.w == toCompare.w);
		}
		, incrementBy: function (a) {
			this.x += a.x;
			this.y += a.y;
			this.z += a.z;
		}
		, nearEquals: function (toCompare, tolerance, allFour) {
			if (allFour == null) allFour = false;
			return Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance && (!allFour || Math.abs(this.w - toCompare.w) < tolerance);
		}
		, negate: function () {
			this.x *= -1;
			this.y *= -1;
			this.z *= -1;
		}
		, normalize: function () {
			var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
			if (l != 0) {
				this.x /= l;
				this.y /= l;
				this.z /= l;
			}
			return l;
		}
		, project: function () {
			this.x /= this.w;
			this.y /= this.w;
			this.z /= this.w;
		}
		, scaleBy: function (s) {
			this.x *= s;
			this.y *= s;
			this.z *= s;
		}
		, setTo: function (xa, ya, za) {
			this.x = xa;
			this.y = ya;
			this.z = za;
		}
		, subtract: function (a) {
			return new openfl_geom_Vector3D(this.x - a.x, this.y - a.y, this.z - a.z);
		}
		, toString: function () {
			return "Vector3D(" + this.x + ", " + this.y + ", " + this.z + ")";
		}
		, get_length: function () {
			return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		}
		, get_lengthSquared: function () {
			return this.x * this.x + this.y * this.y + this.z * this.z;
		}
		, __class__: openfl_geom_Vector3D
		, __properties__: { get_lengthSquared: "get_lengthSquared", get_length: "get_length" }
	};
	var openfl_media_ID3Info = function () {
	};
	$hxClasses["openfl.media.ID3Info"] = openfl_media_ID3Info;
	openfl_media_ID3Info.__name__ = ["openfl", "media", "ID3Info"];
	openfl_media_ID3Info.prototype = {
		__class__: openfl_media_ID3Info
	};
	var openfl_media_Sound = function (stream, context) {
		openfl_events_EventDispatcher.call(this, this);
		this.bytesLoaded = 0;
		this.bytesTotal = 0;
		this.id3 = null;
		this.isBuffering = false;
		this.url = null;
		if (stream != null) this.load(stream, context);
	};
	$hxClasses["openfl.media.Sound"] = openfl_media_Sound;
	openfl_media_Sound.__name__ = ["openfl", "media", "Sound"];
	openfl_media_Sound.fromAudioBuffer = function (buffer) {
		var sound = new openfl_media_Sound();
		sound.__buffer = buffer;
		return sound;
	};
	openfl_media_Sound.fromFile = function (path) {
		return openfl_media_Sound.fromAudioBuffer(lime_audio_AudioBuffer.fromFile(path));
	};
	openfl_media_Sound.__super__ = openfl_events_EventDispatcher;
	openfl_media_Sound.prototype = $extend(openfl_events_EventDispatcher.prototype, {
		close: function () {
			if (openfl_media_Sound.__registeredSounds.exists(this.__soundID)) createjs.Sound.removeSound(this.__soundID);
		}
		, load: function (stream, context) {
			this.url = stream.url;
			this.__soundID = haxe_io_Path.withoutExtension(stream.url);
			if (!openfl_media_Sound.__registeredSounds.exists(this.__soundID)) {
				openfl_media_Sound.__registeredSounds.set(this.__soundID, true);
				createjs.Sound.addEventListener("fileload", $bind(this, this.SoundJS_onFileLoad));
				createjs.Sound.addEventListener("fileerror", $bind(this, this.SoundJS_onFileError));
				createjs.Sound.registerSound(this.url, this.__soundID);
			} else this.dispatchEvent(new openfl_events_Event(openfl_events_Event.COMPLETE));
		}
		, loadCompressedDataFromByteArray: function (bytes, bytesLength, forcePlayAsMusic) {
			if (forcePlayAsMusic == null) forcePlayAsMusic = false;
			openfl_Lib.notImplemented("Sound.loadCompressedDataFromByteArray");
		}
		, loadPCMFromByteArray: function (bytes, samples, format, stereo, sampleRate) {
			if (sampleRate == null) sampleRate = 44100;
			if (stereo == null) stereo = true;
			openfl_Lib.notImplemented("Sound.loadPCMFromByteArray");
		}
		, play: function (startTime, loops, sndTransform) {
			if (loops == null) loops = 0;
			if (startTime == null) startTime = 0.0;
			if (sndTransform == null) sndTransform = new openfl_media_SoundTransform(1, 0);
			var pan = sndTransform.pan;
			if (pan == 0) pan = -0.0000001;
			var instance;
			if (loops > 1) instance = createjs.Sound.play(this.__soundID, "any", 0, startTime | 0, loops - 1, sndTransform.volume, pan); else instance = createjs.Sound.play(this.__soundID, "any", 0, startTime | 0, 0, sndTransform.volume, pan);
			return new openfl_media_SoundChannel(instance);
		}
		, get_id3: function () {
			return new openfl_media_ID3Info();
		}
		, get_length: function () {
			if (this.__buffer != null) {
			}
			return 0;
		}
		, AudioBuffer_onURLLoad: function (buffer) {
			if (buffer == null) this.dispatchEvent(new openfl_events_IOErrorEvent(openfl_events_IOErrorEvent.IO_ERROR)); else {
				this.__buffer = buffer;
				this.dispatchEvent(new openfl_events_Event(openfl_events_Event.COMPLETE));
			}
		}
		, SoundJS_onFileLoad: function (event) {
			if (event.id == this.__soundID) {
				createjs.Sound.removeEventListener("fileload", $bind(this, this.SoundJS_onFileLoad));
				createjs.Sound.removeEventListener("fileerror", $bind(this, this.SoundJS_onFileError));
				this.dispatchEvent(new openfl_events_Event(openfl_events_Event.COMPLETE));
			}
		}
		, SoundJS_onFileError: function (event) {
			if (event.id == this.__soundID) {
				createjs.Sound.removeEventListener("fileload", $bind(this, this.SoundJS_onFileLoad));
				createjs.Sound.removeEventListener("fileerror", $bind(this, this.SoundJS_onFileError));
				this.dispatchEvent(new openfl_events_IOErrorEvent(openfl_events_IOErrorEvent.IO_ERROR));
			}
		}
		, __class__: openfl_media_Sound
		, __properties__: { get_length: "get_length", get_id3: "get_id3" }
	});
	var openfl_media_SoundChannel = function (soundInstance) {
		openfl_events_EventDispatcher.call(this, this);
		this.leftPeak = 1;
		this.rightPeak = 1;
		if (soundInstance != null) {
			this.__soundInstance = soundInstance;
			this.__soundInstance.addEventListener("complete", $bind(this, this.source_onComplete));
			this.__isValid = true;
		}
	};
	$hxClasses["openfl.media.SoundChannel"] = openfl_media_SoundChannel;
	openfl_media_SoundChannel.__name__ = ["openfl", "media", "SoundChannel"];
	openfl_media_SoundChannel.__super__ = openfl_events_EventDispatcher;
	openfl_media_SoundChannel.prototype = $extend(openfl_events_EventDispatcher.prototype, {
		stop: function () {
			if (!this.__isValid) return;
			this.__soundInstance.stop();
		}
		, __dispose: function () {
			if (!this.__isValid) return;
			this.__soundInstance.stop();
			this.__soundInstance = null;
			this.__isValid = false;
		}
		, get_position: function () {
			if (!this.__isValid) return 0;
			return this.__soundInstance.getPosition();
		}
		, set_position: function (value) {
			if (!this.__isValid) return 0;
			this.__soundInstance.setPosition(value | 0);
			return this.__soundInstance.getPosition();
		}
		, get_soundTransform: function () {
			if (!this.__isValid) return new openfl_media_SoundTransform();
			return new openfl_media_SoundTransform(this.__soundInstance.getVolume(), this.__soundInstance.getPan());
		}
		, set_soundTransform: function (value) {
			if (!this.__isValid) return value;
			this.__soundInstance.setVolume(value.volume);
			this.__soundInstance.setPan(value.pan);
			return value;
		}
		, soundInstance_onComplete: function (_) {
			this.dispatchEvent(new openfl_events_Event(openfl_events_Event.SOUND_COMPLETE));
		}
		, source_onComplete: function () {
			this.__dispose();
			this.dispatchEvent(new openfl_events_Event(openfl_events_Event.SOUND_COMPLETE));
		}
		, __class__: openfl_media_SoundChannel
		, __properties__: { set_soundTransform: "set_soundTransform", get_soundTransform: "get_soundTransform", set_position: "set_position", get_position: "get_position" }
	});
	var openfl_media_SoundLoaderContext = function (bufferTime, checkPolicyFile) {
		if (checkPolicyFile == null) checkPolicyFile = false;
		if (bufferTime == null) bufferTime = 0;
		this.bufferTime = bufferTime;
		this.checkPolicyFile = checkPolicyFile;
	};
	$hxClasses["openfl.media.SoundLoaderContext"] = openfl_media_SoundLoaderContext;
	openfl_media_SoundLoaderContext.__name__ = ["openfl", "media", "SoundLoaderContext"];
	openfl_media_SoundLoaderContext.prototype = {
		__class__: openfl_media_SoundLoaderContext
	};
	var openfl_media_SoundTransform = function (vol, panning) {
		if (panning == null) panning = 0;
		if (vol == null) vol = 1;
		this.volume = vol;
		this.pan = panning;
		this.leftToLeft = 0;
		this.leftToRight = 0;
		this.rightToLeft = 0;
		this.rightToRight = 0;
	};
	$hxClasses["openfl.media.SoundTransform"] = openfl_media_SoundTransform;
	openfl_media_SoundTransform.__name__ = ["openfl", "media", "SoundTransform"];
	openfl_media_SoundTransform.prototype = {
		clone: function () {
			return new openfl_media_SoundTransform(this.volume, this.pan);
		}
		, __class__: openfl_media_SoundTransform
	};
	var openfl_net_URLLoader = function (request) {
		openfl_events_EventDispatcher.call(this);
		this.bytesLoaded = 0;
		this.bytesTotal = 0;
		this.set_dataFormat(openfl_net_URLLoaderDataFormat.TEXT);
		if (request != null) this.load(request);
	};
	$hxClasses["openfl.net.URLLoader"] = openfl_net_URLLoader;
	openfl_net_URLLoader.__name__ = ["openfl", "net", "URLLoader"];
	openfl_net_URLLoader.__super__ = openfl_events_EventDispatcher;
	openfl_net_URLLoader.prototype = $extend(openfl_events_EventDispatcher.prototype, {
		close: function () {
		}
		, getData: function () {
			return null;
		}
		, load: function (request) {
			this.requestUrl(request.url, request.method, request.data, request.formatRequestHeaders());
		}
		, registerEvents: function (subject) {
			var self = this;
			if (typeof XMLHttpRequestProgressEvent != "undefined") subject.addEventListener("progress", $bind(this, this.onProgress), false);
			subject.onreadystatechange = function () {
				if (subject.readyState != 4) return;
				var s;
				try {
					s = subject.status;
				} catch (e) {
					haxe_CallStack.lastException = e;
					if (e instanceof js__$Boot_HaxeError) e = e.val;
					s = null;
				}
				if (s == undefined) s = null;
				if (s != null) self.onStatus(s);
				if (s != null && s >= 200 && s < 400) self.onData(subject.response); else if (s == null) self.onError("Failed to connect or resolve host"); else if (s == 12029) self.onError("Failed to connect to host"); else if (s == 12007) self.onError("Unknown host"); else if (s == 0) {
					self.onError("Unable to make request (may be blocked due to cross-domain permissions)");
					self.onSecurityError("Unable to make request (may be blocked due to cross-domain permissions)");
				} else self.onError("Http Error #" + subject.status);
			};
		}
		, requestUrl: function (url, method, data, requestHeaders) {
			var xmlHttpRequest = new XMLHttpRequest();
			this.registerEvents(xmlHttpRequest);
			var uri = "";
			if (js_Boot.__instanceof(data, lime_utils_ByteArray)) {
				var data1 = data;
				var _g = this.dataFormat;
				switch (_g[1]) {
					case 0:
						uri = data1.data.buffer;
						break;
					default:
						uri = data1.readUTFBytes(data1.length);
				}
			} else if (js_Boot.__instanceof(data, openfl_net_URLVariables)) {
				var data2 = data;
				var _g1 = 0;
				var _g11 = Reflect.fields(data2);
				while (_g1 < _g11.length) {
					var p = _g11[_g1];
					++_g1;
					if (uri.length != 0) uri += "&";
					uri += encodeURIComponent(p) + "=" + StringTools.urlEncode(Reflect.field(data2, p));
				}
			} else if (data != null) uri = data.toString();
			try {
				if (method == "GET" && uri != null && uri != "") {
					var question = url.split("?").length <= 1;
					xmlHttpRequest.open(method, url + (question ? "?" : "&") + Std.string(uri), true);
					uri = "";
				} else xmlHttpRequest.open(method, url, true);
			} catch (e) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				this.onError(e.toString());
				return;
			}
			var _g2 = this.dataFormat;
			switch (_g2[1]) {
				case 0:
					xmlHttpRequest.responseType = "arraybuffer";
					break;
				default:
			}
			var _g3 = 0;
			while (_g3 < requestHeaders.length) {
				var header = requestHeaders[_g3];
				++_g3;
				xmlHttpRequest.setRequestHeader(header.name, header.value);
			}
			xmlHttpRequest.send(uri);
			this.onOpen();
			this.getData = function () {
				if (xmlHttpRequest.response != null) return xmlHttpRequest.response; else return xmlHttpRequest.responseText;
			};
		}
		, onData: function (_) {
			var content = this.getData();
			var _g = this.dataFormat;
			switch (_g[1]) {
				case 0:
					this.data = lime_utils_ByteArray.__ofBuffer(content);
					break;
				default:
					this.data = Std.string(content);
			}
			var evt = new openfl_events_Event(openfl_events_Event.COMPLETE);
			evt.currentTarget = this;
			this.dispatchEvent(evt);
		}
		, onError: function (msg) {
			var evt = new openfl_events_IOErrorEvent(openfl_events_IOErrorEvent.IO_ERROR);
			evt.text = msg;
			evt.currentTarget = this;
			this.dispatchEvent(evt);
		}
		, onOpen: function () {
			var evt = new openfl_events_Event(openfl_events_Event.OPEN);
			evt.currentTarget = this;
			this.dispatchEvent(evt);
		}
		, onProgress: function (event) {
			var evt = new openfl_events_ProgressEvent(openfl_events_ProgressEvent.PROGRESS);
			evt.currentTarget = this;
			evt.bytesLoaded = event.loaded;
			evt.bytesTotal = event.total;
			this.dispatchEvent(evt);
		}
		, onSecurityError: function (msg) {
			var evt = new openfl_events_SecurityErrorEvent(openfl_events_SecurityErrorEvent.SECURITY_ERROR);
			evt.text = msg;
			evt.currentTarget = this;
			this.dispatchEvent(evt);
		}
		, onStatus: function (status) {
			var evt = new openfl_events_HTTPStatusEvent(openfl_events_HTTPStatusEvent.HTTP_STATUS, false, false, status);
			evt.currentTarget = this;
			this.dispatchEvent(evt);
		}
		, set_dataFormat: function (inputVal) {
			if (inputVal == openfl_net_URLLoaderDataFormat.BINARY && !Reflect.hasField(window, "ArrayBuffer")) this.dataFormat = openfl_net_URLLoaderDataFormat.TEXT; else this.dataFormat = inputVal;
			return this.dataFormat;
		}
		, __class__: openfl_net_URLLoader
		, __properties__: { set_dataFormat: "set_dataFormat" }
	});
	var openfl_net_URLLoaderDataFormat = $hxClasses["openfl.net.URLLoaderDataFormat"] = { __ename__: ["openfl", "net", "URLLoaderDataFormat"], __constructs__: ["BINARY", "TEXT", "VARIABLES"] };
	openfl_net_URLLoaderDataFormat.BINARY = ["BINARY", 0];
	openfl_net_URLLoaderDataFormat.BINARY.toString = $estr;
	openfl_net_URLLoaderDataFormat.BINARY.__enum__ = openfl_net_URLLoaderDataFormat;
	openfl_net_URLLoaderDataFormat.TEXT = ["TEXT", 1];
	openfl_net_URLLoaderDataFormat.TEXT.toString = $estr;
	openfl_net_URLLoaderDataFormat.TEXT.__enum__ = openfl_net_URLLoaderDataFormat;
	openfl_net_URLLoaderDataFormat.VARIABLES = ["VARIABLES", 2];
	openfl_net_URLLoaderDataFormat.VARIABLES.toString = $estr;
	openfl_net_URLLoaderDataFormat.VARIABLES.__enum__ = openfl_net_URLLoaderDataFormat;
	var openfl_net_URLRequest = function (inURL) {
		if (inURL != null) this.url = inURL;
		this.requestHeaders = [];
		this.method = "GET";
		this.contentType = null;
	};
	$hxClasses["openfl.net.URLRequest"] = openfl_net_URLRequest;
	openfl_net_URLRequest.__name__ = ["openfl", "net", "URLRequest"];
	openfl_net_URLRequest.prototype = {
		formatRequestHeaders: function () {
			var res = this.requestHeaders;
			if (res == null) res = [];
			if (this.method == "GET" || this.data == null) return res;
			if (typeof (this.data) == "string" || js_Boot.__instanceof(this.data, lime_utils_ByteArray)) {
				res = res.slice();
				res.push(new openfl_net_URLRequestHeader("Content-Type", this.contentType != null ? this.contentType : "application/x-www-form-urlencoded"));
			}
			return res;
		}
		, __class__: openfl_net_URLRequest
	};
	var openfl_net_URLRequestHeader = function (name, value) {
		if (value == null) value = "";
		if (name == null) name = "";
		this.name = name;
		this.value = value;
	};
	$hxClasses["openfl.net.URLRequestHeader"] = openfl_net_URLRequestHeader;
	openfl_net_URLRequestHeader.__name__ = ["openfl", "net", "URLRequestHeader"];
	openfl_net_URLRequestHeader.prototype = {
		__class__: openfl_net_URLRequestHeader
	};
	var openfl_net_URLVariables = function (inEncoded) {
		if (inEncoded != null) this.decode(inEncoded);
	};
	$hxClasses["openfl.net.URLVariables"] = openfl_net_URLVariables;
	openfl_net_URLVariables.__name__ = ["openfl", "net", "URLVariables"];
	openfl_net_URLVariables.prototype = {
		decode: function (inVars) {
			var fields = Reflect.fields(this);
			var _g = 0;
			while (_g < fields.length) {
				var f = fields[_g];
				++_g;
				Reflect.deleteField(this, f);
			}
			var fields1 = inVars.split(";").join("&").split("&");
			var _g1 = 0;
			while (_g1 < fields1.length) {
				var f1 = fields1[_g1];
				++_g1;
				var eq = f1.indexOf("=");
				if (eq > 0) Reflect.setField(this, StringTools.urlDecode(HxOverrides.substr(f1, 0, eq)), StringTools.urlDecode(HxOverrides.substr(f1, eq + 1, null))); else if (eq != 0) Reflect.setField(this, decodeURIComponent(f1.split("+").join(" ")), "");
			}
		}
		, toString: function () {
			var result = [];
			var fields = Reflect.fields(this);
			var _g = 0;
			while (_g < fields.length) {
				var f = fields[_g];
				++_g;
				result.push(encodeURIComponent(f) + "=" + StringTools.urlEncode(Reflect.field(this, f)));
			}
			return result.join("&");
		}
		, __class__: openfl_net_URLVariables
	};
	var openfl_system_LoaderContext = function (checkPolicyFile, applicationDomain, securityDomain) {
		if (checkPolicyFile == null) checkPolicyFile = false;
		this.checkPolicyFile = checkPolicyFile;
		this.securityDomain = securityDomain;
		this.applicationDomain = applicationDomain;
		this.allowCodeImport = true;
		this.allowLoadBytesCodeExecution = true;
	};
	$hxClasses["openfl.system.LoaderContext"] = openfl_system_LoaderContext;
	openfl_system_LoaderContext.__name__ = ["openfl", "system", "LoaderContext"];
	openfl_system_LoaderContext.prototype = {
		__class__: openfl_system_LoaderContext
	};
	var openfl_system_SecurityDomain = function () {
	};
	$hxClasses["openfl.system.SecurityDomain"] = openfl_system_SecurityDomain;
	openfl_system_SecurityDomain.__name__ = ["openfl", "system", "SecurityDomain"];
	openfl_system_SecurityDomain.prototype = {
		__class__: openfl_system_SecurityDomain
	};
	var openfl_text_AntiAliasType = $hxClasses["openfl.text.AntiAliasType"] = { __ename__: ["openfl", "text", "AntiAliasType"], __constructs__: ["ADVANCED", "NORMAL"] };
	openfl_text_AntiAliasType.ADVANCED = ["ADVANCED", 0];
	openfl_text_AntiAliasType.ADVANCED.toString = $estr;
	openfl_text_AntiAliasType.ADVANCED.__enum__ = openfl_text_AntiAliasType;
	openfl_text_AntiAliasType.NORMAL = ["NORMAL", 1];
	openfl_text_AntiAliasType.NORMAL.toString = $estr;
	openfl_text_AntiAliasType.NORMAL.__enum__ = openfl_text_AntiAliasType;
	var openfl_text_Font = function (name) {
		lime_text_Font.call(this, name);
	};
	$hxClasses["openfl.text.Font"] = openfl_text_Font;
	openfl_text_Font.__name__ = ["openfl", "text", "Font"];
	openfl_text_Font.enumerateFonts = function (enumerateDeviceFonts) {
		if (enumerateDeviceFonts == null) enumerateDeviceFonts = false;
		return openfl_text_Font.__registeredFonts;
	};
	openfl_text_Font.fromBytes = function (bytes) {
		var font = new openfl_text_Font();
		font.__fromBytes(bytes);
		return font;
	};
	openfl_text_Font.fromFile = function (path) {
		var font = new openfl_text_Font();
		font.__fromFile(path);
		return font;
	};
	openfl_text_Font.registerFont = function (font) {
		var instance;
		instance = js_Boot.__cast(Type.createInstance(font, []), openfl_text_Font);
		if (instance != null) openfl_text_Font.__registeredFonts.push(instance);
	};
	openfl_text_Font.__fromLimeFont = function (value) {
		var font = new openfl_text_Font();
		font.name = value.name;
		font.src = value.src;
		return font;
	};
	openfl_text_Font.__super__ = lime_text_Font;
	openfl_text_Font.prototype = $extend(lime_text_Font.prototype, {
		get_fontName: function () {
			return this.name;
		}
		, set_fontName: function (value) {
			return this.name = value;
		}
		, __class__: openfl_text_Font
		, __properties__: $extend(lime_text_Font.prototype.__properties__, { set_fontName: "set_fontName", get_fontName: "get_fontName" })
	});
	var openfl_text_FontStyle = $hxClasses["openfl.text.FontStyle"] = { __ename__: ["openfl", "text", "FontStyle"], __constructs__: ["REGULAR", "ITALIC", "BOLD_ITALIC", "BOLD"] };
	openfl_text_FontStyle.REGULAR = ["REGULAR", 0];
	openfl_text_FontStyle.REGULAR.toString = $estr;
	openfl_text_FontStyle.REGULAR.__enum__ = openfl_text_FontStyle;
	openfl_text_FontStyle.ITALIC = ["ITALIC", 1];
	openfl_text_FontStyle.ITALIC.toString = $estr;
	openfl_text_FontStyle.ITALIC.__enum__ = openfl_text_FontStyle;
	openfl_text_FontStyle.BOLD_ITALIC = ["BOLD_ITALIC", 2];
	openfl_text_FontStyle.BOLD_ITALIC.toString = $estr;
	openfl_text_FontStyle.BOLD_ITALIC.__enum__ = openfl_text_FontStyle;
	openfl_text_FontStyle.BOLD = ["BOLD", 3];
	openfl_text_FontStyle.BOLD.toString = $estr;
	openfl_text_FontStyle.BOLD.__enum__ = openfl_text_FontStyle;
	var openfl_text_FontType = $hxClasses["openfl.text.FontType"] = { __ename__: ["openfl", "text", "FontType"], __constructs__: ["DEVICE", "EMBEDDED", "EMBEDDED_CFF"] };
	openfl_text_FontType.DEVICE = ["DEVICE", 0];
	openfl_text_FontType.DEVICE.toString = $estr;
	openfl_text_FontType.DEVICE.__enum__ = openfl_text_FontType;
	openfl_text_FontType.EMBEDDED = ["EMBEDDED", 1];
	openfl_text_FontType.EMBEDDED.toString = $estr;
	openfl_text_FontType.EMBEDDED.__enum__ = openfl_text_FontType;
	openfl_text_FontType.EMBEDDED_CFF = ["EMBEDDED_CFF", 2];
	openfl_text_FontType.EMBEDDED_CFF.toString = $estr;
	openfl_text_FontType.EMBEDDED_CFF.__enum__ = openfl_text_FontType;
	var openfl_text_GridFitType = $hxClasses["openfl.text.GridFitType"] = { __ename__: ["openfl", "text", "GridFitType"], __constructs__: ["NONE", "PIXEL", "SUBPIXEL"] };
	openfl_text_GridFitType.NONE = ["NONE", 0];
	openfl_text_GridFitType.NONE.toString = $estr;
	openfl_text_GridFitType.NONE.__enum__ = openfl_text_GridFitType;
	openfl_text_GridFitType.PIXEL = ["PIXEL", 1];
	openfl_text_GridFitType.PIXEL.toString = $estr;
	openfl_text_GridFitType.PIXEL.__enum__ = openfl_text_GridFitType;
	openfl_text_GridFitType.SUBPIXEL = ["SUBPIXEL", 2];
	openfl_text_GridFitType.SUBPIXEL.toString = $estr;
	openfl_text_GridFitType.SUBPIXEL.__enum__ = openfl_text_GridFitType;
	var openfl_text_TextField = function () {
		openfl_display_InteractiveObject.call(this);
		this.__caretIndex = -1;
		this.__graphics = new openfl_display_Graphics();
		this.__textEngine = new openfl__$internal_text_TextEngine(this);
		this.__layoutDirty = true;
		this.__tabEnabled = true;
		if (openfl_text_TextField.__defaultTextFormat == null) {
			openfl_text_TextField.__defaultTextFormat = new openfl_text_TextFormat("Times New Roman", 12, 0, false, false, false, "", "", openfl_text_TextFormatAlign.LEFT, 0, 0, 0, 0);
			openfl_text_TextField.__defaultTextFormat.blockIndent = 0;
			openfl_text_TextField.__defaultTextFormat.bullet = false;
			openfl_text_TextField.__defaultTextFormat.letterSpacing = 0;
			openfl_text_TextField.__defaultTextFormat.kerning = false;
		}
		this.__textFormat = openfl_text_TextField.__defaultTextFormat.clone();
		this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(this.__textFormat, 0, 0));
		this.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN, $bind(this, this.this_onMouseDown));
	};
	$hxClasses["openfl.text.TextField"] = openfl_text_TextField;
	openfl_text_TextField.__name__ = ["openfl", "text", "TextField"];
	openfl_text_TextField.__defaultTextFormat = null;
	openfl_text_TextField.__super__ = openfl_display_InteractiveObject;
	openfl_text_TextField.prototype = $extend(openfl_display_InteractiveObject.prototype, {
		appendText: function (text) {
			this.__textEngine.text += text;
			this.__textEngine.textFormatRanges[this.__textEngine.textFormatRanges.length - 1].end = this.__textEngine.text.length;
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		, getCharBoundaries: function (charIndex) {
			if (charIndex < 0 || charIndex > this.__textEngine.text.length - 1) return null;
			this.__updateLayout();
			var _g = 0;
			var _g1 = this.__textEngine.layoutGroups;
			while (_g < _g1.length) {
				var group = _g1[_g];
				++_g;
				if (charIndex >= group.startIndex && charIndex <= group.endIndex) {
					var x = group.offsetX;
					var _g3 = 0;
					var _g2 = charIndex - group.startIndex;
					while (_g3 < _g2) {
						var i = _g3++;
						x += group.advances[i];
					}
					return new openfl_geom_Rectangle(x, group.offsetY, group.advances[charIndex - group.startIndex], group.ascent + group.descent);
				}
			}
			return null;
		}
		, getCharIndexAtPoint: function (x, y) {
			if (x <= 2 || x > this.get_width() + 4 || y <= 0 || y > this.get_height() + 4) return -1;
			this.__updateLayout();
			x += this.get_scrollH();
			var _g1 = 0;
			var _g = this.get_scrollV() - 1;
			while (_g1 < _g) {
				var i = _g1++;
				y += this.__textEngine.lineHeights[i];
			}
			var _g2 = 0;
			var _g11 = this.__textEngine.layoutGroups;
			while (_g2 < _g11.length) {
				var group = _g11[_g2];
				++_g2;
				if (y >= group.offsetY && y <= group.offsetY + group.height) {
					if (x >= group.offsetX && x <= group.offsetX + group.width) {
						var advance = 0.0;
						var _g3 = 0;
						var _g21 = group.advances.length;
						while (_g3 < _g21) {
							var i1 = _g3++;
							advance += group.advances[i1];
							if (x <= group.offsetX + advance) return group.startIndex + i1;
						}
						return group.endIndex;
					}
				}
			}
			return -1;
		}
		, getFirstCharInParagraph: function (charIndex) {
			if (charIndex < 0 || charIndex > this.__textEngine.text.length - 1) return 0;
			var index = this.__textEngine.text.indexOf("\n");
			var startIndex = 0;
			while (index > -1) {
				if (index <= charIndex) startIndex = index + 1; else if (index > charIndex) break;
				index = this.__textEngine.text.indexOf("\n", index + 1);
			}
			return startIndex;
		}
		, getLineIndexAtPoint: function (x, y) {
			this.__updateLayout();
			if (x <= 2 || x > this.get_width() + 4 || y <= 0 || y > this.get_height() + 4) return -1;
			var _g1 = 0;
			var _g = this.get_scrollV() - 1;
			while (_g1 < _g) {
				var i = _g1++;
				y += this.__textEngine.lineHeights[i];
			}
			var _g2 = 0;
			var _g11 = this.__textEngine.layoutGroups;
			while (_g2 < _g11.length) {
				var group = _g11[_g2];
				++_g2;
				if (y >= group.offsetY && y <= group.offsetY + group.height) return group.lineIndex;
			}
			return -1;
		}
		, getLineIndexOfChar: function (charIndex) {
			if (charIndex < 0 || charIndex > this.__textEngine.text.length - 1) return -1;
			this.__updateLayout();
			var _g = 0;
			var _g1 = this.__textEngine.layoutGroups;
			while (_g < _g1.length) {
				var group = _g1[_g];
				++_g;
				if (group.startIndex <= charIndex && group.endIndex >= charIndex) return group.lineIndex;
			}
			return -1;
		}
		, getLineLength: function (lineIndex) {
			this.__updateLayout();
			if (lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) return 0;
			var startIndex = -1;
			var endIndex = -1;
			var _g = 0;
			var _g1 = this.__textEngine.layoutGroups;
			while (_g < _g1.length) {
				var group = _g1[_g];
				++_g;
				if (group.lineIndex == lineIndex) {
					if (startIndex == -1) startIndex = group.startIndex;
				} else if (group.lineIndex == lineIndex + 1) {
					endIndex = group.startIndex;
					break;
				}
			}
			if (endIndex == -1) endIndex = this.__textEngine.text.length;
			return endIndex - startIndex;
		}
		, getLineMetrics: function (lineIndex) {
			this.__updateLayout();
			var ascender = this.__textEngine.lineAscents[lineIndex];
			var descender = this.__textEngine.lineDescents[lineIndex];
			var leading = this.__textEngine.lineLeadings[lineIndex];
			var lineHeight = this.__textEngine.lineHeights[lineIndex];
			var lineWidth = this.__textEngine.lineWidths[lineIndex];
			var margin;
			var _g = this.__textFormat.align;
			switch (_g[1]) {
				case 0: case 2:
					margin = 2;
					break;
				case 1:
					margin = this.__textEngine.width - lineWidth - 2;
					break;
				case 3:
					margin = (this.__textEngine.width - lineWidth) / 2;
					break;
			}
			return new openfl_text_TextLineMetrics(margin, lineWidth, lineHeight, ascender, descender, leading);
		}
		, getLineOffset: function (lineIndex) {
			this.__updateLayout();
			if (lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) return -1;
			var _g = 0;
			var _g1 = this.__textEngine.layoutGroups;
			while (_g < _g1.length) {
				var group = _g1[_g];
				++_g;
				if (group.lineIndex == lineIndex) return group.startIndex;
			}
			return 0;
		}
		, getLineText: function (lineIndex) {
			this.__updateLayout();
			if (lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) return null;
			var startIndex = -1;
			var endIndex = -1;
			var _g = 0;
			var _g1 = this.__textEngine.layoutGroups;
			while (_g < _g1.length) {
				var group = _g1[_g];
				++_g;
				if (group.lineIndex == lineIndex) {
					if (startIndex == -1) startIndex = group.startIndex;
				} else if (group.lineIndex == lineIndex + 1) {
					endIndex = group.startIndex;
					break;
				}
			}
			if (endIndex == -1) endIndex = this.__textEngine.text.length;
			return this.__textEngine.text.substring(startIndex, endIndex);
		}
		, getParagraphLength: function (charIndex) {
			if (charIndex < 0 || charIndex > this.__textEngine.text.length - 1) return 0;
			var startIndex = this.getFirstCharInParagraph(charIndex);
			var endIndex = this.__textEngine.text.indexOf("\n", charIndex) + 1;
			if (endIndex == 0) endIndex = this.__textEngine.text.length;
			return endIndex - startIndex;
		}
		, getTextFormat: function (beginIndex, endIndex) {
			if (endIndex == null) endIndex = 0;
			if (beginIndex == null) beginIndex = 0;
			var format = null;
			var _g = 0;
			var _g1 = this.__textEngine.textFormatRanges;
			while (_g < _g1.length) {
				var group = _g1[_g];
				++_g;
				if (group.start <= beginIndex && group.end >= beginIndex || group.start <= endIndex && group.end >= endIndex) {
					if (format == null) format = group.format.clone(); else {
						if (group.format.font != format.font) format.font = null;
						if (group.format.size != format.size) format.size = null;
						if (group.format.color != format.color) format.color = null;
						if (group.format.bold != format.bold) format.bold = null;
						if (group.format.italic != format.italic) format.italic = null;
						if (group.format.underline != format.underline) format.underline = null;
						if (group.format.url != format.url) format.url = null;
						if (group.format.target != format.target) format.target = null;
						if (group.format.align != format.align) format.align = null;
						if (group.format.leftMargin != format.leftMargin) format.leftMargin = null;
						if (group.format.rightMargin != format.rightMargin) format.rightMargin = null;
						if (group.format.indent != format.indent) format.indent = null;
						if (group.format.leading != format.leading) format.leading = null;
						if (group.format.blockIndent != format.blockIndent) format.blockIndent = null;
						if (group.format.bullet != format.bullet) format.bullet = null;
						if (group.format.kerning != format.kerning) format.kerning = null;
						if (group.format.letterSpacing != format.letterSpacing) format.letterSpacing = null;
						if (group.format.tabStops != format.tabStops) format.tabStops = null;
					}
				}
			}
			return format;
		}
		, replaceSelectedText: function (value) {
			if (value == "" && this.__selectionIndex == this.__caretIndex) return;
			var startIndex;
			if (this.__caretIndex < this.__selectionIndex) startIndex = this.__caretIndex; else startIndex = this.__selectionIndex;
			var endIndex;
			if (this.__caretIndex > this.__selectionIndex) endIndex = this.__caretIndex; else endIndex = this.__selectionIndex;
			this.replaceText(startIndex, endIndex, value);
			this.__caretIndex = startIndex + value.length;
			this.__selectionIndex = this.__caretIndex;
		}
		, replaceText: function (beginIndex, endIndex, newText) {
			if (endIndex < beginIndex || beginIndex < 0 || endIndex > this.__textEngine.text.length || newText == null) return;
			this.__textEngine.text = this.__textEngine.text.substring(0, beginIndex) + newText + this.__textEngine.text.substring(endIndex);
			var offset = newText.length - (endIndex - beginIndex);
			var i = 0;
			var range;
			while (i < this.__textEngine.textFormatRanges.length) {
				range = this.__textEngine.textFormatRanges[i];
				if (range.start <= beginIndex && range.end >= endIndex) {
					range.end += offset;
					i++;
				} else if (range.start >= beginIndex && range.end <= endIndex) {
					this.__textEngine.textFormatRanges.splice(i, 1);
					offset -= range.end - range.start;
				} else if (range.start > beginIndex && range.start <= endIndex) {
					range.start += offset;
					i++;
				} else i++;
			}
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		, setSelection: function (beginIndex, endIndex) {
			this.__selectionIndex = beginIndex;
			this.__caretIndex = endIndex;
		}
		, setTextFormat: function (format, beginIndex, endIndex) {
			if (endIndex == null) endIndex = 0;
			if (beginIndex == null) beginIndex = 0;
			if (format.font != null) this.__textFormat.font = format.font;
			if (format.size != null) this.__textFormat.size = format.size;
			if (format.color != null) this.__textFormat.color = format.color;
			if (format.bold != null) this.__textFormat.bold = format.bold;
			if (format.italic != null) this.__textFormat.italic = format.italic;
			if (format.underline != null) this.__textFormat.underline = format.underline;
			if (format.url != null) this.__textFormat.url = format.url;
			if (format.target != null) this.__textFormat.target = format.target;
			if (format.align != null) this.__textFormat.align = format.align;
			if (format.leftMargin != null) this.__textFormat.leftMargin = format.leftMargin;
			if (format.rightMargin != null) this.__textFormat.rightMargin = format.rightMargin;
			if (format.indent != null) this.__textFormat.indent = format.indent;
			if (format.leading != null) this.__textFormat.leading = format.leading;
			if (format.blockIndent != null) this.__textFormat.blockIndent = format.blockIndent;
			if (format.bullet != null) this.__textFormat.bullet = format.bullet;
			if (format.kerning != null) this.__textFormat.kerning = format.kerning;
			if (format.letterSpacing != null) this.__textFormat.letterSpacing = format.letterSpacing;
			if (format.tabStops != null) this.__textFormat.tabStops = format.tabStops;
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		, __getBounds: function (rect, matrix) {
			this.__updateLayout();
			var bounds = openfl_geom_Rectangle.__temp;
			this.__textEngine.bounds.__transform(bounds, matrix);
			rect.__expand(bounds.x, bounds.y, bounds.width, bounds.height);
		}
		, __getCursor: function () {
			if (this.__textEngine.selectable) return lime_ui_MouseCursor.TEXT; else return null;
		}
		, __getPosition: function (x, y) {
			this.__updateLayout();
			x += this.get_scrollH();
			var _g1 = 0;
			var _g = this.get_scrollV() - 1;
			while (_g1 < _g) {
				var i = _g1++;
				y += this.__textEngine.lineHeights[i];
			}
			if (y > this.__textEngine.textHeight) y = this.__textEngine.textHeight;
			var firstGroup = true;
			var group;
			var nextGroup;
			var _g11 = 0;
			var _g2 = this.__textEngine.layoutGroups.length;
			while (_g11 < _g2) {
				var i1 = _g11++;
				group = this.__textEngine.layoutGroups[i1];
				if (i1 < this.__textEngine.layoutGroups.length - 1) nextGroup = this.__textEngine.layoutGroups[i1 + 1]; else nextGroup = null;
				if (firstGroup) {
					if (y < group.offsetY) y = group.offsetY;
					if (x < group.offsetX) x = group.offsetX;
					firstGroup = false;
				}
				if (y >= group.offsetY && y <= group.offsetY + group.height || nextGroup == null) {
					if (x >= group.offsetX && x <= group.offsetX + group.width || (nextGroup == null || nextGroup.lineIndex != group.lineIndex)) {
						var advance = 0.0;
						var _g3 = 0;
						var _g21 = group.advances.length;
						while (_g3 < _g21) {
							var i2 = _g3++;
							advance += group.advances[i2];
							if (x <= group.offsetX + advance) {
								if (x <= group.offsetX + (advance - group.advances[i2]) + group.advances[i2] / 2) return group.startIndex + i2; else if (group.startIndex + i2 < group.endIndex) return group.startIndex + i2 + 1; else return group.endIndex;
							}
						}
						return group.endIndex;
					}
				}
			}
			return this.__textEngine.text.length;
		}
		, __hitTest: function (x, y, shapeFlag, stack, interactiveOnly) {
			if (!this.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) return false;
			if (this.get_mask() != null && !this.get_mask().__hitTestMask(x, y)) return false;
			this.__getWorldTransform();
			this.__updateLayout();
			var px = this.__worldTransform.__transformInverseX(x, y);
			var py = this.__worldTransform.__transformInverseY(x, y);
			if (this.__textEngine.bounds.contains(px, py)) {
				if (stack != null) stack.push(this);
				return true;
			}
			return false;
		}
		, __hitTestMask: function (x, y) {
			this.__getWorldTransform();
			this.__updateLayout();
			var px = this.__worldTransform.__transformInverseX(x, y);
			var py = this.__worldTransform.__transformInverseY(x, y);
			if (this.__textEngine.bounds.contains(px, py)) return true;
			return false;
		}
		, __renderCairo: function (renderSession) {
			openfl__$internal_renderer_cairo_CairoTextField.render(this, renderSession);
			openfl_display_InteractiveObject.prototype.__renderCairo.call(this, renderSession);
		}
		, __renderCanvas: function (renderSession) {
			openfl__$internal_renderer_canvas_CanvasTextField.render(this, renderSession);
			if (this.__textEngine.antiAliasType == openfl_text_AntiAliasType.ADVANCED && this.__textEngine.gridFitType == openfl_text_GridFitType.PIXEL) {
				var smoothingEnabled = renderSession.context.imageSmoothingEnabled;
				if (smoothingEnabled) {
					renderSession.context.mozImageSmoothingEnabled = false;
					renderSession.context.msImageSmoothingEnabled = false;
					renderSession.context.imageSmoothingEnabled = false;
				}
				openfl_display_InteractiveObject.prototype.__renderCanvas.call(this, renderSession);
				if (smoothingEnabled) {
					renderSession.context.mozImageSmoothingEnabled = true;
					renderSession.context.msImageSmoothingEnabled = true;
					renderSession.context.imageSmoothingEnabled = true;
				}
			} else openfl_display_InteractiveObject.prototype.__renderCanvas.call(this, renderSession);
		}
		, __renderDOM: function (renderSession) {
			openfl__$internal_renderer_dom_DOMTextField.render(this, renderSession);
		}
		, __renderGL: function (renderSession) {
			if (this.__cacheAsBitmap) {
				this.__cacheGL(renderSession);
				return;
			}
			if (this.__scrollRect != null) renderSession.maskManager.pushRect(this.__scrollRect, this.__renderTransform);
			if (this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.pushMask(this);
			openfl__$internal_renderer_canvas_CanvasTextField.render(this, renderSession);
			openfl__$internal_renderer_opengl_GLRenderer.renderBitmap(this, renderSession, this.__textEngine.antiAliasType != openfl_text_AntiAliasType.ADVANCED || this.__textEngine.gridFitType != openfl_text_GridFitType.PIXEL);
			if (this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.popMask();
			if (this.__scrollRect != null) renderSession.maskManager.popRect();
		}
		, __startCursorTimer: function () {
			this.__cursorTimer = haxe_Timer.delay($bind(this, this.__startCursorTimer), 600);
			this.__showCursor = !this.__showCursor;
			this.__dirty = true;
		}
		, __startTextInput: function () {
			if (this.__caretIndex < 0) {
				this.__caretIndex = this.__textEngine.text.length;
				this.__selectionIndex = this.__caretIndex;
			}
			if (this.stage != null) {
				this.stage.window.backend.setEnableTextEvents(true);
				if (!this.__inputEnabled) {
					this.stage.window.backend.setEnableTextEvents(true);
					if (!this.stage.window.onTextInput.has($bind(this, this.window_onTextInput))) {
						this.stage.window.onTextInput.add($bind(this, this.window_onTextInput));
						this.stage.window.onKeyDown.add($bind(this, this.window_onKeyDown));
					}
					this.__inputEnabled = true;
					this.__startCursorTimer();
				}
			}
		}
		, __stopCursorTimer: function () {
			if (this.__cursorTimer != null) {
				this.__cursorTimer.stop();
				this.__cursorTimer = null;
			}
			if (this.__showCursor) {
				this.__showCursor = false;
				this.__dirty = true;
			}
		}
		, __stopTextInput: function () {
			if (this.__inputEnabled && this.stage != null) {
				this.stage.window.backend.setEnableTextEvents(false);
				this.stage.window.onTextInput.remove($bind(this, this.window_onTextInput));
				this.stage.window.onKeyDown.remove($bind(this, this.window_onKeyDown));
				this.__inputEnabled = false;
				this.__stopCursorTimer();
			}
		}
		, __updateLayout: function () {
			if (this.__layoutDirty) {
				this.__textEngine.update();
				if (this.__textEngine.autoSize != openfl_text_TextFieldAutoSize.NONE) {
					var cacheWidth = this.__textEngine.width;
					var cacheHeight = this.__textEngine.height;
					var _g = this.__textEngine.autoSize;
					switch (_g[1]) {
						case 1: case 3: case 0:
							if (!this.__textEngine.wordWrap) this.__textEngine.width = this.__textEngine.textWidth + 4;
							this.__textEngine.height = this.__textEngine.textHeight + 4;
							break;
						default:
					}
					if (this.__textEngine.width != cacheWidth) {
						var _g1 = this.__textEngine.autoSize;
						switch (_g1[1]) {
							case 3:
								var _g11 = this;
								_g11.set_x(_g11.get_x() + (cacheWidth - this.__textEngine.width));
								break;
							case 0:
								var _g12 = this;
								_g12.set_x(_g12.get_x() + (cacheWidth - this.__textEngine.width) / 2);
								break;
							default:
						}
					}
					this.__textEngine.getBounds();
				}
				this.__layoutDirty = false;
			}
		}
		, get_antiAliasType: function () {
			return this.__textEngine.antiAliasType;
		}
		, set_antiAliasType: function (value) {
			if (value != this.__textEngine.antiAliasType) {
			}
			return this.__textEngine.antiAliasType = value;
		}
		, get_autoSize: function () {
			return this.__textEngine.autoSize;
		}
		, set_autoSize: function (value) {
			if (value != this.__textEngine.autoSize) {
				this.__dirty = true;
				this.__layoutDirty = true;
			}
			return this.__textEngine.autoSize = value;
		}
		, get_background: function () {
			return this.__textEngine.background;
		}
		, set_background: function (value) {
			if (value != this.__textEngine.background) this.__dirty = true;
			return this.__textEngine.background = value;
		}
		, get_backgroundColor: function () {
			return this.__textEngine.backgroundColor;
		}
		, set_backgroundColor: function (value) {
			if (value != this.__textEngine.backgroundColor) this.__dirty = true;
			return this.__textEngine.backgroundColor = value;
		}
		, get_border: function () {
			return this.__textEngine.border;
		}
		, set_border: function (value) {
			if (value != this.__textEngine.border) this.__dirty = true;
			return this.__textEngine.border = value;
		}
		, get_borderColor: function () {
			return this.__textEngine.borderColor;
		}
		, set_borderColor: function (value) {
			if (value != this.__textEngine.borderColor) this.__dirty = true;
			return this.__textEngine.borderColor = value;
		}
		, get_bottomScrollV: function () {
			this.__updateLayout();
			return this.__textEngine.bottomScrollV;
		}
		, get_caretIndex: function () {
			return this.__caretIndex;
		}
		, get_defaultTextFormat: function () {
			return this.__textFormat.clone();
		}
		, set_defaultTextFormat: function (value) {
			this.__textFormat.__merge(value);
			this.__layoutDirty = true;
			this.__dirty = true;
			return value;
		}
		, get_displayAsPassword: function () {
			return this.__textEngine.displayAsPassword;
		}
		, set_displayAsPassword: function (value) {
			if (value != this.__textEngine.displayAsPassword) {
				this.__dirty = true;
				this.__layoutDirty = true;
			}
			return this.__textEngine.displayAsPassword = value;
		}
		, get_embedFonts: function () {
			return this.__textEngine.embedFonts;
		}
		, set_embedFonts: function (value) {
			return this.__textEngine.embedFonts = value;
		}
		, get_gridFitType: function () {
			return this.__textEngine.gridFitType;
		}
		, set_gridFitType: function (value) {
			return this.__textEngine.gridFitType = value;
		}
		, get_height: function () {
			this.__updateLayout();
			return this.__textEngine.height;
		}
		, set_height: function (value) {
			if (this.get_scaleY() != 1 || value != this.__textEngine.height) {
				if (!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
				this.__dirty = true;
				this.__layoutDirty = true;
			}
			this.set_scaleY(1);
			return this.__textEngine.height = value;
		}
		, get_htmlText: function () {
			return this.__textEngine.text;
		}
		, set_htmlText: function (value) {
			if (!this.__isHTML || this.__textEngine.text != value) {
				this.__dirty = true;
				this.__layoutDirty = true;
			}
			this.__isHTML = true;
			if (this.__div == null) {
				value = new EReg("<br>", "g").replace(value, "\n");
				value = new EReg("<br/>", "g").replace(value, "\n");
				var segments = value.split("<font");
				if (segments.length == 1) {
					value = new EReg("<.*?>", "g").replace(value, "");
					if (this.__textEngine.textFormatRanges.length > 1) this.__textEngine.textFormatRanges.splice(1, this.__textEngine.textFormatRanges.length - 1);
					var range = this.__textEngine.textFormatRanges[0];
					range.format = this.__textFormat;
					range.start = 0;
					range.end = value.length;
					return this.__textEngine.text = value;
				} else {
					this.__textEngine.textFormatRanges.splice(0, this.__textEngine.textFormatRanges.length);
					value = "";
					var _g = 0;
					while (_g < segments.length) {
						var segment = segments[_g];
						++_g;
						if (segment == "") continue;
						var closeFontIndex = segment.indexOf("</font>");
						if (closeFontIndex > -1) {
							var start = segment.indexOf(">") + 1;
							var end = closeFontIndex;
							var format = this.__textFormat.clone();
							var faceIndex = segment.indexOf("face=");
							var colorIndex = segment.indexOf("color=");
							var sizeIndex = segment.indexOf("size=");
							if (faceIndex > -1 && faceIndex < start) {
								var len = segment.indexOf("\"", faceIndex);
								format.font = HxOverrides.substr(segment, faceIndex + 6, len);
							}
							if (colorIndex > -1 && colorIndex < start) format.color = Std.parseInt("0x" + HxOverrides.substr(segment, colorIndex + 8, 6));
							if (sizeIndex > -1 && sizeIndex < start) format.size = Std.parseInt((function ($this) {
								var $r;
								var len1 = segment.indexOf("\"", sizeIndex);
								$r = HxOverrides.substr(segment, sizeIndex + 6, len1);
								return $r;
							}(this)));
							var sub = segment.substring(start, end);
							sub = new EReg("<.*?>", "g").replace(sub, "");
							this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(format, value.length, value.length + sub.length));
							value += sub;
							if (closeFontIndex + 7 < segment.length) {
								sub = HxOverrides.substr(segment, closeFontIndex + 7, null);
								this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(this.__textFormat, value.length, value.length + sub.length));
								value += sub;
							}
						} else {
							this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(this.__textFormat, value.length, value.length + segment.length));
							value += segment;
						}
					}
				}
			}
			return this.__textEngine.text = value;
		}
		, get_length: function () {
			if (this.__textEngine.text != null) return this.__textEngine.text.length;
			return 0;
		}
		, get_maxChars: function () {
			return this.__textEngine.maxChars;
		}
		, set_maxChars: function (value) {
			if (value != this.__textEngine.maxChars) {
				this.__dirty = true;
				this.__layoutDirty = true;
			}
			return this.__textEngine.maxChars = value;
		}
		, get_maxScrollH: function () {
			this.__updateLayout();
			return this.__textEngine.maxScrollH;
		}
		, get_maxScrollV: function () {
			this.__updateLayout();
			return this.__textEngine.maxScrollV;
		}
		, get_multiline: function () {
			return this.__textEngine.multiline;
		}
		, set_multiline: function (value) {
			if (value != this.__textEngine.multiline) {
				this.__dirty = true;
				this.__layoutDirty = true;
			}
			return this.__textEngine.multiline = value;
		}
		, get_numLines: function () {
			this.__updateLayout();
			return this.__textEngine.numLines;
		}
		, get_restrict: function () {
			return this.__textEngine.restrict;
		}
		, set_restrict: function (value) {
			return this.__textEngine.restrict = value;
		}
		, get_scrollH: function () {
			return this.__textEngine.scrollH;
		}
		, set_scrollH: function (value) {
			if (value > this.__textEngine.maxScrollH) value = this.__textEngine.maxScrollH;
			if (value < 0) value = 0;
			if (value != this.__textEngine.scrollH) this.__dirty = true;
			return this.__textEngine.scrollH = value;
		}
		, get_scrollV: function () {
			return this.__textEngine.scrollV;
		}
		, set_scrollV: function (value) {
			if (value > this.__textEngine.maxScrollV) value = this.__textEngine.maxScrollV;
			if (value < 1) value = 1;
			if (value != this.__textEngine.scrollV) this.__dirty = true;
			return this.__textEngine.scrollV = value;
		}
		, get_selectable: function () {
			return this.__textEngine.selectable;
		}
		, set_selectable: function (value) {
			if (value != this.__textEngine.selectable && this.get_type() == openfl_text_TextFieldType.INPUT) {
				if (this.stage != null && this.stage.get_focus() == this) this.__startTextInput(); else if (!value) this.__stopTextInput();
			}
			return this.__textEngine.selectable = value;
		}
		, get_selectionBeginIndex: function () {
			return Std["int"](Math.min(this.__caretIndex, this.__selectionIndex));
		}
		, get_selectionEndIndex: function () {
			return Std["int"](Math.max(this.__caretIndex, this.__selectionIndex));
		}
		, get_sharpness: function () {
			return this.__textEngine.sharpness;
		}
		, set_sharpness: function (value) {
			if (value != this.__textEngine.sharpness) this.__dirty = true;
			return this.__textEngine.sharpness = value;
		}
		, get_text: function () {
			return this.__textEngine.text;
		}
		, set_text: function (value) {
			if (this.__isHTML || this.__textEngine.text != value) {
				this.__dirty = true;
				this.__layoutDirty = true;
			} else return value;
			if (this.__textEngine.textFormatRanges.length > 1) this.__textEngine.textFormatRanges.splice(1, this.__textEngine.textFormatRanges.length - 1);
			var range = this.__textEngine.textFormatRanges[0];
			range.format = this.__textFormat;
			range.start = 0;
			range.end = value.length;
			this.__isHTML = false;
			return this.__textEngine.text = value;
		}
		, get_textColor: function () {
			return this.__textFormat.color;
		}
		, set_textColor: function (value) {
			if (value != this.__textFormat.color) this.__dirty = true;
			var _g = 0;
			var _g1 = this.__textEngine.textFormatRanges;
			while (_g < _g1.length) {
				var range = _g1[_g];
				++_g;
				range.format.color = value;
			}
			return this.__textFormat.color = value;
		}
		, get_textWidth: function () {
			this.__updateLayout();
			return this.__textEngine.textWidth;
		}
		, get_textHeight: function () {
			this.__updateLayout();
			return this.__textEngine.textHeight;
		}
		, get_type: function () {
			return this.__textEngine.type;
		}
		, set_type: function (value) {
			if (value != this.__textEngine.type) {
				if (value == openfl_text_TextFieldType.INPUT) {
					this.addEventListener(openfl_events_FocusEvent.FOCUS_IN, $bind(this, this.this_onFocusIn));
					this.addEventListener(openfl_events_FocusEvent.FOCUS_OUT, $bind(this, this.this_onFocusOut));
					this.addEventListener(openfl_events_Event.ADDED_TO_STAGE, $bind(this, this.this_onAddedToStage));
					this.this_onFocusIn(null);
				} else {
					this.removeEventListener(openfl_events_FocusEvent.FOCUS_IN, $bind(this, this.this_onFocusIn));
					this.removeEventListener(openfl_events_FocusEvent.FOCUS_OUT, $bind(this, this.this_onFocusOut));
					this.removeEventListener(openfl_events_Event.ADDED_TO_STAGE, $bind(this, this.this_onAddedToStage));
					this.__stopTextInput();
				}
				this.__dirty = true;
			}
			return this.__textEngine.type = value;
		}
		, get_width: function () {
			this.__updateLayout();
			return this.__textEngine.width;
		}
		, set_width: function (value) {
			if (this.get_scaleX() != 1 || this.__textEngine.width != value) {
				if (!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
				this.__dirty = true;
				this.__layoutDirty = true;
			}
			this.set_scaleX(1);
			return this.__textEngine.width = value;
		}
		, get_wordWrap: function () {
			return this.__textEngine.wordWrap;
		}
		, set_wordWrap: function (value) {
			if (value != this.__textEngine.wordWrap) {
				this.__dirty = true;
				this.__layoutDirty = true;
			}
			return this.__textEngine.wordWrap = value;
		}
		, stage_onMouseMove: function (event) {
			if (this.stage == null) return;
			if (this.__textEngine.selectable && this.__selectionIndex >= 0) {
				this.__updateLayout();
				var position = this.__getPosition(this.get_mouseX(), this.get_mouseY());
				if (position != this.__caretIndex) {
					this.__caretIndex = position;
					this.__dirty = true;
				}
			}
		}
		, stage_onMouseUp: function (event) {
			if (this.stage == null) return;
			this.stage.removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE, $bind(this, this.stage_onMouseMove));
			this.stage.removeEventListener(openfl_events_MouseEvent.MOUSE_UP, $bind(this, this.stage_onMouseUp));
			if (this.stage.get_focus() == this) {
				this.__getWorldTransform();
				this.__updateLayout();
				var px = this.__worldTransform.__transformInverseX(this.get_x(), this.get_y());
				var py = this.__worldTransform.__transformInverseY(this.get_x(), this.get_y());
				var upPos = this.__getPosition(this.get_mouseX(), this.get_mouseY());
				var leftPos;
				var rightPos;
				leftPos = Std["int"](Math.min(this.__selectionIndex, upPos));
				rightPos = Std["int"](Math.max(this.__selectionIndex, upPos));
				this.__selectionIndex = leftPos;
				this.__caretIndex = rightPos;
				if (this.__inputEnabled) {
					this.this_onFocusIn(null);
					this.__stopCursorTimer();
					this.__startCursorTimer();
				}
			}
		}
		, this_onAddedToStage: function (event) {
			this.this_onFocusIn(null);
		}
		, this_onFocusIn: function (event) {
			if (this.get_selectable() && this.get_type() == openfl_text_TextFieldType.INPUT && this.stage != null && this.stage.get_focus() == this) this.__startTextInput();
		}
		, this_onFocusOut: function (event) {
			this.__stopTextInput();
		}
		, this_onMouseDown: function (event) {
			if (!this.get_selectable()) return;
			this.__updateLayout();
			this.__caretIndex = this.__getPosition(this.get_mouseX(), this.get_mouseY());
			this.__selectionIndex = this.__caretIndex;
			this.__dirty = true;
			this.stage.addEventListener(openfl_events_MouseEvent.MOUSE_MOVE, $bind(this, this.stage_onMouseMove));
			this.stage.addEventListener(openfl_events_MouseEvent.MOUSE_UP, $bind(this, this.stage_onMouseUp));
		}
		, window_onKeyDown: function (key, modifier) {
			switch (key) {
				case 8:
					if (this.__selectionIndex == this.__caretIndex && this.__caretIndex > 0) this.__selectionIndex = this.__caretIndex - 1;
					if (this.__selectionIndex != this.__caretIndex) {
						this.replaceSelectedText("");
						this.__selectionIndex = this.__caretIndex;
						this.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE, true));
					}
					break;
				case 127:
					if (this.__selectionIndex == this.__caretIndex && this.__caretIndex < this.__textEngine.text.length) this.__selectionIndex = this.__caretIndex + 1;
					if (this.__selectionIndex != this.__caretIndex) {
						this.replaceSelectedText("");
						this.__selectionIndex = this.__caretIndex;
						this.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE, true));
					}
					break;
				case 1073741904:
					if (lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
						if (this.__caretIndex > 0) this.__caretIndex--;
					} else {
						if (this.__selectionIndex == this.__caretIndex) {
							if (this.__caretIndex > 0) this.__caretIndex--;
						} else this.__caretIndex = Std["int"](Math.min(this.__caretIndex, this.__selectionIndex));
						this.__selectionIndex = this.__caretIndex;
					}
					this.__stopCursorTimer();
					this.__startCursorTimer();
					break;
				case 1073741903:
					if (lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
						if (this.__caretIndex < this.__textEngine.text.length) this.__caretIndex++;
					} else {
						if (this.__selectionIndex == this.__caretIndex) {
							if (this.__caretIndex < this.__textEngine.text.length) this.__caretIndex++;
						} else this.__caretIndex = Std["int"](Math.max(this.__caretIndex, this.__selectionIndex));
						this.__selectionIndex = this.__caretIndex;
					}
					this.__stopCursorTimer();
					this.__startCursorTimer();
					break;
				case 99:
					if (modifier == 64 || modifier == 128) lime_system_Clipboard.set_text(this.__textEngine.text.substring(this.__caretIndex, this.__selectionIndex));
					break;
				case 120:
					if (modifier == 64 || modifier == 128) {
						lime_system_Clipboard.set_text(this.__textEngine.text.substring(this.__caretIndex, this.__selectionIndex));
						if (this.__caretIndex != this.__selectionIndex) {
							this.replaceSelectedText("");
							this.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE, true));
						}
					}
					break;
				case 118:
					if (modifier == 64 || modifier == 128) {
						var text = lime_system_Clipboard.get_text();
						if (text != null) this.replaceSelectedText(text); else this.replaceSelectedText("");
						this.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE, true));
					}
					break;
				default:
			}
		}
		, window_onTextInput: function (value) {
			this.replaceSelectedText(value);
			this.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE, true));
		}
		, __class__: openfl_text_TextField
		, __properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__, { set_wordWrap: "set_wordWrap", get_wordWrap: "get_wordWrap", set_type: "set_type", get_type: "get_type", get_textWidth: "get_textWidth", get_textHeight: "get_textHeight", set_textColor: "set_textColor", get_textColor: "get_textColor", set_text: "set_text", get_text: "get_text", set_sharpness: "set_sharpness", get_sharpness: "get_sharpness", get_selectionEndIndex: "get_selectionEndIndex", get_selectionBeginIndex: "get_selectionBeginIndex", set_selectable: "set_selectable", get_selectable: "get_selectable", set_scrollV: "set_scrollV", get_scrollV: "get_scrollV", set_scrollH: "set_scrollH", get_scrollH: "get_scrollH", set_restrict: "set_restrict", get_restrict: "get_restrict", get_numLines: "get_numLines", set_multiline: "set_multiline", get_multiline: "get_multiline", get_maxScrollV: "get_maxScrollV", get_maxScrollH: "get_maxScrollH", set_maxChars: "set_maxChars", get_maxChars: "get_maxChars", get_length: "get_length", set_htmlText: "set_htmlText", get_htmlText: "get_htmlText", set_gridFitType: "set_gridFitType", get_gridFitType: "get_gridFitType", set_embedFonts: "set_embedFonts", get_embedFonts: "get_embedFonts", set_displayAsPassword: "set_displayAsPassword", get_displayAsPassword: "get_displayAsPassword", set_defaultTextFormat: "set_defaultTextFormat", get_defaultTextFormat: "get_defaultTextFormat", get_caretIndex: "get_caretIndex", get_bottomScrollV: "get_bottomScrollV", set_borderColor: "set_borderColor", get_borderColor: "get_borderColor", set_border: "set_border", get_border: "get_border", set_backgroundColor: "set_backgroundColor", get_backgroundColor: "get_backgroundColor", set_background: "set_background", get_background: "get_background", set_autoSize: "set_autoSize", get_autoSize: "get_autoSize", set_antiAliasType: "set_antiAliasType", get_antiAliasType: "get_antiAliasType" })
	});
	var openfl_text_TextFieldAutoSize = $hxClasses["openfl.text.TextFieldAutoSize"] = { __ename__: ["openfl", "text", "TextFieldAutoSize"], __constructs__: ["CENTER", "LEFT", "NONE", "RIGHT"] };
	openfl_text_TextFieldAutoSize.CENTER = ["CENTER", 0];
	openfl_text_TextFieldAutoSize.CENTER.toString = $estr;
	openfl_text_TextFieldAutoSize.CENTER.__enum__ = openfl_text_TextFieldAutoSize;
	openfl_text_TextFieldAutoSize.LEFT = ["LEFT", 1];
	openfl_text_TextFieldAutoSize.LEFT.toString = $estr;
	openfl_text_TextFieldAutoSize.LEFT.__enum__ = openfl_text_TextFieldAutoSize;
	openfl_text_TextFieldAutoSize.NONE = ["NONE", 2];
	openfl_text_TextFieldAutoSize.NONE.toString = $estr;
	openfl_text_TextFieldAutoSize.NONE.__enum__ = openfl_text_TextFieldAutoSize;
	openfl_text_TextFieldAutoSize.RIGHT = ["RIGHT", 3];
	openfl_text_TextFieldAutoSize.RIGHT.toString = $estr;
	openfl_text_TextFieldAutoSize.RIGHT.__enum__ = openfl_text_TextFieldAutoSize;
	var openfl_text_TextFieldType = $hxClasses["openfl.text.TextFieldType"] = { __ename__: ["openfl", "text", "TextFieldType"], __constructs__: ["DYNAMIC", "INPUT"] };
	openfl_text_TextFieldType.DYNAMIC = ["DYNAMIC", 0];
	openfl_text_TextFieldType.DYNAMIC.toString = $estr;
	openfl_text_TextFieldType.DYNAMIC.__enum__ = openfl_text_TextFieldType;
	openfl_text_TextFieldType.INPUT = ["INPUT", 1];
	openfl_text_TextFieldType.INPUT.toString = $estr;
	openfl_text_TextFieldType.INPUT.__enum__ = openfl_text_TextFieldType;
	var openfl_text_TextFormat = function (font, size, color, bold, italic, underline, url, target, align, leftMargin, rightMargin, indent, leading) {
		this.font = font;
		this.size = size;
		this.color = color;
		this.bold = bold;
		this.italic = italic;
		this.underline = underline;
		this.url = url;
		this.target = target;
		this.align = align;
		this.leftMargin = leftMargin;
		this.rightMargin = rightMargin;
		this.indent = indent;
		this.leading = leading;
	};
	$hxClasses["openfl.text.TextFormat"] = openfl_text_TextFormat;
	openfl_text_TextFormat.__name__ = ["openfl", "text", "TextFormat"];
	openfl_text_TextFormat.prototype = {
		clone: function () {
			var newFormat = new openfl_text_TextFormat(this.font, this.size, this.color, this.bold, this.italic, this.underline, this.url, this.target);
			newFormat.align = this.align;
			newFormat.leftMargin = this.leftMargin;
			newFormat.rightMargin = this.rightMargin;
			newFormat.indent = this.indent;
			newFormat.leading = this.leading;
			newFormat.blockIndent = this.blockIndent;
			newFormat.bullet = this.bullet;
			newFormat.kerning = this.kerning;
			newFormat.letterSpacing = this.letterSpacing;
			newFormat.tabStops = this.tabStops;
			return newFormat;
		}
		, __merge: function (format) {
			if (format.font != null) this.font = format.font;
			if (format.size != null) this.size = format.size;
			if (format.color != null) this.color = format.color;
			if (format.bold != null) this.bold = format.bold;
			if (format.italic != null) this.italic = format.italic;
			if (format.underline != null) this.underline = format.underline;
			if (format.url != null) this.url = format.url;
			if (format.target != null) this.target = format.target;
			if (format.align != null) this.align = format.align;
			if (format.leftMargin != null) this.leftMargin = format.leftMargin;
			if (format.rightMargin != null) this.rightMargin = format.rightMargin;
			if (format.indent != null) this.indent = format.indent;
			if (format.leading != null) this.leading = format.leading;
			if (format.blockIndent != null) this.blockIndent = format.blockIndent;
			if (format.bullet != null) this.bullet = format.bullet;
			if (format.kerning != null) this.kerning = format.kerning;
			if (format.letterSpacing != null) this.letterSpacing = format.letterSpacing;
			if (format.tabStops != null) this.tabStops = format.tabStops;
		}
		, __class__: openfl_text_TextFormat
	};
	var openfl_text_TextFormatAlign = $hxClasses["openfl.text.TextFormatAlign"] = { __ename__: ["openfl", "text", "TextFormatAlign"], __constructs__: ["LEFT", "RIGHT", "JUSTIFY", "CENTER"] };
	openfl_text_TextFormatAlign.LEFT = ["LEFT", 0];
	openfl_text_TextFormatAlign.LEFT.toString = $estr;
	openfl_text_TextFormatAlign.LEFT.__enum__ = openfl_text_TextFormatAlign;
	openfl_text_TextFormatAlign.RIGHT = ["RIGHT", 1];
	openfl_text_TextFormatAlign.RIGHT.toString = $estr;
	openfl_text_TextFormatAlign.RIGHT.__enum__ = openfl_text_TextFormatAlign;
	openfl_text_TextFormatAlign.JUSTIFY = ["JUSTIFY", 2];
	openfl_text_TextFormatAlign.JUSTIFY.toString = $estr;
	openfl_text_TextFormatAlign.JUSTIFY.__enum__ = openfl_text_TextFormatAlign;
	openfl_text_TextFormatAlign.CENTER = ["CENTER", 3];
	openfl_text_TextFormatAlign.CENTER.toString = $estr;
	openfl_text_TextFormatAlign.CENTER.__enum__ = openfl_text_TextFormatAlign;
	var openfl_text_TextLineMetrics = function (x, width, height, ascent, descent, leading) {
		this.x = x;
		this.width = width;
		this.height = height;
		this.ascent = ascent;
		this.descent = descent;
		this.leading = leading;
	};
	$hxClasses["openfl.text.TextLineMetrics"] = openfl_text_TextLineMetrics;
	openfl_text_TextLineMetrics.__name__ = ["openfl", "text", "TextLineMetrics"];
	openfl_text_TextLineMetrics.prototype = {
		__class__: openfl_text_TextLineMetrics
	};
	var openfl_ui_GameInput = function () {
		openfl_events_EventDispatcher.call(this);
		openfl_ui_GameInput.__instances.push(this);
	};
	$hxClasses["openfl.ui.GameInput"] = openfl_ui_GameInput;
	openfl_ui_GameInput.__name__ = ["openfl", "ui", "GameInput"];
	openfl_ui_GameInput.getDeviceAt = function (index) {
		if (lime_ui_Gamepad.devices.h.hasOwnProperty(index)) {
			var key = lime_ui_Gamepad.devices.h[index];
			return openfl_ui_GameInput.__devices.h[key.__id__];
		}
		return null;
	};
	openfl_ui_GameInput.__getDevice = function (gamepad) {
		if (gamepad == null) return null;
		if (!(openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] != null)) {
			var device = new openfl_ui_GameInputDevice(gamepad.id == null ? "null" : "" + gamepad.id, null);
			openfl_ui_GameInput.__devices.set(gamepad, device);
			openfl_ui_GameInput.numDevices = Lambda.count(openfl_ui_GameInput.__devices);
		}
		return openfl_ui_GameInput.__devices.h[gamepad.__id__];
	};
	openfl_ui_GameInput.__onGamepadAxisMove = function (gamepad, axis, value) {
		var device = openfl_ui_GameInput.__getDevice(gamepad);
		if (device == null) return;
		if (device.enabled) {
			if (!device.__axis.h.hasOwnProperty(axis)) {
				var control1 = new openfl_ui_GameInputControl(device, "AXIS_" + (function ($this) {
					var $r;
					switch (axis) {
						case 0:
							$r = "LEFT_X";
							break;
						case 1:
							$r = "LEFT_Y";
							break;
						case 2:
							$r = "RIGHT_X";
							break;
						case 3:
							$r = "RIGHT_Y";
							break;
						case 4:
							$r = "TRIGGER_LEFT";
							break;
						case 5:
							$r = "TRIGGER_RIGHT";
							break;
						default:
							$r = "UNKNOWN (" + axis + ")";
					}
					return $r;
				}(this)), -1, 1);
				device.__axis.h[axis] = control1;
				device.__controls.push(control1);
			}
			var control = device.__axis.h[axis];
			control.value = value;
			control.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE));
		}
	};
	openfl_ui_GameInput.__onGamepadButtonDown = function (gamepad, button) {
		var device = openfl_ui_GameInput.__getDevice(gamepad);
		if (device == null) return;
		if (device.enabled) {
			if (!device.__button.h.hasOwnProperty(button)) {
				var control1 = new openfl_ui_GameInputControl(device, "BUTTON_" + (function ($this) {
					var $r;
					switch (button) {
						case 0:
							$r = "A";
							break;
						case 1:
							$r = "B";
							break;
						case 2:
							$r = "X";
							break;
						case 3:
							$r = "Y";
							break;
						case 4:
							$r = "BACK";
							break;
						case 5:
							$r = "GUIDE";
							break;
						case 6:
							$r = "START";
							break;
						case 7:
							$r = "LEFT_STICK";
							break;
						case 8:
							$r = "RIGHT_STICK";
							break;
						case 9:
							$r = "LEFT_SHOULDER";
							break;
						case 10:
							$r = "RIGHT_SHOULDER";
							break;
						case 11:
							$r = "DPAD_UP";
							break;
						case 12:
							$r = "DPAD_DOWN";
							break;
						case 13:
							$r = "DPAD_LEFT";
							break;
						case 14:
							$r = "DPAD_RIGHT";
							break;
						default:
							$r = "UNKNOWN (" + button + ")";
					}
					return $r;
				}(this)), 0, 1);
				device.__button.h[button] = control1;
				device.__controls.push(control1);
			}
			var control = device.__button.h[button];
			control.value = 1;
			control.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE));
		}
	};
	openfl_ui_GameInput.__onGamepadButtonUp = function (gamepad, button) {
		var device = openfl_ui_GameInput.__getDevice(gamepad);
		if (device == null) return;
		if (device.enabled) {
			if (!device.__button.h.hasOwnProperty(button)) {
				var control1 = new openfl_ui_GameInputControl(device, "BUTTON_" + (function ($this) {
					var $r;
					switch (button) {
						case 0:
							$r = "A";
							break;
						case 1:
							$r = "B";
							break;
						case 2:
							$r = "X";
							break;
						case 3:
							$r = "Y";
							break;
						case 4:
							$r = "BACK";
							break;
						case 5:
							$r = "GUIDE";
							break;
						case 6:
							$r = "START";
							break;
						case 7:
							$r = "LEFT_STICK";
							break;
						case 8:
							$r = "RIGHT_STICK";
							break;
						case 9:
							$r = "LEFT_SHOULDER";
							break;
						case 10:
							$r = "RIGHT_SHOULDER";
							break;
						case 11:
							$r = "DPAD_UP";
							break;
						case 12:
							$r = "DPAD_DOWN";
							break;
						case 13:
							$r = "DPAD_LEFT";
							break;
						case 14:
							$r = "DPAD_RIGHT";
							break;
						default:
							$r = "UNKNOWN (" + button + ")";
					}
					return $r;
				}(this)), 0, 1);
				device.__button.h[button] = control1;
				device.__controls.push(control1);
			}
			var control = device.__button.h[button];
			control.value = 0;
			control.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE));
		}
	};
	openfl_ui_GameInput.__onGamepadConnect = function (gamepad) {
		var device = openfl_ui_GameInput.__getDevice(gamepad);
		if (device == null) return;
		var _g = 0;
		var _g1 = openfl_ui_GameInput.__instances;
		while (_g < _g1.length) {
			var instance = _g1[_g];
			++_g;
			instance.dispatchEvent(new openfl_events_GameInputEvent(openfl_events_GameInputEvent.DEVICE_ADDED, null, null, device));
		}
	};
	openfl_ui_GameInput.__onGamepadDisconnect = function (gamepad) {
		var device = openfl_ui_GameInput.__devices.h[gamepad.__id__];
		if (device != null) {
			openfl_ui_GameInput.__devices.remove(gamepad);
			openfl_ui_GameInput.numDevices = Lambda.count(openfl_ui_GameInput.__devices);
			var _g = 0;
			var _g1 = openfl_ui_GameInput.__instances;
			while (_g < _g1.length) {
				var instance = _g1[_g];
				++_g;
				instance.dispatchEvent(new openfl_events_GameInputEvent(openfl_events_GameInputEvent.DEVICE_REMOVED, null, null, device));
			}
		}
	};
	openfl_ui_GameInput.__super__ = openfl_events_EventDispatcher;
	openfl_ui_GameInput.prototype = $extend(openfl_events_EventDispatcher.prototype, {
		__class__: openfl_ui_GameInput
	});
	var openfl_ui_GameInputControl = function (device, id, minValue, maxValue, value) {
		if (value == null) value = 0;
		openfl_events_EventDispatcher.call(this);
		this.device = device;
		this.id = id;
		this.minValue = minValue;
		this.maxValue = maxValue;
		this.value = value;
	};
	$hxClasses["openfl.ui.GameInputControl"] = openfl_ui_GameInputControl;
	openfl_ui_GameInputControl.__name__ = ["openfl", "ui", "GameInputControl"];
	openfl_ui_GameInputControl.__super__ = openfl_events_EventDispatcher;
	openfl_ui_GameInputControl.prototype = $extend(openfl_events_EventDispatcher.prototype, {
		__class__: openfl_ui_GameInputControl
	});
	var openfl_ui_GameInputDevice = function (id, name) {
		this.__controls = [];
		this.__button = new haxe_ds_IntMap();
		this.__axis = new haxe_ds_IntMap();
		this.id = id;
		this.name = name;
		var control;
		var _g = 0;
		while (_g < 6) {
			var i = _g++;
			control = new openfl_ui_GameInputControl(this, "AXIS_" + i, -1, 1);
			this.__axis.h[i] = control;
			this.__controls.push(control);
		}
		var _g1 = 0;
		while (_g1 < 15) {
			var i1 = _g1++;
			control = new openfl_ui_GameInputControl(this, "BUTTON_" + i1, 0, 1);
			this.__button.h[i1] = control;
			this.__controls.push(control);
		}
	};
	$hxClasses["openfl.ui.GameInputDevice"] = openfl_ui_GameInputDevice;
	openfl_ui_GameInputDevice.__name__ = ["openfl", "ui", "GameInputDevice"];
	openfl_ui_GameInputDevice.prototype = {
		getCachedSamples: function (data, append) {
			if (append == null) append = false;
			return 0;
		}
		, getControlAt: function (i) {
			if (i >= 0 && i < this.__controls.length) return this.__controls[i];
			return null;
		}
		, startCachingSamples: function (numSamples, controls) {
		}
		, stopCachingSamples: function () {
		}
		, get_numControls: function () {
			return this.__controls.length;
		}
		, __class__: openfl_ui_GameInputDevice
		, __properties__: { get_numControls: "get_numControls" }
	};
	var openfl_ui_Keyboard = function () { };
	$hxClasses["openfl.ui.Keyboard"] = openfl_ui_Keyboard;
	openfl_ui_Keyboard.__name__ = ["openfl", "ui", "Keyboard"];
	openfl_ui_Keyboard.capsLock = null;
	openfl_ui_Keyboard.numLock = null;
	openfl_ui_Keyboard.isAccessible = function () {
		return false;
	};
	openfl_ui_Keyboard.__convertKeyCode = function (key) {
		switch (key) {
			case 8:
				return 8;
			case 9:
				return 9;
			case 13:
				return 13;
			case 27:
				return 27;
			case 32:
				return 32;
			case 33:
				return 49;
			case 34:
				return 222;
			case 35:
				return 51;
			case 36:
				return 52;
			case 37:
				return 53;
			case 38:
				return 55;
			case 39:
				return 222;
			case 40:
				return 57;
			case 41:
				return 48;
			case 42:
				return 56;
			case 44:
				return 188;
			case 45:
				return 189;
			case 46:
				return 190;
			case 47:
				return 191;
			case 48:
				return 48;
			case 49:
				return 49;
			case 50:
				return 50;
			case 51:
				return 51;
			case 52:
				return 52;
			case 53:
				return 53;
			case 54:
				return 54;
			case 55:
				return 55;
			case 56:
				return 56;
			case 57:
				return 57;
			case 58:
				return 186;
			case 59:
				return 186;
			case 60:
				return 60;
			case 61:
				return 187;
			case 62:
				return 190;
			case 63:
				return 191;
			case 64:
				return 50;
			case 91:
				return 219;
			case 92:
				return 220;
			case 93:
				return 221;
			case 94:
				return 54;
			case 95:
				return 189;
			case 96:
				return 192;
			case 97:
				return 65;
			case 98:
				return 66;
			case 99:
				return 67;
			case 100:
				return 68;
			case 101:
				return 69;
			case 102:
				return 70;
			case 103:
				return 71;
			case 104:
				return 72;
			case 105:
				return 73;
			case 106:
				return 74;
			case 107:
				return 75;
			case 108:
				return 76;
			case 109:
				return 77;
			case 110:
				return 78;
			case 111:
				return 79;
			case 112:
				return 80;
			case 113:
				return 81;
			case 114:
				return 82;
			case 115:
				return 83;
			case 116:
				return 84;
			case 117:
				return 85;
			case 118:
				return 86;
			case 119:
				return 87;
			case 120:
				return 88;
			case 121:
				return 89;
			case 122:
				return 90;
			case 127:
				return 46;
			case 1073741881:
				return 20;
			case 1073741882:
				return 112;
			case 1073741883:
				return 113;
			case 1073741884:
				return 114;
			case 1073741885:
				return 115;
			case 1073741886:
				return 116;
			case 1073741887:
				return 117;
			case 1073741888:
				return 118;
			case 1073741889:
				return 119;
			case 1073741890:
				return 120;
			case 1073741891:
				return 121;
			case 1073741892:
				return 122;
			case 1073741893:
				return 123;
			case 1073741894:
				return 301;
			case 1073741895:
				return 145;
			case 1073741896:
				return 19;
			case 1073741897:
				return 45;
			case 1073741898:
				return 36;
			case 1073741899:
				return 33;
			case 1073741901:
				return 35;
			case 1073741902:
				return 34;
			case 1073741903:
				return 39;
			case 1073741904:
				return 37;
			case 1073741905:
				return 40;
			case 1073741906:
				return 38;
			case 1073741907:
				return 144;
			case 1073741908:
				return 111;
			case 1073741909:
				return 106;
			case 1073741910:
				return 109;
			case 1073741911:
				return 107;
			case 1073741912:
				return 108;
			case 1073741913:
				return 97;
			case 1073741914:
				return 98;
			case 1073741915:
				return 99;
			case 1073741916:
				return 100;
			case 1073741917:
				return 101;
			case 1073741918:
				return 102;
			case 1073741919:
				return 103;
			case 1073741920:
				return 104;
			case 1073741921:
				return 105;
			case 1073741922:
				return 96;
			case 1073741923:
				return 110;
			case 1073741925:
				return 302;
			case 1073741928:
				return 124;
			case 1073741929:
				return 125;
			case 1073741930:
				return 126;
			case 1073741982:
				return 13;
			case 1073742044:
				return 110;
			case 1073742048:
				return 17;
			case 1073742049:
				return 16;
			case 1073742050:
				return 18;
			case 1073742051:
				return 15;
			case 1073742052:
				return 17;
			case 1073742053:
				return 16;
			case 1073742054:
				return 18;
			case 1073742055:
				return 15;
			default:
				return key;
		}
	};
	openfl_ui_Keyboard.__getCharCode = function (key, shift) {
		if (shift == null) shift = false;
		if (!shift) {
			switch (key) {
				case 8:
					return 8;
				case 9:
					return 9;
				case 13:
					return 13;
				case 27:
					return 27;
				case 32:
					return 32;
				case 186:
					return 59;
				case 187:
					return 61;
				case 188:
					return 44;
				case 189:
					return 45;
				case 190:
					return 46;
				case 191:
					return 47;
				case 192:
					return 96;
				case 219:
					return 91;
				case 220:
					return 92;
				case 221:
					return 93;
				case 222:
					return 39;
			}
			if (key >= 48 && key <= 57) return key - 48 + 48;
			if (key >= 65 && key <= 90) return key - 65 + 97;
		} else {
			switch (key) {
				case 48:
					return 41;
				case 49:
					return 33;
				case 50:
					return 64;
				case 51:
					return 35;
				case 52:
					return 36;
				case 53:
					return 37;
				case 54:
					return 94;
				case 55:
					return 38;
				case 56:
					return 42;
				case 57:
					return 40;
				case 186:
					return 58;
				case 187:
					return 43;
				case 188:
					return 60;
				case 189:
					return 95;
				case 190:
					return 62;
				case 191:
					return 63;
				case 192:
					return 126;
				case 219:
					return 123;
				case 220:
					return 124;
				case 221:
					return 125;
				case 222:
					return 34;
			}
			if (key >= 65 && key <= 90) return key - 65 + 65;
		}
		if (key >= 96 && key <= 105) return key - 96 + 48;
		switch (key) {
			case 106:
				return 42;
			case 107:
				return 43;
			case 108:
				return 44;
			case 110:
				return 45;
			case 111:
				return 46;
			case 46:
				return 127;
			case 13:
				return 13;
			case 8:
				return 8;
		}
		return 0;
	};
	openfl_ui_Keyboard.__getKeyLocation = function (key) {
		switch (key) {
			case 1073742048: case 1073742049: case 1073742050: case 1073742051:
				return 1;
			case 1073742052: case 1073742053: case 1073742054: case 1073742055:
				return 2;
			case 1073741908: case 1073741909: case 1073741910: case 1073741911: case 1073741912: case 1073741913: case 1073741914: case 1073741915: case 1073741916: case 1073741917: case 1073741918: case 1073741919: case 1073741920: case 1073741921: case 1073741922: case 1073741923: case 1073742044:
				return 3;
			default:
				return 0;
		}
	};
	var openfl_ui_Multitouch = function () { };
	$hxClasses["openfl.ui.Multitouch"] = openfl_ui_Multitouch;
	openfl_ui_Multitouch.__name__ = ["openfl", "ui", "Multitouch"];
	openfl_ui_Multitouch.__properties__ = { get_supportsTouchEvents: "get_supportsTouchEvents", set_inputMode: "set_inputMode", get_inputMode: "get_inputMode" }
	openfl_ui_Multitouch.maxTouchPoints = null;
	openfl_ui_Multitouch.supportedGestures = null;
	openfl_ui_Multitouch.supportsGestureEvents = null;
	openfl_ui_Multitouch.supportsTouchEvents = null;
	openfl_ui_Multitouch.get_inputMode = function () {
		return openfl_ui_MultitouchInputMode.TOUCH_POINT;
	};
	openfl_ui_Multitouch.set_inputMode = function (inMode) {
		if (inMode == openfl_ui_MultitouchInputMode.GESTURE) return openfl_ui_Multitouch.get_inputMode();
		return inMode;
	};
	openfl_ui_Multitouch.get_supportsTouchEvents = function () {
		if (('ontouchstart' in document.documentElement) || (window.DocumentTouch && document instanceof DocumentTouch)) return true;
		return false;
	};
	var openfl_ui_MultitouchInputMode = $hxClasses["openfl.ui.MultitouchInputMode"] = { __ename__: ["openfl", "ui", "MultitouchInputMode"], __constructs__: ["NONE", "TOUCH_POINT", "GESTURE"] };
	openfl_ui_MultitouchInputMode.NONE = ["NONE", 0];
	openfl_ui_MultitouchInputMode.NONE.toString = $estr;
	openfl_ui_MultitouchInputMode.NONE.__enum__ = openfl_ui_MultitouchInputMode;
	openfl_ui_MultitouchInputMode.TOUCH_POINT = ["TOUCH_POINT", 1];
	openfl_ui_MultitouchInputMode.TOUCH_POINT.toString = $estr;
	openfl_ui_MultitouchInputMode.TOUCH_POINT.__enum__ = openfl_ui_MultitouchInputMode;
	openfl_ui_MultitouchInputMode.GESTURE = ["GESTURE", 2];
	openfl_ui_MultitouchInputMode.GESTURE.toString = $estr;
	openfl_ui_MultitouchInputMode.GESTURE.__enum__ = openfl_ui_MultitouchInputMode;
	function $iterator(o) { if (o instanceof Array) return function () { return HxOverrides.iter(o); }; return typeof (o.iterator) == 'function' ? $bind(o, o.iterator) : o.iterator; }
	var $_, $fid = 0;
	function $bind(o, m) { if (m == null) return null; if (m.__id__ == null) m.__id__ = $fid++; var f; if (o.hx__closures__ == null) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if (f == null) { f = function () { return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
	if (Array.prototype.indexOf) HxOverrides.indexOf = function (a, o, i) {
		return Array.prototype.indexOf.call(a, o, i);
	};
	$hxClasses.Math = Math;
	String.prototype.__class__ = $hxClasses.String = String;
	String.__name__ = ["String"];
	$hxClasses.Array = Array;
	Array.__name__ = ["Array"];
	Date.prototype.__class__ = $hxClasses.Date = Date;
	Date.__name__ = ["Date"];
	var Int = $hxClasses.Int = { __name__: ["Int"] };
	var Dynamic = $hxClasses.Dynamic = { __name__: ["Dynamic"] };
	var Float = $hxClasses.Float = Number;
	Float.__name__ = ["Float"];
	var Bool = $hxClasses.Bool = Boolean;
	Bool.__ename__ = ["Bool"];
	var Class = $hxClasses.Class = { __name__: ["Class"] };
	var Enum = {};
	haxe_Resource.content = [];
	var __map_reserved = {}
	var ArrayBuffer = (Function("return typeof ArrayBuffer != 'undefined' ? ArrayBuffer : null"))() || js_html_compat_ArrayBuffer;
	if (ArrayBuffer.prototype.slice == null) ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
	var DataView = (Function("return typeof DataView != 'undefined' ? DataView : null"))() || js_html_compat_DataView;
	var Uint8Array = (Function("return typeof Uint8Array != 'undefined' ? Uint8Array : null"))() || js_html_compat_Uint8Array._new;
	var this1;
	this1 = new Uint32Array(256);
	lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16 = this1;
	var _g = 0;
	while (_g < 256) {
		var i = _g++;
		var val = Math.ceil(i * 257.003921568627447);
		lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[i] = val;
	}
	var this2;
	this2 = new Uint8Array(510);
	lime_math_color__$RGBA_RGBA_$Impl_$.__clamp = this2;
	var _g1 = 0;
	while (_g1 < 255) {
		var i1 = _g1++;
		lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[i1] = i1;
	}
	var _g11 = 255;
	var _g2 = 511;
	while (_g11 < _g2) {
		var i2 = _g11++;
		lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[i2] = 255;
	}
	lime_system_CFFI.available = false;
	lime_system_CFFI.enabled = false;
	if (window.createjs != null) createjs.Sound.alternateExtensions = ["ogg", "mp3", "wav"];
	openfl_ui_Multitouch.maxTouchPoints = 2;
	openfl_ui_Multitouch.supportedGestures = null;
	openfl_ui_Multitouch.supportsGestureEvents = false;
	openfl_display_DisplayObject.__instanceCount = 0;
	openfl_display_DisplayObject.__worldRenderDirty = 0;
	openfl_display_DisplayObject.__worldTransformDirty = 0;
	openfl_display_DisplayObject.__cacheAsBitmapMode = false;
	Xml.Element = 0;
	Xml.PCData = 1;
	Xml.CData = 2;
	Xml.Comment = 3;
	Xml.DocType = 4;
	Xml.ProcessingInstruction = 5;
	Xml.Document = 6;
	cocktail_api_CocktailView.TAB_KEY_CODE = 9;
	cocktail_api_CocktailView.ENTER_KEY_CODE = 13;
	cocktail_api_CocktailView.SPACE_KEY_CODE = 32;
	cocktail_core_css_CSSConstants.SUPPORTED_STYLES_NUMBER = 87;
	cocktail_core_css_CSSConstants.DISPLAY = 0;
	cocktail_core_css_CSSConstants.POSITION = 1;
	cocktail_core_css_CSSConstants.FLOAT = 2;
	cocktail_core_css_CSSConstants.CLEAR = 3;
	cocktail_core_css_CSSConstants.Z_INDEX = 4;
	cocktail_core_css_CSSConstants.MARGIN = 5;
	cocktail_core_css_CSSConstants.MARGIN_LEFT = 6;
	cocktail_core_css_CSSConstants.MARGIN_RIGHT = 7;
	cocktail_core_css_CSSConstants.MARGIN_TOP = 8;
	cocktail_core_css_CSSConstants.MARGIN_BOTTOM = 9;
	cocktail_core_css_CSSConstants.PADDING = 10;
	cocktail_core_css_CSSConstants.PADDING_LEFT = 11;
	cocktail_core_css_CSSConstants.PADDING_RIGHT = 12;
	cocktail_core_css_CSSConstants.PADDING_TOP = 13;
	cocktail_core_css_CSSConstants.PADDING_BOTTOM = 14;
	cocktail_core_css_CSSConstants.WIDTH = 15;
	cocktail_core_css_CSSConstants.HEIGHT = 16;
	cocktail_core_css_CSSConstants.MIN_HEIGHT = 17;
	cocktail_core_css_CSSConstants.MAX_HEIGHT = 18;
	cocktail_core_css_CSSConstants.MIN_WIDTH = 19;
	cocktail_core_css_CSSConstants.MAX_WIDTH = 20;
	cocktail_core_css_CSSConstants.TOP = 21;
	cocktail_core_css_CSSConstants.LEFT = 22;
	cocktail_core_css_CSSConstants.RIGHT = 23;
	cocktail_core_css_CSSConstants.BOTTOM = 24;
	cocktail_core_css_CSSConstants.BACKGROUND_COLOR = 25;
	cocktail_core_css_CSSConstants.BACKGROUND_IMAGE = 26;
	cocktail_core_css_CSSConstants.BACKGROUND_REPEAT = 27;
	cocktail_core_css_CSSConstants.BACKGROUND_ORIGIN = 28;
	cocktail_core_css_CSSConstants.BACKGROUND_SIZE = 29;
	cocktail_core_css_CSSConstants.BACKGROUND_POSITION = 30;
	cocktail_core_css_CSSConstants.BACKGROUND_CLIP = 31;
	cocktail_core_css_CSSConstants.BACKGROUND_ATTACHMENT = 32;
	cocktail_core_css_CSSConstants.BACKGROUND = 33;
	cocktail_core_css_CSSConstants.FONT_SIZE = 34;
	cocktail_core_css_CSSConstants.FONT_WEIGHT = 35;
	cocktail_core_css_CSSConstants.FONT_STYLE = 36;
	cocktail_core_css_CSSConstants.FONT_FAMILY = 37;
	cocktail_core_css_CSSConstants.FONT_VARIANT = 38;
	cocktail_core_css_CSSConstants.FONT = 39;
	cocktail_core_css_CSSConstants.COLOR = 40;
	cocktail_core_css_CSSConstants.LINE_HEIGHT = 41;
	cocktail_core_css_CSSConstants.TEXT_TRANSFORM = 42;
	cocktail_core_css_CSSConstants.LETTER_SPACING = 43;
	cocktail_core_css_CSSConstants.WORD_SPACING = 44;
	cocktail_core_css_CSSConstants.WHITE_SPACE = 45;
	cocktail_core_css_CSSConstants.TEXT_ALIGN = 46;
	cocktail_core_css_CSSConstants.TEXT_INDENT = 47;
	cocktail_core_css_CSSConstants.VERTICAL_ALIGN = 48;
	cocktail_core_css_CSSConstants.VISIBILITY = 49;
	cocktail_core_css_CSSConstants.CSS_OVERFLOW = 50;
	cocktail_core_css_CSSConstants.OVERFLOW_X = 51;
	cocktail_core_css_CSSConstants.OVERFLOW_Y = 52;
	cocktail_core_css_CSSConstants.OPACITY = 53;
	cocktail_core_css_CSSConstants.CURSOR = 54;
	cocktail_core_css_CSSConstants.TRANSITION_DURATION = 55;
	cocktail_core_css_CSSConstants.TRANSITION_DELAY = 56;
	cocktail_core_css_CSSConstants.TRANSITION_PROPERTY = 57;
	cocktail_core_css_CSSConstants.TRANSITION_TIMING_FUNCTION = 58;
	cocktail_core_css_CSSConstants.TRANSITION = 59;
	cocktail_core_css_CSSConstants.TRANSFORM_ORIGIN = 60;
	cocktail_core_css_CSSConstants.TRANSFORM = 61;
	cocktail_core_css_CSSConstants.BORDER_TOP_WIDTH = 62;
	cocktail_core_css_CSSConstants.BORDER_RIGHT_WIDTH = 63;
	cocktail_core_css_CSSConstants.BORDER_BOTTOM_WIDTH = 64;
	cocktail_core_css_CSSConstants.BORDER_LEFT_WIDTH = 65;
	cocktail_core_css_CSSConstants.BORDER_WIDTH = 66;
	cocktail_core_css_CSSConstants.BORDER_TOP_COLOR = 67;
	cocktail_core_css_CSSConstants.BORDER_RIGHT_COLOR = 68;
	cocktail_core_css_CSSConstants.BORDER_BOTTOM_COLOR = 69;
	cocktail_core_css_CSSConstants.BORDER_LEFT_COLOR = 70;
	cocktail_core_css_CSSConstants.BORDER_COLOR = 71;
	cocktail_core_css_CSSConstants.BORDER_TOP_STYLE = 72;
	cocktail_core_css_CSSConstants.BORDER_RIGHT_STYLE = 73;
	cocktail_core_css_CSSConstants.BORDER_BOTTOM_STYLE = 74;
	cocktail_core_css_CSSConstants.BORDER_LEFT_STYLE = 75;
	cocktail_core_css_CSSConstants.BORDER_STYLE = 76;
	cocktail_core_css_CSSConstants.BORDER_TOP = 77;
	cocktail_core_css_CSSConstants.BORDER_RIGHT = 78;
	cocktail_core_css_CSSConstants.BORDER_BOTTOM = 79;
	cocktail_core_css_CSSConstants.BORDER_LEFT = 80;
	cocktail_core_css_CSSConstants.BORDER = 81;
	cocktail_core_css_CSSConstants.OUTLINE_WIDTH = 82;
	cocktail_core_css_CSSConstants.OUTLINE_STYLE = 83;
	cocktail_core_css_CSSConstants.OUTLINE_COLOR = 84;
	cocktail_core_css_CSSConstants.OUTLINE = 85;
	cocktail_core_css_CSSConstants.TEXT_DECORATION = 86;
	cocktail_core_css_CSSConstants.IMPORTANT = "important";
	cocktail_core_css_CSSConstants.AUTO = "auto";
	cocktail_core_css_CSSConstants.LEFT_IDENT = "left";
	cocktail_core_css_CSSConstants.TOP_IDENT = "top";
	cocktail_core_css_CSSConstants.RIGHT_IDENT = "right";
	cocktail_core_css_CSSConstants.BOTTOM_IDENT = "bottom";
	cocktail_core_css_CSSConstants.HEIGHT_IDL_NAME = "height";
	cocktail_core_css_CSSConstants.WIDTH_IDL_NAME = "width";
	cocktail_core_css_CSSConstants.MAX_WIDTH_IDL_NAME = "maxWidth";
	cocktail_core_css_CSSConstants.MIN_WIDTH_IDL_NAME = "minWidth";
	cocktail_core_css_CSSConstants.MAX_HEIGHT_IDL_NAME = "maxHeight";
	cocktail_core_css_CSSConstants.CSS_MIME_TYPE = "text/css";
	cocktail_core_css_CSSConstants.STYLESHEET_REL = "stylesheet";
	cocktail_core_css_CSSConstants.DISPLAY_NAME = "display";
	cocktail_core_css_CSSConstants.POSITION_NAME = "position";
	cocktail_core_css_CSSConstants.FLOAT_NAME = "float";
	cocktail_core_css_CSSConstants.CLEAR_NAME = "clear";
	cocktail_core_css_CSSConstants.Z_INDEX_NAME = "z-index";
	cocktail_core_css_CSSConstants.MARGIN_NAME = "margin";
	cocktail_core_css_CSSConstants.MARGIN_LEFT_NAME = "margin-left";
	cocktail_core_css_CSSConstants.MARGIN_RIGHT_NAME = "margin-right";
	cocktail_core_css_CSSConstants.MARGIN_TOP_NAME = "margin-top";
	cocktail_core_css_CSSConstants.MARGIN_BOTTOM_NAME = "margin-bottom";
	cocktail_core_css_CSSConstants.PADDING_NAME = "padding";
	cocktail_core_css_CSSConstants.PADDING_LEFT_NAME = "padding-left";
	cocktail_core_css_CSSConstants.PADDING_RIGHT_NAME = "padding-right";
	cocktail_core_css_CSSConstants.PADDING_TOP_NAME = "padding-top";
	cocktail_core_css_CSSConstants.PADDING_BOTTOM_NAME = "padding-bottom";
	cocktail_core_css_CSSConstants.WIDTH_NAME = "width";
	cocktail_core_css_CSSConstants.HEIGHT_NAME = "height";
	cocktail_core_css_CSSConstants.MIN_HEIGHT_NAME = "min-height";
	cocktail_core_css_CSSConstants.MAX_HEIGHT_NAME = "max-height";
	cocktail_core_css_CSSConstants.MIN_WIDTH_NAME = "min-width";
	cocktail_core_css_CSSConstants.MAX_WIDTH_NAME = "max-width";
	cocktail_core_css_CSSConstants.TOP_NAME = "top";
	cocktail_core_css_CSSConstants.LEFT_NAME = "left";
	cocktail_core_css_CSSConstants.RIGHT_NAME = "right";
	cocktail_core_css_CSSConstants.BOTTOM_NAME = "bottom";
	cocktail_core_css_CSSConstants.BACKGROUND_COLOR_NAME = "background-color";
	cocktail_core_css_CSSConstants.BACKGROUND_IMAGE_NAME = "background-image";
	cocktail_core_css_CSSConstants.BACKGROUND_REPEAT_NAME = "background-repeat";
	cocktail_core_css_CSSConstants.BACKGROUND_ORIGIN_NAME = "background-origin";
	cocktail_core_css_CSSConstants.BACKGROUND_SIZE_NAME = "background-size";
	cocktail_core_css_CSSConstants.BACKGROUND_POSITION_NAME = "background-position";
	cocktail_core_css_CSSConstants.BACKGROUND_CLIP_NAME = "background-clip";
	cocktail_core_css_CSSConstants.BACKGROUND_ATTACHMENT_NAME = "background-attachment";
	cocktail_core_css_CSSConstants.BACKGROUND_NAME = "background";
	cocktail_core_css_CSSConstants.FONT_SIZE_NAME = "font-size";
	cocktail_core_css_CSSConstants.FONT_WEIGHT_NAME = "font-weight";
	cocktail_core_css_CSSConstants.FONT_STYLE_NAME = "font-style";
	cocktail_core_css_CSSConstants.FONT_FAMILY_NAME = "font-family";
	cocktail_core_css_CSSConstants.FONT_VARIANT_NAME = "font-variant";
	cocktail_core_css_CSSConstants.FONT_NAME = "font";
	cocktail_core_css_CSSConstants.COLOR_NAME = "color";
	cocktail_core_css_CSSConstants.LINE_HEIGHT_NAME = "line-height";
	cocktail_core_css_CSSConstants.TEXT_TRANSFORM_NAME = "text-transform";
	cocktail_core_css_CSSConstants.LETTER_SPACING_NAME = "letter-spacing";
	cocktail_core_css_CSSConstants.WORD_SPACING_NAME = "word-spacing";
	cocktail_core_css_CSSConstants.WHITE_SPACE_NAME = "white-space";
	cocktail_core_css_CSSConstants.TEXT_ALIGN_NAME = "text-align";
	cocktail_core_css_CSSConstants.TEXT_INDENT_NAME = "text-indent";
	cocktail_core_css_CSSConstants.VERTICAL_ALIGN_NAME = "vertical-align";
	cocktail_core_css_CSSConstants.VISIBILITY_NAME = "visibility";
	cocktail_core_css_CSSConstants.CSS_OVERFLOW_NAME = "overflow";
	cocktail_core_css_CSSConstants.OVERFLOW_X_NAME = "overflow-x";
	cocktail_core_css_CSSConstants.OVERFLOW_Y_NAME = "overflow-y";
	cocktail_core_css_CSSConstants.OPACITY_NAME = "opacity";
	cocktail_core_css_CSSConstants.CURSOR_NAME = "cursor";
	cocktail_core_css_CSSConstants.TRANSITION_DURATION_NAME = "transition-duration";
	cocktail_core_css_CSSConstants.TRANSITION_DELAY_NAME = "transition-delay";
	cocktail_core_css_CSSConstants.TRANSITION_PROPERTY_NAME = "transition-property";
	cocktail_core_css_CSSConstants.TRANSITION_TIMING_FUNCTION_NAME = "transition-timing-function";
	cocktail_core_css_CSSConstants.TRANSITION_NAME = "transition";
	cocktail_core_css_CSSConstants.TRANSFORM_ORIGIN_NAME = "transform-origin";
	cocktail_core_css_CSSConstants.TRANSFORM_NAME = "transform";
	cocktail_core_css_CSSConstants.BORDER_TOP_WIDTH_NAME = "border-top-width";
	cocktail_core_css_CSSConstants.BORDER_RIGHT_WIDTH_NAME = "border-right-width";
	cocktail_core_css_CSSConstants.BORDER_BOTTOM_WIDTH_NAME = "border-bottom-width";
	cocktail_core_css_CSSConstants.BORDER_LEFT_WIDTH_NAME = "border-left-width";
	cocktail_core_css_CSSConstants.BORDER_WIDTH_NAME = "border-width";
	cocktail_core_css_CSSConstants.BORDER_TOP_COLOR_NAME = "border-top-color";
	cocktail_core_css_CSSConstants.BORDER_RIGHT_COLOR_NAME = "border-right-color";
	cocktail_core_css_CSSConstants.BORDER_BOTTOM_COLOR_NAME = "border-bottom-color";
	cocktail_core_css_CSSConstants.BORDER_LEFT_COLOR_NAME = "border-left-color";
	cocktail_core_css_CSSConstants.BORDER_COLOR_NAME = "border-color";
	cocktail_core_css_CSSConstants.BORDER_TOP_STYLE_NAME = "border-top-style";
	cocktail_core_css_CSSConstants.BORDER_RIGHT_STYLE_NAME = "border-right-style";
	cocktail_core_css_CSSConstants.BORDER_BOTTOM_STYLE_NAME = "border-bottom-style";
	cocktail_core_css_CSSConstants.BORDER_LEFT_STYLE_NAME = "border-left-style";
	cocktail_core_css_CSSConstants.BORDER_STYLE_NAME = "border-style";
	cocktail_core_css_CSSConstants.BORDER_TOP_NAME = "border-top";
	cocktail_core_css_CSSConstants.BORDER_RIGHT_NAME = "border-right";
	cocktail_core_css_CSSConstants.BORDER_BOTTOM_NAME = "border-bottom";
	cocktail_core_css_CSSConstants.BORDER_LEFT_NAME = "border-left";
	cocktail_core_css_CSSConstants.BORDER_NAME = "border";
	cocktail_core_css_CSSConstants.OUTLINE_WIDTH_NAME = "outline-width";
	cocktail_core_css_CSSConstants.OUTLINE_STYLE_NAME = "outline-style";
	cocktail_core_css_CSSConstants.OUTLINE_COLOR_NAME = "outline-color";
	cocktail_core_css_CSSConstants.OUTLINE_NAME = "outline";
	cocktail_core_css_CSSConstants.TEXT_DECORATION_NAME = "text-decoration";
	cocktail_core_css_CSSRule.STYLE_RULE = 1;
	cocktail_core_css_CSSRule.IMPORT_RULE = 3;
	cocktail_core_css_CSSRule.MEDIA_RULE = 4;
	cocktail_core_css_CSSRule.FONT_FACE_RULE = 5;
	cocktail_core_css_parsers_CSSStyleParser._position = 0;
	cocktail_core_dom_DOMConstants.ELEMENT_NODE = 1;
	cocktail_core_dom_DOMConstants.ATTRIBUTE_NODE = 2;
	cocktail_core_dom_DOMConstants.TEXT_NODE = 3;
	cocktail_core_dom_DOMConstants.CDATA_SECTION_NODE = 4;
	cocktail_core_dom_DOMConstants.ENTITY_REFERENCE_NODE = 5;
	cocktail_core_dom_DOMConstants.ENTITY_NODE = 6;
	cocktail_core_dom_DOMConstants.PROCESSING_INSTRUCTION_NODE = 7;
	cocktail_core_dom_DOMConstants.COMMENT_NODE = 8;
	cocktail_core_dom_DOMConstants.DOCUMENT_NODE = 9;
	cocktail_core_dom_DOMConstants.DOCUMENT_TYPE_NODE = 10;
	cocktail_core_dom_DOMConstants.DOCUMENT_FRAGMENT_NODE = 11;
	cocktail_core_dom_DOMConstants.NOTATION_NODE = 11;
	cocktail_core_dom_DOMConstants.EVENT_INTERFACE = "Event";
	cocktail_core_dom_DOMConstants.UI_EVENT_INTERFACE = "UIEvent";
	cocktail_core_dom_DOMConstants.MOUSE_EVENT_INTERFACE = "MouseEvent";
	cocktail_core_dom_DOMConstants.FOCUS_EVENT_INTERFACE = "FocusEvent";
	cocktail_core_dom_DOMConstants.KEYBOARD_EVENT_INTERFACE = "KeyboardEvent";
	cocktail_core_dom_DOMConstants.WHEEL_EVENT_INTERFACE = "WheelEvent";
	cocktail_core_dom_DOMConstants.CUSTOM_EVENT_INTERFACE = "CustomEvent";
	cocktail_core_dom_DOMConstants.TRANSITION_EVENT_INTERFACE = "TransitionEvent";
	cocktail_core_dom_DOMConstants.POPSTATE_EVENT_INTERFACE = "PopStateEvent";
	cocktail_core_dom_DOMConstants.MATCH_ALL_TAG_NAME = "*";
	cocktail_core_dom_DOMConstants.TEXT_NODE_NAME = "#text";
	cocktail_core_dom_DOMException.INDEX_SIZE_ERR = 1;
	cocktail_core_dom_DOMException.DOMSTRING_SIZE_ERR = 2;
	cocktail_core_dom_DOMException.HIERARCHY_REQUEST_ERR = 3;
	cocktail_core_dom_DOMException.WRONG_DOCUMENT_ERR = 4;
	cocktail_core_dom_DOMException.INVALID_CHARACTER_ERR = 5;
	cocktail_core_dom_DOMException.NO_DATA_ALLOWED_ERR = 6;
	cocktail_core_dom_DOMException.NO_MODIFICATION_ALLOWED_ERR = 7;
	cocktail_core_dom_DOMException.NOT_FOUND_ERR = 8;
	cocktail_core_dom_DOMException.NOT_SUPPORTED_ERR = 9;
	cocktail_core_dom_DOMException.INUSE_ATTRIBUTE_ERR = 10;
	cocktail_core_dom_DOMException.INVALID_STATE_ERR = 11;
	cocktail_core_dom_DOMException.SYNTAX_ERR = 12;
	cocktail_core_dom_DOMException.INVALID_MODIFICATION_ERR = 13;
	cocktail_core_dom_DOMException.NAMESPACE_ERR = 14;
	cocktail_core_dom_DOMException.INVALID_ACCESS_ERR = 15;
	cocktail_core_dom_DOMException.VALIDATION_ERR = 16;
	cocktail_core_dom_DOMException.SECURITY_ERR = 18;
	cocktail_core_dom_DOMException.TYPE_MISMATCH_ERR = 19;
	cocktail_core_event_Event.CAPTURING_PHASE = 1;
	cocktail_core_event_Event.AT_TARGET = 2;
	cocktail_core_event_Event.BUBBLING_PHASE = 3;
	cocktail_core_event_EventConstants.PLAY = "play";
	cocktail_core_event_EventConstants.PLAYING = "playing";
	cocktail_core_event_EventConstants.PAUSE = "pause";
	cocktail_core_event_EventConstants.ABORT = "abort";
	cocktail_core_event_EventConstants.LOAD_START = "loadstart";
	cocktail_core_event_EventConstants.WAITING = "waiting";
	cocktail_core_event_EventConstants.TIME_UPDATE = "timeupdate";
	cocktail_core_event_EventConstants.ENDED = "ended";
	cocktail_core_event_EventConstants.LOADED_DATA = "loadeddata";
	cocktail_core_event_EventConstants.SEEKING = "seeking";
	cocktail_core_event_EventConstants.SEEKED = "seeked";
	cocktail_core_event_EventConstants.PROGRESS = "progress";
	cocktail_core_event_EventConstants.CAN_PLAY = "canplay";
	cocktail_core_event_EventConstants.EMPTIED = "emptied";
	cocktail_core_event_EventConstants.LOADED_METADATA = "loadedmetadata";
	cocktail_core_event_EventConstants.DURATION_CHANGE = "durationchange";
	cocktail_core_event_EventConstants.VOLUME_CHANGE = "volumechange";
	cocktail_core_event_EventConstants.SUSPEND = "suspend";
	cocktail_core_event_EventConstants.STALLED = "stalled";
	cocktail_core_event_EventConstants.CAN_PLAY_THROUGH = "canplaythrough";
	cocktail_core_event_EventConstants.READY_STATE_CHANGE = "readystatechange";
	cocktail_core_event_EventConstants.TIME_OUT = "timeout";
	cocktail_core_event_EventConstants.LOAD_END = "loadend";
	cocktail_core_event_EventConstants.FULL_SCREEN_CHANGE = "fullscreenchange";
	cocktail_core_event_EventConstants.FOCUS = "focus";
	cocktail_core_event_EventConstants.BLUR = "blur";
	cocktail_core_event_EventConstants.FOCUS_IN = "focusin";
	cocktail_core_event_EventConstants.FOCUS_OUT = "focusout";
	cocktail_core_event_EventConstants.KEY_DOWN = "keydown";
	cocktail_core_event_EventConstants.KEY_UP = "keyup";
	cocktail_core_event_EventConstants.CLICK = "click";
	cocktail_core_event_EventConstants.DOUBLE_CLICK = "dblclick";
	cocktail_core_event_EventConstants.MOUSE_UP = "mouseup";
	cocktail_core_event_EventConstants.MOUSE_DOWN = "mousedown";
	cocktail_core_event_EventConstants.MOUSE_OVER = "mouseover";
	cocktail_core_event_EventConstants.MOUSE_OUT = "mouseout";
	cocktail_core_event_EventConstants.MOUSE_MOVE = "mousemove";
	cocktail_core_event_EventConstants.MOUSE_LEAVE = "mouseleave";
	cocktail_core_event_EventConstants.TOUCH_START = "touchstart";
	cocktail_core_event_EventConstants.TOUCH_END = "touchend";
	cocktail_core_event_EventConstants.TOUCH_MOVE = "touchmove";
	cocktail_core_event_EventConstants.TOUCH_CANCEL = "touchcancel";
	cocktail_core_event_EventConstants.TRANSITION_END = "transitionend";
	cocktail_core_event_EventConstants.SCROLL = "scroll";
	cocktail_core_event_EventConstants.RESIZE = "resize";
	cocktail_core_event_EventConstants.LOAD = "load";
	cocktail_core_event_EventConstants.ERROR = "error";
	cocktail_core_event_EventConstants.CHANGE = "change";
	cocktail_core_event_EventConstants.INPUT = "input";
	cocktail_core_event_EventConstants.RESET = "reset";
	cocktail_core_event_EventConstants.SUBMIT = "submit";
	cocktail_core_event_EventConstants.MOUSE_WHEEL = "wheel";
	cocktail_core_event_EventConstants.POP_STATE = "popstate";
	cocktail_core_event_EventConstants.CONFIG_CHANGED = "configchanged";
	cocktail_core_event_KeyboardEvent.DOM_KEY_LOCATION_STANDARD = 0;
	cocktail_core_event_KeyboardEvent.DOM_KEY_LOCATION_LEFT = 1;
	cocktail_core_event_KeyboardEvent.DOM_KEY_LOCATION_RIGHT = 2;
	cocktail_core_event_KeyboardEvent.DOM_KEY_LOCATION_NUMPAD = 3;
	cocktail_core_event_KeyboardEvent.DOM_KEY_LOCATION_MOBILE = 4;
	cocktail_core_event_KeyboardEvent.DOM_KEY_LOCATION_JOYSTICK = 5;
	cocktail_core_event_KeyboardEvent.CONTROL_KEY = "Control";
	cocktail_core_event_KeyboardEvent.SHIFT_KEY = "Shift";
	cocktail_core_event_KeyboardEvent.ALT_KEY = "Alt";
	cocktail_core_event_KeyboardEvent.META_KEY = "Meta";
	cocktail_core_event_WheelEvent.DOM_DELTA_PIXEL = 0;
	cocktail_core_event_WheelEvent.DOM_DELTA_LINE = 1;
	cocktail_core_event_WheelEvent.DOM_DELTA_PAGE = 2;
	cocktail_core_graphics_BackgroundDrawer._box = new cocktail_core_geom_RectangleVO();
	cocktail_core_graphics_BackgroundDrawer._destinationPoint = new cocktail_core_geom_PointVO(0.0, 0.0);
	cocktail_core_graphics_BackgroundDrawer._intersectionBounds = new cocktail_core_geom_RectangleVO();
	cocktail_core_graphics_BorderDrawer._currentBorderBox = new cocktail_core_geom_RectangleVO();
	cocktail_core_graphics_TextDrawer._destPoint = new cocktail_core_geom_PointVO(0, 0);
	cocktail_core_graphics_TextDrawer._renderRect = new cocktail_core_geom_RectangleVO();
	cocktail_core_graphics_TextDrawer._decorationRect = new cocktail_core_geom_RectangleVO();
	cocktail_core_graphics_TextDrawer.TEXT_DECORATION_THICKNESS = 1.0;
	cocktail_core_html_HTMLMediaElement.RESOURCE_SELECTION_ATTRIBUTE_MODE = 0;
	cocktail_core_html_HTMLMediaElement.RESOURCE_SELECTION_CHILDREN_MODE = 1;
	cocktail_core_html_HTMLMediaElement.TIME_UPDATE_FREQUENCY = 250;
	cocktail_core_html_HTMLMediaElement.PROGRESS_FREQUENCY = 350;
	cocktail_core_html_HTMLMediaElement.PLAYBACK_END_DELTA = 0.2;
	cocktail_core_html_HTMLMediaElement.NETWORK_EMPTY = 0;
	cocktail_core_html_HTMLMediaElement.NETWORK_IDLE = 1;
	cocktail_core_html_HTMLMediaElement.NETWORK_LOADING = 2;
	cocktail_core_html_HTMLMediaElement.NETWORK_NO_SOURCE = 3;
	cocktail_core_html_HTMLMediaElement.CAN_PLAY_TYPE_MAYBE = "maybe";
	cocktail_core_html_HTMLMediaElement.CAN_PLAY_TYPE_PROBABLY = "probably";
	cocktail_core_html_HTMLMediaElement.HAVE_NOTHING = 0;
	cocktail_core_html_HTMLMediaElement.HAVE_METADATA = 1;
	cocktail_core_html_HTMLMediaElement.HAVE_CURRENT_DATA = 2;
	cocktail_core_html_HTMLMediaElement.HAVE_FUTURE_DATA = 3;
	cocktail_core_html_HTMLMediaElement.HAVE_ENOUGH_DATA = 4;
	cocktail_core_html_HTMLConstants.HTML_BODY_TAG_NAME = "BODY";
	cocktail_core_html_HTMLConstants.HTML_ANCHOR_TAG_NAME = "A";
	cocktail_core_html_HTMLConstants.HTML_IMAGE_TAG_NAME = "IMG";
	cocktail_core_html_HTMLConstants.HTML_INPUT_TAG_NAME = "INPUT";
	cocktail_core_html_HTMLConstants.HTML_HTML_TAG_NAME = "HTML";
	cocktail_core_html_HTMLConstants.HTML_VIDEO_TAG_NAME = "VIDEO";
	cocktail_core_html_HTMLConstants.HTML_AUDIO_TAG_NAME = "AUDIO";
	cocktail_core_html_HTMLConstants.HTML_SOURCE_TAG_NAME = "SOURCE";
	cocktail_core_html_HTMLConstants.HTML_DIV_TAG_NAME = "DIV";
	cocktail_core_html_HTMLConstants.HTML_OBJECT_TAG_NAME = "OBJECT";
	cocktail_core_html_HTMLConstants.HTML_PARAM_TAG_NAME = "PARAM";
	cocktail_core_html_HTMLConstants.HTML_ADRESS_TAG_NAME = "ADRESS";
	cocktail_core_html_HTMLConstants.HTML_DD_TAG_NAME = "DD";
	cocktail_core_html_HTMLConstants.HTML_DL_TAG_NAME = "DL";
	cocktail_core_html_HTMLConstants.HTML_DT_TAG_NAME = "DT";
	cocktail_core_html_HTMLConstants.HTML_FIELDSET_TAG_NAME = "FIELDSET";
	cocktail_core_html_HTMLConstants.HTML_FORM_TAG_NAME = "FORM";
	cocktail_core_html_HTMLConstants.HTML_FRAME_TAG_NAME = "FRAME";
	cocktail_core_html_HTMLConstants.HTML_FRAMESET_TAG_NAME = "FRAMESET";
	cocktail_core_html_HTMLConstants.HTML_NOFRAMES_TAG_NAME = "NOFRAMES";
	cocktail_core_html_HTMLConstants.HTML_OL_TAG_NAME = "OL";
	cocktail_core_html_HTMLConstants.HTML_CENTER_TAG_NAME = "CENTER";
	cocktail_core_html_HTMLConstants.HTML_DIR_TAG_NAME = "DIR";
	cocktail_core_html_HTMLConstants.HTML_HR_TAG_NAME = "HR";
	cocktail_core_html_HTMLConstants.HTML_MENU_TAG_NAME = "MENU";
	cocktail_core_html_HTMLConstants.HTML_LI_TAG_NAME = "LI";
	cocktail_core_html_HTMLConstants.HTML_UL_TAG_NAME = "UL";
	cocktail_core_html_HTMLConstants.HTML_HEAD_TAG_NAME = "HEAD";
	cocktail_core_html_HTMLConstants.HTML_H1_TAG_NAME = "H1";
	cocktail_core_html_HTMLConstants.HTML_H2_TAG_NAME = "H2";
	cocktail_core_html_HTMLConstants.HTML_H3_TAG_NAME = "H3";
	cocktail_core_html_HTMLConstants.HTML_H4_TAG_NAME = "H4";
	cocktail_core_html_HTMLConstants.HTML_H5_TAG_NAME = "H5";
	cocktail_core_html_HTMLConstants.HTML_H6_TAG_NAME = "H6";
	cocktail_core_html_HTMLConstants.HTML_P_TAG_NAME = "P";
	cocktail_core_html_HTMLConstants.HTML_PRE_TAG_NAME = "PRE";
	cocktail_core_html_HTMLConstants.HTML_CODE_TAG_NAME = "CODE";
	cocktail_core_html_HTMLConstants.HTML_I_TAG_NAME = "I";
	cocktail_core_html_HTMLConstants.HTML_CITE_TAG_NAME = "CITE";
	cocktail_core_html_HTMLConstants.HTML_EM_TAG_NAME = "EM";
	cocktail_core_html_HTMLConstants.HTML_VAR_TAG_NAME = "VAR";
	cocktail_core_html_HTMLConstants.HTML_BLOCKQUOTE_TAG_NAME = "BLOCKQUOTE";
	cocktail_core_html_HTMLConstants.HTML_STRONG_TAG_NAME = "STRONG";
	cocktail_core_html_HTMLConstants.HTML_BIG_TAG_NAME = "BIG";
	cocktail_core_html_HTMLConstants.HTML_SMALL_TAG_NAME = "SMALL";
	cocktail_core_html_HTMLConstants.HTML_SUB_TAG_NAME = "SUB";
	cocktail_core_html_HTMLConstants.HTML_SUP_TAG_NAME = "SUP";
	cocktail_core_html_HTMLConstants.HTML_LINK_TAG_NAME = "LINK";
	cocktail_core_html_HTMLConstants.HTML_STYLE_TAG_NAME = "STYLE";
	cocktail_core_html_HTMLConstants.HTML_BR_TAG_NAME = "BR";
	cocktail_core_html_HTMLConstants.HTML_META_TAG_NAME = "META";
	cocktail_core_html_HTMLConstants.HTML_BUTTON_TAG_NAME = "BUTTON";
	cocktail_core_html_HTMLConstants.HTML_SELECT_TAG_NAME = "SELECT";
	cocktail_core_html_HTMLConstants.HTML_TEXT_AREA_TAG_NAME = "TEXTAREA";
	cocktail_core_html_HTMLConstants.HTML_TITLE_TAG_NAME = "TITLE";
	cocktail_core_html_HTMLConstants.HTML_ID_ATTRIBUTE_NAME = "id";
	cocktail_core_html_HTMLConstants.HTML_CLASS_ATTRIBUTE_NAME = "class";
	cocktail_core_html_HTMLConstants.HTML_HIDDEN_ATTRIBUTE_NAME = "hidden";
	cocktail_core_html_HTMLConstants.HTML_TAB_INDEX_ATTRIBUTE_NAME = "tabindex";
	cocktail_core_html_HTMLConstants.HTML_STYLE_ATTRIBUTE_NAME = "style";
	cocktail_core_html_HTMLConstants.HTML_SRC_ATTRIBUTE_NAME = "src";
	cocktail_core_html_HTMLConstants.HTML_VALUE_ATTRIBUTE_NAME = "value";
	cocktail_core_html_HTMLConstants.HTML_AUTOPLAY_ATTRIBUTE_NAME = "autoplay";
	cocktail_core_html_HTMLConstants.HTML_LOOP_ATTRIBUTE_NAME = "loop";
	cocktail_core_html_HTMLConstants.HTML_TYPE_ATTRIBUTE_NAME = "type";
	cocktail_core_html_HTMLConstants.HTML_MEDIA_ATTRIBUTE_NAME = "media";
	cocktail_core_html_HTMLConstants.HTML_HREF_ATTRIBUTE_NAME = "href";
	cocktail_core_html_HTMLConstants.HTML_TARGET_ATTRIBUTE_NAME = "target";
	cocktail_core_html_HTMLConstants.HTML_DATA_ATTRIBUTE_NAME = "data";
	cocktail_core_html_HTMLConstants.HTML_HEIGHT_ATTRIBUTE_NAME = "height";
	cocktail_core_html_HTMLConstants.HTML_WIDTH_ATTRIBUTE_NAME = "width";
	cocktail_core_html_HTMLConstants.HTML_POSTER_ATTRIBUTE_NAME = "poster";
	cocktail_core_html_HTMLConstants.HTML_NAME_ATTRIBUTE_NAME = "name";
	cocktail_core_html_HTMLConstants.HTML_REL_ATTRIBUTE_NAME = "rel";
	cocktail_core_html_HTMLConstants.HTML_HREFLANG_ATTRIBUTE_NAME = "hreflang";
	cocktail_core_html_HTMLConstants.HTML_DISABLED_ATTRIBUTE_NAME = "disabled";
	cocktail_core_html_HTMLConstants.HTML_CHECKED_ATTRIBUTE_NAME = "checked";
	cocktail_core_html_HTMLConstants.HTML_READ_ONLY_ATTRIBUTE_NAME = "readonly";
	cocktail_core_html_HTMLConstants.HTML_MAXLENGTH_ATTRIBUTE_NAME = "maxlength";
	cocktail_core_html_HTMLConstants.HTML_CONTENT_ATTRIBUTE_NAME = "content";
	cocktail_core_html_HTMLConstants.HTML_ACTION_ATTRIBUTE_NAME = "action";
	cocktail_core_html_HTMLConstants.HTML_ENCTYPE_ATTRIBUTE_NAME = "enctype";
	cocktail_core_html_HTMLConstants.HTML_METHOD_ATTRIBUTE_NAME = "method";
	cocktail_core_html_HTMLConstants.HTML_PRELOAD_ATTRIBUTE_NAME = "preload";
	cocktail_core_html_HTMLConstants.PRELOAD_AUTO = "auto";
	cocktail_core_html_HTMLConstants.PRELOAD_NONE = "none";
	cocktail_core_html_HTMLConstants.PRELOAD_METADATA = "metadata";
	cocktail_core_html_HTMLConstants.TARGET_BLANK = "_blank";
	cocktail_core_html_HTMLConstants.TARGET_SELF = "_self";
	cocktail_core_html_HTMLConstants.TARGET_PARENT = "_parent";
	cocktail_core_html_HTMLConstants.TARGET_TOP = "_top";
	cocktail_core_html_HTMLConstants.INPUT_TEXT_AREA = "textarea";
	cocktail_core_html_HTMLConstants.INPUT_TYPE_HIDDEN = "hidden";
	cocktail_core_html_HTMLConstants.INPUT_TYPE_TEXT = "text";
	cocktail_core_html_HTMLConstants.INPUT_TYPE_PASSWORD = "password";
	cocktail_core_html_HTMLConstants.INPUT_TYPE_CHECKBOX = "checkbox";
	cocktail_core_html_HTMLConstants.INPUT_TYPE_RADIO = "radio";
	cocktail_core_html_HTMLConstants.INPUT_TYPE_SUBMIT = "submit";
	cocktail_core_html_HTMLConstants.INPUT_TYPE_RESET = "reset";
	cocktail_core_html_HTMLConstants.INPUT_TYPE_BUTTON = "button";
	cocktail_core_html_HTMLConstants.INPUT_TYPE_FILE = "file";
	cocktail_core_html_HTMLConstants.INPUT_TYPE_IMAGE = "image";
	cocktail_core_html_HTMLConstants.INPUT_RESET_LABEL = "Reset";
	cocktail_core_html_HTMLConstants.INPUT_SUBMIT_LABEL = "Submit";
	cocktail_core_html_HTMLConstants.RADIO_OR_CHECKBOX_ON = "on";
	cocktail_core_html_HTMLConstants.HTML_TOKEN_LESS_THAN = "<";
	cocktail_core_html_HTMLConstants.HTML_TOKEN_MORE_THAN = ">";
	cocktail_core_html_HTMLConstants.HTML_TOKEN_SOLIDUS = "/";
	cocktail_core_html_HTMLDocument.MOUSE_WHEEL_DELTA_MULTIPLIER = 10;
	cocktail_core_html_HTMLObjectElement.HTML_OBJECT_INTRISIC_WIDTH = 300;
	cocktail_core_html_HTMLObjectElement.HTML_OBJECT_INTRINSIC_HEIGHT = 150;
	cocktail_core_html_HTMLObjectElement.SWF_FILE_EXTENSION = ".swf";
	cocktail_core_html_HTMLObjectElement.SWF_FILE_MIME_TYPE = "application/x-shockwave-flash";
	cocktail_core_html_HTMLVideoElement.HTML_VIDEO_DEFAULT_WIDTH = 300;
	cocktail_core_html_HTMLVideoElement.HTML_VIDEO_DEFAULT_HEIGHT = 150;
	cocktail_core_http_HTTPConstants.UNSENT = 0;
	cocktail_core_http_HTTPConstants.OPENED = 1;
	cocktail_core_http_HTTPConstants.HEADERS_RECEIVED = 2;
	cocktail_core_http_HTTPConstants.LOADING = 3;
	cocktail_core_http_HTTPConstants.DONE = 4;
	cocktail_core_http_HTTPConstants.CONNECT = "CONNECT";
	cocktail_core_http_HTTPConstants.DELETE = "DELETE";
	cocktail_core_http_HTTPConstants.GET = "GET";
	cocktail_core_http_HTTPConstants.HEAD = "HEAD";
	cocktail_core_http_HTTPConstants.OPTIONS = "OPTIONS";
	cocktail_core_http_HTTPConstants.POST = "POST";
	cocktail_core_http_HTTPConstants.PUT = "PUT";
	cocktail_core_http_HTTPConstants.TRACE = "TRACE";
	cocktail_core_http_HTTPConstants.TRACK = "TRACK";
	cocktail_core_http_HTTPConstants.URL_ENCODING = "application/x-www-form-urlencoded";
	cocktail_core_http_HTTPConstants.FORM_DATA = "multipart/form-data";
	cocktail_core_http_HTTPConstants.PLAIN_TEXT = "text/plain";
	cocktail_core_http_HTTPConstants.HTTP = "http";
	cocktail_core_http_HTTPConstants.HTTPS = "https";
	cocktail_core_http_HTTPConstants.TYPE_TEXT = "text";
	cocktail_core_http_HTTPConstants.TYPE_ARRAY_BUFFER = "arraybuffer";
	cocktail_core_http_HTTPConstants.TYPE_BLOB = "blob";
	cocktail_core_http_HTTPConstants.TYPE_DOCUMENT = "document";
	cocktail_core_http_HTTPConstants.TYPE_JSON = "json";
	cocktail_core_http_HTTPConstants.ACCEPT_CHARSET = "accept-charset";
	cocktail_core_http_HTTPConstants.ACCEPT_ENCODING = "accept-encoding";
	cocktail_core_http_HTTPConstants.ACCESS_CONTROL_REQUEST_HEADERS = "access-control-request-headers";
	cocktail_core_http_HTTPConstants.ACCESS_CONTROL_REQUEST_METHOD = "access-control-request-method";
	cocktail_core_http_HTTPConstants.CONNECTION = "connection";
	cocktail_core_http_HTTPConstants.CONTENT_LENGTH = "content-length";
	cocktail_core_http_HTTPConstants.COOKIE = "cookie";
	cocktail_core_http_HTTPConstants.COOKIE_2 = "cookie2";
	cocktail_core_http_HTTPConstants.CONTENT_TRANSFER_ENCODING = "content-transfer-encoding";
	cocktail_core_http_HTTPConstants.DATE = "date";
	cocktail_core_http_HTTPConstants.EXPECT = "expect";
	cocktail_core_http_HTTPConstants.HOST = "host";
	cocktail_core_http_HTTPConstants.KEEP_ALIVE = "keep-alive";
	cocktail_core_http_HTTPConstants.ORIGIN = "origin";
	cocktail_core_http_HTTPConstants.REFERER = "referer";
	cocktail_core_http_HTTPConstants.TE = "te";
	cocktail_core_http_HTTPConstants.TRAILER = "trailer";
	cocktail_core_http_HTTPConstants.TRANSFER_ENCODING = "transfer-encoding";
	cocktail_core_http_HTTPConstants.UPGRADE = "upgrade";
	cocktail_core_http_HTTPConstants.USER_AGENT = "user-agent";
	cocktail_core_http_HTTPConstants.VIA = "via";
	cocktail_core_http_HTTPConstants.PROXY = "proxy-";
	cocktail_core_http_HTTPConstants.SEC = "sec-";
	cocktail_core_http_XMLHTTPRequest.PROGRESS_UPDATE_FREQUENCY = 50;
	cocktail_core_linebox_LineBox._childBounds = new cocktail_core_geom_RectangleVO();
	cocktail_core_linebox_LineBox._inlineBoxesBounds = new cocktail_core_geom_RectangleVO();
	cocktail_core_linebox_TextInlineBox._bitmapBounds = new cocktail_core_geom_RectangleVO();
	cocktail_core_parser_PlainTextParser.COPY = 0;
	cocktail_core_parser_PlainTextParser.BUFFER = 1;
	cocktail_core_parser_PlainTextParser.AFTER_LINE_FEED = 2;
	cocktail_core_parser_PlainTextParser.CONCATENATE = 3;
	cocktail_core_parser_PlainTextParser.CAPITALIZE_STATE = 4;
	cocktail_core_renderer_BoxRenderer._intersectBounds = new cocktail_core_geom_RectangleVO();
	cocktail_core_renderer_TextRenderer._intersectBounds = new cocktail_core_geom_RectangleVO();
	cocktail_core_url_URL._parts = ["source", "scheme", "authority", "userInfo", "user", "password", "host", "port", "relative", "path", "directory", "file", "query", "fragment"];
	cocktail_plugin_swf_SWFPlugin.NO_SCALE = "noscale";
	cocktail_plugin_swf_SWFPlugin.SHOW_ALL = "showall";
	cocktail_plugin_swf_SWFPlugin.EXACT_FIT = "exactfit";
	cocktail_plugin_swf_SWFPlugin.SCALE_MODE = "scale";
	cocktail_plugin_swf_SWFPlugin.DATA_ATTRIBUTE = "data";
	cocktail_plugin_swf_SWFPlugin.FLASHVARS_ATTRIBUTE = "flashvars";
	cocktail_plugin_swf_SWFPlugin.WMODE_ATTRIBUTE = "wmode";
	cocktail_plugin_swf_SWFPlugin.WMODE_TRANSPARENT = "transparent";
	cocktail_port_base_NativeHttpBase.PROGRESS_UPDATE_FREQUENCY = 50;
	cocktail_port_base_NativeTextInputBase.INPUT_TEXT_INTRINSIC_WIDTH = 150;
	cocktail_port_base_NativeTextInputBase.INPUT_TEXT_INTRINSIC_HEIGHT = 30;
	cocktail_port_platform_flash_$player_FontBuilder.SERIF_CSS_FONT_NAME = "SERIF";
	cocktail_port_platform_flash_$player_FontBuilder.SERIF_FLASH_FONT_NAME = "_serif";
	cocktail_port_platform_flash_$player_FontBuilder.SANS_SERIF_CSS_FONT_NAME = "SANS-SERIF";
	cocktail_port_platform_flash_$player_FontBuilder.SANS_SERIF_FLASH_FONT_NAME = "_sans";
	cocktail_port_platform_flash_$player_FontBuilder.MONOSPACE_CSS_FONT_NAME = "MONOSPACE";
	cocktail_port_platform_flash_$player_FontBuilder.MONOSPACE_FLASH_FONT_NAME = "_typewriter";
	cocktail_port_platform_flash_$player_NativeAudio.MP3_EXTENSION = "mp3";
	cocktail_port_platform_flash_$player_NativeTextInput.SERIF_GENERIC_FONT_NAME = "serif";
	cocktail_port_platform_flash_$player_NativeTextInput.SERIF_FLASH_FONT_NAME = "_serif";
	cocktail_port_platform_flash_$player_NativeTextInput.SANS_SERIF_GENERIC_FONT_NAME = "sans-serif";
	cocktail_port_platform_flash_$player_NativeTextInput.SANS_SERIF_FLASH_FONT_NAME = "_sans";
	cocktail_port_platform_flash_$player_NativeTextInput.MONOSPACE_GENERIC_FONT_NAME = "typewriter";
	cocktail_port_platform_flash_$player_NativeTextInput.MONOSPACE_FLASH_FONT_NAME = "_typewriter";
	openfl_geom_Matrix.__temp = new openfl_geom_Matrix();
	openfl_geom_Matrix.__identity = new openfl_geom_Matrix();
	cocktail_port_platform_flash_$player_NativeText._matrix = new openfl_geom_Matrix();
	cocktail_port_platform_flash_$player_Platform.ALLOW_FULLSCREEN_ATTRIBUTE = "allowsFullScreen";
	haxe_Serializer.USE_CACHE = false;
	haxe_Serializer.USE_ENUM_INDEX = false;
	haxe_Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
	haxe_Unserializer.DEFAULT_RESOLVER = Type;
	haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
	haxe_Unserializer.CODES = null;
	haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
	haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
	haxe_ds_ObjectMap.count = 0;
	haxe_io_FPHelper.i64tmp = (function ($this) {
		var $r;
		var x = new haxe__$Int64__$_$_$Int64(0, 0);
		$r = x;
		return $r;
	}(this));
	haxe_xml_Parser.escapes = (function ($this) {
		var $r;
		var h = new haxe_ds_StringMap();
		if (__map_reserved.lt != null) h.setReserved("lt", "<"); else h.h["lt"] = "<";
		if (__map_reserved.gt != null) h.setReserved("gt", ">"); else h.h["gt"] = ">";
		if (__map_reserved.amp != null) h.setReserved("amp", "&"); else h.h["amp"] = "&";
		if (__map_reserved.quot != null) h.setReserved("quot", "\""); else h.h["quot"] = "\"";
		if (__map_reserved.apos != null) h.setReserved("apos", "'"); else h.h["apos"] = "'";
		$r = h;
		return $r;
	}(this));
	js_Boot.__toStr = {}.toString;
	js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
	lime_Assets.cache = new lime_AssetCache();
	lime_Assets.libraries = new haxe_ds_StringMap();
	lime_Assets.onChange = new lime_app_Event_$Void_$Void();
	lime_Assets.initialized = false;
	lime__$backend_html5_HTML5Window.windowID = 0;
	lime_app_Preloader.images = new haxe_ds_StringMap();
	lime_app_Preloader.loaders = new haxe_ds_StringMap();
	lime_audio_openal_AL.NONE = 0;
	lime_audio_openal_AL.FALSE = 0;
	lime_audio_openal_AL.TRUE = 1;
	lime_audio_openal_AL.SOURCE_RELATIVE = 514;
	lime_audio_openal_AL.CONE_INNER_ANGLE = 4097;
	lime_audio_openal_AL.CONE_OUTER_ANGLE = 4098;
	lime_audio_openal_AL.PITCH = 4099;
	lime_audio_openal_AL.POSITION = 4100;
	lime_audio_openal_AL.DIRECTION = 4101;
	lime_audio_openal_AL.VELOCITY = 4102;
	lime_audio_openal_AL.LOOPING = 4103;
	lime_audio_openal_AL.BUFFER = 4105;
	lime_audio_openal_AL.GAIN = 4106;
	lime_audio_openal_AL.MIN_GAIN = 4109;
	lime_audio_openal_AL.MAX_GAIN = 4110;
	lime_audio_openal_AL.ORIENTATION = 4111;
	lime_audio_openal_AL.SOURCE_STATE = 4112;
	lime_audio_openal_AL.INITIAL = 4113;
	lime_audio_openal_AL.PLAYING = 4114;
	lime_audio_openal_AL.PAUSED = 4115;
	lime_audio_openal_AL.STOPPED = 4116;
	lime_audio_openal_AL.BUFFERS_QUEUED = 4117;
	lime_audio_openal_AL.BUFFERS_PROCESSED = 4118;
	lime_audio_openal_AL.REFERENCE_DISTANCE = 4128;
	lime_audio_openal_AL.ROLLOFF_FACTOR = 4129;
	lime_audio_openal_AL.CONE_OUTER_GAIN = 4130;
	lime_audio_openal_AL.MAX_DISTANCE = 4131;
	lime_audio_openal_AL.SEC_OFFSET = 4132;
	lime_audio_openal_AL.SAMPLE_OFFSET = 4133;
	lime_audio_openal_AL.BYTE_OFFSET = 4134;
	lime_audio_openal_AL.SOURCE_TYPE = 4135;
	lime_audio_openal_AL.STATIC = 4136;
	lime_audio_openal_AL.STREAMING = 4137;
	lime_audio_openal_AL.UNDETERMINED = 4144;
	lime_audio_openal_AL.FORMAT_MONO8 = 4352;
	lime_audio_openal_AL.FORMAT_MONO16 = 4353;
	lime_audio_openal_AL.FORMAT_STEREO8 = 4354;
	lime_audio_openal_AL.FORMAT_STEREO16 = 4355;
	lime_audio_openal_AL.FREQUENCY = 8193;
	lime_audio_openal_AL.BITS = 8194;
	lime_audio_openal_AL.CHANNELS = 8195;
	lime_audio_openal_AL.SIZE = 8196;
	lime_audio_openal_AL.NO_ERROR = 0;
	lime_audio_openal_AL.INVALID_NAME = 40961;
	lime_audio_openal_AL.INVALID_ENUM = 40962;
	lime_audio_openal_AL.INVALID_VALUE = 40963;
	lime_audio_openal_AL.INVALID_OPERATION = 40964;
	lime_audio_openal_AL.OUT_OF_MEMORY = 40965;
	lime_audio_openal_AL.VENDOR = 45057;
	lime_audio_openal_AL.VERSION = 45058;
	lime_audio_openal_AL.RENDERER = 45059;
	lime_audio_openal_AL.EXTENSIONS = 45060;
	lime_audio_openal_AL.DOPPLER_FACTOR = 49152;
	lime_audio_openal_AL.SPEED_OF_SOUND = 49155;
	lime_audio_openal_AL.DOPPLER_VELOCITY = 49153;
	lime_audio_openal_AL.DISTANCE_MODEL = 53248;
	lime_audio_openal_AL.INVERSE_DISTANCE = 53249;
	lime_audio_openal_AL.INVERSE_DISTANCE_CLAMPED = 53250;
	lime_audio_openal_AL.LINEAR_DISTANCE = 53251;
	lime_audio_openal_AL.LINEAR_DISTANCE_CLAMPED = 53252;
	lime_audio_openal_AL.EXPONENT_DISTANCE = 53253;
	lime_audio_openal_AL.EXPONENT_DISTANCE_CLAMPED = 53254;
	lime_audio_openal_ALC.FALSE = 0;
	lime_audio_openal_ALC.TRUE = 1;
	lime_audio_openal_ALC.FREQUENCY = 4103;
	lime_audio_openal_ALC.REFRESH = 4104;
	lime_audio_openal_ALC.SYNC = 4105;
	lime_audio_openal_ALC.MONO_SOURCES = 4112;
	lime_audio_openal_ALC.STEREO_SOURCES = 4113;
	lime_audio_openal_ALC.NO_ERROR = 0;
	lime_audio_openal_ALC.INVALID_DEVICE = 40961;
	lime_audio_openal_ALC.INVALID_CONTEXT = 40962;
	lime_audio_openal_ALC.INVALID_ENUM = 40963;
	lime_audio_openal_ALC.INVALID_VALUE = 40964;
	lime_audio_openal_ALC.OUT_OF_MEMORY = 40965;
	lime_audio_openal_ALC.ATTRIBUTES_SIZE = 4098;
	lime_audio_openal_ALC.ALL_ATTRIBUTES = 4099;
	lime_audio_openal_ALC.DEFAULT_DEVICE_SPECIFIER = 4100;
	lime_audio_openal_ALC.DEVICE_SPECIFIER = 4101;
	lime_audio_openal_ALC.EXTENSIONS = 4102;
	lime_audio_openal_ALC.ENUMERATE_ALL_EXT = 1;
	lime_audio_openal_ALC.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
	lime_audio_openal_ALC.ALL_DEVICES_SPECIFIER = 4115;
	lime_graphics_Image.__base64Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
	lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.FT_LOAD_FORCE_AUTOHINT = 32;
	lime_graphics_opengl_GL.DEPTH_BUFFER_BIT = 256;
	lime_graphics_opengl_GL.STENCIL_BUFFER_BIT = 1024;
	lime_graphics_opengl_GL.COLOR_BUFFER_BIT = 16384;
	lime_graphics_opengl_GL.POINTS = 0;
	lime_graphics_opengl_GL.LINES = 1;
	lime_graphics_opengl_GL.LINE_LOOP = 2;
	lime_graphics_opengl_GL.LINE_STRIP = 3;
	lime_graphics_opengl_GL.TRIANGLES = 4;
	lime_graphics_opengl_GL.TRIANGLE_STRIP = 5;
	lime_graphics_opengl_GL.TRIANGLE_FAN = 6;
	lime_graphics_opengl_GL.ZERO = 0;
	lime_graphics_opengl_GL.ONE = 1;
	lime_graphics_opengl_GL.SRC_COLOR = 768;
	lime_graphics_opengl_GL.ONE_MINUS_SRC_COLOR = 769;
	lime_graphics_opengl_GL.SRC_ALPHA = 770;
	lime_graphics_opengl_GL.ONE_MINUS_SRC_ALPHA = 771;
	lime_graphics_opengl_GL.DST_ALPHA = 772;
	lime_graphics_opengl_GL.ONE_MINUS_DST_ALPHA = 773;
	lime_graphics_opengl_GL.DST_COLOR = 774;
	lime_graphics_opengl_GL.ONE_MINUS_DST_COLOR = 775;
	lime_graphics_opengl_GL.SRC_ALPHA_SATURATE = 776;
	lime_graphics_opengl_GL.FUNC_ADD = 32774;
	lime_graphics_opengl_GL.BLEND_EQUATION = 32777;
	lime_graphics_opengl_GL.BLEND_EQUATION_RGB = 32777;
	lime_graphics_opengl_GL.BLEND_EQUATION_ALPHA = 34877;
	lime_graphics_opengl_GL.FUNC_SUBTRACT = 32778;
	lime_graphics_opengl_GL.FUNC_REVERSE_SUBTRACT = 32779;
	lime_graphics_opengl_GL.BLEND_DST_RGB = 32968;
	lime_graphics_opengl_GL.BLEND_SRC_RGB = 32969;
	lime_graphics_opengl_GL.BLEND_DST_ALPHA = 32970;
	lime_graphics_opengl_GL.BLEND_SRC_ALPHA = 32971;
	lime_graphics_opengl_GL.CONSTANT_COLOR = 32769;
	lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_COLOR = 32770;
	lime_graphics_opengl_GL.CONSTANT_ALPHA = 32771;
	lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_ALPHA = 32772;
	lime_graphics_opengl_GL.BLEND_COLOR = 32773;
	lime_graphics_opengl_GL.ARRAY_BUFFER = 34962;
	lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER = 34963;
	lime_graphics_opengl_GL.ARRAY_BUFFER_BINDING = 34964;
	lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER_BINDING = 34965;
	lime_graphics_opengl_GL.STREAM_DRAW = 35040;
	lime_graphics_opengl_GL.STATIC_DRAW = 35044;
	lime_graphics_opengl_GL.DYNAMIC_DRAW = 35048;
	lime_graphics_opengl_GL.BUFFER_SIZE = 34660;
	lime_graphics_opengl_GL.BUFFER_USAGE = 34661;
	lime_graphics_opengl_GL.CURRENT_VERTEX_ATTRIB = 34342;
	lime_graphics_opengl_GL.FRONT = 1028;
	lime_graphics_opengl_GL.BACK = 1029;
	lime_graphics_opengl_GL.FRONT_AND_BACK = 1032;
	lime_graphics_opengl_GL.CULL_FACE = 2884;
	lime_graphics_opengl_GL.BLEND = 3042;
	lime_graphics_opengl_GL.DITHER = 3024;
	lime_graphics_opengl_GL.STENCIL_TEST = 2960;
	lime_graphics_opengl_GL.DEPTH_TEST = 2929;
	lime_graphics_opengl_GL.SCISSOR_TEST = 3089;
	lime_graphics_opengl_GL.POLYGON_OFFSET_FILL = 32823;
	lime_graphics_opengl_GL.SAMPLE_ALPHA_TO_COVERAGE = 32926;
	lime_graphics_opengl_GL.SAMPLE_COVERAGE = 32928;
	lime_graphics_opengl_GL.NO_ERROR = 0;
	lime_graphics_opengl_GL.INVALID_ENUM = 1280;
	lime_graphics_opengl_GL.INVALID_VALUE = 1281;
	lime_graphics_opengl_GL.INVALID_OPERATION = 1282;
	lime_graphics_opengl_GL.OUT_OF_MEMORY = 1285;
	lime_graphics_opengl_GL.CW = 2304;
	lime_graphics_opengl_GL.CCW = 2305;
	lime_graphics_opengl_GL.LINE_WIDTH = 2849;
	lime_graphics_opengl_GL.ALIASED_POINT_SIZE_RANGE = 33901;
	lime_graphics_opengl_GL.ALIASED_LINE_WIDTH_RANGE = 33902;
	lime_graphics_opengl_GL.CULL_FACE_MODE = 2885;
	lime_graphics_opengl_GL.FRONT_FACE = 2886;
	lime_graphics_opengl_GL.DEPTH_RANGE = 2928;
	lime_graphics_opengl_GL.DEPTH_WRITEMASK = 2930;
	lime_graphics_opengl_GL.DEPTH_CLEAR_VALUE = 2931;
	lime_graphics_opengl_GL.DEPTH_FUNC = 2932;
	lime_graphics_opengl_GL.STENCIL_CLEAR_VALUE = 2961;
	lime_graphics_opengl_GL.STENCIL_FUNC = 2962;
	lime_graphics_opengl_GL.STENCIL_FAIL = 2964;
	lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_FAIL = 2965;
	lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_PASS = 2966;
	lime_graphics_opengl_GL.STENCIL_REF = 2967;
	lime_graphics_opengl_GL.STENCIL_VALUE_MASK = 2963;
	lime_graphics_opengl_GL.STENCIL_WRITEMASK = 2968;
	lime_graphics_opengl_GL.STENCIL_BACK_FUNC = 34816;
	lime_graphics_opengl_GL.STENCIL_BACK_FAIL = 34817;
	lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
	lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_PASS = 34819;
	lime_graphics_opengl_GL.STENCIL_BACK_REF = 36003;
	lime_graphics_opengl_GL.STENCIL_BACK_VALUE_MASK = 36004;
	lime_graphics_opengl_GL.STENCIL_BACK_WRITEMASK = 36005;
	lime_graphics_opengl_GL.VIEWPORT = 2978;
	lime_graphics_opengl_GL.SCISSOR_BOX = 3088;
	lime_graphics_opengl_GL.COLOR_CLEAR_VALUE = 3106;
	lime_graphics_opengl_GL.COLOR_WRITEMASK = 3107;
	lime_graphics_opengl_GL.UNPACK_ALIGNMENT = 3317;
	lime_graphics_opengl_GL.PACK_ALIGNMENT = 3333;
	lime_graphics_opengl_GL.MAX_TEXTURE_SIZE = 3379;
	lime_graphics_opengl_GL.MAX_VIEWPORT_DIMS = 3386;
	lime_graphics_opengl_GL.SUBPIXEL_BITS = 3408;
	lime_graphics_opengl_GL.RED_BITS = 3410;
	lime_graphics_opengl_GL.GREEN_BITS = 3411;
	lime_graphics_opengl_GL.BLUE_BITS = 3412;
	lime_graphics_opengl_GL.ALPHA_BITS = 3413;
	lime_graphics_opengl_GL.DEPTH_BITS = 3414;
	lime_graphics_opengl_GL.STENCIL_BITS = 3415;
	lime_graphics_opengl_GL.POLYGON_OFFSET_UNITS = 10752;
	lime_graphics_opengl_GL.POLYGON_OFFSET_FACTOR = 32824;
	lime_graphics_opengl_GL.TEXTURE_BINDING_2D = 32873;
	lime_graphics_opengl_GL.SAMPLE_BUFFERS = 32936;
	lime_graphics_opengl_GL.SAMPLES = 32937;
	lime_graphics_opengl_GL.SAMPLE_COVERAGE_VALUE = 32938;
	lime_graphics_opengl_GL.SAMPLE_COVERAGE_INVERT = 32939;
	lime_graphics_opengl_GL.COMPRESSED_TEXTURE_FORMATS = 34467;
	lime_graphics_opengl_GL.DONT_CARE = 4352;
	lime_graphics_opengl_GL.FASTEST = 4353;
	lime_graphics_opengl_GL.NICEST = 4354;
	lime_graphics_opengl_GL.GENERATE_MIPMAP_HINT = 33170;
	lime_graphics_opengl_GL.BYTE = 5120;
	lime_graphics_opengl_GL.UNSIGNED_BYTE = 5121;
	lime_graphics_opengl_GL.SHORT = 5122;
	lime_graphics_opengl_GL.UNSIGNED_SHORT = 5123;
	lime_graphics_opengl_GL.INT = 5124;
	lime_graphics_opengl_GL.UNSIGNED_INT = 5125;
	lime_graphics_opengl_GL.FLOAT = 5126;
	lime_graphics_opengl_GL.DEPTH_COMPONENT = 6402;
	lime_graphics_opengl_GL.ALPHA = 6406;
	lime_graphics_opengl_GL.RGB = 6407;
	lime_graphics_opengl_GL.RGBA = 6408;
	lime_graphics_opengl_GL.BGR_EXT = 32992;
	lime_graphics_opengl_GL.BGRA_EXT = 32993;
	lime_graphics_opengl_GL.LUMINANCE = 6409;
	lime_graphics_opengl_GL.LUMINANCE_ALPHA = 6410;
	lime_graphics_opengl_GL.UNSIGNED_SHORT_4_4_4_4 = 32819;
	lime_graphics_opengl_GL.UNSIGNED_SHORT_5_5_5_1 = 32820;
	lime_graphics_opengl_GL.UNSIGNED_SHORT_5_6_5 = 33635;
	lime_graphics_opengl_GL.FRAGMENT_SHADER = 35632;
	lime_graphics_opengl_GL.VERTEX_SHADER = 35633;
	lime_graphics_opengl_GL.MAX_VERTEX_ATTRIBS = 34921;
	lime_graphics_opengl_GL.MAX_VERTEX_UNIFORM_VECTORS = 36347;
	lime_graphics_opengl_GL.MAX_VARYING_VECTORS = 36348;
	lime_graphics_opengl_GL.MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
	lime_graphics_opengl_GL.MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
	lime_graphics_opengl_GL.MAX_TEXTURE_IMAGE_UNITS = 34930;
	lime_graphics_opengl_GL.MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
	lime_graphics_opengl_GL.SHADER_TYPE = 35663;
	lime_graphics_opengl_GL.DELETE_STATUS = 35712;
	lime_graphics_opengl_GL.LINK_STATUS = 35714;
	lime_graphics_opengl_GL.VALIDATE_STATUS = 35715;
	lime_graphics_opengl_GL.ATTACHED_SHADERS = 35717;
	lime_graphics_opengl_GL.ACTIVE_UNIFORMS = 35718;
	lime_graphics_opengl_GL.ACTIVE_ATTRIBUTES = 35721;
	lime_graphics_opengl_GL.SHADING_LANGUAGE_VERSION = 35724;
	lime_graphics_opengl_GL.CURRENT_PROGRAM = 35725;
	lime_graphics_opengl_GL.NEVER = 512;
	lime_graphics_opengl_GL.LESS = 513;
	lime_graphics_opengl_GL.EQUAL = 514;
	lime_graphics_opengl_GL.LEQUAL = 515;
	lime_graphics_opengl_GL.GREATER = 516;
	lime_graphics_opengl_GL.NOTEQUAL = 517;
	lime_graphics_opengl_GL.GEQUAL = 518;
	lime_graphics_opengl_GL.ALWAYS = 519;
	lime_graphics_opengl_GL.KEEP = 7680;
	lime_graphics_opengl_GL.REPLACE = 7681;
	lime_graphics_opengl_GL.INCR = 7682;
	lime_graphics_opengl_GL.DECR = 7683;
	lime_graphics_opengl_GL.INVERT = 5386;
	lime_graphics_opengl_GL.INCR_WRAP = 34055;
	lime_graphics_opengl_GL.DECR_WRAP = 34056;
	lime_graphics_opengl_GL.VENDOR = 7936;
	lime_graphics_opengl_GL.RENDERER = 7937;
	lime_graphics_opengl_GL.VERSION = 7938;
	lime_graphics_opengl_GL.NEAREST = 9728;
	lime_graphics_opengl_GL.LINEAR = 9729;
	lime_graphics_opengl_GL.NEAREST_MIPMAP_NEAREST = 9984;
	lime_graphics_opengl_GL.LINEAR_MIPMAP_NEAREST = 9985;
	lime_graphics_opengl_GL.NEAREST_MIPMAP_LINEAR = 9986;
	lime_graphics_opengl_GL.LINEAR_MIPMAP_LINEAR = 9987;
	lime_graphics_opengl_GL.TEXTURE_MAG_FILTER = 10240;
	lime_graphics_opengl_GL.TEXTURE_MIN_FILTER = 10241;
	lime_graphics_opengl_GL.TEXTURE_WRAP_S = 10242;
	lime_graphics_opengl_GL.TEXTURE_WRAP_T = 10243;
	lime_graphics_opengl_GL.TEXTURE_2D = 3553;
	lime_graphics_opengl_GL.TEXTURE = 5890;
	lime_graphics_opengl_GL.TEXTURE_CUBE_MAP = 34067;
	lime_graphics_opengl_GL.TEXTURE_BINDING_CUBE_MAP = 34068;
	lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
	lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
	lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
	lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
	lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
	lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
	lime_graphics_opengl_GL.MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
	lime_graphics_opengl_GL.TEXTURE0 = 33984;
	lime_graphics_opengl_GL.TEXTURE1 = 33985;
	lime_graphics_opengl_GL.TEXTURE2 = 33986;
	lime_graphics_opengl_GL.TEXTURE3 = 33987;
	lime_graphics_opengl_GL.TEXTURE4 = 33988;
	lime_graphics_opengl_GL.TEXTURE5 = 33989;
	lime_graphics_opengl_GL.TEXTURE6 = 33990;
	lime_graphics_opengl_GL.TEXTURE7 = 33991;
	lime_graphics_opengl_GL.TEXTURE8 = 33992;
	lime_graphics_opengl_GL.TEXTURE9 = 33993;
	lime_graphics_opengl_GL.TEXTURE10 = 33994;
	lime_graphics_opengl_GL.TEXTURE11 = 33995;
	lime_graphics_opengl_GL.TEXTURE12 = 33996;
	lime_graphics_opengl_GL.TEXTURE13 = 33997;
	lime_graphics_opengl_GL.TEXTURE14 = 33998;
	lime_graphics_opengl_GL.TEXTURE15 = 33999;
	lime_graphics_opengl_GL.TEXTURE16 = 34000;
	lime_graphics_opengl_GL.TEXTURE17 = 34001;
	lime_graphics_opengl_GL.TEXTURE18 = 34002;
	lime_graphics_opengl_GL.TEXTURE19 = 34003;
	lime_graphics_opengl_GL.TEXTURE20 = 34004;
	lime_graphics_opengl_GL.TEXTURE21 = 34005;
	lime_graphics_opengl_GL.TEXTURE22 = 34006;
	lime_graphics_opengl_GL.TEXTURE23 = 34007;
	lime_graphics_opengl_GL.TEXTURE24 = 34008;
	lime_graphics_opengl_GL.TEXTURE25 = 34009;
	lime_graphics_opengl_GL.TEXTURE26 = 34010;
	lime_graphics_opengl_GL.TEXTURE27 = 34011;
	lime_graphics_opengl_GL.TEXTURE28 = 34012;
	lime_graphics_opengl_GL.TEXTURE29 = 34013;
	lime_graphics_opengl_GL.TEXTURE30 = 34014;
	lime_graphics_opengl_GL.TEXTURE31 = 34015;
	lime_graphics_opengl_GL.ACTIVE_TEXTURE = 34016;
	lime_graphics_opengl_GL.REPEAT = 10497;
	lime_graphics_opengl_GL.CLAMP_TO_EDGE = 33071;
	lime_graphics_opengl_GL.MIRRORED_REPEAT = 33648;
	lime_graphics_opengl_GL.FLOAT_VEC2 = 35664;
	lime_graphics_opengl_GL.FLOAT_VEC3 = 35665;
	lime_graphics_opengl_GL.FLOAT_VEC4 = 35666;
	lime_graphics_opengl_GL.INT_VEC2 = 35667;
	lime_graphics_opengl_GL.INT_VEC3 = 35668;
	lime_graphics_opengl_GL.INT_VEC4 = 35669;
	lime_graphics_opengl_GL.BOOL = 35670;
	lime_graphics_opengl_GL.BOOL_VEC2 = 35671;
	lime_graphics_opengl_GL.BOOL_VEC3 = 35672;
	lime_graphics_opengl_GL.BOOL_VEC4 = 35673;
	lime_graphics_opengl_GL.FLOAT_MAT2 = 35674;
	lime_graphics_opengl_GL.FLOAT_MAT3 = 35675;
	lime_graphics_opengl_GL.FLOAT_MAT4 = 35676;
	lime_graphics_opengl_GL.SAMPLER_2D = 35678;
	lime_graphics_opengl_GL.SAMPLER_CUBE = 35680;
	lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
	lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_SIZE = 34339;
	lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
	lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_TYPE = 34341;
	lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
	lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_POINTER = 34373;
	lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
	lime_graphics_opengl_GL.VERTEX_PROGRAM_POINT_SIZE = 34370;
	lime_graphics_opengl_GL.POINT_SPRITE = 34913;
	lime_graphics_opengl_GL.COMPILE_STATUS = 35713;
	lime_graphics_opengl_GL.LOW_FLOAT = 36336;
	lime_graphics_opengl_GL.MEDIUM_FLOAT = 36337;
	lime_graphics_opengl_GL.HIGH_FLOAT = 36338;
	lime_graphics_opengl_GL.LOW_INT = 36339;
	lime_graphics_opengl_GL.MEDIUM_INT = 36340;
	lime_graphics_opengl_GL.HIGH_INT = 36341;
	lime_graphics_opengl_GL.FRAMEBUFFER = 36160;
	lime_graphics_opengl_GL.RENDERBUFFER = 36161;
	lime_graphics_opengl_GL.RGBA4 = 32854;
	lime_graphics_opengl_GL.RGB5_A1 = 32855;
	lime_graphics_opengl_GL.RGB565 = 36194;
	lime_graphics_opengl_GL.DEPTH_COMPONENT16 = 33189;
	lime_graphics_opengl_GL.STENCIL_INDEX = 6401;
	lime_graphics_opengl_GL.STENCIL_INDEX8 = 36168;
	lime_graphics_opengl_GL.DEPTH_STENCIL = 34041;
	lime_graphics_opengl_GL.RENDERBUFFER_WIDTH = 36162;
	lime_graphics_opengl_GL.RENDERBUFFER_HEIGHT = 36163;
	lime_graphics_opengl_GL.RENDERBUFFER_INTERNAL_FORMAT = 36164;
	lime_graphics_opengl_GL.RENDERBUFFER_RED_SIZE = 36176;
	lime_graphics_opengl_GL.RENDERBUFFER_GREEN_SIZE = 36177;
	lime_graphics_opengl_GL.RENDERBUFFER_BLUE_SIZE = 36178;
	lime_graphics_opengl_GL.RENDERBUFFER_ALPHA_SIZE = 36179;
	lime_graphics_opengl_GL.RENDERBUFFER_DEPTH_SIZE = 36180;
	lime_graphics_opengl_GL.RENDERBUFFER_STENCIL_SIZE = 36181;
	lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
	lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
	lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
	lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
	lime_graphics_opengl_GL.COLOR_ATTACHMENT0 = 36064;
	lime_graphics_opengl_GL.DEPTH_ATTACHMENT = 36096;
	lime_graphics_opengl_GL.STENCIL_ATTACHMENT = 36128;
	lime_graphics_opengl_GL.DEPTH_STENCIL_ATTACHMENT = 33306;
	lime_graphics_opengl_GL.NONE = 0;
	lime_graphics_opengl_GL.FRAMEBUFFER_COMPLETE = 36053;
	lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
	lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
	lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
	lime_graphics_opengl_GL.FRAMEBUFFER_UNSUPPORTED = 36061;
	lime_graphics_opengl_GL.FRAMEBUFFER_BINDING = 36006;
	lime_graphics_opengl_GL.RENDERBUFFER_BINDING = 36007;
	lime_graphics_opengl_GL.MAX_RENDERBUFFER_SIZE = 34024;
	lime_graphics_opengl_GL.INVALID_FRAMEBUFFER_OPERATION = 1286;
	lime_graphics_opengl_GL.UNPACK_FLIP_Y_WEBGL = 37440;
	lime_graphics_opengl_GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
	lime_graphics_opengl_GL.CONTEXT_LOST_WEBGL = 37442;
	lime_graphics_opengl_GL.UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
	lime_graphics_opengl_GL.BROWSER_DEFAULT_WEBGL = 37444;
	lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__identity = [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0];
	lime_math_Matrix3.__identity = new lime_math_Matrix3();
	lime_math__$Matrix4_Matrix4_$Impl_$.__identity = [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0];
	lime_system_BackgroundWorker.MESSAGE_COMPLETE = "__COMPLETE__";
	lime_system_BackgroundWorker.MESSAGE_ERROR = "__ERROR__";
	lime_system_CFFI.__moduleNames = null;
	lime_system_CFFI.lime_cffi_set_finalizer = lime_system_CFFI.load("lime", "lime_cffi_set_finalizer", 1, false);
	lime_text__$TextDirection_TextDirection_$Impl_$.INVALID = 0;
	lime_text__$TextDirection_TextDirection_$Impl_$.LEFT_TO_RIGHT = 4;
	lime_text__$TextDirection_TextDirection_$Impl_$.RIGHT_TO_LEFT = 5;
	lime_text__$TextDirection_TextDirection_$Impl_$.TOP_TO_BOTTOM = 6;
	lime_text__$TextDirection_TextDirection_$Impl_$.BOTTOM_TO_TOP = 7;
	lime_text__$TextScript_TextScript_$Impl_$.COMMON = "Zyyy";
	lime_text__$TextScript_TextScript_$Impl_$.INHERITED = "Zinh";
	lime_text__$TextScript_TextScript_$Impl_$.UNKNOWN = "Zzzz";
	lime_text__$TextScript_TextScript_$Impl_$.ARABIC = "Arab";
	lime_text__$TextScript_TextScript_$Impl_$.ARMENIAN = "Armn";
	lime_text__$TextScript_TextScript_$Impl_$.BENGALI = "Beng";
	lime_text__$TextScript_TextScript_$Impl_$.CYRILLIC = "Cyrl";
	lime_text__$TextScript_TextScript_$Impl_$.DEVANAGARI = "Deva";
	lime_text__$TextScript_TextScript_$Impl_$.GEORGIAN = "Geor";
	lime_text__$TextScript_TextScript_$Impl_$.GREEK = "Grek";
	lime_text__$TextScript_TextScript_$Impl_$.GUJARATI = "Gujr";
	lime_text__$TextScript_TextScript_$Impl_$.GURMUKHI = "Guru";
	lime_text__$TextScript_TextScript_$Impl_$.HANGUL = "Hang";
	lime_text__$TextScript_TextScript_$Impl_$.HAN = "Hani";
	lime_text__$TextScript_TextScript_$Impl_$.HEBREW = "Hebr";
	lime_text__$TextScript_TextScript_$Impl_$.HIRAGANA = "Hira";
	lime_text__$TextScript_TextScript_$Impl_$.KANNADA = "Knda";
	lime_text__$TextScript_TextScript_$Impl_$.KATAKANA = "Kana";
	lime_text__$TextScript_TextScript_$Impl_$.LAO = "Laoo";
	lime_text__$TextScript_TextScript_$Impl_$.LATIN = "Latn";
	lime_text__$TextScript_TextScript_$Impl_$.MALAYALAM = "Mlym";
	lime_text__$TextScript_TextScript_$Impl_$.ORIYA = "Orya";
	lime_text__$TextScript_TextScript_$Impl_$.TAMIL = "Taml";
	lime_text__$TextScript_TextScript_$Impl_$.TELUGA = "Telu";
	lime_text__$TextScript_TextScript_$Impl_$.THAI = "Thai";
	lime_text__$TextScript_TextScript_$Impl_$.TIBETAN = "Tibt";
	lime_text__$TextScript_TextScript_$Impl_$.BOPOMOFO = "Bopo";
	lime_text__$TextScript_TextScript_$Impl_$.BRAILLE = "Brai";
	lime_text__$TextScript_TextScript_$Impl_$.CANADIAN_SYLLABICS = "Cans";
	lime_text__$TextScript_TextScript_$Impl_$.CHEROKEE = "Cher";
	lime_text__$TextScript_TextScript_$Impl_$.ETHIOPIC = "Ethi";
	lime_text__$TextScript_TextScript_$Impl_$.KHMER = "Khmr";
	lime_text__$TextScript_TextScript_$Impl_$.MONGOLIAN = "Mong";
	lime_text__$TextScript_TextScript_$Impl_$.MYANMAR = "Mymr";
	lime_text__$TextScript_TextScript_$Impl_$.OGHAM = "Ogam";
	lime_text__$TextScript_TextScript_$Impl_$.RUNIC = "Runr";
	lime_text__$TextScript_TextScript_$Impl_$.SINHALA = "Sinh";
	lime_text__$TextScript_TextScript_$Impl_$.SYRIAC = "Syrc";
	lime_text__$TextScript_TextScript_$Impl_$.THAANA = "Thaa";
	lime_text__$TextScript_TextScript_$Impl_$.YI = "Yiii";
	lime_text__$TextScript_TextScript_$Impl_$.DESERET = "Dsrt";
	lime_text__$TextScript_TextScript_$Impl_$.GOTHIC = "Goth";
	lime_text__$TextScript_TextScript_$Impl_$.OLD_ITALIC = "Ital";
	lime_text__$TextScript_TextScript_$Impl_$.BUHID = "Buhd";
	lime_text__$TextScript_TextScript_$Impl_$.HANUNOO = "Hano";
	lime_text__$TextScript_TextScript_$Impl_$.TAGALOG = "Tglg";
	lime_text__$TextScript_TextScript_$Impl_$.TAGBANWA = "Tagb";
	lime_text__$TextScript_TextScript_$Impl_$.CYPRIOT = "Cprt";
	lime_text__$TextScript_TextScript_$Impl_$.LIMBU = "Limb";
	lime_text__$TextScript_TextScript_$Impl_$.LINEAR_B = "Linb";
	lime_text__$TextScript_TextScript_$Impl_$.OSMANYA = "Osma";
	lime_text__$TextScript_TextScript_$Impl_$.SHAVIAN = "Shaw";
	lime_text__$TextScript_TextScript_$Impl_$.TAI_LE = "Tale";
	lime_text__$TextScript_TextScript_$Impl_$.UGARITIC = "Ugar";
	lime_text__$TextScript_TextScript_$Impl_$.BUGINESE = "Bugi";
	lime_text__$TextScript_TextScript_$Impl_$.COPTIC = "Copt";
	lime_text__$TextScript_TextScript_$Impl_$.GLAGOLITIC = "Glag";
	lime_text__$TextScript_TextScript_$Impl_$.KHAROSHTHI = "Khar";
	lime_text__$TextScript_TextScript_$Impl_$.NEW_TAI_LUE = "Talu";
	lime_text__$TextScript_TextScript_$Impl_$.OLD_PERSIAN = "Xpeo";
	lime_text__$TextScript_TextScript_$Impl_$.SYLOTI_NAGRI = "Sylo";
	lime_text__$TextScript_TextScript_$Impl_$.TIFINAGH = "Tfng";
	lime_text__$TextScript_TextScript_$Impl_$.BALINESE = "Bali";
	lime_text__$TextScript_TextScript_$Impl_$.CUNEIFORM = "Xsux";
	lime_text__$TextScript_TextScript_$Impl_$.NKO = "Nkoo";
	lime_text__$TextScript_TextScript_$Impl_$.PHAGS_PA = "Phag";
	lime_text__$TextScript_TextScript_$Impl_$.PHOENICIAN = "Phnx";
	lime_text__$TextScript_TextScript_$Impl_$.CARIAN = "Cari";
	lime_text__$TextScript_TextScript_$Impl_$.CHAM = "Cham";
	lime_text__$TextScript_TextScript_$Impl_$.KAYAH_LI = "Kali";
	lime_text__$TextScript_TextScript_$Impl_$.LEPCHA = "Lepc";
	lime_text__$TextScript_TextScript_$Impl_$.LYCIAN = "Lyci";
	lime_text__$TextScript_TextScript_$Impl_$.LYDIAN = "Lydi";
	lime_text__$TextScript_TextScript_$Impl_$.OL_CHIKI = "Olck";
	lime_text__$TextScript_TextScript_$Impl_$.REJANG = "Rjng";
	lime_text__$TextScript_TextScript_$Impl_$.SAURASHTRA = "Saur";
	lime_text__$TextScript_TextScript_$Impl_$.SUNDANESE = "Sund";
	lime_text__$TextScript_TextScript_$Impl_$.VAI = "Vaii";
	lime_text__$TextScript_TextScript_$Impl_$.AVESTAN = "Avst";
	lime_text__$TextScript_TextScript_$Impl_$.BAMUM = "Bamu";
	lime_text__$TextScript_TextScript_$Impl_$.EGYPTIAN_HIEROGLYPHS = "Egyp";
	lime_text__$TextScript_TextScript_$Impl_$.IMPERIAL_ARAMAIC = "Armi";
	lime_text__$TextScript_TextScript_$Impl_$.INSCRIPTIONAL_PAHLAVI = "Phli";
	lime_text__$TextScript_TextScript_$Impl_$.INSCRIPTIONAL_PARTHIAN = "Prti";
	lime_text__$TextScript_TextScript_$Impl_$.JAVANESE = "Java";
	lime_text__$TextScript_TextScript_$Impl_$.KAITHI = "Kthi";
	lime_text__$TextScript_TextScript_$Impl_$.LISU = "Lisu";
	lime_text__$TextScript_TextScript_$Impl_$.MEETEI_MAYEK = "Mtei";
	lime_text__$TextScript_TextScript_$Impl_$.OLD_SOUTH_ARABIAN = "Sarb";
	lime_text__$TextScript_TextScript_$Impl_$.OLD_TURKIC = "Orkh";
	lime_text__$TextScript_TextScript_$Impl_$.SAMARITAN = "Samr";
	lime_text__$TextScript_TextScript_$Impl_$.TAI_THAM = "Lana";
	lime_text__$TextScript_TextScript_$Impl_$.TAI_VIET = "Tavt";
	lime_text__$TextScript_TextScript_$Impl_$.BATAK = "Batk";
	lime_text__$TextScript_TextScript_$Impl_$.BRAHMI = "Brah";
	lime_text__$TextScript_TextScript_$Impl_$.MANDAIC = "Mand";
	lime_text__$TextScript_TextScript_$Impl_$.CHAKMA = "Cakm";
	lime_text__$TextScript_TextScript_$Impl_$.MEROITIC_CURSIVE = "Merc";
	lime_text__$TextScript_TextScript_$Impl_$.MEROITIC_HIEROGLYPHS = "Mero";
	lime_text__$TextScript_TextScript_$Impl_$.MIAO = "Plrd";
	lime_text__$TextScript_TextScript_$Impl_$.SHARADA = "Shrd";
	lime_text__$TextScript_TextScript_$Impl_$.SORA_SOMPENG = "Sora";
	lime_text__$TextScript_TextScript_$Impl_$.TAKRI = "Takr";
	lime_text__$TextScript_TextScript_$Impl_$.BASSA_VAH = "Bass";
	lime_text__$TextScript_TextScript_$Impl_$.CAUCASIAN_ALBANIAN = "Aghb";
	lime_text__$TextScript_TextScript_$Impl_$.DUPLOYAN = "Dupl";
	lime_text__$TextScript_TextScript_$Impl_$.ELBASAN = "Elba";
	lime_text__$TextScript_TextScript_$Impl_$.GRANTHA = "Gran";
	lime_text__$TextScript_TextScript_$Impl_$.KHOJKI = "Khoj";
	lime_text__$TextScript_TextScript_$Impl_$.KHUDAWADI = "Sind";
	lime_text__$TextScript_TextScript_$Impl_$.LINEAR_A = "Lina";
	lime_text__$TextScript_TextScript_$Impl_$.MAHAJANI = "Mahj";
	lime_text__$TextScript_TextScript_$Impl_$.MANICHAEAN = "Mani";
	lime_text__$TextScript_TextScript_$Impl_$.MENDE_KIKAKUI = "Mend";
	lime_text__$TextScript_TextScript_$Impl_$.MODI = "Modi";
	lime_text__$TextScript_TextScript_$Impl_$.MRO = "Mroo";
	lime_text__$TextScript_TextScript_$Impl_$.NABATAEAN = "Nbat";
	lime_text__$TextScript_TextScript_$Impl_$.OLD_NORTH_ARABIAN = "Narb";
	lime_text__$TextScript_TextScript_$Impl_$.OLD_PERMIC = "Perm";
	lime_text__$TextScript_TextScript_$Impl_$.PAHAWH_HMONG = "Hmng";
	lime_text__$TextScript_TextScript_$Impl_$.PALMYRENE = "Palm";
	lime_text__$TextScript_TextScript_$Impl_$.PAU_CIN_HAU = "Pauc";
	lime_text__$TextScript_TextScript_$Impl_$.PSALTER_PAHLAVI = "Phlp";
	lime_text__$TextScript_TextScript_$Impl_$.SIDDHAM = "Sidd";
	lime_text__$TextScript_TextScript_$Impl_$.TIRHUTA = "Tirh";
	lime_text__$TextScript_TextScript_$Impl_$.WARANG_CITI = "Wara";
	lime_ui_Gamepad.devices = new haxe_ds_IntMap();
	lime_ui_Gamepad.onConnect = new lime_app_Event_$lime_$ui_$Gamepad_$Void();
	lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.LEFT_X = 0;
	lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.LEFT_Y = 1;
	lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.RIGHT_X = 2;
	lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.RIGHT_Y = 3;
	lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.TRIGGER_LEFT = 4;
	lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.TRIGGER_RIGHT = 5;
	lime_ui__$GamepadButton_GamepadButton_$Impl_$.A = 0;
	lime_ui__$GamepadButton_GamepadButton_$Impl_$.B = 1;
	lime_ui__$GamepadButton_GamepadButton_$Impl_$.X = 2;
	lime_ui__$GamepadButton_GamepadButton_$Impl_$.Y = 3;
	lime_ui__$GamepadButton_GamepadButton_$Impl_$.BACK = 4;
	lime_ui__$GamepadButton_GamepadButton_$Impl_$.GUIDE = 5;
	lime_ui__$GamepadButton_GamepadButton_$Impl_$.START = 6;
	lime_ui__$GamepadButton_GamepadButton_$Impl_$.LEFT_STICK = 7;
	lime_ui__$GamepadButton_GamepadButton_$Impl_$.RIGHT_STICK = 8;
	lime_ui__$GamepadButton_GamepadButton_$Impl_$.LEFT_SHOULDER = 9;
	lime_ui__$GamepadButton_GamepadButton_$Impl_$.RIGHT_SHOULDER = 10;
	lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_UP = 11;
	lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_DOWN = 12;
	lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_LEFT = 13;
	lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_RIGHT = 14;
	lime_ui_Joystick.devices = new haxe_ds_IntMap();
	lime_ui_Joystick.onConnect = new lime_app_Event_$lime_$ui_$Joystick_$Void();
	lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.CENTER = 0;
	lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN = 4;
	lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.LEFT = 8;
	lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.RIGHT = 2;
	lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP = 1;
	lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN_LEFT = 12;
	lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN_RIGHT = 6;
	lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP_LEFT = 9;
	lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP_RIGHT = 3;
	lime_ui__$KeyCode_KeyCode_$Impl_$.UNKNOWN = 0;
	lime_ui__$KeyCode_KeyCode_$Impl_$.BACKSPACE = 8;
	lime_ui__$KeyCode_KeyCode_$Impl_$.TAB = 9;
	lime_ui__$KeyCode_KeyCode_$Impl_$.RETURN = 13;
	lime_ui__$KeyCode_KeyCode_$Impl_$.ESCAPE = 27;
	lime_ui__$KeyCode_KeyCode_$Impl_$.SPACE = 32;
	lime_ui__$KeyCode_KeyCode_$Impl_$.EXCLAMATION = 33;
	lime_ui__$KeyCode_KeyCode_$Impl_$.QUOTE = 34;
	lime_ui__$KeyCode_KeyCode_$Impl_$.HASH = 35;
	lime_ui__$KeyCode_KeyCode_$Impl_$.DOLLAR = 36;
	lime_ui__$KeyCode_KeyCode_$Impl_$.PERCENT = 37;
	lime_ui__$KeyCode_KeyCode_$Impl_$.AMPERSAND = 38;
	lime_ui__$KeyCode_KeyCode_$Impl_$.SINGLE_QUOTE = 39;
	lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_PARENTHESIS = 40;
	lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_PARENTHESIS = 41;
	lime_ui__$KeyCode_KeyCode_$Impl_$.ASTERISK = 42;
	lime_ui__$KeyCode_KeyCode_$Impl_$.PLUS = 43;
	lime_ui__$KeyCode_KeyCode_$Impl_$.COMMA = 44;
	lime_ui__$KeyCode_KeyCode_$Impl_$.MINUS = 45;
	lime_ui__$KeyCode_KeyCode_$Impl_$.PERIOD = 46;
	lime_ui__$KeyCode_KeyCode_$Impl_$.SLASH = 47;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_0 = 48;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_1 = 49;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_2 = 50;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_3 = 51;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_4 = 52;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_5 = 53;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_6 = 54;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_7 = 55;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_8 = 56;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_9 = 57;
	lime_ui__$KeyCode_KeyCode_$Impl_$.COLON = 58;
	lime_ui__$KeyCode_KeyCode_$Impl_$.SEMICOLON = 59;
	lime_ui__$KeyCode_KeyCode_$Impl_$.LESS_THAN = 60;
	lime_ui__$KeyCode_KeyCode_$Impl_$.EQUALS = 61;
	lime_ui__$KeyCode_KeyCode_$Impl_$.GREATER_THAN = 62;
	lime_ui__$KeyCode_KeyCode_$Impl_$.QUESTION = 63;
	lime_ui__$KeyCode_KeyCode_$Impl_$.AT = 64;
	lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_BRACKET = 91;
	lime_ui__$KeyCode_KeyCode_$Impl_$.BACKSLASH = 92;
	lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_BRACKET = 93;
	lime_ui__$KeyCode_KeyCode_$Impl_$.CARET = 94;
	lime_ui__$KeyCode_KeyCode_$Impl_$.UNDERSCORE = 95;
	lime_ui__$KeyCode_KeyCode_$Impl_$.GRAVE = 96;
	lime_ui__$KeyCode_KeyCode_$Impl_$.A = 97;
	lime_ui__$KeyCode_KeyCode_$Impl_$.B = 98;
	lime_ui__$KeyCode_KeyCode_$Impl_$.C = 99;
	lime_ui__$KeyCode_KeyCode_$Impl_$.D = 100;
	lime_ui__$KeyCode_KeyCode_$Impl_$.E = 101;
	lime_ui__$KeyCode_KeyCode_$Impl_$.F = 102;
	lime_ui__$KeyCode_KeyCode_$Impl_$.G = 103;
	lime_ui__$KeyCode_KeyCode_$Impl_$.H = 104;
	lime_ui__$KeyCode_KeyCode_$Impl_$.I = 105;
	lime_ui__$KeyCode_KeyCode_$Impl_$.J = 106;
	lime_ui__$KeyCode_KeyCode_$Impl_$.K = 107;
	lime_ui__$KeyCode_KeyCode_$Impl_$.L = 108;
	lime_ui__$KeyCode_KeyCode_$Impl_$.M = 109;
	lime_ui__$KeyCode_KeyCode_$Impl_$.N = 110;
	lime_ui__$KeyCode_KeyCode_$Impl_$.O = 111;
	lime_ui__$KeyCode_KeyCode_$Impl_$.P = 112;
	lime_ui__$KeyCode_KeyCode_$Impl_$.Q = 113;
	lime_ui__$KeyCode_KeyCode_$Impl_$.R = 114;
	lime_ui__$KeyCode_KeyCode_$Impl_$.S = 115;
	lime_ui__$KeyCode_KeyCode_$Impl_$.T = 116;
	lime_ui__$KeyCode_KeyCode_$Impl_$.U = 117;
	lime_ui__$KeyCode_KeyCode_$Impl_$.V = 118;
	lime_ui__$KeyCode_KeyCode_$Impl_$.W = 119;
	lime_ui__$KeyCode_KeyCode_$Impl_$.X = 120;
	lime_ui__$KeyCode_KeyCode_$Impl_$.Y = 121;
	lime_ui__$KeyCode_KeyCode_$Impl_$.Z = 122;
	lime_ui__$KeyCode_KeyCode_$Impl_$.DELETE = 127;
	lime_ui__$KeyCode_KeyCode_$Impl_$.CAPS_LOCK = 1073741881;
	lime_ui__$KeyCode_KeyCode_$Impl_$.F1 = 1073741882;
	lime_ui__$KeyCode_KeyCode_$Impl_$.F2 = 1073741883;
	lime_ui__$KeyCode_KeyCode_$Impl_$.F3 = 1073741884;
	lime_ui__$KeyCode_KeyCode_$Impl_$.F4 = 1073741885;
	lime_ui__$KeyCode_KeyCode_$Impl_$.F5 = 1073741886;
	lime_ui__$KeyCode_KeyCode_$Impl_$.F6 = 1073741887;
	lime_ui__$KeyCode_KeyCode_$Impl_$.F7 = 1073741888;
	lime_ui__$KeyCode_KeyCode_$Impl_$.F8 = 1073741889;
	lime_ui__$KeyCode_KeyCode_$Impl_$.F9 = 1073741890;
	lime_ui__$KeyCode_KeyCode_$Impl_$.F10 = 1073741891;
	lime_ui__$KeyCode_KeyCode_$Impl_$.F11 = 1073741892;
	lime_ui__$KeyCode_KeyCode_$Impl_$.F12 = 1073741893;
	lime_ui__$KeyCode_KeyCode_$Impl_$.PRINT_SCREEN = 1073741894;
	lime_ui__$KeyCode_KeyCode_$Impl_$.SCROLL_LOCK = 1073741895;
	lime_ui__$KeyCode_KeyCode_$Impl_$.PAUSE = 1073741896;
	lime_ui__$KeyCode_KeyCode_$Impl_$.INSERT = 1073741897;
	lime_ui__$KeyCode_KeyCode_$Impl_$.HOME = 1073741898;
	lime_ui__$KeyCode_KeyCode_$Impl_$.PAGE_UP = 1073741899;
	lime_ui__$KeyCode_KeyCode_$Impl_$.END = 1073741901;
	lime_ui__$KeyCode_KeyCode_$Impl_$.PAGE_DOWN = 1073741902;
	lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT = 1073741903;
	lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT = 1073741904;
	lime_ui__$KeyCode_KeyCode_$Impl_$.DOWN = 1073741905;
	lime_ui__$KeyCode_KeyCode_$Impl_$.UP = 1073741906;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUM_LOCK = 1073741907;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DIVIDE = 1073741908;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MULTIPLY = 1073741909;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MINUS = 1073741910;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PLUS = 1073741911;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_ENTER = 1073741912;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_1 = 1073741913;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_2 = 1073741914;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_3 = 1073741915;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_4 = 1073741916;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_5 = 1073741917;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_6 = 1073741918;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_7 = 1073741919;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_8 = 1073741920;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_9 = 1073741921;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_0 = 1073741922;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PERIOD = 1073741923;
	lime_ui__$KeyCode_KeyCode_$Impl_$.APPLICATION = 1073741925;
	lime_ui__$KeyCode_KeyCode_$Impl_$.POWER = 1073741926;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_EQUALS = 1073741927;
	lime_ui__$KeyCode_KeyCode_$Impl_$.F13 = 1073741928;
	lime_ui__$KeyCode_KeyCode_$Impl_$.F14 = 1073741929;
	lime_ui__$KeyCode_KeyCode_$Impl_$.F15 = 1073741930;
	lime_ui__$KeyCode_KeyCode_$Impl_$.F16 = 1073741931;
	lime_ui__$KeyCode_KeyCode_$Impl_$.F17 = 1073741932;
	lime_ui__$KeyCode_KeyCode_$Impl_$.F18 = 1073741933;
	lime_ui__$KeyCode_KeyCode_$Impl_$.F19 = 1073741934;
	lime_ui__$KeyCode_KeyCode_$Impl_$.F20 = 1073741935;
	lime_ui__$KeyCode_KeyCode_$Impl_$.F21 = 1073741936;
	lime_ui__$KeyCode_KeyCode_$Impl_$.F22 = 1073741937;
	lime_ui__$KeyCode_KeyCode_$Impl_$.F23 = 1073741938;
	lime_ui__$KeyCode_KeyCode_$Impl_$.F24 = 1073741939;
	lime_ui__$KeyCode_KeyCode_$Impl_$.EXECUTE = 1073741940;
	lime_ui__$KeyCode_KeyCode_$Impl_$.HELP = 1073741941;
	lime_ui__$KeyCode_KeyCode_$Impl_$.MENU = 1073741942;
	lime_ui__$KeyCode_KeyCode_$Impl_$.SELECT = 1073741943;
	lime_ui__$KeyCode_KeyCode_$Impl_$.STOP = 1073741944;
	lime_ui__$KeyCode_KeyCode_$Impl_$.AGAIN = 1073741945;
	lime_ui__$KeyCode_KeyCode_$Impl_$.UNDO = 1073741946;
	lime_ui__$KeyCode_KeyCode_$Impl_$.CUT = 1073741947;
	lime_ui__$KeyCode_KeyCode_$Impl_$.COPY = 1073741948;
	lime_ui__$KeyCode_KeyCode_$Impl_$.PASTE = 1073741949;
	lime_ui__$KeyCode_KeyCode_$Impl_$.FIND = 1073741950;
	lime_ui__$KeyCode_KeyCode_$Impl_$.MUTE = 1073741951;
	lime_ui__$KeyCode_KeyCode_$Impl_$.VOLUME_UP = 1073741952;
	lime_ui__$KeyCode_KeyCode_$Impl_$.VOLUME_DOWN = 1073741953;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_COMMA = 1073741957;
	lime_ui__$KeyCode_KeyCode_$Impl_$.ALT_ERASE = 1073741977;
	lime_ui__$KeyCode_KeyCode_$Impl_$.SYSTEM_REQUEST = 1073741978;
	lime_ui__$KeyCode_KeyCode_$Impl_$.CANCEL = 1073741979;
	lime_ui__$KeyCode_KeyCode_$Impl_$.CLEAR = 1073741980;
	lime_ui__$KeyCode_KeyCode_$Impl_$.PRIOR = 1073741981;
	lime_ui__$KeyCode_KeyCode_$Impl_$.RETURN2 = 1073741982;
	lime_ui__$KeyCode_KeyCode_$Impl_$.SEPARATOR = 1073741983;
	lime_ui__$KeyCode_KeyCode_$Impl_$.OUT = 1073741984;
	lime_ui__$KeyCode_KeyCode_$Impl_$.OPER = 1073741985;
	lime_ui__$KeyCode_KeyCode_$Impl_$.CLEAR_AGAIN = 1073741986;
	lime_ui__$KeyCode_KeyCode_$Impl_$.CRSEL = 1073741987;
	lime_ui__$KeyCode_KeyCode_$Impl_$.EXSEL = 1073741988;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_00 = 1073742000;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_000 = 1073742001;
	lime_ui__$KeyCode_KeyCode_$Impl_$.THOUSAND_SEPARATOR = 1073742002;
	lime_ui__$KeyCode_KeyCode_$Impl_$.DECIMAL_SEPARATOR = 1073742003;
	lime_ui__$KeyCode_KeyCode_$Impl_$.CURRENCY_UNIT = 1073742004;
	lime_ui__$KeyCode_KeyCode_$Impl_$.CURRENCY_SUBUNIT = 1073742005;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LEFT_PARENTHESIS = 1073742006;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_RIGHT_PARENTHESIS = 1073742007;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LEFT_BRACE = 1073742008;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_RIGHT_BRACE = 1073742009;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_TAB = 1073742010;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_BACKSPACE = 1073742011;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_A = 1073742012;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_B = 1073742013;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_C = 1073742014;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_D = 1073742015;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_E = 1073742016;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_F = 1073742017;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_XOR = 1073742018;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_POWER = 1073742019;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PERCENT = 1073742020;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LESS_THAN = 1073742021;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_GREATER_THAN = 1073742022;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_AMPERSAND = 1073742023;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DOUBLE_AMPERSAND = 1073742024;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_VERTICAL_BAR = 1073742025;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DOUBLE_VERTICAL_BAR = 1073742026;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_COLON = 1073742027;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_HASH = 1073742028;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_SPACE = 1073742029;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_AT = 1073742030;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_EXCLAMATION = 1073742031;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_STORE = 1073742032;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_RECALL = 1073742033;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_CLEAR = 1073742034;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_ADD = 1073742035;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_SUBTRACT = 1073742036;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_MULTIPLY = 1073742037;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_DIVIDE = 1073742038;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PLUS_MINUS = 1073742039;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_CLEAR = 1073742040;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_CLEAR_ENTRY = 1073742041;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_BINARY = 1073742042;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_OCTAL = 1073742043;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DECIMAL = 1073742044;
	lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_HEXADECIMAL = 1073742045;
	lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_CTRL = 1073742048;
	lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_SHIFT = 1073742049;
	lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_ALT = 1073742050;
	lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_META = 1073742051;
	lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_CTRL = 1073742052;
	lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_SHIFT = 1073742053;
	lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_ALT = 1073742054;
	lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_META = 1073742055;
	lime_ui__$KeyCode_KeyCode_$Impl_$.MODE = 1073742081;
	lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_NEXT = 1073742082;
	lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_PREVIOUS = 1073742083;
	lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_STOP = 1073742084;
	lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_PLAY = 1073742085;
	lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_MUTE = 1073742086;
	lime_ui__$KeyCode_KeyCode_$Impl_$.MEDIA_SELECT = 1073742087;
	lime_ui__$KeyCode_KeyCode_$Impl_$.WWW = 1073742088;
	lime_ui__$KeyCode_KeyCode_$Impl_$.MAIL = 1073742089;
	lime_ui__$KeyCode_KeyCode_$Impl_$.CALCULATOR = 1073742090;
	lime_ui__$KeyCode_KeyCode_$Impl_$.COMPUTER = 1073742091;
	lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_SEARCH = 1073742092;
	lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_HOME = 1073742093;
	lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_BACK = 1073742094;
	lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_FORWARD = 1073742095;
	lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_STOP = 1073742096;
	lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_REFRESH = 1073742097;
	lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_BOOKMARKS = 1073742098;
	lime_ui__$KeyCode_KeyCode_$Impl_$.BRIGHTNESS_DOWN = 1073742099;
	lime_ui__$KeyCode_KeyCode_$Impl_$.BRIGHTNESS_UP = 1073742100;
	lime_ui__$KeyCode_KeyCode_$Impl_$.DISPLAY_SWITCH = 1073742101;
	lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_TOGGLE = 1073742102;
	lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_DOWN = 1073742103;
	lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_UP = 1073742104;
	lime_ui__$KeyCode_KeyCode_$Impl_$.EJECT = 1073742105;
	lime_ui__$KeyCode_KeyCode_$Impl_$.SLEEP = 1073742106;
	lime_ui__$KeyModifier_KeyModifier_$Impl_$.NONE = 0;
	lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_SHIFT = 1;
	lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_SHIFT = 2;
	lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_CTRL = 64;
	lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_CTRL = 128;
	lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_ALT = 256;
	lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_ALT = 512;
	lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_META = 1024;
	lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_META = 2048;
	lime_ui__$KeyModifier_KeyModifier_$Impl_$.NUM_LOCK = 4096;
	lime_ui__$KeyModifier_KeyModifier_$Impl_$.CAPS_LOCK = 8192;
	lime_ui__$KeyModifier_KeyModifier_$Impl_$.MODE = 16384;
	lime_ui__$KeyModifier_KeyModifier_$Impl_$.CTRL = 192;
	lime_ui__$KeyModifier_KeyModifier_$Impl_$.SHIFT = 3;
	lime_ui__$KeyModifier_KeyModifier_$Impl_$.ALT = 768;
	lime_ui__$KeyModifier_KeyModifier_$Impl_$.META = 3072;
	lime_ui_Touch.onEnd = new lime_app_Event_$lime_$ui_$Touch_$Void();
	lime_ui_Touch.onMove = new lime_app_Event_$lime_$ui_$Touch_$Void();
	lime_ui_Touch.onStart = new lime_app_Event_$lime_$ui_$Touch_$Void();
	lime_utils_ByteArray.cffi_lime_bytes_from_data_pointer = (function ($this) {
		var $r;
		var inValue = lime_system_CFFI.load("lime", "lime_bytes_from_data_pointer", 2, false);
		$r = inValue;
		return $r;
	}(this));
	lime_utils_ByteArray.cffi_lime_bytes_get_data_pointer = (function ($this) {
		var $r;
		var inValue = lime_system_CFFI.load("lime", "lime_bytes_get_data_pointer", 1, false);
		$r = inValue;
		return $r;
	}(this));
	lime_utils_ByteArray.cffi_lime_bytes_read_file = (function ($this) {
		var $r;
		var inValue = lime_system_CFFI.load("lime", "lime_bytes_read_file", 1, false);
		$r = inValue;
		return $r;
	}(this));
	lime_utils__$Float32Array_Float32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
	lime_utils__$Int16Array_Int16Array_$Impl_$.BYTES_PER_ELEMENT = 2;
	lime_utils__$Int32Array_Int32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
	lime_utils__$UInt16Array_UInt16Array_$Impl_$.BYTES_PER_ELEMENT = 2;
	lime_utils__$UInt32Array_UInt32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
	lime_utils__$UInt8Array_UInt8Array_$Impl_$.BYTES_PER_ELEMENT = 1;
	openfl_Assets.cache = new openfl_AssetCache();
	openfl_Assets.dispatcher = new openfl_events_EventDispatcher();
	openfl_display_LoaderInfo.__rootURL = window.document.URL;
	openfl_system_ApplicationDomain.currentDomain = new openfl_system_ApplicationDomain(null);
	openfl_Lib.current = new openfl_display_MovieClip();
	openfl_Lib.__sentWarnings = new haxe_ds_StringMap();
	openfl__$internal_renderer_GraphicsPaths.SIN45 = 0.70710678118654752440084436210485;
	openfl__$internal_renderer_GraphicsPaths.TAN22 = 0.4142135623730950488016887242097;
	openfl__$internal_renderer_cairo_CairoGraphics.SIN45 = 0.70710678118654752440084436210485;
	openfl__$internal_renderer_cairo_CairoGraphics.TAN22 = 0.4142135623730950488016887242097;
	openfl__$internal_renderer_cairo_CairoGraphics.fillCommands = new openfl__$internal_renderer_DrawCommandBuffer();
	openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands = new openfl__$internal_renderer_DrawCommandBuffer();
	openfl__$internal_renderer_canvas_CanvasGraphics.SIN45 = 0.70710678118654752440084436210485;
	openfl__$internal_renderer_canvas_CanvasGraphics.TAN22 = 0.4142135623730950488016887242097;
	openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands = new openfl__$internal_renderer_DrawCommandBuffer();
	openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands = new openfl__$internal_renderer_DrawCommandBuffer();
	openfl__$internal_renderer_opengl_GLBitmap.fbData = [];
	openfl__$internal_renderer_opengl_GLRenderer.glContextId = 0;
	openfl__$internal_renderer_opengl_GLRenderer.glContexts = [];
	openfl__$internal_renderer_opengl_shaders2_Shader.UID = 0;
	openfl__$internal_renderer_opengl_shaders2_DefaultShader.VERTEX_SRC = ["attribute vec2 " + "openfl_aPosition" + ";", "attribute vec2 " + "openfl_aTexCoord0" + ";", "attribute vec4 " + "openfl_aColor" + ";", "uniform mat3 " + "openfl_uProjectionMatrix" + ";", "uniform bool " + "openfl_uUseColorTransform" + ";", "varying vec2 " + "openfl_vTexCoord" + ";", "varying vec4 " + "openfl_vColor" + ";", "void main(void) {", "   gl_Position = vec4((" + "openfl_uProjectionMatrix" + " * vec3(" + "openfl_aPosition" + ", 1.0)).xy, 0.0, 1.0);", "   " + "openfl_vTexCoord" + " = " + "openfl_aTexCoord0" + ";", "   if(" + "openfl_uUseColorTransform" + ")", "   \t" + "openfl_vColor" + " = " + "openfl_aColor" + ";", "   else", "   \t" + "openfl_vColor" + " = vec4(" + "openfl_aColor" + ".rgb * " + "openfl_aColor" + ".a, " + "openfl_aColor" + ".a);", "}"];
	openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 0;
	openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex = 0;
	openfl_geom_Rectangle.__temp = new openfl_geom_Rectangle();
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.fillVertexAttributes = [new openfl__$internal_renderer_opengl_utils_VertexAttribute(2, 5126, false, "openfl_aPosition")];
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.drawTrianglesVertexAttributes = [new openfl__$internal_renderer_opengl_utils_VertexAttribute(2, 5126, false, "openfl_aPosition"), new openfl__$internal_renderer_opengl_utils_VertexAttribute(2, 5126, false, "openfl_aTexCoord0"), new openfl__$internal_renderer_opengl_utils_VertexAttribute(4, 5121, true, "openfl_aColor")];
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.primitiveVertexAttributes = [new openfl__$internal_renderer_opengl_utils_VertexAttribute(2, 5126, false, "openfl_aPosition"), new openfl__$internal_renderer_opengl_utils_VertexAttribute(4, 5126, false, "openfl_aColor")];
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.graphicsDataPool = [];
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bucketPool = [];
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.SIN45 = 0.70710678118654752440084436210485;
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.TAN22 = 0.4142135623730950488016887242097;
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectPosition = new openfl_geom_Point();
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds = new openfl_geom_Rectangle();
	openfl__$internal_renderer_opengl_utils_ShaderManager.compiledShadersCache = new haxe_ds_StringMap();
	openfl__$internal_renderer_opengl_utils_SpriteBatch.VERTS_PER_SPRITE = 4;
	openfl__$internal_text_TextEngine.UTF8_TAB = 9;
	openfl__$internal_text_TextEngine.UTF8_ENDLINE = 10;
	openfl__$internal_text_TextEngine.UTF8_SPACE = 32;
	openfl__$internal_text_TextEngine.UTF8_HYPHEN = 45;
	openfl__$internal_text_TextEngine.__defaultFonts = new haxe_ds_StringMap();
	openfl_display_BitmapDataChannel.ALPHA = 8;
	openfl_display_BitmapDataChannel.BLUE = 4;
	openfl_display_BitmapDataChannel.GREEN = 2;
	openfl_display_BitmapDataChannel.RED = 1;
	openfl_display_Graphics.TILE_SCALE = 1;
	openfl_display_Graphics.TILE_ROTATION = 2;
	openfl_display_Graphics.TILE_RGB = 4;
	openfl_display_Graphics.TILE_ALPHA = 8;
	openfl_display_Graphics.TILE_TRANS_2x2 = 16;
	openfl_display_Graphics.TILE_RECT = 32;
	openfl_display_Graphics.TILE_ORIGIN = 64;
	openfl_display_Graphics.TILE_BLEND_NORMAL = 0;
	openfl_display_Graphics.TILE_BLEND_ADD = 65536;
	openfl_display_Graphics.TILE_BLEND_MULTIPLY = 131072;
	openfl_display_Graphics.TILE_BLEND_SCREEN = 262144;
	openfl_display_Graphics.TILE_BLEND_SUBTRACT = 524288;
	openfl_display_Graphics.TILE_BLEND_DARKEN = 1048576;
	openfl_display_Graphics.TILE_BLEND_LIGHTEN = 2097152;
	openfl_display_Graphics.TILE_BLEND_OVERLAY = 4194304;
	openfl_display_Graphics.TILE_BLEND_HARDLIGHT = 8388608;
	openfl_display_Graphics.TILE_BLEND_DIFFERENCE = 16777216;
	openfl_display_Graphics.TILE_BLEND_INVERT = 33554432;
	openfl_display_GraphicsPathCommand.LINE_TO = 2;
	openfl_display_GraphicsPathCommand.MOVE_TO = 1;
	openfl_display_GraphicsPathCommand.CURVE_TO = 3;
	openfl_display_GraphicsPathCommand.WIDE_LINE_TO = 5;
	openfl_display_GraphicsPathCommand.WIDE_MOVE_TO = 4;
	openfl_display_GraphicsPathCommand.NO_OP = 0;
	openfl_display_GraphicsPathCommand.CUBIC_CURVE_TO = 6;
	openfl_display_OpenGLView.CONTEXT_LOST = "glcontextlost";
	openfl_display_OpenGLView.CONTEXT_RESTORED = "glcontextrestored";
	openfl_display_Shader.uniformRegex = new EReg("^\\s*uniform\\s+(sampler(?:2D|Cube)|[bi]?vec[234]|float|int|bool|mat[234])\\s+(\\w+)\\s*(?:\\[(\\d+)\\])?\\s*;.*$", "gmi");
	openfl_display_Shader.aPosition = "openfl_aPosition";
	openfl_display_Shader.aTexCoord = "openfl_aTexCoord0";
	openfl_display_Shader.aColor = "openfl_aColor";
	openfl_display_Shader.uSampler = "openfl_uSampler0";
	openfl_display_Shader.uProjectionMatrix = "openfl_uProjectionMatrix";
	openfl_display_Shader.uColorMultiplier = "openfl_uColorMultiplier";
	openfl_display_Shader.uColorOffset = "openfl_uColorOffset";
	openfl_display_Shader.uObjectSize = "openfl_uObjectSize";
	openfl_display_Shader.uTextureSize = "openfl_uTextureSize";
	openfl_display_Shader.vTexCoord = "openfl_vTexCoord";
	openfl_display_Shader.vColor = "openfl_vColor";
	openfl_display_Shader.vertexHeader = ["attribute vec2 " + openfl_display_Shader.aPosition + ";", "attribute vec2 " + openfl_display_Shader.aTexCoord + ";", "attribute vec4 " + openfl_display_Shader.aColor + ";", "uniform mat3 " + openfl_display_Shader.uProjectionMatrix + ";", "uniform vec2 " + openfl_display_Shader.uObjectSize + ";", "uniform vec2 " + openfl_display_Shader.uTextureSize + ";", "varying vec2 " + openfl_display_Shader.vTexCoord + ";", "varying vec4 " + openfl_display_Shader.vColor + ";"];
	openfl_display_Shader.fragmentHeader = ["uniform sampler2D " + openfl_display_Shader.uSampler + ";", "uniform vec4 " + openfl_display_Shader.uColorMultiplier + ";", "uniform vec4 " + openfl_display_Shader.uColorOffset + ";", "uniform vec2 " + openfl_display_Shader.uObjectSize + ";", "uniform vec2 " + openfl_display_Shader.uTextureSize + ";", "varying vec2 " + openfl_display_Shader.vTexCoord + ";", "varying vec4 " + openfl_display_Shader.vColor + ";", "vec4 colorTransform(const vec4 color, const vec4 tint, const vec4 multiplier, const vec4 offset) {", "   vec4 unmultiply = vec4(color.rgb / color.a, color.a);", "   vec4 result = unmultiply * tint * multiplier;", "   result = result + offset;", "   result = clamp(result, 0., 1.);", "   result = vec4(result.rgb * result.a, result.a);", "   return result;", "}"];
	openfl_display_Tilesheet.TILE_SCALE = 1;
	openfl_display_Tilesheet.TILE_ROTATION = 2;
	openfl_display_Tilesheet.TILE_RGB = 4;
	openfl_display_Tilesheet.TILE_ALPHA = 8;
	openfl_display_Tilesheet.TILE_TRANS_2x2 = 16;
	openfl_display_Tilesheet.TILE_RECT = 32;
	openfl_display_Tilesheet.TILE_ORIGIN = 64;
	openfl_display_Tilesheet.TILE_BLEND_NORMAL = 0;
	openfl_display_Tilesheet.TILE_BLEND_ADD = 65536;
	openfl_display_Tilesheet.TILE_BLEND_MULTIPLY = 131072;
	openfl_display_Tilesheet.TILE_BLEND_SCREEN = 262144;
	openfl_display_Tilesheet.TILE_BLEND_SUBTRACT = 524288;
	openfl_display_Tilesheet.TILE_BLEND_DARKEN = 1048576;
	openfl_display_Tilesheet.TILE_BLEND_LIGHTEN = 2097152;
	openfl_display_Tilesheet.TILE_BLEND_OVERLAY = 4194304;
	openfl_display_Tilesheet.TILE_BLEND_HARDLIGHT = 8388608;
	openfl_display_Tilesheet.TILE_BLEND_DIFFERENCE = 16777216;
	openfl_display_Tilesheet.TILE_BLEND_INVERT = 33554432;
	openfl_display_Tilesheet.__defaultPoint = new openfl_geom_Point(0, 0);
	openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT = 34046;
	openfl_display3D_Context3D.MAX_SAMPLERS = 8;
	openfl_display3D_Context3D.MAX_TEXTURE_MAX_ANISOTROPY_EXT = 34047;
	openfl_display3D_Context3D.anisotropySupportTested = false;
	openfl_display3D_Context3D.supportsAnisotropy = false;
	openfl_display3D_Context3D.maxSupportedAnisotropy = 256;
	openfl_display3D_Context3DClearMask.ALL = 17664;
	openfl_display3D_Context3DClearMask.COLOR = 16384;
	openfl_display3D_Context3DClearMask.DEPTH = 256;
	openfl_display3D_Context3DClearMask.STENCIL = 1024;
	openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.BACK = 1028;
	openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.FRONT = 1029;
	openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.FRONT_AND_BACK = 1032;
	openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.NONE = 0;
	openfl_errors_Error.DEFAULT_TO_STRING = "Error";
	openfl_events_Event.ACTIVATE = "activate";
	openfl_events_Event.ADDED = "added";
	openfl_events_Event.ADDED_TO_STAGE = "addedToStage";
	openfl_events_Event.CANCEL = "cancel";
	openfl_events_Event.CHANGE = "change";
	openfl_events_Event.CLOSE = "close";
	openfl_events_Event.COMPLETE = "complete";
	openfl_events_Event.CONNECT = "connect";
	openfl_events_Event.CONTEXT3D_CREATE = "context3DCreate";
	openfl_events_Event.DEACTIVATE = "deactivate";
	openfl_events_Event.ENTER_FRAME = "enterFrame";
	openfl_events_Event.ID3 = "id3";
	openfl_events_Event.INIT = "init";
	openfl_events_Event.MOUSE_LEAVE = "mouseLeave";
	openfl_events_Event.OPEN = "open";
	openfl_events_Event.REMOVED = "removed";
	openfl_events_Event.REMOVED_FROM_STAGE = "removedFromStage";
	openfl_events_Event.RENDER = "render";
	openfl_events_Event.RESIZE = "resize";
	openfl_events_Event.SCROLL = "scroll";
	openfl_events_Event.SELECT = "select";
	openfl_events_Event.SOUND_COMPLETE = "soundComplete";
	openfl_events_Event.TAB_CHILDREN_CHANGE = "tabChildrenChange";
	openfl_events_Event.TAB_ENABLED_CHANGE = "tabEnabledChange";
	openfl_events_Event.TAB_INDEX_CHANGE = "tabIndexChange";
	openfl_events_Event.UNLOAD = "unload";
	openfl_events_TextEvent.LINK = "link";
	openfl_events_TextEvent.TEXT_INPUT = "textInput";
	openfl_events_ErrorEvent.ERROR = "error";
	openfl_events_FocusEvent.FOCUS_IN = "focusIn";
	openfl_events_FocusEvent.FOCUS_OUT = "focusOut";
	openfl_events_FocusEvent.KEY_FOCUS_CHANGE = "keyFocusChange";
	openfl_events_FocusEvent.MOUSE_FOCUS_CHANGE = "mouseFocusChange";
	openfl_events_FullScreenEvent.FULL_SCREEN = "fullScreen";
	openfl_events_FullScreenEvent.FULL_SCREEN_INTERACTIVE_ACCEPTED = "fullScreenInteractiveAccepted";
	openfl_events_GameInputEvent.DEVICE_ADDED = "deviceAdded";
	openfl_events_GameInputEvent.DEVICE_REMOVED = "deviceRemoved";
	openfl_events_GameInputEvent.DEVICE_UNUSABLE = "deviceUnusable";
	openfl_events_HTTPStatusEvent.HTTP_RESPONSE_STATUS = "httpResponseStatus";
	openfl_events_HTTPStatusEvent.HTTP_STATUS = "httpStatus";
	openfl_events_IOErrorEvent.IO_ERROR = "ioError";
	openfl_events_KeyboardEvent.KEY_DOWN = "keyDown";
	openfl_events_KeyboardEvent.KEY_UP = "keyUp";
	openfl_events_MouseEvent.CLICK = "click";
	openfl_events_MouseEvent.DOUBLE_CLICK = "doubleClick";
	openfl_events_MouseEvent.MIDDLE_CLICK = "middleClick";
	openfl_events_MouseEvent.MIDDLE_MOUSE_DOWN = "middleMouseDown";
	openfl_events_MouseEvent.MIDDLE_MOUSE_UP = "middleMouseUp";
	openfl_events_MouseEvent.MOUSE_DOWN = "mouseDown";
	openfl_events_MouseEvent.MOUSE_MOVE = "mouseMove";
	openfl_events_MouseEvent.MOUSE_OUT = "mouseOut";
	openfl_events_MouseEvent.MOUSE_OVER = "mouseOver";
	openfl_events_MouseEvent.MOUSE_UP = "mouseUp";
	openfl_events_MouseEvent.MOUSE_WHEEL = "mouseWheel";
	openfl_events_MouseEvent.RIGHT_CLICK = "rightClick";
	openfl_events_MouseEvent.RIGHT_MOUSE_DOWN = "rightMouseDown";
	openfl_events_MouseEvent.RIGHT_MOUSE_UP = "rightMouseUp";
	openfl_events_MouseEvent.ROLL_OUT = "rollOut";
	openfl_events_MouseEvent.ROLL_OVER = "rollOver";
	openfl_events_ProgressEvent.PROGRESS = "progress";
	openfl_events_ProgressEvent.SOCKET_DATA = "socketData";
	openfl_events_SecurityErrorEvent.SECURITY_ERROR = "securityError";
	openfl_events_TouchEvent.TOUCH_BEGIN = "touchBegin";
	openfl_events_TouchEvent.TOUCH_END = "touchEnd";
	openfl_events_TouchEvent.TOUCH_MOVE = "touchMove";
	openfl_events_TouchEvent.TOUCH_OUT = "touchOut";
	openfl_events_TouchEvent.TOUCH_OVER = "touchOver";
	openfl_events_TouchEvent.TOUCH_ROLL_OUT = "touchRollOut";
	openfl_events_TouchEvent.TOUCH_ROLL_OVER = "touchRollOver";
	openfl_events_TouchEvent.TOUCH_TAP = "touchTap";
	openfl_media_Sound.__registeredSounds = new haxe_ds_StringMap();
	openfl_system_SecurityDomain.currentDomain = new openfl_system_SecurityDomain();
	openfl_text_Font.__registeredFonts = [];
	openfl_ui_GameInput.isSupported = true;
	openfl_ui_GameInput.numDevices = 0;
	openfl_ui_GameInput.__devices = new haxe_ds_ObjectMap();
	openfl_ui_GameInput.__instances = [];
	openfl_ui_GameInputDevice.MAX_BUFFER_SIZE = 32000;
	openfl_ui_Keyboard.NUMBER_0 = 48;
	openfl_ui_Keyboard.NUMBER_1 = 49;
	openfl_ui_Keyboard.NUMBER_2 = 50;
	openfl_ui_Keyboard.NUMBER_3 = 51;
	openfl_ui_Keyboard.NUMBER_4 = 52;
	openfl_ui_Keyboard.NUMBER_5 = 53;
	openfl_ui_Keyboard.NUMBER_6 = 54;
	openfl_ui_Keyboard.NUMBER_7 = 55;
	openfl_ui_Keyboard.NUMBER_8 = 56;
	openfl_ui_Keyboard.NUMBER_9 = 57;
	openfl_ui_Keyboard.A = 65;
	openfl_ui_Keyboard.B = 66;
	openfl_ui_Keyboard.C = 67;
	openfl_ui_Keyboard.D = 68;
	openfl_ui_Keyboard.E = 69;
	openfl_ui_Keyboard.F = 70;
	openfl_ui_Keyboard.G = 71;
	openfl_ui_Keyboard.H = 72;
	openfl_ui_Keyboard.I = 73;
	openfl_ui_Keyboard.J = 74;
	openfl_ui_Keyboard.K = 75;
	openfl_ui_Keyboard.L = 76;
	openfl_ui_Keyboard.M = 77;
	openfl_ui_Keyboard.N = 78;
	openfl_ui_Keyboard.O = 79;
	openfl_ui_Keyboard.P = 80;
	openfl_ui_Keyboard.Q = 81;
	openfl_ui_Keyboard.R = 82;
	openfl_ui_Keyboard.S = 83;
	openfl_ui_Keyboard.T = 84;
	openfl_ui_Keyboard.U = 85;
	openfl_ui_Keyboard.V = 86;
	openfl_ui_Keyboard.W = 87;
	openfl_ui_Keyboard.X = 88;
	openfl_ui_Keyboard.Y = 89;
	openfl_ui_Keyboard.Z = 90;
	openfl_ui_Keyboard.NUMPAD_0 = 96;
	openfl_ui_Keyboard.NUMPAD_1 = 97;
	openfl_ui_Keyboard.NUMPAD_2 = 98;
	openfl_ui_Keyboard.NUMPAD_3 = 99;
	openfl_ui_Keyboard.NUMPAD_4 = 100;
	openfl_ui_Keyboard.NUMPAD_5 = 101;
	openfl_ui_Keyboard.NUMPAD_6 = 102;
	openfl_ui_Keyboard.NUMPAD_7 = 103;
	openfl_ui_Keyboard.NUMPAD_8 = 104;
	openfl_ui_Keyboard.NUMPAD_9 = 105;
	openfl_ui_Keyboard.NUMPAD_MULTIPLY = 106;
	openfl_ui_Keyboard.NUMPAD_ADD = 107;
	openfl_ui_Keyboard.NUMPAD_ENTER = 108;
	openfl_ui_Keyboard.NUMPAD_SUBTRACT = 109;
	openfl_ui_Keyboard.NUMPAD_DECIMAL = 110;
	openfl_ui_Keyboard.NUMPAD_DIVIDE = 111;
	openfl_ui_Keyboard.F1 = 112;
	openfl_ui_Keyboard.F2 = 113;
	openfl_ui_Keyboard.F3 = 114;
	openfl_ui_Keyboard.F4 = 115;
	openfl_ui_Keyboard.F5 = 116;
	openfl_ui_Keyboard.F6 = 117;
	openfl_ui_Keyboard.F7 = 118;
	openfl_ui_Keyboard.F8 = 119;
	openfl_ui_Keyboard.F9 = 120;
	openfl_ui_Keyboard.F10 = 121;
	openfl_ui_Keyboard.F11 = 122;
	openfl_ui_Keyboard.F12 = 123;
	openfl_ui_Keyboard.F13 = 124;
	openfl_ui_Keyboard.F14 = 125;
	openfl_ui_Keyboard.F15 = 126;
	openfl_ui_Keyboard.BACKSPACE = 8;
	openfl_ui_Keyboard.TAB = 9;
	openfl_ui_Keyboard.ALTERNATE = 18;
	openfl_ui_Keyboard.ENTER = 13;
	openfl_ui_Keyboard.COMMAND = 15;
	openfl_ui_Keyboard.SHIFT = 16;
	openfl_ui_Keyboard.CONTROL = 17;
	openfl_ui_Keyboard.BREAK = 19;
	openfl_ui_Keyboard.CAPS_LOCK = 20;
	openfl_ui_Keyboard.NUMPAD = 21;
	openfl_ui_Keyboard.ESCAPE = 27;
	openfl_ui_Keyboard.SPACE = 32;
	openfl_ui_Keyboard.PAGE_UP = 33;
	openfl_ui_Keyboard.PAGE_DOWN = 34;
	openfl_ui_Keyboard.END = 35;
	openfl_ui_Keyboard.HOME = 36;
	openfl_ui_Keyboard.LEFT = 37;
	openfl_ui_Keyboard.RIGHT = 39;
	openfl_ui_Keyboard.UP = 38;
	openfl_ui_Keyboard.DOWN = 40;
	openfl_ui_Keyboard.INSERT = 45;
	openfl_ui_Keyboard.DELETE = 46;
	openfl_ui_Keyboard.NUMLOCK = 144;
	openfl_ui_Keyboard.SEMICOLON = 186;
	openfl_ui_Keyboard.EQUAL = 187;
	openfl_ui_Keyboard.COMMA = 188;
	openfl_ui_Keyboard.MINUS = 189;
	openfl_ui_Keyboard.PERIOD = 190;
	openfl_ui_Keyboard.SLASH = 191;
	openfl_ui_Keyboard.BACKQUOTE = 192;
	openfl_ui_Keyboard.LEFTBRACKET = 219;
	openfl_ui_Keyboard.BACKSLASH = 220;
	openfl_ui_Keyboard.RIGHTBRACKET = 221;
	openfl_ui_Keyboard.QUOTE = 222;
	ApplicationMain.main();
})(typeof console != "undefined" ? console : { log: function () { } }, typeof window != "undefined" ? window : exports);

//# sourceMappingURL=CocktailDemo.js.map