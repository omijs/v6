{"version":3,"sources":["../static/js/32.b0e197cb.chunk.js","docs/en/installation.md"],"names":["webpackJsonp","43","module","exports"],"mappings":"AAAAA,cAAc,KAERC,GACA,SAAUC,EAAQC,GCHxBD,EAAOC,QAAU","file":"static/js/32.b0e197cb.chunk.js","sourcesContent":["webpackJsonp([32],{\n\n/***/ 43:\n/***/ (function(module, exports) {\n\nmodule.exports = \"## Installation  \\n\\nSimply download and include with `<script>`. Omi will be registered as a global variable.\\n\\n* [Omi Development Version](https://unpkg.com/omi@latest/dist/omi.js)\\n* [Omi Production Version](https://unpkg.com/omi@latest/dist/omi.min.js)\\n\\nInstall via npm:\\n\\n```\\nnpm i omi\\n```\\n\\n\\n## CLI\\n\\nOmi provides the official CLI. You don't need to learn how to configure webpack, Babel or TypeScript. CLI helps you configure everything and provides various templates for different project types.\\n\\n```bash\\n$ npm i omi-cli -g     # install cli\\n$ omi init my-app      # init project\\n$ cd my-app            \\n$ npm start            # develop\\n$ npm run build        # release\\n```\\n\\n> `npx omi-cli init my-app` is also supported(npm v5.2.0+).\\n\\nDirectory description:\\n\\n```\\n├─ config\\n├─ public\\n├─ scripts\\n├─ src\\n│  ├─ assets\\n│  ├─ elements    //Store all custom elements\\n│  ├─ store       //Store all this store of pages\\n│  ├─ admin.js    //Entry js of compiler，will build to admin.html\\n│  └─ index.js    //Entry js of compiler，will build to index.html\\n```\\n\\n\\n### Scripts\\n\\n```json\\n\\\"scripts\\\": {\\n    \\\"start\\\": \\\"node scripts/start.js\\\",\\n    \\\"build\\\": \\\"PUBLIC_URL=. node scripts/build.js\\\",\\n    \\\"build-windows\\\": \\\"set PUBLIC_URL=.&& node scripts/build.js\\\",\\n    \\\"fix\\\": \\\"eslint src --fix\\\"\\n}\\n```\\n\\nYou can set up the PUBLIC_URL, such as：\\n\\n```json\\n...\\n\\\"build\\\": \\\"PUBLIC_URL=https://your.url.com/sub node scripts/build.js\\\",\\n\\\"build-windows\\\": \\\"set PUBLIC_URL=https://your.url.com/sub&& node scripts/build.js\\\",\\n...\\n```\\n\\n\\n\\n## Project Template\\n\\n| **Template Type**|  **Command**|  **Describe**|\\n| ------------ |  -----------|  ----------------- |\\n|Vite Template(v3.5.1+)|`omi init-vite my-app`| Basic omi template with vite.|\\n|Base Template(v3.3.0+)|`omi init my-app`| Basic omi or omio(IE8+) project template.|\\n|Kbone Template|`omi init-kbone my-app`  |Developing mini program or web using omi.|\\n|TypeScript Template(omi-cli v3.3.0+)|`omi init-ts my-app`|Basic template with typescript.|\\n|Mobile Template|`omi init-weui my-app`| Mobile web app template with weui and omi-router.|\\n\\n\"\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/32.b0e197cb.chunk.js","module.exports = \"## Installation  \\n\\nSimply download and include with `<script>`. Omi will be registered as a global variable.\\n\\n* [Omi Development Version](https://unpkg.com/omi@latest/dist/omi.js)\\n* [Omi Production Version](https://unpkg.com/omi@latest/dist/omi.min.js)\\n\\nInstall via npm:\\n\\n```\\nnpm i omi\\n```\\n\\n\\n## CLI\\n\\nOmi provides the official CLI. You don't need to learn how to configure webpack, Babel or TypeScript. CLI helps you configure everything and provides various templates for different project types.\\n\\n```bash\\n$ npm i omi-cli -g     # install cli\\n$ omi init my-app      # init project\\n$ cd my-app            \\n$ npm start            # develop\\n$ npm run build        # release\\n```\\n\\n> `npx omi-cli init my-app` is also supported(npm v5.2.0+).\\n\\nDirectory description:\\n\\n```\\n├─ config\\n├─ public\\n├─ scripts\\n├─ src\\n│  ├─ assets\\n│  ├─ elements    //Store all custom elements\\n│  ├─ store       //Store all this store of pages\\n│  ├─ admin.js    //Entry js of compiler，will build to admin.html\\n│  └─ index.js    //Entry js of compiler，will build to index.html\\n```\\n\\n\\n### Scripts\\n\\n```json\\n\\\"scripts\\\": {\\n    \\\"start\\\": \\\"node scripts/start.js\\\",\\n    \\\"build\\\": \\\"PUBLIC_URL=. node scripts/build.js\\\",\\n    \\\"build-windows\\\": \\\"set PUBLIC_URL=.&& node scripts/build.js\\\",\\n    \\\"fix\\\": \\\"eslint src --fix\\\"\\n}\\n```\\n\\nYou can set up the PUBLIC_URL, such as：\\n\\n```json\\n...\\n\\\"build\\\": \\\"PUBLIC_URL=https://your.url.com/sub node scripts/build.js\\\",\\n\\\"build-windows\\\": \\\"set PUBLIC_URL=https://your.url.com/sub&& node scripts/build.js\\\",\\n...\\n```\\n\\n\\n\\n## Project Template\\n\\n| **Template Type**|  **Command**|  **Describe**|\\n| ------------ |  -----------|  ----------------- |\\n|Vite Template(v3.5.1+)|`omi init-vite my-app`| Basic omi template with vite.|\\n|Base Template(v3.3.0+)|`omi init my-app`| Basic omi or omio(IE8+) project template.|\\n|Kbone Template|`omi init-kbone my-app`  |Developing mini program or web using omi.|\\n|TypeScript Template(omi-cli v3.3.0+)|`omi init-ts my-app`|Basic template with typescript.|\\n|Mobile Template|`omi init-weui my-app`| Mobile web app template with weui and omi-router.|\\n\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/docs/en/installation.md\n// module id = 43\n// module chunks = 32"],"sourceRoot":""}