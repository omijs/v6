{"version":3,"sources":["../static/js/12.6f4ed2a5.chunk.js","docs/en/lifecycle.md"],"names":["webpackJsonp","46","module","exports"],"mappings":"AAAAA,cAAc,KAERC,GACA,SAAUC,EAAQC,GCHxBD,EAAAC,QAAA","file":"static/js/12.6f4ed2a5.chunk.js","sourcesContent":["webpackJsonp([12],{\n\n/***/ 46:\n/***/ (function(module, exports) {\n\nmodule.exports = \"## Lifecycle\\n\\n| Lifecycle method | When it gets called                          |\\n| ---------------- | -------------------------------------------- |\\n| `install`        | before the component gets mounted to the DOM |\\n| `installed`      | after the component gets mounted to the DOM  |\\n| `uninstall`      | prior to removal from the DOM                |\\n| `beforeUpdate`   | before update                           |\\n| `updated`    | after update                             |\\n| `beforeRender`   | before `render()`                           |\\n| `receiveProps`   | parent element re-render will trigger it, `return false` will prevent update action    |\\n\\nFor example:\\n\\n```js\\nconst Timer = (props, store) => <div>Seconds: {store.seconds}</div>\\n\\nTimer.store = _ => ({\\n  seconds: 0,\\n\\n  tick() {\\n    this.seconds++\\n    this.update()\\n  },\\n\\n  install() {\\n    this.interval = setInterval(() => this.tick(), 1000)\\n  },\\n\\n  uninstall() {\\n    clearInterval(this.interval)\\n  }\\n\\n})\\n\\nrender(<Timer />, 'body')\\n```\\n\"\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/12.6f4ed2a5.chunk.js","module.exports = \"## Lifecycle\\n\\n| Lifecycle method | When it gets called                          |\\n| ---------------- | -------------------------------------------- |\\n| `install`        | before the component gets mounted to the DOM |\\n| `installed`      | after the component gets mounted to the DOM  |\\n| `uninstall`      | prior to removal from the DOM                |\\n| `beforeUpdate`   | before update                           |\\n| `updated`    | after update                             |\\n| `beforeRender`   | before `render()`                           |\\n| `receiveProps`   | parent element re-render will trigger it, `return false` will prevent update action    |\\n\\nFor example:\\n\\n```js\\nconst Timer = (props, store) => <div>Seconds: {store.seconds}</div>\\n\\nTimer.store = _ => ({\\n  seconds: 0,\\n\\n  tick() {\\n    this.seconds++\\n    this.update()\\n  },\\n\\n  install() {\\n    this.interval = setInterval(() => this.tick(), 1000)\\n  },\\n\\n  uninstall() {\\n    clearInterval(this.interval)\\n  }\\n\\n})\\n\\nrender(<Timer />, 'body')\\n```\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/docs/en/lifecycle.md\n// module id = 46\n// module chunks = 12"],"sourceRoot":""}