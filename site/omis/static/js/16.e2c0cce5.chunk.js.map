{"version":3,"sources":["../static/js/16.e2c0cce5.chunk.js","docs/en/installation.md"],"names":["webpackJsonp","42","module","exports"],"mappings":"AAAAA,cAAc,KAERC,GACA,SAAUC,EAAQC,GCHxBD,EAAAC,QAAA","file":"static/js/16.e2c0cce5.chunk.js","sourcesContent":["webpackJsonp([16],{\n\n/***/ 42:\n/***/ (function(module, exports) {\n\nmodule.exports = \"## Installation  \\n\\nSimply download and include with `<script>`. Omis will be registered as a global variable.\\n\\n* [Omis Development Version](https://unpkg.com/omis@latest/dist/omis.js)\\n* [Omis Production Version](https://unpkg.com/omis@latest/dist/omis.min.js)\\n\\nInstall via npm:\\n\\n```\\nnpm i omis\\n```\\n\\n## CLI\\n\\nOmis provides the official CLI. You don't need to learn how to configure webpack, Babel or TypeScript. CLI helps you configure everything and provides various templates for different project types.\\n\\n```bash\\n$ npm i omi-cli -g     # install cli\\n$ omi init-s my-app      # init project\\n$ cd my-app            \\n$ npm start            # develop\\n$ npm run build        # release\\n```\\n\\n> `npx omi-cli init-s my-app` is also supported(npm v5.2.0+).\\n\\nDirectory description:\\n\\n```\\n├─ config\\n├─ public\\n├─ scripts\\n├─ src\\n│  ├─ assets\\n│  ├─ components    //Store all components\\n│  ├─ admin.js      //Entry js of compiler，will build to admin.html\\n│  └─ index.js      //Entry js of compiler，will build to index.html\\n```\\n\\n\\n### Scripts\\n\\n```json\\n\\\"scripts\\\": {\\n    \\\"start\\\": \\\"node scripts/start.js\\\",\\n    \\\"build\\\": \\\"PUBLIC_URL=. node scripts/build.js\\\",\\n    \\\"build-windows\\\": \\\"set PUBLIC_URL=.&& node scripts/build.js\\\",\\n    \\\"fix\\\": \\\"eslint src --fix\\\"\\n}\\n```\\n\\nYou can set up the PUBLIC_URL, such as：\\n\\n```json\\n...\\n\\\"build\\\": \\\"PUBLIC_URL=https://your.url.com/sub node scripts/build.js\\\",\\n\\\"build-windows\\\": \\\"set PUBLIC_URL=https://your.url.com/sub&& node scripts/build.js\\\",\\n...\\n```\\n\\n\"\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/16.e2c0cce5.chunk.js","module.exports = \"## Installation  \\n\\nSimply download and include with `<script>`. Omis will be registered as a global variable.\\n\\n* [Omis Development Version](https://unpkg.com/omis@latest/dist/omis.js)\\n* [Omis Production Version](https://unpkg.com/omis@latest/dist/omis.min.js)\\n\\nInstall via npm:\\n\\n```\\nnpm i omis\\n```\\n\\n## CLI\\n\\nOmis provides the official CLI. You don't need to learn how to configure webpack, Babel or TypeScript. CLI helps you configure everything and provides various templates for different project types.\\n\\n```bash\\n$ npm i omi-cli -g     # install cli\\n$ omi init-s my-app      # init project\\n$ cd my-app            \\n$ npm start            # develop\\n$ npm run build        # release\\n```\\n\\n> `npx omi-cli init-s my-app` is also supported(npm v5.2.0+).\\n\\nDirectory description:\\n\\n```\\n├─ config\\n├─ public\\n├─ scripts\\n├─ src\\n│  ├─ assets\\n│  ├─ components    //Store all components\\n│  ├─ admin.js      //Entry js of compiler，will build to admin.html\\n│  └─ index.js      //Entry js of compiler，will build to index.html\\n```\\n\\n\\n### Scripts\\n\\n```json\\n\\\"scripts\\\": {\\n    \\\"start\\\": \\\"node scripts/start.js\\\",\\n    \\\"build\\\": \\\"PUBLIC_URL=. node scripts/build.js\\\",\\n    \\\"build-windows\\\": \\\"set PUBLIC_URL=.&& node scripts/build.js\\\",\\n    \\\"fix\\\": \\\"eslint src --fix\\\"\\n}\\n```\\n\\nYou can set up the PUBLIC_URL, such as：\\n\\n```json\\n...\\n\\\"build\\\": \\\"PUBLIC_URL=https://your.url.com/sub node scripts/build.js\\\",\\n\\\"build-windows\\\": \\\"set PUBLIC_URL=https://your.url.com/sub&& node scripts/build.js\\\",\\n...\\n```\\n\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/docs/en/installation.md\n// module id = 42\n// module chunks = 16"],"sourceRoot":""}