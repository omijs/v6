webpackJsonp([15],{43:function(n,e){n.exports="## What's Omis \uff1f\n\nOmis (pronounced /\u02c8om\u026as/) is Functional Style, Easy Store and Hyperscript Component Framework in tiny size.\n\n* Web Components supporting\n* Functional style but non-functional programming\n* Structure-Style-Behavior Separation\n* Hyperscript is visually more friendly\n* Each component can have a store and be de-centralized\n* Support global store to share data and update on demand\n* Each component store has an update method that executes the method to customize local refresh components\n\n[\u2192 Omis Codepen Demos](https://codepen.io/collection/XjLaRo/)\n\n## Add Omi in One Minute\n\n```jsx\nimport { render, h } from 'omi'\n\nconst Counter = (props, store) => {\n  return (\n    <div>\n      <button onClick={store.sub}>-</button>\n      <span>{store.count}</span>\n      <button onClick={store.add}>+</button>\n    </div>\n  )\n}\n\nCounter.store = _ => {\n  return {\n    count: 1,\n    add() {\n      this.count++\n      this.update()\n    },\n    sub() {\n      this.count--\n      this.update()\n    }\n  }\n}\n\nCounter.css = `\nspan{\n  color: red;\n}\n`\n\nrender(<Counter />, 'body')\n```\n\nYou can also use hyperscript **with no build tooling**:\n\n```js\nconst Counter = (props, store) => {\n  return (\n    h('div', {}, [\n      h('button', { onClick: store.sub }, '-'),\n      h('span', {}, store.count),\n      h('button', { onClick: store.add }, '+')\n    ])\n  )\n}\n```\n\n## Description of parameters\n\n```jsx\nconst Comp = (props, store, _, $) => {\n\n}\n\nComp.store = (_, $) => {\n\n}\n```\n\n* `_` represents `component`\n* `$` represents `globalStore`\n\n\n## Web Components\n\n```jsx\nimport { define } from 'omis'\n\nconst HelloMessage = (props, store) => {\n  return (\n    <div onClick={store.clickHandler} >\n      <div>Hello {props.msg}</div>\n      <div>{props.user.name}</div>\n      <div>{props.user.age}</div>\n    </div>\n  )\n}\n\nHelloMessage.css = `div{\n\tcolor: red;\n}`\n\nHelloMessage.store = _ => {\n  return {\n    clickHandler() {\n      _.props.onMyEvent && _.props.onMyEvent(123)\n    }\n  }\n}\n\nHelloMessage.propTypes = {\n  msg: String,\n  user: Object\n}\n\ndefine('hello-msg', HelloMessage)\n```\n\nThen you can use `<hello-msg></hello-msg>` anywhere:\n\n```html\n<hello-msg msg=\"Omis\" user=\"{name:'dntzhang', age: 18}\"></hello-msg>\n\n<script>\n  var ele = document.querySelector('hello-msg')\n\n  ele.addEventListener('myEvent', function(evt){\n    console.log(evt)\n  })\n<\/script>\n```\n\nYou're already getting started! Congratulations!\n"}});
//# sourceMappingURL=15.8b4b2ca8.chunk.js.map